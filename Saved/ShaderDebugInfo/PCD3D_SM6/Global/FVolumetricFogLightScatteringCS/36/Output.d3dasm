;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 7ea692f6f1db389f2f64964f3e57e3b6
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S2             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S3             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s4     1
; LightScatteringHistorySampler     sampler      NA          NA      S5             s5     1
; LightFunctionSampler              sampler      NA          NA      S6             s6     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; ConservativeDepthTexture          texture     f32          2d     T16            t16     1
; PrevConservativeDepthTexture      texture     f32          2d     T17            t17     1
; VBufferA                          texture     f32          3d     T18            t18     1
; VBufferB                          texture     f32          3d     T19            t19     1
; LightScatteringHistory            texture     f32          3d     T20            t20     1
; LocalShadowedLightScattering      texture     f32          3d     T21            t21     1
; LightFunctionTexture              texture     f32          2d     T22            t22     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %43 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.i32 %67, 1
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 1
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %83 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %89, 3
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %99 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.i32 %99, 3
  %101 = icmp eq i32 %100, 0
  %102 = uitofp i32 %42 to float
  %103 = uitofp i32 %43 to float
  %104 = fadd fast float %102, 5.000000e-01
  %105 = fadd fast float %103, 5.000000e-01
  %106 = uitofp i32 %44 to float
  br i1 %101, label %258, label %107

; <label>:107                                     ; preds = %0
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = fdiv fast float %104, %109
  %112 = fdiv fast float %105, %110
  %113 = fmul fast float %111, 2.000000e+00
  %114 = fmul fast float %112, 2.000000e+00
  %115 = fadd fast float %113, -1.000000e+00
  %116 = fadd fast float %114, -1.000000e+00
  %117 = fsub fast float -0.000000e+00, %116
  %118 = fadd fast float %106, -1.000000e+00
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %121 = fdiv fast float %118, %120
  %122 = call float @dx.op.unary.f32(i32 21, float %121)  ; Exp(value)
  %123 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %124 = fsub fast float %122, %123
  %125 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %126 = fdiv fast float %124, %125
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %129 = fcmp fast ult float %128, 1.000000e+00
  br i1 %129, label %136, label %130, !dx.controlflow.hints !52

; <label>:130                                     ; preds = %107
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %133 = fmul fast float %132, %126
  %134 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %135 = fadd fast float %133, %134
  br label %143

; <label>:136                                     ; preds = %107
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 3
  %139 = fadd fast float %138, %126
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 2
  %141 = fmul fast float %139, %140
  %142 = fdiv fast float 1.000000e+00, %141
  br label %143

; <label>:143                                     ; preds = %136, %130
  %144 = phi float [ %135, %130 ], [ %142, %136 ]
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = extractvalue %dx.types.CBufRet.f32 %145, 3
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = extractvalue %dx.types.CBufRet.f32 %160, 3
  %165 = fmul fast float %146, %115
  %166 = call float @dx.op.tertiary.f32(i32 46, float %117, float %151, float %165)  ; FMad(a,b,c)
  %167 = call float @dx.op.tertiary.f32(i32 46, float %144, float %156, float %166)  ; FMad(a,b,c)
  %168 = fadd fast float %167, %161
  %169 = fmul fast float %147, %115
  %170 = call float @dx.op.tertiary.f32(i32 46, float %117, float %152, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %144, float %157, float %170)  ; FMad(a,b,c)
  %172 = fadd fast float %171, %162
  %173 = fmul fast float %148, %115
  %174 = call float @dx.op.tertiary.f32(i32 46, float %117, float %153, float %173)  ; FMad(a,b,c)
  %175 = call float @dx.op.tertiary.f32(i32 46, float %144, float %158, float %174)  ; FMad(a,b,c)
  %176 = fadd fast float %175, %163
  %177 = fmul fast float %149, %115
  %178 = call float @dx.op.tertiary.f32(i32 46, float %117, float %154, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %144, float %159, float %178)  ; FMad(a,b,c)
  %180 = fadd fast float %179, %164
  %181 = fdiv fast float %168, %180
  %182 = fdiv fast float %172, %180
  %183 = fdiv fast float %176, %180
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %196 = fmul fast float %185, %181
  %197 = call float @dx.op.tertiary.f32(i32 46, float %182, float %188, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %183, float %191, float %197)  ; FMad(a,b,c)
  %199 = fadd fast float %198, %194
  %200 = fmul fast float %186, %181
  %201 = call float @dx.op.tertiary.f32(i32 46, float %182, float %189, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %183, float %192, float %201)  ; FMad(a,b,c)
  %203 = fadd fast float %202, %195
  %204 = fdiv fast float %199, %203
  %205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %206 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %205, i32 0, i32 %42, i32 %43, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %207 = extractvalue %dx.types.ResRet.f32 %206, 0
  %208 = fcmp fast ogt float %207, %204
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %143
  %210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %210, i32 %42, i32 %43, i32 %44, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2166

; <label>:211                                     ; preds = %143
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = extractvalue %dx.types.CBufRet.f32 %212, 1
  %215 = extractvalue %dx.types.CBufRet.f32 %212, 3
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 3
  %220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %221 = extractvalue %dx.types.CBufRet.f32 %220, 0
  %222 = extractvalue %dx.types.CBufRet.f32 %220, 1
  %223 = extractvalue %dx.types.CBufRet.f32 %220, 3
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %226 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %227 = extractvalue %dx.types.CBufRet.f32 %224, 3
  %228 = fmul fast float %213, %181
  %229 = call float @dx.op.tertiary.f32(i32 46, float %182, float %217, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.tertiary.f32(i32 46, float %183, float %221, float %229)  ; FMad(a,b,c)
  %231 = fadd fast float %230, %225
  %232 = fmul fast float %214, %181
  %233 = call float @dx.op.tertiary.f32(i32 46, float %182, float %218, float %232)  ; FMad(a,b,c)
  %234 = call float @dx.op.tertiary.f32(i32 46, float %183, float %222, float %233)  ; FMad(a,b,c)
  %235 = fadd fast float %234, %226
  %236 = fmul fast float %215, %181
  %237 = call float @dx.op.tertiary.f32(i32 46, float %182, float %219, float %236)  ; FMad(a,b,c)
  %238 = call float @dx.op.tertiary.f32(i32 46, float %183, float %223, float %237)  ; FMad(a,b,c)
  %239 = fadd fast float %238, %227
  %240 = fdiv fast float %231, %239
  %241 = fdiv fast float %235, %239
  %242 = fmul fast float %240, 5.000000e-01
  %243 = fmul fast float %241, 5.000000e-01
  %244 = fadd fast float %242, 5.000000e-01
  %245 = fsub fast float 5.000000e-01, %243
  %246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.f32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.f32 %246, 1
  %249 = fmul fast float %247, %244
  %250 = fmul fast float %248, %245
  %251 = fptoui float %249 to i32
  %252 = fptoui float %250 to i32
  %253 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %254 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %253, i32 0, i32 %251, i32 %252, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %255 = extractvalue %dx.types.ResRet.f32 %254, 0
  %256 = fcmp fast ogt float %255, %204
  br i1 %256, label %257, label %258

; <label>:257                                     ; preds = %211
  br label %258

; <label>:258                                     ; preds = %257, %211, %0
  %259 = phi i32 [ 1, %257 ], [ 0, %211 ], [ 0, %0 ]
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 3
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.f32 %264, 3
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 3
  %272 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %273 = extractvalue %dx.types.CBufRet.f32 %272, 0
  %274 = extractvalue %dx.types.CBufRet.f32 %272, 1
  %275 = extractvalue %dx.types.CBufRet.f32 %272, 3
  %276 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %277 = extractvalue %dx.types.CBufRet.f32 %276, 0
  %278 = extractvalue %dx.types.CBufRet.f32 %276, 1
  %279 = fdiv fast float %104, %277
  %280 = fdiv fast float %105, %278
  %281 = fmul fast float %279, 2.000000e+00
  %282 = fmul fast float %280, 2.000000e+00
  %283 = fadd fast float %281, -1.000000e+00
  %284 = fadd fast float %282, -1.000000e+00
  %285 = fsub fast float -0.000000e+00, %284
  %286 = fadd fast float %106, 5.000000e-01
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %289 = fdiv fast float %286, %288
  %290 = call float @dx.op.unary.f32(i32 21, float %289)  ; Exp(value)
  %291 = extractvalue %dx.types.CBufRet.f32 %287, 1
  %292 = fsub fast float %290, %291
  %293 = extractvalue %dx.types.CBufRet.f32 %287, 0
  %294 = fdiv fast float %292, %293
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 3
  %297 = fcmp fast ult float %296, 1.000000e+00
  br i1 %297, label %304, label %298, !dx.controlflow.hints !52

; <label>:298                                     ; preds = %258
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %301 = fmul fast float %300, %294
  %302 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %303 = fadd fast float %301, %302
  br label %311

; <label>:304                                     ; preds = %258
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 3
  %307 = fadd fast float %306, %294
  %308 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %309 = fmul fast float %307, %308
  %310 = fdiv fast float 1.000000e+00, %309
  br label %311

; <label>:311                                     ; preds = %304, %298
  %312 = phi float [ %303, %298 ], [ %310, %304 ]
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = extractvalue %dx.types.CBufRet.f32 %313, 3
  %318 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %319 = extractvalue %dx.types.CBufRet.f32 %318, 0
  %320 = extractvalue %dx.types.CBufRet.f32 %318, 1
  %321 = extractvalue %dx.types.CBufRet.f32 %318, 2
  %322 = extractvalue %dx.types.CBufRet.f32 %318, 3
  %323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %324 = extractvalue %dx.types.CBufRet.f32 %323, 0
  %325 = extractvalue %dx.types.CBufRet.f32 %323, 1
  %326 = extractvalue %dx.types.CBufRet.f32 %323, 2
  %327 = extractvalue %dx.types.CBufRet.f32 %323, 3
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 0
  %330 = extractvalue %dx.types.CBufRet.f32 %328, 1
  %331 = extractvalue %dx.types.CBufRet.f32 %328, 2
  %332 = extractvalue %dx.types.CBufRet.f32 %328, 3
  %333 = fmul fast float %314, %283
  %334 = call float @dx.op.tertiary.f32(i32 46, float %285, float %319, float %333)  ; FMad(a,b,c)
  %335 = call float @dx.op.tertiary.f32(i32 46, float %312, float %324, float %334)  ; FMad(a,b,c)
  %336 = fadd fast float %335, %329
  %337 = fmul fast float %315, %283
  %338 = call float @dx.op.tertiary.f32(i32 46, float %285, float %320, float %337)  ; FMad(a,b,c)
  %339 = call float @dx.op.tertiary.f32(i32 46, float %312, float %325, float %338)  ; FMad(a,b,c)
  %340 = fadd fast float %339, %330
  %341 = fmul fast float %316, %283
  %342 = call float @dx.op.tertiary.f32(i32 46, float %285, float %321, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %312, float %326, float %342)  ; FMad(a,b,c)
  %344 = fadd fast float %343, %331
  %345 = fmul fast float %317, %283
  %346 = call float @dx.op.tertiary.f32(i32 46, float %285, float %322, float %345)  ; FMad(a,b,c)
  %347 = call float @dx.op.tertiary.f32(i32 46, float %312, float %327, float %346)  ; FMad(a,b,c)
  %348 = fadd fast float %347, %332
  %349 = fdiv fast float %336, %348
  %350 = fdiv fast float %340, %348
  %351 = fdiv fast float %344, %348
  %352 = fmul fast float %349, %261
  %353 = call float @dx.op.tertiary.f32(i32 46, float %350, float %265, float %352)  ; FMad(a,b,c)
  %354 = call float @dx.op.tertiary.f32(i32 46, float %351, float %269, float %353)  ; FMad(a,b,c)
  %355 = fadd fast float %354, %273
  %356 = fmul fast float %349, %262
  %357 = call float @dx.op.tertiary.f32(i32 46, float %350, float %266, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %351, float %270, float %357)  ; FMad(a,b,c)
  %359 = fadd fast float %358, %274
  %360 = fmul fast float %349, %263
  %361 = call float @dx.op.tertiary.f32(i32 46, float %350, float %267, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %351, float %271, float %361)  ; FMad(a,b,c)
  %363 = fadd fast float %362, %275
  %364 = fdiv fast float %355, %363
  %365 = fdiv fast float %359, %363
  %366 = fmul fast float %364, 5.000000e-01
  %367 = fmul fast float %365, 5.000000e-01
  %368 = fadd fast float %366, 5.000000e-01
  %369 = fsub fast float 5.000000e-01, %367
  %370 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %371 = extractvalue %dx.types.CBufRet.f32 %370, 0
  %372 = fmul fast float %371, %363
  %373 = extractvalue %dx.types.CBufRet.f32 %370, 1
  %374 = fadd fast float %372, %373
  %375 = call float @dx.op.unary.f32(i32 23, float %374)  ; Log(value)
  %376 = extractvalue %dx.types.CBufRet.f32 %370, 2
  %377 = fmul fast float %376, %375
  %378 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %379 = extractvalue %dx.types.CBufRet.f32 %378, 2
  %380 = fmul fast float %377, %379
  %381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %382 = extractvalue %dx.types.CBufRet.f32 %381, 2
  %383 = extractvalue %dx.types.CBufRet.f32 %381, 3
  %384 = fmul fast float %382, %368
  %385 = fmul fast float %383, %369
  %386 = fcmp fast olt float %384, 0.000000e+00
  %387 = fcmp fast olt float %385, 0.000000e+00
  %388 = fcmp fast olt float %380, 0.000000e+00
  %389 = or i1 %386, %387
  %390 = or i1 %388, %389
  br i1 %390, label %401, label %391

; <label>:391                                     ; preds = %311
  %392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %393 = extractvalue %dx.types.CBufRet.f32 %392, 0
  %394 = fcmp fast ogt float %384, 1.000000e+00
  %395 = fcmp fast ogt float %385, 1.000000e+00
  %396 = fcmp fast ogt float %380, 1.000000e+00
  %397 = or i1 %394, %395
  %398 = or i1 %396, %397
  %399 = icmp ne i32 %259, 0
  %400 = or i1 %399, %398
  br i1 %400, label %401, label %402

; <label>:401                                     ; preds = %391, %311
  br label %402

; <label>:402                                     ; preds = %401, %391
  %403 = phi float [ 0.000000e+00, %401 ], [ %393, %391 ]
  %404 = fcmp fast olt float %403, 0x3F50624DE0000000
  br i1 %404, label %405, label %416

; <label>:405                                     ; preds = %402
  %406 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %407 = extractvalue %dx.types.CBufRet.i32 %406, 0
  %408 = extractvalue %dx.types.CBufRet.i32 %406, 1
  %409 = extractvalue %dx.types.CBufRet.i32 %406, 2
  %410 = icmp slt i32 %42, %407
  %411 = icmp slt i32 %43, %408
  %412 = icmp slt i32 %44, %409
  %413 = and i1 %410, %411
  %414 = and i1 %412, %413
  %415 = select i1 %414, i32 16, i32 1
  br label %416

; <label>:416                                     ; preds = %405, %402
  %417 = phi i32 [ 1, %402 ], [ %415, %405 ]
  br label %418

; <label>:418                                     ; preds = %2056, %416
  %419 = phi float [ 0.000000e+00, %416 ], [ %2057, %2056 ]
  %420 = phi float [ 0.000000e+00, %416 ], [ %2058, %2056 ]
  %421 = phi float [ 0.000000e+00, %416 ], [ %2059, %2056 ]
  %422 = phi i32 [ 0, %416 ], [ %2060, %2056 ]
  %423 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %424 = extractvalue %dx.types.CBufRet.i32 %423, 0
  %425 = shl i32 %422, 3
  %426 = add i32 %424, %425
  %427 = mul i32 %42, 1664525
  %428 = mul i32 %43, 1664525
  %429 = mul i32 %44, 1664525
  %430 = mul i32 %426, 1664525
  %431 = add i32 %427, 1013904223
  %432 = add i32 %428, 1013904223
  %433 = add i32 %429, 1013904223
  %434 = add i32 %430, 1013904223
  %435 = mul i32 %434, %432
  %436 = add i32 %431, %435
  %437 = mul i32 %436, %433
  %438 = add i32 %437, %432
  %439 = mul i32 %438, %436
  %440 = add i32 %439, %433
  %441 = mul i32 %440, %438
  %442 = add i32 %441, %434
  %443 = lshr i32 %436, 16
  %444 = lshr i32 %438, 16
  %445 = lshr i32 %440, 16
  %446 = lshr i32 %442, 16
  %447 = xor i32 %443, %436
  %448 = xor i32 %444, %438
  %449 = xor i32 %445, %440
  %450 = xor i32 %446, %442
  %451 = mul i32 %450, %448
  %452 = add i32 %451, %447
  %453 = mul i32 %452, %449
  %454 = add i32 %453, %448
  %455 = mul i32 %454, %452
  %456 = add i32 %455, %449
  %457 = uitofp i32 %452 to float
  %458 = uitofp i32 %454 to float
  %459 = uitofp i32 %456 to float
  %460 = fmul fast float %457, 0x3E00000000000000
  %461 = fmul fast float %458, 0x3E00000000000000
  %462 = fmul fast float %459, 0x3E00000000000000
  %463 = fadd fast float %460, -1.000000e+00
  %464 = fadd fast float %461, -1.000000e+00
  %465 = fadd fast float %462, -1.000000e+00
  %466 = add nuw nsw i32 %422, 12
  %467 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %466)  ; CBufferLoadLegacy(handle,regIndex)
  %468 = extractvalue %dx.types.CBufRet.f32 %467, 0
  %469 = extractvalue %dx.types.CBufRet.f32 %467, 1
  %470 = extractvalue %dx.types.CBufRet.f32 %467, 2
  %471 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %472 = extractvalue %dx.types.CBufRet.f32 %471, 3
  %473 = fmul fast float %463, %472
  %474 = fmul fast float %464, %472
  %475 = fmul fast float %465, %472
  %476 = fadd fast float %473, %468
  %477 = fadd fast float %474, %469
  %478 = fadd fast float %475, %470
  %479 = fadd fast float %476, %102
  %480 = fadd fast float %477, %103
  %481 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %482 = extractvalue %dx.types.CBufRet.f32 %481, 0
  %483 = extractvalue %dx.types.CBufRet.f32 %481, 1
  %484 = fdiv fast float %479, %482
  %485 = fdiv fast float %480, %483
  %486 = fmul fast float %484, 2.000000e+00
  %487 = fmul fast float %485, 2.000000e+00
  %488 = fadd fast float %486, -1.000000e+00
  %489 = fadd fast float %487, -1.000000e+00
  %490 = fsub fast float -0.000000e+00, %489
  %491 = fadd fast float %478, %106
  %492 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %493 = extractvalue %dx.types.CBufRet.f32 %492, 2
  %494 = fdiv fast float %491, %493
  %495 = call float @dx.op.unary.f32(i32 21, float %494)  ; Exp(value)
  %496 = extractvalue %dx.types.CBufRet.f32 %492, 1
  %497 = fsub fast float %495, %496
  %498 = extractvalue %dx.types.CBufRet.f32 %492, 0
  %499 = fdiv fast float %497, %498
  %500 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %501 = extractvalue %dx.types.CBufRet.f32 %500, 3
  %502 = fcmp fast ult float %501, 1.000000e+00
  br i1 %502, label %509, label %503, !dx.controlflow.hints !52

; <label>:503                                     ; preds = %418
  %504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %505 = extractvalue %dx.types.CBufRet.f32 %504, 2
  %506 = fmul fast float %505, %499
  %507 = extractvalue %dx.types.CBufRet.f32 %500, 2
  %508 = fadd fast float %506, %507
  br label %516

; <label>:509                                     ; preds = %418
  %510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %511 = extractvalue %dx.types.CBufRet.f32 %510, 3
  %512 = fadd fast float %511, %499
  %513 = extractvalue %dx.types.CBufRet.f32 %510, 2
  %514 = fmul fast float %512, %513
  %515 = fdiv fast float 1.000000e+00, %514
  br label %516

; <label>:516                                     ; preds = %509, %503
  %517 = phi float [ %508, %503 ], [ %515, %509 ]
  %518 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %519 = extractvalue %dx.types.CBufRet.f32 %518, 0
  %520 = extractvalue %dx.types.CBufRet.f32 %518, 1
  %521 = extractvalue %dx.types.CBufRet.f32 %518, 2
  %522 = extractvalue %dx.types.CBufRet.f32 %518, 3
  %523 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %524 = extractvalue %dx.types.CBufRet.f32 %523, 0
  %525 = extractvalue %dx.types.CBufRet.f32 %523, 1
  %526 = extractvalue %dx.types.CBufRet.f32 %523, 2
  %527 = extractvalue %dx.types.CBufRet.f32 %523, 3
  %528 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %529 = extractvalue %dx.types.CBufRet.f32 %528, 0
  %530 = extractvalue %dx.types.CBufRet.f32 %528, 1
  %531 = extractvalue %dx.types.CBufRet.f32 %528, 2
  %532 = extractvalue %dx.types.CBufRet.f32 %528, 3
  %533 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %534 = extractvalue %dx.types.CBufRet.f32 %533, 0
  %535 = extractvalue %dx.types.CBufRet.f32 %533, 1
  %536 = extractvalue %dx.types.CBufRet.f32 %533, 2
  %537 = extractvalue %dx.types.CBufRet.f32 %533, 3
  %538 = fmul fast float %519, %488
  %539 = call float @dx.op.tertiary.f32(i32 46, float %490, float %524, float %538)  ; FMad(a,b,c)
  %540 = call float @dx.op.tertiary.f32(i32 46, float %517, float %529, float %539)  ; FMad(a,b,c)
  %541 = fadd fast float %540, %534
  %542 = fmul fast float %520, %488
  %543 = call float @dx.op.tertiary.f32(i32 46, float %490, float %525, float %542)  ; FMad(a,b,c)
  %544 = call float @dx.op.tertiary.f32(i32 46, float %517, float %530, float %543)  ; FMad(a,b,c)
  %545 = fadd fast float %544, %535
  %546 = fmul fast float %521, %488
  %547 = call float @dx.op.tertiary.f32(i32 46, float %490, float %526, float %546)  ; FMad(a,b,c)
  %548 = call float @dx.op.tertiary.f32(i32 46, float %517, float %531, float %547)  ; FMad(a,b,c)
  %549 = fadd fast float %548, %536
  %550 = fmul fast float %522, %488
  %551 = call float @dx.op.tertiary.f32(i32 46, float %490, float %527, float %550)  ; FMad(a,b,c)
  %552 = call float @dx.op.tertiary.f32(i32 46, float %517, float %532, float %551)  ; FMad(a,b,c)
  %553 = fadd fast float %552, %537
  %554 = fdiv fast float %541, %553
  %555 = fdiv fast float %545, %553
  %556 = fdiv fast float %549, %553
  %557 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %558 = extractvalue %dx.types.CBufRet.f32 %557, 0
  %559 = extractvalue %dx.types.CBufRet.f32 %557, 1
  %560 = extractvalue %dx.types.CBufRet.f32 %557, 2
  %561 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %562 = extractvalue %dx.types.CBufRet.f32 %561, 0
  %563 = extractvalue %dx.types.CBufRet.f32 %561, 1
  %564 = extractvalue %dx.types.CBufRet.f32 %561, 2
  %565 = fmul fast float %558, 2.097152e+06
  %566 = fmul fast float %559, 2.097152e+06
  %567 = fmul fast float %560, 2.097152e+06
  %568 = fadd fast float %565, %554
  %569 = fsub fast float %568, %562
  %570 = fadd fast float %566, %555
  %571 = fsub fast float %570, %563
  %572 = fadd fast float %567, %556
  %573 = fsub fast float %572, %564
  %574 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %575 = extractvalue %dx.types.CBufRet.f32 %574, 0
  %576 = extractvalue %dx.types.CBufRet.f32 %574, 1
  %577 = extractvalue %dx.types.CBufRet.f32 %574, 2
  %578 = fsub fast float %554, %575
  %579 = fsub fast float %555, %576
  %580 = fsub fast float %556, %577
  %581 = fmul fast float %578, %578
  %582 = fmul fast float %579, %579
  %583 = fadd fast float %581, %582
  %584 = fmul fast float %580, %580
  %585 = fadd fast float %583, %584
  %586 = call float @dx.op.unary.f32(i32 24, float %585)  ; Sqrt(value)
  %587 = fdiv fast float %578, %586
  %588 = fdiv fast float %579, %586
  %589 = fdiv fast float %580, %586
  %590 = icmp eq i32 %47, 0
  br i1 %590, label %591, label %593, !dx.controlflow.hints !53

; <label>:591                                     ; preds = %516
  %592 = extractvalue %dx.types.CBufRet.f32 %471, 1
  br label %1242

; <label>:593                                     ; preds = %516
  %594 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %595 = extractvalue %dx.types.CBufRet.f32 %594, 2
  %596 = fcmp fast ogt float %595, 0.000000e+00
  br i1 %596, label %597, label %1172

; <label>:597                                     ; preds = %593
  %598 = icmp eq i32 %78, 0
  br i1 %598, label %634, label %599, !dx.controlflow.hints !54

; <label>:599                                     ; preds = %597
  %600 = fmul fast float %554, %80
  %601 = call float @dx.op.tertiary.f32(i32 46, float %555, float %85, float %600)  ; FMad(a,b,c)
  %602 = call float @dx.op.tertiary.f32(i32 46, float %556, float %90, float %601)  ; FMad(a,b,c)
  %603 = fadd fast float %602, %95
  %604 = fmul fast float %554, %81
  %605 = call float @dx.op.tertiary.f32(i32 46, float %555, float %86, float %604)  ; FMad(a,b,c)
  %606 = call float @dx.op.tertiary.f32(i32 46, float %556, float %91, float %605)  ; FMad(a,b,c)
  %607 = fadd fast float %606, %96
  %608 = fmul fast float %554, %83
  %609 = call float @dx.op.tertiary.f32(i32 46, float %555, float %88, float %608)  ; FMad(a,b,c)
  %610 = call float @dx.op.tertiary.f32(i32 46, float %556, float %93, float %609)  ; FMad(a,b,c)
  %611 = fadd fast float %610, %98
  %612 = fdiv fast float %603, %611
  %613 = fdiv fast float %607, %611
  %614 = fcmp fast ole float %612, 1.000000e+00
  %615 = fcmp fast ole float %613, 1.000000e+00
  %616 = fcmp fast oge float %612, 0.000000e+00
  %617 = fcmp fast oge float %613, 0.000000e+00
  %618 = and i1 %616, %614
  %619 = and i1 %617, %615
  %620 = and i1 %618, %619
  br i1 %620, label %621, label %634

; <label>:621                                     ; preds = %599
  %622 = fmul fast float %554, %82
  %623 = call float @dx.op.tertiary.f32(i32 46, float %555, float %87, float %622)  ; FMad(a,b,c)
  %624 = call float @dx.op.tertiary.f32(i32 46, float %556, float %92, float %623)  ; FMad(a,b,c)
  %625 = fadd fast float %624, %97
  %626 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %627 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %628 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %626, %dx.types.Handle %627, float %612, float %613, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %629 = extractvalue %dx.types.ResRet.f32 %628, 0
  %630 = fcmp fast olt float %625, %629
  %631 = fcmp fast ogt float %629, 0x3FEFAE1480000000
  %632 = or i1 %630, %631
  %633 = uitofp i1 %632 to float
  br label %634

; <label>:634                                     ; preds = %621, %599, %597
  %635 = phi float [ %633, %621 ], [ 1.000000e+00, %599 ], [ 1.000000e+00, %597 ]
  %636 = icmp eq i32 %68, 0
  br i1 %636, label %716, label %637

; <label>:637                                     ; preds = %634
  %638 = fcmp fast oge float %499, %71
  %639 = fcmp fast oge float %499, %72
  %640 = fcmp fast oge float %499, %73
  %641 = fcmp fast oge float %499, %74
  %642 = zext i1 %638 to i32
  %643 = zext i1 %639 to i32
  %644 = zext i1 %640 to i32
  %645 = zext i1 %641 to i32
  %646 = add nuw nsw i32 %642, %643
  %647 = add nuw nsw i32 %646, %644
  %648 = add nuw nsw i32 %647, %645
  %649 = icmp ult i32 %648, %68
  br i1 %649, label %650, label %716

; <label>:650                                     ; preds = %637
  %651 = shl nuw nsw i32 %648, 2
  %652 = add nuw nsw i32 %651, 9
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %652)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 0
  %655 = extractvalue %dx.types.CBufRet.f32 %653, 1
  %656 = extractvalue %dx.types.CBufRet.f32 %653, 3
  %657 = add nuw nsw i32 %651, 10
  %658 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %657)  ; CBufferLoadLegacy(handle,regIndex)
  %659 = extractvalue %dx.types.CBufRet.f32 %658, 0
  %660 = extractvalue %dx.types.CBufRet.f32 %658, 1
  %661 = extractvalue %dx.types.CBufRet.f32 %658, 3
  %662 = add nuw nsw i32 %651, 11
  %663 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %662)  ; CBufferLoadLegacy(handle,regIndex)
  %664 = extractvalue %dx.types.CBufRet.f32 %663, 0
  %665 = extractvalue %dx.types.CBufRet.f32 %663, 1
  %666 = extractvalue %dx.types.CBufRet.f32 %663, 3
  %667 = add nuw nsw i32 %651, 12
  %668 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %667)  ; CBufferLoadLegacy(handle,regIndex)
  %669 = extractvalue %dx.types.CBufRet.f32 %668, 0
  %670 = extractvalue %dx.types.CBufRet.f32 %668, 1
  %671 = extractvalue %dx.types.CBufRet.f32 %668, 3
  %672 = fmul fast float %654, %554
  %673 = call float @dx.op.tertiary.f32(i32 46, float %555, float %659, float %672)  ; FMad(a,b,c)
  %674 = call float @dx.op.tertiary.f32(i32 46, float %556, float %664, float %673)  ; FMad(a,b,c)
  %675 = fadd fast float %674, %669
  %676 = fmul fast float %655, %554
  %677 = call float @dx.op.tertiary.f32(i32 46, float %555, float %660, float %676)  ; FMad(a,b,c)
  %678 = call float @dx.op.tertiary.f32(i32 46, float %556, float %665, float %677)  ; FMad(a,b,c)
  %679 = fadd fast float %678, %670
  %680 = fmul fast float %656, %554
  %681 = call float @dx.op.tertiary.f32(i32 46, float %555, float %661, float %680)  ; FMad(a,b,c)
  %682 = call float @dx.op.tertiary.f32(i32 46, float %556, float %666, float %681)  ; FMad(a,b,c)
  %683 = fadd fast float %682, %671
  %684 = fdiv fast float %675, %683
  %685 = fdiv fast float %679, %683
  %686 = add nuw nsw i32 %648, 25
  %687 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %686)  ; CBufferLoadLegacy(handle,regIndex)
  %688 = extractvalue %dx.types.CBufRet.f32 %687, 0
  %689 = extractvalue %dx.types.CBufRet.f32 %687, 1
  %690 = extractvalue %dx.types.CBufRet.f32 %687, 2
  %691 = extractvalue %dx.types.CBufRet.f32 %687, 3
  %692 = fcmp fast ole float %684, %690
  %693 = fcmp fast ole float %685, %691
  %694 = fcmp fast oge float %684, %688
  %695 = fcmp fast oge float %685, %689
  %696 = and i1 %694, %692
  %697 = and i1 %695, %693
  %698 = and i1 %696, %697
  br i1 %698, label %699, label %716

; <label>:699                                     ; preds = %650
  %700 = extractvalue %dx.types.CBufRet.f32 %668, 2
  %701 = extractvalue %dx.types.CBufRet.f32 %663, 2
  %702 = extractvalue %dx.types.CBufRet.f32 %658, 2
  %703 = extractvalue %dx.types.CBufRet.f32 %653, 2
  %704 = fmul fast float %703, %554
  %705 = call float @dx.op.tertiary.f32(i32 46, float %555, float %702, float %704)  ; FMad(a,b,c)
  %706 = call float @dx.op.tertiary.f32(i32 46, float %556, float %701, float %705)  ; FMad(a,b,c)
  %707 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %708 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %709 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %707, %dx.types.Handle %708, float %684, float %685, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %710 = extractvalue %dx.types.ResRet.f32 %709, 0
  %711 = fsub fast float 1.000000e+00, %700
  %712 = fsub fast float %711, %706
  %713 = fsub fast float %710, %76
  %714 = fcmp fast olt float %712, %713
  %715 = uitofp i1 %714 to float
  br label %716

; <label>:716                                     ; preds = %699, %650, %637, %634
  %717 = phi float [ %715, %699 ], [ 1.000000e+00, %650 ], [ 1.000000e+00, %637 ], [ 1.000000e+00, %634 ]
  %718 = fmul fast float %717, %635
  %719 = fsub fast float %554, %562
  %720 = fsub fast float %555, %563
  %721 = fsub fast float %556, %564
  %722 = mul i32 %69, 336
  %723 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %724 = add i32 %722, 128
  %725 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %724, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %726 = add i32 %722, 144
  %727 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %726, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %728 = add i32 %722, 160
  %729 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %728, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %730 = add i32 %722, 176
  %731 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %730, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %732 = add i32 %722, 256
  %733 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %732, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %734 = extractvalue %dx.types.ResRet.i32 %733, 0
  %735 = extractvalue %dx.types.ResRet.i32 %733, 1
  %736 = extractvalue %dx.types.ResRet.i32 %733, 2
  %737 = bitcast i32 %734 to float
  %738 = bitcast i32 %735 to float
  %739 = bitcast i32 %736 to float
  %740 = add i32 %722, 268
  %741 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %740, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %742 = extractvalue %dx.types.ResRet.i32 %741, 0
  %743 = add i32 %722, 272
  %744 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %743, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %745 = add i32 %722, 288
  %746 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %745, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %747 = icmp eq i32 %742, 0
  %748 = fadd fast float %737, %558
  %749 = fadd fast float %738, %559
  %750 = fadd fast float %739, %560
  %751 = fmul fast float %748, 2.097152e+06
  %752 = fmul fast float %749, 2.097152e+06
  %753 = fmul fast float %750, 2.097152e+06
  %754 = fadd fast float %751, %719
  %755 = fadd fast float %752, %720
  %756 = fadd fast float %753, %721
  br i1 %747, label %757, label %997

; <label>:757                                     ; preds = %716
  %758 = extractvalue %dx.types.ResRet.i32 %746, 2
  %759 = bitcast i32 %758 to float
  %760 = extractvalue %dx.types.ResRet.i32 %746, 1
  %761 = bitcast i32 %760 to float
  %762 = extractvalue %dx.types.ResRet.i32 %746, 0
  %763 = bitcast i32 %762 to float
  %764 = add i32 %722, 320
  %765 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %764, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %766 = extractvalue %dx.types.ResRet.i32 %765, 0
  %767 = add i32 %722, 316
  %768 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %767, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %769 = extractvalue %dx.types.ResRet.i32 %768, 0
  %770 = add i32 %722, 300
  %771 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %770, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %772 = extractvalue %dx.types.ResRet.i32 %771, 0
  %773 = bitcast i32 %772 to float
  %774 = fadd fast float %754, %763
  %775 = fadd fast float %755, %761
  %776 = fadd fast float %756, %759
  %777 = fmul fast float %774, %774
  %778 = fmul fast float %775, %775
  %779 = fadd fast float %777, %778
  %780 = fmul fast float %776, %776
  %781 = fadd fast float %779, %780
  %782 = call float @dx.op.unary.f32(i32 24, float %781)  ; Sqrt(value)
  %783 = call float @dx.op.unary.f32(i32 23, float %782)  ; Log(value)
  %784 = fadd fast float %783, %773
  %785 = call float @dx.op.unary.f32(i32 27, float %784)  ; Round_ni(value)
  %786 = fptosi float %785 to i32
  %787 = sub nsw i32 %786, %769
  %788 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %787)  ; IMax(a,b)
  %789 = icmp slt i32 %788, %766
  br i1 %789, label %790, label %1169

; <label>:790                                     ; preds = %757
  %791 = add nsw i32 %788, %69
  %792 = mul i32 %791, 336
  %793 = add i32 %792, 112
  %794 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %793, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %795 = extractvalue %dx.types.ResRet.i32 %794, 2
  %796 = bitcast i32 %795 to float
  %797 = add i32 %792, 128
  %798 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %797, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %799 = extractvalue %dx.types.ResRet.i32 %798, 0
  %800 = extractvalue %dx.types.ResRet.i32 %798, 1
  %801 = extractvalue %dx.types.ResRet.i32 %798, 2
  %802 = bitcast i32 %799 to float
  %803 = bitcast i32 %800 to float
  %804 = bitcast i32 %801 to float
  %805 = add i32 %792, 144
  %806 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %805, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %807 = extractvalue %dx.types.ResRet.i32 %806, 0
  %808 = extractvalue %dx.types.ResRet.i32 %806, 1
  %809 = extractvalue %dx.types.ResRet.i32 %806, 2
  %810 = bitcast i32 %807 to float
  %811 = bitcast i32 %808 to float
  %812 = bitcast i32 %809 to float
  %813 = add i32 %792, 160
  %814 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %813, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %815 = extractvalue %dx.types.ResRet.i32 %814, 0
  %816 = extractvalue %dx.types.ResRet.i32 %814, 1
  %817 = extractvalue %dx.types.ResRet.i32 %814, 2
  %818 = bitcast i32 %815 to float
  %819 = bitcast i32 %816 to float
  %820 = bitcast i32 %817 to float
  %821 = add i32 %792, 176
  %822 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %821, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %823 = extractvalue %dx.types.ResRet.i32 %822, 0
  %824 = extractvalue %dx.types.ResRet.i32 %822, 1
  %825 = extractvalue %dx.types.ResRet.i32 %822, 2
  %826 = bitcast i32 %823 to float
  %827 = bitcast i32 %824 to float
  %828 = bitcast i32 %825 to float
  %829 = add i32 %792, 256
  %830 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %829, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %831 = extractvalue %dx.types.ResRet.i32 %830, 0
  %832 = extractvalue %dx.types.ResRet.i32 %830, 1
  %833 = extractvalue %dx.types.ResRet.i32 %830, 2
  %834 = bitcast i32 %831 to float
  %835 = bitcast i32 %832 to float
  %836 = bitcast i32 %833 to float
  %837 = add i32 %792, 272
  %838 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %837, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %839 = extractvalue %dx.types.ResRet.i32 %838, 0
  %840 = extractvalue %dx.types.ResRet.i32 %838, 1
  %841 = extractvalue %dx.types.ResRet.i32 %838, 2
  %842 = bitcast i32 %839 to float
  %843 = bitcast i32 %840 to float
  %844 = bitcast i32 %841 to float
  %845 = fadd fast float %834, %558
  %846 = fadd fast float %835, %559
  %847 = fadd fast float %836, %560
  %848 = fmul fast float %845, 2.097152e+06
  %849 = fmul fast float %846, 2.097152e+06
  %850 = fmul fast float %847, 2.097152e+06
  %851 = fadd fast float %848, %719
  %852 = fadd fast float %851, %842
  %853 = fadd fast float %849, %720
  %854 = fadd fast float %853, %843
  %855 = fadd fast float %850, %721
  %856 = fadd fast float %855, %844
  %857 = fmul fast float %852, %802
  %858 = call float @dx.op.tertiary.f32(i32 46, float %854, float %810, float %857)  ; FMad(a,b,c)
  %859 = call float @dx.op.tertiary.f32(i32 46, float %856, float %818, float %858)  ; FMad(a,b,c)
  %860 = fadd fast float %859, %826
  %861 = fmul fast float %852, %803
  %862 = call float @dx.op.tertiary.f32(i32 46, float %854, float %811, float %861)  ; FMad(a,b,c)
  %863 = call float @dx.op.tertiary.f32(i32 46, float %856, float %819, float %862)  ; FMad(a,b,c)
  %864 = fadd fast float %863, %827
  %865 = fmul fast float %852, %804
  %866 = call float @dx.op.tertiary.f32(i32 46, float %854, float %812, float %865)  ; FMad(a,b,c)
  %867 = call float @dx.op.tertiary.f32(i32 46, float %856, float %820, float %866)  ; FMad(a,b,c)
  %868 = fadd fast float %867, %828
  %869 = fmul fast float %860, 1.280000e+02
  %870 = fmul fast float %864, 1.280000e+02
  %871 = fptoui float %869 to i32
  %872 = fptoui float %870 to i32
  %873 = icmp ult i32 %791, 8192
  br i1 %873, label %880, label %874

; <label>:874                                     ; preds = %790
  %875 = mul i32 %791, 21845
  %876 = shl i32 %872, 7
  %877 = add i32 %875, -178946048
  %878 = add i32 %877, %871
  %879 = add i32 %878, %876
  br label %880

; <label>:880                                     ; preds = %874, %790
  %881 = phi i32 [ %879, %874 ], [ %791, %790 ]
  %882 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %883 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %882, i32 %881, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %884 = extractvalue %dx.types.ResRet.i32 %883, 0
  %885 = lshr i32 %884, 20
  %886 = and i32 %885, 63
  %887 = and i32 %884, 134217728
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %991, label %889

; <label>:889                                     ; preds = %880
  %890 = icmp eq i32 %886, 0
  %891 = zext i1 %890 to i32
  %892 = add i32 %886, %791
  %893 = fmul fast float %860, 1.638400e+04
  %894 = fmul fast float %864, 1.638400e+04
  %895 = fptoui float %893 to i32
  %896 = fptoui float %894 to i32
  br i1 %890, label %968, label %897

; <label>:897                                     ; preds = %889
  %898 = add i32 %792, 304
  %899 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %898, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %900 = extractvalue %dx.types.ResRet.i32 %899, 0
  %901 = extractvalue %dx.types.ResRet.i32 %899, 1
  %902 = mul i32 %892, 336
  %903 = add i32 %902, 112
  %904 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %903, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %905 = extractvalue %dx.types.ResRet.i32 %904, 2
  %906 = bitcast i32 %905 to float
  %907 = add i32 %902, 304
  %908 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %907, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %909 = extractvalue %dx.types.ResRet.i32 %908, 0
  %910 = extractvalue %dx.types.ResRet.i32 %908, 1
  %911 = shl i32 %900, 5
  %912 = shl i32 %901, 5
  %913 = shl i32 %909, 5
  %914 = shl i32 %910, 5
  %915 = sub i32 %871, %911
  %916 = sub i32 %872, %912
  %917 = and i32 %885, 31
  %918 = shl i32 %913, %917
  %919 = shl i32 %914, %917
  %920 = add i32 %915, %918
  %921 = add i32 %916, %919
  %922 = lshr i32 %920, %917
  %923 = lshr i32 %921, %917
  %924 = shl i32 %922, 7
  %925 = shl i32 %923, 7
  %926 = or i32 %924, 127
  %927 = or i32 %925, 127
  %928 = sitofp i32 %900 to float
  %929 = sitofp i32 %901 to float
  %930 = sitofp i32 %909 to float
  %931 = sitofp i32 %910 to float
  %932 = shl i32 1, %917
  %933 = uitofp i32 %932 to float
  %934 = fdiv fast float 1.000000e+00, %933
  %935 = fmul fast float %934, %928
  %936 = fmul fast float %934, %929
  %937 = fsub fast float %930, %935
  %938 = fsub fast float %931, %936
  %939 = fmul fast float %937, 2.500000e-01
  %940 = fmul fast float %938, 2.500000e-01
  %941 = fmul fast float %934, %796
  %942 = fsub fast float %906, %941
  %943 = fmul fast float %934, %860
  %944 = fmul fast float %934, %864
  %945 = fadd fast float %939, %943
  %946 = fadd fast float %940, %944
  %947 = fmul fast float %945, 1.638400e+04
  %948 = fmul fast float %946, 1.638400e+04
  %949 = fptoui float %947 to i32
  %950 = fptoui float %948 to i32
  %951 = call i32 @dx.op.binary.i32(i32 39, i32 %949, i32 %924)  ; UMax(a,b)
  %952 = call i32 @dx.op.binary.i32(i32 39, i32 %950, i32 %925)  ; UMax(a,b)
  %953 = call i32 @dx.op.binary.i32(i32 40, i32 %951, i32 %926)  ; UMin(a,b)
  %954 = call i32 @dx.op.binary.i32(i32 40, i32 %952, i32 %927)  ; UMin(a,b)
  %955 = icmp ult i32 %892, 8192
  br i1 %955, label %961, label %956

; <label>:956                                     ; preds = %897
  %957 = mul i32 %892, 21845
  %958 = add i32 %957, -178946048
  %959 = add i32 %958, %922
  %960 = add i32 %959, %925
  br label %961

; <label>:961                                     ; preds = %956, %897
  %962 = phi i32 [ %960, %956 ], [ %892, %897 ]
  %963 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %882, i32 %962, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %964 = extractvalue %dx.types.ResRet.i32 %963, 0
  %965 = and i32 %964, 200278016
  %966 = icmp eq i32 %965, 134217728
  %967 = zext i1 %966 to i32
  br label %968

; <label>:968                                     ; preds = %961, %889
  %969 = phi i32 [ %953, %961 ], [ %895, %889 ]
  %970 = phi i32 [ %954, %961 ], [ %896, %889 ]
  %971 = phi i32 [ %967, %961 ], [ %891, %889 ]
  %972 = phi i32 [ %964, %961 ], [ %884, %889 ]
  %973 = phi float [ %934, %961 ], [ 1.000000e+00, %889 ]
  %974 = phi float [ %942, %961 ], [ 0.000000e+00, %889 ]
  %975 = icmp eq i32 %971, 0
  br i1 %975, label %991, label %976

; <label>:976                                     ; preds = %968
  %977 = shl i32 %972, 7
  %978 = and i32 %977, 130944
  %979 = lshr i32 %972, 3
  %980 = and i32 %979, 130944
  %981 = and i32 %969, 127
  %982 = and i32 %970, 127
  %983 = or i32 %978, %981
  %984 = or i32 %980, %982
  %985 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %986 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %985, i32 0, i32 %983, i32 %984, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %987 = extractvalue %dx.types.ResRet.i32 %986, 0
  %988 = bitcast i32 %987 to float
  %989 = fsub fast float %988, %974
  %990 = fdiv fast float %989, %973
  br label %991

; <label>:991                                     ; preds = %976, %968, %880
  %992 = phi float [ %990, %976 ], [ 0.000000e+00, %968 ], [ 0.000000e+00, %880 ]
  %993 = phi i1 [ true, %976 ], [ false, %968 ], [ false, %880 ]
  %994 = fcmp fast ogt float %992, %868
  %995 = and i1 %993, %994
  %996 = select i1 %995, float 0.000000e+00, float 1.000000e+00
  br label %1169

; <label>:997                                     ; preds = %716
  %998 = extractvalue %dx.types.ResRet.i32 %731, 3
  %999 = extractvalue %dx.types.ResRet.i32 %731, 2
  %1000 = extractvalue %dx.types.ResRet.i32 %731, 1
  %1001 = extractvalue %dx.types.ResRet.i32 %731, 0
  %1002 = extractvalue %dx.types.ResRet.i32 %729, 3
  %1003 = extractvalue %dx.types.ResRet.i32 %729, 2
  %1004 = extractvalue %dx.types.ResRet.i32 %729, 1
  %1005 = extractvalue %dx.types.ResRet.i32 %729, 0
  %1006 = extractvalue %dx.types.ResRet.i32 %727, 3
  %1007 = extractvalue %dx.types.ResRet.i32 %727, 2
  %1008 = extractvalue %dx.types.ResRet.i32 %727, 1
  %1009 = extractvalue %dx.types.ResRet.i32 %727, 0
  %1010 = extractvalue %dx.types.ResRet.i32 %725, 3
  %1011 = extractvalue %dx.types.ResRet.i32 %725, 2
  %1012 = extractvalue %dx.types.ResRet.i32 %725, 1
  %1013 = extractvalue %dx.types.ResRet.i32 %725, 0
  %1014 = extractvalue %dx.types.ResRet.i32 %744, 2
  %1015 = bitcast i32 %1014 to float
  %1016 = extractvalue %dx.types.ResRet.i32 %744, 1
  %1017 = bitcast i32 %1016 to float
  %1018 = extractvalue %dx.types.ResRet.i32 %744, 0
  %1019 = bitcast i32 %1018 to float
  %1020 = fadd fast float %754, %1019
  %1021 = fadd fast float %755, %1017
  %1022 = fadd fast float %756, %1015
  %1023 = icmp eq i32 %742, 2
  br i1 %1023, label %1070, label %1024

; <label>:1024                                    ; preds = %997
  %1025 = call float @dx.op.unary.f32(i32 6, float %1020)  ; FAbs(value)
  %1026 = call float @dx.op.unary.f32(i32 6, float %1021)  ; FAbs(value)
  %1027 = fcmp fast ult float %1025, %1026
  %1028 = call float @dx.op.unary.f32(i32 6, float %1022)  ; FAbs(value)
  %1029 = fcmp fast ult float %1025, %1028
  %1030 = or i1 %1027, %1029
  br i1 %1030, label %1034, label %1031

; <label>:1031                                    ; preds = %1024
  %1032 = fcmp ule float %1020, 0.000000e+00
  %1033 = zext i1 %1032 to i32
  br label %1042

; <label>:1034                                    ; preds = %1024
  %1035 = fcmp fast ogt float %1026, %1028
  br i1 %1035, label %1036, label %1039

; <label>:1036                                    ; preds = %1034
  %1037 = fcmp fast ogt float %1021, 0.000000e+00
  %1038 = select i1 %1037, i32 2, i32 3
  br label %1042

; <label>:1039                                    ; preds = %1034
  %1040 = fcmp fast ogt float %1022, 0.000000e+00
  %1041 = select i1 %1040, i32 4, i32 5
  br label %1042

; <label>:1042                                    ; preds = %1039, %1036, %1031
  %1043 = phi i32 [ %1033, %1031 ], [ %1038, %1036 ], [ %1041, %1039 ]
  %1044 = add i32 %1043, %69
  %1045 = mul i32 %1044, 336
  %1046 = add i32 %1045, 128
  %1047 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %1046, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1048 = extractvalue %dx.types.ResRet.i32 %1047, 0
  %1049 = extractvalue %dx.types.ResRet.i32 %1047, 1
  %1050 = extractvalue %dx.types.ResRet.i32 %1047, 2
  %1051 = extractvalue %dx.types.ResRet.i32 %1047, 3
  %1052 = add i32 %1045, 144
  %1053 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %1052, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1054 = extractvalue %dx.types.ResRet.i32 %1053, 0
  %1055 = extractvalue %dx.types.ResRet.i32 %1053, 1
  %1056 = extractvalue %dx.types.ResRet.i32 %1053, 2
  %1057 = extractvalue %dx.types.ResRet.i32 %1053, 3
  %1058 = add i32 %1045, 160
  %1059 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %1058, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1060 = extractvalue %dx.types.ResRet.i32 %1059, 0
  %1061 = extractvalue %dx.types.ResRet.i32 %1059, 1
  %1062 = extractvalue %dx.types.ResRet.i32 %1059, 2
  %1063 = extractvalue %dx.types.ResRet.i32 %1059, 3
  %1064 = add i32 %1045, 176
  %1065 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %723, i32 %1064, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1066 = extractvalue %dx.types.ResRet.i32 %1065, 0
  %1067 = extractvalue %dx.types.ResRet.i32 %1065, 1
  %1068 = extractvalue %dx.types.ResRet.i32 %1065, 2
  %1069 = extractvalue %dx.types.ResRet.i32 %1065, 3
  br label %1070

; <label>:1070                                    ; preds = %1042, %997
  %1071 = phi i32 [ %1048, %1042 ], [ %1013, %997 ]
  %1072 = phi i32 [ %1049, %1042 ], [ %1012, %997 ]
  %1073 = phi i32 [ %1050, %1042 ], [ %1011, %997 ]
  %1074 = phi i32 [ %1051, %1042 ], [ %1010, %997 ]
  %1075 = phi i32 [ %1054, %1042 ], [ %1009, %997 ]
  %1076 = phi i32 [ %1055, %1042 ], [ %1008, %997 ]
  %1077 = phi i32 [ %1056, %1042 ], [ %1007, %997 ]
  %1078 = phi i32 [ %1057, %1042 ], [ %1006, %997 ]
  %1079 = phi i32 [ %1060, %1042 ], [ %1005, %997 ]
  %1080 = phi i32 [ %1061, %1042 ], [ %1004, %997 ]
  %1081 = phi i32 [ %1062, %1042 ], [ %1003, %997 ]
  %1082 = phi i32 [ %1063, %1042 ], [ %1002, %997 ]
  %1083 = phi i32 [ %1066, %1042 ], [ %1001, %997 ]
  %1084 = phi i32 [ %1067, %1042 ], [ %1000, %997 ]
  %1085 = phi i32 [ %1068, %1042 ], [ %999, %997 ]
  %1086 = phi i32 [ %1069, %1042 ], [ %998, %997 ]
  %1087 = phi i32 [ %1044, %1042 ], [ %69, %997 ]
  %1088 = bitcast i32 %1086 to float
  %1089 = bitcast i32 %1085 to float
  %1090 = bitcast i32 %1084 to float
  %1091 = bitcast i32 %1083 to float
  %1092 = bitcast i32 %1082 to float
  %1093 = bitcast i32 %1081 to float
  %1094 = bitcast i32 %1080 to float
  %1095 = bitcast i32 %1079 to float
  %1096 = bitcast i32 %1078 to float
  %1097 = bitcast i32 %1077 to float
  %1098 = bitcast i32 %1076 to float
  %1099 = bitcast i32 %1075 to float
  %1100 = bitcast i32 %1074 to float
  %1101 = bitcast i32 %1073 to float
  %1102 = bitcast i32 %1072 to float
  %1103 = bitcast i32 %1071 to float
  %1104 = fmul fast float %1103, %1020
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1021, float %1099, float %1104)  ; FMad(a,b,c)
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1095, float %1105)  ; FMad(a,b,c)
  %1107 = fadd fast float %1106, %1091
  %1108 = fmul fast float %1102, %1020
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %1021, float %1098, float %1108)  ; FMad(a,b,c)
  %1110 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1094, float %1109)  ; FMad(a,b,c)
  %1111 = fadd fast float %1110, %1090
  %1112 = fmul fast float %1101, %1020
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %1021, float %1097, float %1112)  ; FMad(a,b,c)
  %1114 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1093, float %1113)  ; FMad(a,b,c)
  %1115 = fadd fast float %1114, %1089
  %1116 = fmul fast float %1100, %1020
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %1021, float %1096, float %1116)  ; FMad(a,b,c)
  %1118 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1092, float %1117)  ; FMad(a,b,c)
  %1119 = fadd fast float %1118, %1088
  %1120 = fdiv fast float %1107, %1119
  %1121 = fdiv fast float %1111, %1119
  %1122 = fdiv fast float %1115, %1119
  %1123 = icmp ult i32 %1087, 8192
  br i1 %1123, label %1134, label %1124

; <label>:1124                                    ; preds = %1070
  %1125 = fmul fast float %1121, 1.280000e+02
  %1126 = fptoui float %1125 to i32
  %1127 = fmul fast float %1120, 1.280000e+02
  %1128 = fptoui float %1127 to i32
  %1129 = mul i32 %1087, 21845
  %1130 = shl i32 %1126, 7
  %1131 = add i32 %1129, -178946048
  %1132 = add i32 %1131, %1128
  %1133 = add i32 %1132, %1130
  br label %1134

; <label>:1134                                    ; preds = %1124, %1070
  %1135 = phi i32 [ %1133, %1124 ], [ %1087, %1070 ]
  %1136 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1137 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1136, i32 %1135, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1138 = extractvalue %dx.types.ResRet.i32 %1137, 0
  %1139 = lshr i32 %1138, 20
  %1140 = and i32 %1138, 134217728
  %1141 = icmp eq i32 %1140, 0
  %1142 = and i32 %1139, 31
  %1143 = lshr i32 16384, %1142
  %1144 = uitofp i32 %1143 to float
  %1145 = select i1 %1123, float 1.280000e+02, float %1144
  br i1 %1141, label %1163, label %1146

; <label>:1146                                    ; preds = %1134
  %1147 = lshr i32 %1138, 3
  %1148 = and i32 %1147, 130944
  %1149 = fmul fast float %1145, %1121
  %1150 = fptoui float %1149 to i32
  %1151 = and i32 %1150, 127
  %1152 = or i32 %1151, %1148
  %1153 = shl i32 %1138, 7
  %1154 = and i32 %1153, 130944
  %1155 = fmul fast float %1145, %1120
  %1156 = fptoui float %1155 to i32
  %1157 = and i32 %1156, 127
  %1158 = or i32 %1157, %1154
  %1159 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1160 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1159, i32 0, i32 %1158, i32 %1152, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1161 = extractvalue %dx.types.ResRet.i32 %1160, 0
  %1162 = bitcast i32 %1161 to float
  br label %1163

; <label>:1163                                    ; preds = %1146, %1134
  %1164 = phi float [ %1162, %1146 ], [ 0.000000e+00, %1134 ]
  %1165 = phi i1 [ true, %1146 ], [ false, %1134 ]
  %1166 = fcmp fast ogt float %1164, %1122
  %1167 = and i1 %1165, %1166
  %1168 = select i1 %1167, float 0.000000e+00, float 1.000000e+00
  br label %1169

; <label>:1169                                    ; preds = %1163, %991, %757
  %1170 = phi float [ 1.000000e+00, %757 ], [ %996, %991 ], [ %1168, %1163 ]
  %1171 = fmul fast float %718, %1170
  br label %1172

; <label>:1172                                    ; preds = %1169, %593
  %1173 = phi float [ %1171, %1169 ], [ 1.000000e+00, %593 ]
  %1174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1175 = extractvalue %dx.types.CBufRet.f32 %1174, 0
  %1176 = extractvalue %dx.types.CBufRet.f32 %1174, 1
  %1177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1178 = extractvalue %dx.types.CBufRet.f32 %1177, 0
  %1179 = extractvalue %dx.types.CBufRet.f32 %1177, 1
  %1180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1181 = extractvalue %dx.types.CBufRet.f32 %1180, 0
  %1182 = extractvalue %dx.types.CBufRet.f32 %1180, 1
  %1183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1184 = extractvalue %dx.types.CBufRet.f32 %1183, 0
  %1185 = extractvalue %dx.types.CBufRet.f32 %1183, 1
  %1186 = fmul fast float %1175, %554
  %1187 = call float @dx.op.tertiary.f32(i32 46, float %555, float %1178, float %1186)  ; FMad(a,b,c)
  %1188 = call float @dx.op.tertiary.f32(i32 46, float %556, float %1181, float %1187)  ; FMad(a,b,c)
  %1189 = fadd fast float %1188, %1184
  %1190 = fmul fast float %1176, %554
  %1191 = call float @dx.op.tertiary.f32(i32 46, float %555, float %1179, float %1190)  ; FMad(a,b,c)
  %1192 = call float @dx.op.tertiary.f32(i32 46, float %556, float %1182, float %1191)  ; FMad(a,b,c)
  %1193 = fadd fast float %1192, %1185
  %1194 = fmul fast float %1189, 5.000000e-01
  %1195 = fmul fast float %1193, 5.000000e-01
  %1196 = fadd fast float %1194, 5.000000e-01
  %1197 = fsub fast float 5.000000e-01, %1195
  %1198 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1200 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1198, %dx.types.Handle %1199, float %1196, float %1197, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1201 = extractvalue %dx.types.ResRet.f32 %1200, 0
  %1202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1203 = extractvalue %dx.types.CBufRet.f32 %1202, 2
  %1204 = fcmp fast ogt float %1203, 0.000000e+00
  br i1 %1204, label %1205, label %1214

; <label>:1205                                    ; preds = %1172
  %1206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1207 = extractvalue %dx.types.CBufRet.f32 %1206, 0
  %1208 = extractvalue %dx.types.CBufRet.f32 %1206, 1
  %1209 = extractvalue %dx.types.CBufRet.f32 %1206, 2
  %1210 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1211 = fmul fast float %1207, %1210
  %1212 = fmul fast float %1208, %1210
  %1213 = fmul fast float %1209, %1210
  br label %1214

; <label>:1214                                    ; preds = %1205, %1172
  %1215 = phi float [ %1211, %1205 ], [ %63, %1172 ]
  %1216 = phi float [ %1212, %1205 ], [ %64, %1172 ]
  %1217 = phi float [ %1213, %1205 ], [ %65, %1172 ]
  %1218 = fsub fast float -0.000000e+00, %587
  %1219 = fsub fast float -0.000000e+00, %588
  %1220 = fsub fast float -0.000000e+00, %589
  %1221 = call float @dx.op.dot3.f32(i32 55, float %59, float %60, float %61, float %1218, float %1219, float %1220)  ; Dot3(ax,ay,az,bx,by,bz)
  %1222 = extractvalue %dx.types.CBufRet.f32 %471, 1
  %1223 = fmul fast float %1222, %1222
  %1224 = fsub fast float 1.000000e+00, %1223
  %1225 = fmul fast float %1221, 2.000000e+00
  %1226 = fadd fast float %1225, %1222
  %1227 = fmul fast float %1226, %1222
  %1228 = fadd fast float %1227, 1.000000e+00
  %1229 = call float @dx.op.unary.f32(i32 24, float %1228)  ; Sqrt(value)
  %1230 = fmul fast float %1229, 0x402921FB60000000
  %1231 = fmul fast float %1230, %1228
  %1232 = fdiv fast float %1224, %1231
  %1233 = fmul fast float %1173, %66
  %1234 = fmul fast float %1233, %1201
  %1235 = fmul fast float %1234, %1232
  %1236 = fmul fast float %1235, %1215
  %1237 = fmul fast float %1235, %1216
  %1238 = fmul fast float %1235, %1217
  %1239 = fadd fast float %1236, %419
  %1240 = fadd fast float %1237, %420
  %1241 = fadd fast float %1238, %421
  br label %1242

; <label>:1242                                    ; preds = %1214, %591
  %1243 = phi float [ %592, %591 ], [ %1222, %1214 ]
  %1244 = phi float [ %419, %591 ], [ %1239, %1214 ]
  %1245 = phi float [ %420, %591 ], [ %1240, %1214 ]
  %1246 = phi float [ %421, %591 ], [ %1241, %1214 ]
  %1247 = fmul fast float %1243, %588
  %1248 = fmul fast float %1243, %589
  %1249 = fmul fast float %1243, %587
  %1250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1251 = extractvalue %dx.types.CBufRet.f32 %1250, 3
  %1252 = fcmp fast ogt float %1251, 0.000000e+00
  %1253 = extractvalue %dx.types.CBufRet.f32 %1250, 2
  %1254 = fcmp fast ogt float %1253, 0.000000e+00
  %1255 = or i1 %1252, %1254
  br i1 %1255, label %1256, label %1324

; <label>:1256                                    ; preds = %1242
  %1257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1258 = extractvalue %dx.types.CBufRet.f32 %1257, 0
  %1259 = extractvalue %dx.types.CBufRet.f32 %1257, 1
  %1260 = extractvalue %dx.types.CBufRet.f32 %1257, 2
  %1261 = fmul fast float %1258, %569
  %1262 = fmul fast float %1259, %571
  %1263 = fmul fast float %1260, %573
  %1264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1265 = extractvalue %dx.types.CBufRet.f32 %1264, 0
  %1266 = extractvalue %dx.types.CBufRet.f32 %1264, 1
  %1267 = extractvalue %dx.types.CBufRet.f32 %1264, 2
  %1268 = fadd fast float %1261, %1265
  %1269 = fadd fast float %1262, %1266
  %1270 = fadd fast float %1263, %1267
  %1271 = call float @dx.op.binary.f32(i32 35, float %1268, float 0.000000e+00)  ; FMax(a,b)
  %1272 = call float @dx.op.binary.f32(i32 35, float %1269, float 0.000000e+00)  ; FMax(a,b)
  %1273 = call float @dx.op.binary.f32(i32 35, float %1270, float 0.000000e+00)  ; FMax(a,b)
  %1274 = call float @dx.op.binary.f32(i32 36, float %1271, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1275 = call float @dx.op.binary.f32(i32 36, float %1272, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1276 = call float @dx.op.binary.f32(i32 36, float %1273, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1277 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1278 = extractvalue %dx.types.CBufRet.f32 %1277, 0
  %1279 = extractvalue %dx.types.CBufRet.f32 %1277, 1
  %1280 = extractvalue %dx.types.CBufRet.f32 %1277, 2
  %1281 = fmul fast float %1278, %1274
  %1282 = fmul fast float %1279, %1275
  %1283 = fmul fast float %1280, %1276
  %1284 = fptosi float %1281 to i32
  %1285 = fptosi float %1282 to i32
  %1286 = fptosi float %1283 to i32
  %1287 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1288 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1287, i32 0, i32 %1284, i32 %1285, i32 %1286, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1289 = extractvalue %dx.types.ResRet.i32 %1288, 0
  %1290 = extractvalue %dx.types.ResRet.i32 %1288, 1
  %1291 = extractvalue %dx.types.ResRet.i32 %1288, 2
  %1292 = extractvalue %dx.types.ResRet.i32 %1288, 3
  %1293 = uitofp i32 %1289 to float
  %1294 = uitofp i32 %1290 to float
  %1295 = uitofp i32 %1291 to float
  %1296 = uitofp i32 %1292 to float
  %1297 = extractvalue %dx.types.CBufRet.f32 %1277, 3
  %1298 = fadd fast float %1297, 1.000000e+00
  %1299 = fmul fast float %1298, %1293
  %1300 = fmul fast float %1298, %1294
  %1301 = fmul fast float %1298, %1295
  %1302 = fdiv fast float %1281, %1296
  %1303 = fdiv fast float %1282, %1296
  %1304 = fdiv fast float %1283, %1296
  %1305 = call float @dx.op.unary.f32(i32 22, float %1302)  ; Frc(value)
  %1306 = call float @dx.op.unary.f32(i32 22, float %1303)  ; Frc(value)
  %1307 = call float @dx.op.unary.f32(i32 22, float %1304)  ; Frc(value)
  %1308 = fmul fast float %1297, %1305
  %1309 = fmul fast float %1297, %1306
  %1310 = fmul fast float %1297, %1307
  %1311 = fadd fast float %1299, 5.000000e-01
  %1312 = fadd fast float %1311, %1308
  %1313 = fadd fast float %1300, 5.000000e-01
  %1314 = fadd fast float %1313, %1309
  %1315 = fadd fast float %1301, 5.000000e-01
  %1316 = fadd fast float %1315, %1310
  %1317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1318 = extractvalue %dx.types.CBufRet.f32 %1317, 0
  %1319 = extractvalue %dx.types.CBufRet.f32 %1317, 1
  %1320 = extractvalue %dx.types.CBufRet.f32 %1317, 2
  %1321 = fmul fast float %1312, %1318
  %1322 = fmul fast float %1314, %1319
  %1323 = fmul fast float %1316, %1320
  br label %1324

; <label>:1324                                    ; preds = %1256, %1242
  %1325 = phi float [ %1321, %1256 ], [ 0.000000e+00, %1242 ]
  %1326 = phi float [ %1322, %1256 ], [ 0.000000e+00, %1242 ]
  %1327 = phi float [ %1323, %1256 ], [ 0.000000e+00, %1242 ]
  br i1 %1252, label %1328, label %1476

; <label>:1328                                    ; preds = %1324
  %1329 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1330 = extractvalue %dx.types.CBufRet.f32 %1329, 3
  %1331 = fcmp fast ogt float %1330, 0.000000e+00
  br i1 %1331, label %1332, label %1410

; <label>:1332                                    ; preds = %1328
  %1333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1334 = extractvalue %dx.types.CBufRet.f32 %1333, 0
  %1335 = extractvalue %dx.types.CBufRet.f32 %1333, 1
  %1336 = extractvalue %dx.types.CBufRet.f32 %1333, 2
  %1337 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1338 = extractvalue %dx.types.CBufRet.f32 %1337, 2
  %1339 = fcmp fast ogt float %1338, 0.000000e+00
  br i1 %1339, label %1340, label %1376, !dx.controlflow.hints !55

; <label>:1340                                    ; preds = %1332
  %1341 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1342 = extractvalue %dx.types.CBufRet.f32 %1341, 0
  %1343 = fmul fast float %1342, %586
  %1344 = extractvalue %dx.types.CBufRet.f32 %1341, 1
  %1345 = fadd fast float %1343, %1344
  %1346 = call float @dx.op.unary.f32(i32 7, float %1345)  ; Saturate(value)
  %1347 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1348 = extractvalue %dx.types.CBufRet.f32 %1347, 1
  %1349 = extractvalue %dx.types.CBufRet.f32 %1347, 0
  %1350 = fsub fast float -0.000000e+00, %1349
  %1351 = call float @dx.op.dot2.f32(i32 54, float %587, float %588, float %1348, float %1350)  ; Dot2(ax,ay,bx,by)
  %1352 = call float @dx.op.dot2.f32(i32 54, float %587, float %588, float %1349, float %1348)  ; Dot2(ax,ay,bx,by)
  %1353 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1354 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1355 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1353, %dx.types.Handle %1354, float %1351, float %1352, float %589, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1356 = extractvalue %dx.types.ResRet.f32 %1355, 0
  %1357 = extractvalue %dx.types.ResRet.f32 %1355, 1
  %1358 = extractvalue %dx.types.ResRet.f32 %1355, 2
  %1359 = extractvalue %dx.types.CBufRet.f32 %1341, 2
  %1360 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1353, %dx.types.Handle %1354, float %1351, float %1352, float %589, float undef, i32 undef, i32 undef, i32 undef, float %1359)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1361 = extractvalue %dx.types.ResRet.f32 %1360, 0
  %1362 = extractvalue %dx.types.ResRet.f32 %1360, 1
  %1363 = extractvalue %dx.types.ResRet.f32 %1360, 2
  %1364 = fsub fast float %1356, %1361
  %1365 = fsub fast float %1357, %1362
  %1366 = fsub fast float %1358, %1363
  %1367 = fmul fast float %1364, %1346
  %1368 = fmul fast float %1365, %1346
  %1369 = fmul fast float %1366, %1346
  %1370 = fadd fast float %1367, %1361
  %1371 = fadd fast float %1368, %1362
  %1372 = fadd fast float %1369, %1363
  %1373 = fmul fast float %1370, %1334
  %1374 = fmul fast float %1371, %1335
  %1375 = fmul fast float %1372, %1336
  br label %1376

; <label>:1376                                    ; preds = %1340, %1332
  %1377 = phi float [ %1373, %1340 ], [ %1334, %1332 ]
  %1378 = phi float [ %1374, %1340 ], [ %1335, %1332 ]
  %1379 = phi float [ %1375, %1340 ], [ %1336, %1332 ]
  %1380 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1381 = extractvalue %dx.types.CBufRet.f32 %1380, 0
  %1382 = extractvalue %dx.types.CBufRet.f32 %1380, 1
  %1383 = extractvalue %dx.types.CBufRet.f32 %1380, 2
  %1384 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1385 = extractvalue %dx.types.CBufRet.f32 %1384, 1
  %1386 = fmul fast float %1385, %1381
  %1387 = fmul fast float %1385, %1382
  %1388 = fmul fast float %1385, %1383
  %1389 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1390 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1391 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1389, %dx.types.Handle %1390, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1392 = extractvalue %dx.types.ResRet.f32 %1391, 0
  %1393 = extractvalue %dx.types.ResRet.f32 %1391, 1
  %1394 = extractvalue %dx.types.ResRet.f32 %1391, 2
  %1395 = fmul fast float %1386, %1392
  %1396 = fmul fast float %1387, %1393
  %1397 = fmul fast float %1388, %1394
  %1398 = fadd fast float %1395, %1377
  %1399 = fadd fast float %1396, %1378
  %1400 = fadd fast float %1397, %1379
  %1401 = fmul fast float %1398, 0x3FD20DD740000000
  %1402 = fmul fast float %1399, 0x3FD20DD740000000
  %1403 = fmul fast float %1400, 0x3FD20DD740000000
  %1404 = call float @dx.op.dot4.f32(i32 56, float %1401, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1405 = call float @dx.op.dot4.f32(i32 56, float %1402, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1406 = call float @dx.op.dot4.f32(i32 56, float %1403, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1407 = call float @dx.op.binary.f32(i32 35, float %1404, float 0.000000e+00)  ; FMax(a,b)
  %1408 = call float @dx.op.binary.f32(i32 35, float %1405, float 0.000000e+00)  ; FMax(a,b)
  %1409 = call float @dx.op.binary.f32(i32 35, float %1406, float 0.000000e+00)  ; FMax(a,b)
  br label %1442

; <label>:1410                                    ; preds = %1328
  %1411 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1412 = extractvalue %dx.types.CBufRet.f32 %1411, 0
  %1413 = extractvalue %dx.types.CBufRet.f32 %1411, 1
  %1414 = extractvalue %dx.types.CBufRet.f32 %1411, 2
  %1415 = extractvalue %dx.types.CBufRet.f32 %1411, 3
  %1416 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1417 = extractvalue %dx.types.CBufRet.f32 %1416, 0
  %1418 = extractvalue %dx.types.CBufRet.f32 %1416, 1
  %1419 = extractvalue %dx.types.CBufRet.f32 %1416, 2
  %1420 = extractvalue %dx.types.CBufRet.f32 %1416, 3
  %1421 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1422 = extractvalue %dx.types.CBufRet.f32 %1421, 0
  %1423 = extractvalue %dx.types.CBufRet.f32 %1421, 1
  %1424 = extractvalue %dx.types.CBufRet.f32 %1421, 2
  %1425 = extractvalue %dx.types.CBufRet.f32 %1421, 3
  %1426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1427 = extractvalue %dx.types.CBufRet.f32 %1426, 0
  %1428 = extractvalue %dx.types.CBufRet.f32 %1426, 1
  %1429 = extractvalue %dx.types.CBufRet.f32 %1426, 2
  %1430 = call float @dx.op.dot4.f32(i32 56, float %1412, float %1413, float %1414, float %1415, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1431 = call float @dx.op.dot4.f32(i32 56, float %1417, float %1418, float %1419, float %1420, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1432 = call float @dx.op.dot4.f32(i32 56, float %1422, float %1423, float %1424, float %1425, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1433 = call float @dx.op.binary.f32(i32 35, float %1430, float 0.000000e+00)  ; FMax(a,b)
  %1434 = call float @dx.op.binary.f32(i32 35, float %1431, float 0.000000e+00)  ; FMax(a,b)
  %1435 = call float @dx.op.binary.f32(i32 35, float %1432, float 0.000000e+00)  ; FMax(a,b)
  %1436 = fmul fast float %1427, 0x3FD45F3060000000
  %1437 = fmul fast float %1436, %1433
  %1438 = fmul fast float %1428, 0x3FD45F3060000000
  %1439 = fmul fast float %1438, %1434
  %1440 = fmul fast float %1429, 0x3FD45F3060000000
  %1441 = fmul fast float %1440, %1435
  br label %1442

; <label>:1442                                    ; preds = %1410, %1376
  %1443 = phi float [ %1407, %1376 ], [ %1437, %1410 ]
  %1444 = phi float [ %1408, %1376 ], [ %1439, %1410 ]
  %1445 = phi float [ %1409, %1376 ], [ %1441, %1410 ]
  %1446 = extractvalue %dx.types.CBufRet.f32 %471, 0
  %1447 = fcmp fast ogt float %1446, 0.000000e+00
  br i1 %1447, label %1448, label %1467

; <label>:1448                                    ; preds = %1442
  %1449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1450 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1451 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1449, %dx.types.Handle %1450, float %1325, float %1326, float %1327, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1452 = extractvalue %dx.types.ResRet.f32 %1451, 0
  %1453 = extractvalue %dx.types.ResRet.f32 %1451, 1
  %1454 = extractvalue %dx.types.ResRet.f32 %1451, 2
  %1455 = fmul fast float %1452, 2.000000e+00
  %1456 = fmul fast float %1453, 2.000000e+00
  %1457 = fmul fast float %1454, 2.000000e+00
  %1458 = fadd fast float %1455, -1.000000e+00
  %1459 = fadd fast float %1456, -1.000000e+00
  %1460 = fadd fast float %1457, -1.000000e+00
  %1461 = fmul fast float %1458, %1458
  %1462 = fmul fast float %1459, %1459
  %1463 = fadd fast float %1461, %1462
  %1464 = fmul fast float %1460, %1460
  %1465 = fadd fast float %1463, %1464
  %1466 = call float @dx.op.unary.f32(i32 24, float %1465)  ; Sqrt(value)
  br label %1467

; <label>:1467                                    ; preds = %1448, %1442
  %1468 = phi float [ %1466, %1448 ], [ 1.000000e+00, %1442 ]
  %1469 = fmul fast float %1251, %1468
  %1470 = fmul fast float %1469, %1443
  %1471 = fmul fast float %1469, %1444
  %1472 = fmul fast float %1469, %1445
  %1473 = fadd fast float %1470, %1244
  %1474 = fadd fast float %1471, %1245
  %1475 = fadd fast float %1472, %1246
  br label %1476

; <label>:1476                                    ; preds = %1467, %1324
  %1477 = phi float [ %1473, %1467 ], [ %1244, %1324 ]
  %1478 = phi float [ %1474, %1467 ], [ %1245, %1324 ]
  %1479 = phi float [ %1475, %1467 ], [ %1246, %1324 ]
  %1480 = extractvalue %dx.types.CBufRet.f32 %1250, 2
  %1481 = fcmp fast ogt float %1480, 0.000000e+00
  br i1 %1481, label %1482, label %1547

; <label>:1482                                    ; preds = %1476
  %1483 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1484 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1485 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1483, %dx.types.Handle %1484, float %1325, float %1326, float %1327, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1486 = extractvalue %dx.types.ResRet.f32 %1485, 0
  %1487 = extractvalue %dx.types.ResRet.f32 %1485, 1
  %1488 = extractvalue %dx.types.ResRet.f32 %1485, 2
  %1489 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1490 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1489, %dx.types.Handle %1484, float %1325, float %1326, float %1327, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1491 = extractvalue %dx.types.ResRet.f32 %1490, 0
  %1492 = extractvalue %dx.types.ResRet.f32 %1490, 1
  %1493 = extractvalue %dx.types.ResRet.f32 %1490, 2
  %1494 = fmul fast float %1491, 2.000000e+00
  %1495 = fmul fast float %1492, 2.000000e+00
  %1496 = fmul fast float %1493, 2.000000e+00
  %1497 = fadd fast float %1494, -1.000000e+00
  %1498 = fadd fast float %1495, -1.000000e+00
  %1499 = fadd fast float %1496, -1.000000e+00
  %1500 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1501 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1500, %dx.types.Handle %1484, float %1325, float %1326, float %1327, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1502 = extractvalue %dx.types.ResRet.f32 %1501, 0
  %1503 = extractvalue %dx.types.ResRet.f32 %1501, 1
  %1504 = extractvalue %dx.types.ResRet.f32 %1501, 2
  %1505 = fmul fast float %1502, 2.000000e+00
  %1506 = fmul fast float %1503, 2.000000e+00
  %1507 = fmul fast float %1504, 2.000000e+00
  %1508 = fadd fast float %1505, -1.000000e+00
  %1509 = fadd fast float %1506, -1.000000e+00
  %1510 = fadd fast float %1507, -1.000000e+00
  %1511 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1512 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1511, %dx.types.Handle %1484, float %1325, float %1326, float %1327, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1513 = extractvalue %dx.types.ResRet.f32 %1512, 0
  %1514 = extractvalue %dx.types.ResRet.f32 %1512, 1
  %1515 = extractvalue %dx.types.ResRet.f32 %1512, 2
  %1516 = fmul fast float %1513, 2.000000e+00
  %1517 = fmul fast float %1514, 2.000000e+00
  %1518 = fmul fast float %1515, 2.000000e+00
  %1519 = fadd fast float %1516, -1.000000e+00
  %1520 = fadd fast float %1517, -1.000000e+00
  %1521 = fadd fast float %1518, -1.000000e+00
  %1522 = fmul fast float %1486, 0x3FFBB67B80000000
  %1523 = fmul fast float %1522, %1497
  %1524 = fmul fast float %1522, %1498
  %1525 = fmul fast float %1522, %1499
  %1526 = fmul fast float %1487, 0x3FFBB67B80000000
  %1527 = fmul fast float %1526, %1508
  %1528 = fmul fast float %1526, %1509
  %1529 = fmul fast float %1526, %1510
  %1530 = fmul fast float %1488, 0x3FFBB67B80000000
  %1531 = fmul fast float %1530, %1519
  %1532 = fmul fast float %1530, %1520
  %1533 = fmul fast float %1530, %1521
  %1534 = fmul fast float %1480, 0x3FD45F3060000000
  %1535 = call float @dx.op.dot4.f32(i32 56, float %1486, float %1523, float %1524, float %1525, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1536 = call float @dx.op.dot4.f32(i32 56, float %1487, float %1527, float %1528, float %1529, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1537 = call float @dx.op.dot4.f32(i32 56, float %1488, float %1531, float %1532, float %1533, float 1.000000e+00, float %1247, float %1248, float %1249)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1538 = call float @dx.op.binary.f32(i32 35, float %1535, float 0.000000e+00)  ; FMax(a,b)
  %1539 = call float @dx.op.binary.f32(i32 35, float %1536, float 0.000000e+00)  ; FMax(a,b)
  %1540 = call float @dx.op.binary.f32(i32 35, float %1537, float 0.000000e+00)  ; FMax(a,b)
  %1541 = fmul fast float %1538, %1534
  %1542 = fmul fast float %1539, %1534
  %1543 = fmul fast float %1540, %1534
  %1544 = fadd fast float %1541, %1477
  %1545 = fadd fast float %1542, %1478
  %1546 = fadd fast float %1543, %1479
  br label %1547

; <label>:1547                                    ; preds = %1482, %1476
  %1548 = phi float [ %1544, %1482 ], [ %1477, %1476 ]
  %1549 = phi float [ %1545, %1482 ], [ %1478, %1476 ]
  %1550 = phi float [ %1546, %1482 ], [ %1479, %1476 ]
  %1551 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1552 = extractvalue %dx.types.CBufRet.i32 %1551, 0
  %1553 = extractvalue %dx.types.CBufRet.i32 %1551, 1
  %1554 = mul i32 %1552, %42
  %1555 = mul i32 %1553, %43
  %1556 = fmul fast float %499, %55
  %1557 = fadd fast float %1556, %56
  %1558 = call float @dx.op.unary.f32(i32 23, float %1557)  ; Log(value)
  %1559 = fmul fast float %1558, %57
  %1560 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1559)  ; FMax(a,b)
  %1561 = fptoui float %1560 to i32
  %1562 = add nsw i32 %51, -1
  %1563 = call i32 @dx.op.binary.i32(i32 40, i32 %1561, i32 %1562)  ; UMin(a,b)
  %1564 = and i32 %53, 31
  %1565 = lshr i32 %1554, %1564
  %1566 = lshr i32 %1555, %1564
  %1567 = mul i32 %1563, %50
  %1568 = add i32 %1567, %1566
  %1569 = mul i32 %1568, %49
  %1570 = add i32 %1569, %1565
  %1571 = shl i32 %1570, 1
  %1572 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1573 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1572, i32 %1571, i32 undef)  ; BufferLoad(srv,index,wot)
  %1574 = extractvalue %dx.types.ResRet.i32 %1573, 0
  %1575 = call i32 @dx.op.binary.i32(i32 40, i32 %1574, i32 %46)  ; UMin(a,b)
  %1576 = or i32 %1571, 1
  %1577 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1572, i32 %1576, i32 undef)  ; BufferLoad(srv,index,wot)
  %1578 = extractvalue %dx.types.ResRet.i32 %1577, 0
  %1579 = add i32 %42, 1
  %1580 = add i32 %43, 1
  %1581 = add i32 %44, 1
  %1582 = uitofp i32 %1579 to float
  %1583 = uitofp i32 %1580 to float
  %1584 = fadd fast float %476, %1582
  %1585 = fadd fast float %477, %1583
  %1586 = fdiv fast float %1584, %482
  %1587 = fdiv fast float %1585, %483
  %1588 = fmul fast float %1586, 2.000000e+00
  %1589 = fmul fast float %1587, 2.000000e+00
  %1590 = fadd fast float %1588, -1.000000e+00
  %1591 = fadd fast float %1589, -1.000000e+00
  %1592 = fsub fast float -0.000000e+00, %1591
  %1593 = uitofp i32 %1581 to float
  %1594 = fadd fast float %478, %1593
  %1595 = fdiv fast float %1594, %493
  %1596 = call float @dx.op.unary.f32(i32 21, float %1595)  ; Exp(value)
  %1597 = fsub fast float %1596, %496
  %1598 = fdiv fast float %1597, %498
  br i1 %502, label %1605, label %1599, !dx.controlflow.hints !52

; <label>:1599                                    ; preds = %1547
  %1600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1601 = extractvalue %dx.types.CBufRet.f32 %1600, 2
  %1602 = fmul fast float %1601, %1598
  %1603 = extractvalue %dx.types.CBufRet.f32 %500, 2
  %1604 = fadd fast float %1602, %1603
  br label %1612

; <label>:1605                                    ; preds = %1547
  %1606 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1607 = extractvalue %dx.types.CBufRet.f32 %1606, 3
  %1608 = fadd fast float %1607, %1598
  %1609 = extractvalue %dx.types.CBufRet.f32 %1606, 2
  %1610 = fmul fast float %1608, %1609
  %1611 = fdiv fast float 1.000000e+00, %1610
  br label %1612

; <label>:1612                                    ; preds = %1605, %1599
  %1613 = phi float [ %1604, %1599 ], [ %1611, %1605 ]
  %1614 = fmul fast float %519, %1590
  %1615 = call float @dx.op.tertiary.f32(i32 46, float %1592, float %524, float %1614)  ; FMad(a,b,c)
  %1616 = call float @dx.op.tertiary.f32(i32 46, float %1613, float %529, float %1615)  ; FMad(a,b,c)
  %1617 = fadd fast float %1616, %534
  %1618 = fmul fast float %520, %1590
  %1619 = call float @dx.op.tertiary.f32(i32 46, float %1592, float %525, float %1618)  ; FMad(a,b,c)
  %1620 = call float @dx.op.tertiary.f32(i32 46, float %1613, float %530, float %1619)  ; FMad(a,b,c)
  %1621 = fadd fast float %1620, %535
  %1622 = fmul fast float %521, %1590
  %1623 = call float @dx.op.tertiary.f32(i32 46, float %1592, float %526, float %1622)  ; FMad(a,b,c)
  %1624 = call float @dx.op.tertiary.f32(i32 46, float %1613, float %531, float %1623)  ; FMad(a,b,c)
  %1625 = fadd fast float %1624, %536
  %1626 = fmul fast float %522, %1590
  %1627 = call float @dx.op.tertiary.f32(i32 46, float %1592, float %527, float %1626)  ; FMad(a,b,c)
  %1628 = call float @dx.op.tertiary.f32(i32 46, float %1613, float %532, float %1627)  ; FMad(a,b,c)
  %1629 = fadd fast float %1628, %537
  %1630 = fdiv fast float %1617, %1629
  %1631 = fdiv fast float %1621, %1629
  %1632 = fdiv fast float %1625, %1629
  %1633 = fsub fast float %554, %1630
  %1634 = fsub fast float %555, %1631
  %1635 = fsub fast float %556, %1632
  %1636 = fmul fast float %1633, %1633
  %1637 = fmul fast float %1634, %1634
  %1638 = fadd fast float %1637, %1636
  %1639 = fmul fast float %1635, %1635
  %1640 = fadd fast float %1638, %1639
  %1641 = call float @dx.op.unary.f32(i32 24, float %1640)  ; Sqrt(value)
  %1642 = extractvalue %dx.types.CBufRet.f32 %471, 2
  %1643 = fmul fast float %1642, %1641
  %1644 = call float @dx.op.binary.f32(i32 35, float %1643, float 1.000000e+00)  ; FMax(a,b)
  %1645 = fmul fast float %1644, %1644
  %1646 = icmp eq i32 %1575, 0
  br i1 %1646, label %2056, label %1647

; <label>:1647                                    ; preds = %1612
  br label %1648

; <label>:1648                                    ; preds = %2049, %1647
  %1649 = phi float [ %2050, %2049 ], [ %1548, %1647 ]
  %1650 = phi float [ %2051, %2049 ], [ %1549, %1647 ]
  %1651 = phi float [ %2052, %2049 ], [ %1550, %1647 ]
  %1652 = phi i32 [ %2053, %2049 ], [ 0, %1647 ]
  %1653 = add i32 %1652, %1578
  %1654 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1655 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1654, i32 %1653, i32 undef)  ; BufferLoad(srv,index,wot)
  %1656 = extractvalue %dx.types.ResRet.i32 %1655, 0
  %1657 = mul i32 %1656, 6
  %1658 = add i32 %1657, 4
  %1659 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1660 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1658, i32 undef)  ; BufferLoad(srv,index,wot)
  %1661 = extractvalue %dx.types.ResRet.f32 %1660, 0
  %1662 = extractvalue %dx.types.ResRet.f32 %1660, 1
  %1663 = extractvalue %dx.types.ResRet.f32 %1660, 2
  %1664 = add i32 %1657, 3
  %1665 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1664, i32 undef)  ; BufferLoad(srv,index,wot)
  %1666 = extractvalue %dx.types.ResRet.f32 %1665, 3
  %1667 = add i32 %1657, 2
  %1668 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1667, i32 undef)  ; BufferLoad(srv,index,wot)
  %1669 = extractvalue %dx.types.ResRet.f32 %1668, 0
  %1670 = extractvalue %dx.types.ResRet.f32 %1668, 1
  %1671 = extractvalue %dx.types.ResRet.f32 %1668, 2
  %1672 = or i32 %1657, 1
  %1673 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1672, i32 undef)  ; BufferLoad(srv,index,wot)
  %1674 = extractvalue %dx.types.ResRet.f32 %1673, 0
  %1675 = extractvalue %dx.types.ResRet.f32 %1673, 1
  %1676 = extractvalue %dx.types.ResRet.f32 %1673, 2
  %1677 = extractvalue %dx.types.ResRet.f32 %1673, 3
  %1678 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1657, i32 undef)  ; BufferLoad(srv,index,wot)
  %1679 = extractvalue %dx.types.ResRet.f32 %1678, 3
  %1680 = bitcast float %1666 to i32
  %1681 = lshr i32 %1680, 16
  %1682 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1681)  ; LegacyF16ToF32(value)
  %1683 = fcmp fast ogt float %1682, 0.000000e+00
  br i1 %1683, label %1684, label %2049

; <label>:1684                                    ; preds = %1648
  %1685 = extractvalue %dx.types.ResRet.f32 %1678, 2
  %1686 = extractvalue %dx.types.ResRet.f32 %1678, 1
  %1687 = extractvalue %dx.types.ResRet.f32 %1678, 0
  %1688 = extractvalue %dx.types.ResRet.f32 %1668, 3
  %1689 = extractvalue %dx.types.ResRet.f32 %1665, 2
  %1690 = extractvalue %dx.types.ResRet.f32 %1665, 0
  %1691 = add i32 %1657, 5
  %1692 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1659, i32 %1691, i32 undef)  ; BufferLoad(srv,index,wot)
  %1693 = extractvalue %dx.types.ResRet.f32 %1692, 3
  %1694 = bitcast float %1688 to i32
  %1695 = lshr i32 %1694, 16
  %1696 = and i32 %1695, 3
  %1697 = bitcast float %1690 to i32
  %1698 = and i32 %1697, 65535
  %1699 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1698)  ; LegacyF16ToF32(value)
  %1700 = lshr i32 %1697, 16
  %1701 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1700)  ; LegacyF16ToF32(value)
  %1702 = bitcast float %1689 to i32
  %1703 = and i32 %1702, 65535
  %1704 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1703)  ; LegacyF16ToF32(value)
  %1705 = fsub fast float -0.000000e+00, %1704
  %1706 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1680)  ; LegacyF16ToF32(value)
  %1707 = fsub fast float -0.000000e+00, %1706
  %1708 = fcmp fast oeq float %1677, 0.000000e+00
  %1709 = icmp eq i32 %1696, 2
  %1710 = icmp eq i32 %1696, 3
  %1711 = bitcast float %1693 to i32
  %1712 = and i32 %1711, 65535
  %1713 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1712)  ; LegacyF16ToF32(value)
  %1714 = lshr i32 %1711, 16
  %1715 = and i32 %1714, 1023
  %1716 = uitofp i32 %1715 to float
  %1717 = fmul fast float %1716, 9.765625e-04
  %1718 = fsub fast float %1687, %554
  %1719 = fsub fast float %1686, %555
  %1720 = fsub fast float %1685, %556
  %1721 = call float @dx.op.dot3.f32(i32 55, float %1718, float %1719, float %1720, float %1718, float %1719, float %1720)  ; Dot3(ax,ay,az,bx,by,bz)
  %1722 = call float @dx.op.unary.f32(i32 25, float %1721)  ; Rsqrt(value)
  %1723 = fmul fast float %1722, %1718
  %1724 = fmul fast float %1722, %1719
  %1725 = fmul fast float %1722, %1720
  br i1 %1708, label %1726, label %1733

; <label>:1726                                    ; preds = %1684
  %1727 = fmul fast float %1679, %1679
  %1728 = fmul fast float %1727, %1721
  %1729 = fmul fast float %1728, %1728
  %1730 = fsub fast float 1.000000e+00, %1729
  %1731 = call float @dx.op.unary.f32(i32 7, float %1730)  ; Saturate(value)
  %1732 = fmul fast float %1731, %1731
  br label %1743

; <label>:1733                                    ; preds = %1684
  %1734 = fmul fast float %1718, %1679
  %1735 = fmul fast float %1719, %1679
  %1736 = fmul fast float %1720, %1679
  %1737 = call float @dx.op.dot3.f32(i32 55, float %1734, float %1735, float %1736, float %1734, float %1735, float %1736)  ; Dot3(ax,ay,az,bx,by,bz)
  %1738 = call float @dx.op.unary.f32(i32 7, float %1737)  ; Saturate(value)
  %1739 = fsub fast float 1.000000e+00, %1738
  %1740 = call float @dx.op.unary.f32(i32 23, float %1739)  ; Log(value)
  %1741 = fmul fast float %1740, %1677
  %1742 = call float @dx.op.unary.f32(i32 21, float %1741)  ; Exp(value)
  br label %1743

; <label>:1743                                    ; preds = %1733, %1726
  %1744 = phi float [ %1732, %1726 ], [ %1742, %1733 ]
  br i1 %1709, label %1745, label %1752

; <label>:1745                                    ; preds = %1743
  %1746 = call float @dx.op.dot3.f32(i32 55, float %1723, float %1724, float %1725, float %1669, float %1670, float %1671)  ; Dot3(ax,ay,az,bx,by,bz)
  %1747 = fsub fast float %1746, %1699
  %1748 = fmul fast float %1747, %1701
  %1749 = call float @dx.op.unary.f32(i32 7, float %1748)  ; Saturate(value)
  %1750 = fmul fast float %1749, %1749
  %1751 = fmul fast float %1750, %1744
  br label %1752

; <label>:1752                                    ; preds = %1745, %1743
  %1753 = phi float [ %1751, %1745 ], [ %1744, %1743 ]
  br i1 %1710, label %1754, label %1758

; <label>:1754                                    ; preds = %1752
  %1755 = call float @dx.op.dot3.f32(i32 55, float %1669, float %1670, float %1671, float %1723, float %1724, float %1725)  ; Dot3(ax,ay,az,bx,by,bz)
  %1756 = fcmp fast olt float %1755, 0.000000e+00
  %1757 = select i1 %1756, float 0.000000e+00, float %1753
  br label %1758

; <label>:1758                                    ; preds = %1754, %1752
  %1759 = phi float [ %1757, %1754 ], [ %1753, %1752 ]
  br i1 %1710, label %1760, label %1992

; <label>:1760                                    ; preds = %1758
  %1761 = fmul fast float %1671, %1662
  %1762 = fmul fast float %1670, %1663
  %1763 = fsub fast float %1761, %1762
  %1764 = fmul fast float %1669, %1663
  %1765 = fmul fast float %1671, %1661
  %1766 = fsub fast float %1764, %1765
  %1767 = fmul fast float %1670, %1661
  %1768 = fmul fast float %1669, %1662
  %1769 = fsub fast float %1767, %1768
  %1770 = fcmp fast ogt float %1717, 0x3FA1EB8520000000
  br i1 %1770, label %1771, label %1866

; <label>:1771                                    ; preds = %1760
  %1772 = fmul fast float %1718, %1763
  %1773 = call float @dx.op.tertiary.f32(i32 46, float %1766, float %1719, float %1772)  ; FMad(a,b,c)
  %1774 = call float @dx.op.tertiary.f32(i32 46, float %1769, float %1720, float %1773)  ; FMad(a,b,c)
  %1775 = fmul fast float %1718, %1661
  %1776 = call float @dx.op.tertiary.f32(i32 46, float %1662, float %1719, float %1775)  ; FMad(a,b,c)
  %1777 = call float @dx.op.tertiary.f32(i32 46, float %1663, float %1720, float %1776)  ; FMad(a,b,c)
  %1778 = fmul fast float %1718, %1669
  %1779 = call float @dx.op.tertiary.f32(i32 46, float %1670, float %1719, float %1778)  ; FMad(a,b,c)
  %1780 = call float @dx.op.tertiary.f32(i32 46, float %1671, float %1720, float %1779)  ; FMad(a,b,c)
  %1781 = fmul fast float %1717, %1717
  %1782 = fsub fast float 1.000000e+00, %1781
  %1783 = call float @dx.op.unary.f32(i32 24, float %1782)  ; Sqrt(value)
  %1784 = fmul fast float %1717, %1713
  %1785 = call float @dx.op.binary.f32(i32 36, float %1780, float %1784)  ; FMin(a,b)
  %1786 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1784)  ; FMax(a,b)
  %1787 = fdiv fast float %1785, %1786
  %1788 = fmul fast float %1783, %1713
  %1789 = fmul fast float %1788, %1787
  %1790 = fcmp fast ogt float %1774, 0.000000e+00
  %1791 = fcmp fast ogt float %1777, 0.000000e+00
  %1792 = fcmp fast olt float %1774, 0.000000e+00
  %1793 = fcmp fast olt float %1777, 0.000000e+00
  %1794 = zext i1 %1790 to i32
  %1795 = zext i1 %1791 to i32
  %1796 = zext i1 %1792 to i32
  %1797 = zext i1 %1793 to i32
  %1798 = sub nsw i32 %1794, %1796
  %1799 = sub nsw i32 %1795, %1797
  %1800 = sitofp i32 %1798 to float
  %1801 = sitofp i32 %1799 to float
  %1802 = fadd fast float %1789, %1704
  %1803 = fadd fast float %1789, %1706
  %1804 = call float @dx.op.unary.f32(i32 6, float %1774)  ; FAbs(value)
  %1805 = call float @dx.op.unary.f32(i32 6, float %1777)  ; FAbs(value)
  %1806 = call float @dx.op.binary.f32(i32 35, float %1804, float %1802)  ; FMax(a,b)
  %1807 = call float @dx.op.binary.f32(i32 35, float %1805, float %1803)  ; FMax(a,b)
  %1808 = fsub fast float %1705, %1789
  %1809 = fadd fast float %1808, %1806
  %1810 = fmul fast float %1809, %1800
  %1811 = fsub fast float %1707, %1789
  %1812 = fadd fast float %1811, %1807
  %1813 = fmul fast float %1812, %1801
  %1814 = fsub fast float %1780, %1785
  %1815 = call float @dx.op.binary.f32(i32 35, float %1814, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1816 = call float @dx.op.unary.f32(i32 6, float %1810)  ; FAbs(value)
  %1817 = call float @dx.op.unary.f32(i32 6, float %1813)  ; FAbs(value)
  %1818 = fdiv fast float %1816, %1815
  %1819 = fdiv fast float %1817, %1815
  %1820 = fmul fast float %1818, %1785
  %1821 = fmul fast float %1819, %1785
  %1822 = fsub fast float %1820, %1789
  %1823 = fsub fast float %1821, %1789
  %1824 = fsub fast float -0.000000e+00, %1800
  %1825 = fsub fast float -0.000000e+00, %1801
  %1826 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1824)  ; FMax(a,b)
  %1827 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1825)  ; FMax(a,b)
  %1828 = fmul fast float %1822, %1826
  %1829 = fmul fast float %1823, %1827
  %1830 = fsub fast float %1828, %1704
  %1831 = fsub fast float %1829, %1706
  %1832 = call float @dx.op.binary.f32(i32 35, float %1830, float %1705)  ; FMax(a,b)
  %1833 = call float @dx.op.binary.f32(i32 35, float %1831, float %1707)  ; FMax(a,b)
  %1834 = call float @dx.op.binary.f32(i32 36, float %1832, float %1704)  ; FMin(a,b)
  %1835 = call float @dx.op.binary.f32(i32 36, float %1833, float %1706)  ; FMin(a,b)
  %1836 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1800)  ; FMax(a,b)
  %1837 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1801)  ; FMax(a,b)
  %1838 = fmul fast float %1836, %1822
  %1839 = fmul fast float %1837, %1823
  %1840 = fsub fast float %1704, %1838
  %1841 = fsub fast float %1706, %1839
  %1842 = call float @dx.op.binary.f32(i32 35, float %1840, float %1705)  ; FMax(a,b)
  %1843 = call float @dx.op.binary.f32(i32 35, float %1841, float %1707)  ; FMax(a,b)
  %1844 = call float @dx.op.binary.f32(i32 36, float %1842, float %1704)  ; FMin(a,b)
  %1845 = call float @dx.op.binary.f32(i32 36, float %1843, float %1706)  ; FMin(a,b)
  %1846 = fadd fast float %1844, %1834
  %1847 = fadd fast float %1845, %1835
  %1848 = fmul fast float %1846, 5.000000e-01
  %1849 = fmul fast float %1847, 5.000000e-01
  %1850 = fsub fast float %1844, %1834
  %1851 = fsub fast float %1845, %1835
  %1852 = fmul fast float %1850, 5.000000e-01
  %1853 = fmul fast float %1851, 5.000000e-01
  %1854 = fmul fast float %1848, %1763
  %1855 = fmul fast float %1848, %1766
  %1856 = fmul fast float %1848, %1769
  %1857 = fsub fast float %1718, %1854
  %1858 = fsub fast float %1719, %1855
  %1859 = fsub fast float %1720, %1856
  %1860 = fmul fast float %1849, %1661
  %1861 = fmul fast float %1849, %1662
  %1862 = fmul fast float %1849, %1663
  %1863 = fsub fast float %1857, %1860
  %1864 = fsub fast float %1858, %1861
  %1865 = fsub fast float %1859, %1862
  br label %1866

; <label>:1866                                    ; preds = %1771, %1760
  %1867 = phi float [ %1863, %1771 ], [ %1718, %1760 ]
  %1868 = phi float [ %1864, %1771 ], [ %1719, %1760 ]
  %1869 = phi float [ %1865, %1771 ], [ %1720, %1760 ]
  %1870 = phi float [ %1852, %1771 ], [ %1704, %1760 ]
  %1871 = phi float [ %1853, %1771 ], [ %1706, %1760 ]
  %1872 = fcmp fast oeq float %1870, 0.000000e+00
  %1873 = fcmp fast oeq float %1871, 0.000000e+00
  %1874 = or i1 %1872, %1873
  br i1 %1874, label %2022, label %1875

; <label>:1875                                    ; preds = %1866
  %1876 = call float @dx.op.dot3.f32(i32 55, float %1763, float %1766, float %1769, float %1867, float %1868, float %1869)  ; Dot3(ax,ay,az,bx,by,bz)
  %1877 = call float @dx.op.dot3.f32(i32 55, float %1661, float %1662, float %1663, float %1867, float %1868, float %1869)  ; Dot3(ax,ay,az,bx,by,bz)
  %1878 = call float @dx.op.dot3.f32(i32 55, float %1669, float %1670, float %1671, float %1867, float %1868, float %1869)  ; Dot3(ax,ay,az,bx,by,bz)
  %1879 = fsub fast float %1876, %1870
  %1880 = fadd fast float %1876, %1870
  %1881 = fsub fast float %1877, %1871
  %1882 = fadd fast float %1877, %1871
  %1883 = fmul fast float %1878, %1878
  %1884 = call float @dx.op.dot2.f32(i32 54, float %1879, float %1881, float %1879, float %1881)  ; Dot2(ax,ay,bx,by)
  %1885 = fadd fast float %1884, %1883
  %1886 = call float @dx.op.unary.f32(i32 25, float %1885)  ; Rsqrt(value)
  %1887 = fmul fast float %1886, %1879
  %1888 = fmul fast float %1886, %1881
  %1889 = fmul fast float %1886, %1878
  %1890 = call float @dx.op.dot2.f32(i32 54, float %1880, float %1881, float %1880, float %1881)  ; Dot2(ax,ay,bx,by)
  %1891 = fadd fast float %1890, %1883
  %1892 = call float @dx.op.unary.f32(i32 25, float %1891)  ; Rsqrt(value)
  %1893 = fmul fast float %1892, %1880
  %1894 = fmul fast float %1892, %1881
  %1895 = fmul fast float %1892, %1878
  %1896 = call float @dx.op.dot2.f32(i32 54, float %1880, float %1882, float %1880, float %1882)  ; Dot2(ax,ay,bx,by)
  %1897 = fadd fast float %1896, %1883
  %1898 = call float @dx.op.unary.f32(i32 25, float %1897)  ; Rsqrt(value)
  %1899 = fmul fast float %1898, %1880
  %1900 = fmul fast float %1898, %1882
  %1901 = fmul fast float %1898, %1878
  %1902 = call float @dx.op.dot2.f32(i32 54, float %1879, float %1882, float %1879, float %1882)  ; Dot2(ax,ay,bx,by)
  %1903 = fadd fast float %1902, %1883
  %1904 = call float @dx.op.unary.f32(i32 25, float %1903)  ; Rsqrt(value)
  %1905 = fmul fast float %1904, %1879
  %1906 = fmul fast float %1904, %1882
  %1907 = fmul fast float %1904, %1878
  %1908 = call float @dx.op.dot3.f32(i32 55, float %1887, float %1888, float %1889, float %1893, float %1894, float %1895)  ; Dot3(ax,ay,az,bx,by,bz)
  %1909 = call float @dx.op.dot3.f32(i32 55, float %1893, float %1894, float %1895, float %1899, float %1900, float %1901)  ; Dot3(ax,ay,az,bx,by,bz)
  %1910 = call float @dx.op.dot3.f32(i32 55, float %1899, float %1900, float %1901, float %1905, float %1906, float %1907)  ; Dot3(ax,ay,az,bx,by,bz)
  %1911 = call float @dx.op.dot3.f32(i32 55, float %1905, float %1906, float %1907, float %1887, float %1888, float %1889)  ; Dot3(ax,ay,az,bx,by,bz)
  %1912 = fmul fast float %1908, 0x3FC6666660000000
  %1913 = fsub fast float 0x3FF921FF20000000, %1912
  %1914 = fadd fast float %1908, 1.000000e+00
  %1915 = call float @dx.op.unary.f32(i32 25, float %1914)  ; Rsqrt(value)
  %1916 = fmul fast float %1909, 0x3FC6666660000000
  %1917 = fsub fast float 0x3FF921FF20000000, %1916
  %1918 = fadd fast float %1909, 1.000000e+00
  %1919 = call float @dx.op.unary.f32(i32 25, float %1918)  ; Rsqrt(value)
  %1920 = fmul fast float %1919, %1917
  %1921 = fmul fast float %1910, 0x3FC6666660000000
  %1922 = fsub fast float 0x3FF921FF20000000, %1921
  %1923 = fadd fast float %1910, 1.000000e+00
  %1924 = call float @dx.op.unary.f32(i32 25, float %1923)  ; Rsqrt(value)
  %1925 = fmul fast float %1911, 0x3FC6666660000000
  %1926 = fsub fast float 0x3FF921FF20000000, %1925
  %1927 = fadd fast float %1911, 1.000000e+00
  %1928 = call float @dx.op.unary.f32(i32 25, float %1927)  ; Rsqrt(value)
  %1929 = fmul fast float %1928, %1926
  %1930 = fmul fast float %1913, %1915
  %1931 = fsub fast float -0.000000e+00, %1930
  %1932 = fmul fast float %1887, %1931
  %1933 = fmul fast float %1888, %1931
  %1934 = fmul fast float %1889, %1931
  %1935 = fmul fast float %1920, %1899
  %1936 = fmul fast float %1920, %1900
  %1937 = fmul fast float %1920, %1901
  %1938 = fadd fast float %1935, %1932
  %1939 = fadd fast float %1936, %1933
  %1940 = fadd fast float %1937, %1934
  %1941 = fmul fast float %1940, %1894
  %1942 = fmul fast float %1939, %1895
  %1943 = fsub fast float %1941, %1942
  %1944 = fmul fast float %1938, %1895
  %1945 = fmul fast float %1940, %1893
  %1946 = fsub fast float %1944, %1945
  %1947 = fmul fast float %1939, %1893
  %1948 = fmul fast float %1938, %1894
  %1949 = fsub fast float %1947, %1948
  %1950 = fmul fast float %1929, %1887
  %1951 = fmul fast float %1929, %1888
  %1952 = fmul fast float %1929, %1889
  %1953 = fmul fast float %1922, %1924
  %1954 = fsub fast float -0.000000e+00, %1953
  %1955 = fmul fast float %1899, %1954
  %1956 = fmul fast float %1900, %1954
  %1957 = fmul fast float %1901, %1954
  %1958 = fadd fast float %1950, %1955
  %1959 = fadd fast float %1951, %1956
  %1960 = fadd fast float %1952, %1957
  %1961 = fmul fast float %1960, %1906
  %1962 = fmul fast float %1959, %1907
  %1963 = fsub fast float %1961, %1962
  %1964 = fmul fast float %1958, %1907
  %1965 = fmul fast float %1960, %1905
  %1966 = fsub fast float %1964, %1965
  %1967 = fmul fast float %1959, %1905
  %1968 = fmul fast float %1958, %1906
  %1969 = fsub fast float %1967, %1968
  %1970 = fadd fast float %1963, %1943
  %1971 = fadd fast float %1966, %1946
  %1972 = fadd fast float %1969, %1949
  %1973 = fmul fast float %1970, %1763
  %1974 = fmul fast float %1970, %1766
  %1975 = fmul fast float %1970, %1769
  %1976 = fmul fast float %1971, %1661
  %1977 = fmul fast float %1971, %1662
  %1978 = fmul fast float %1971, %1663
  %1979 = fadd fast float %1973, %1976
  %1980 = fadd fast float %1974, %1977
  %1981 = fadd fast float %1975, %1978
  %1982 = fmul fast float %1972, %1669
  %1983 = fmul fast float %1972, %1670
  %1984 = fmul fast float %1972, %1671
  %1985 = fadd fast float %1979, %1982
  %1986 = fadd fast float %1980, %1983
  %1987 = fadd fast float %1981, %1984
  %1988 = call float @dx.op.dot3.f32(i32 55, float %1985, float %1986, float %1987, float %1985, float %1986, float %1987)  ; Dot3(ax,ay,az,bx,by,bz)
  %1989 = call float @dx.op.unary.f32(i32 25, float %1988)  ; Rsqrt(value)
  %1990 = fmul fast float %1988, 5.000000e-01
  %1991 = fmul fast float %1990, %1989
  br label %2022

; <label>:1992                                    ; preds = %1758
  %1993 = fmul fast float %1706, 5.000000e-01
  %1994 = fmul fast float %1993, %1661
  %1995 = fmul fast float %1993, %1662
  %1996 = fmul fast float %1993, %1663
  %1997 = fsub fast float %1718, %1994
  %1998 = fsub fast float %1719, %1995
  %1999 = fsub fast float %1720, %1996
  %2000 = fadd fast float %1994, %1718
  %2001 = fadd fast float %1995, %1719
  %2002 = fadd fast float %1996, %1720
  %2003 = fcmp fast ogt float %1706, 0.000000e+00
  %2004 = call float @dx.op.dot3.f32(i32 55, float %1997, float %1998, float %1999, float %1997, float %1998, float %1999)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %2003, label %2005, label %2016, !dx.controlflow.hints !56

; <label>:2005                                    ; preds = %1992
  %2006 = call float @dx.op.dot3.f32(i32 55, float %2000, float %2001, float %2002, float %2000, float %2001, float %2002)  ; Dot3(ax,ay,az,bx,by,bz)
  %2007 = call float @dx.op.unary.f32(i32 25, float %2004)  ; Rsqrt(value)
  %2008 = call float @dx.op.unary.f32(i32 25, float %2006)  ; Rsqrt(value)
  %2009 = fmul fast float %2008, %2007
  %2010 = call float @dx.op.dot3.f32(i32 55, float %1997, float %1998, float %1999, float %2000, float %2001, float %2002)  ; Dot3(ax,ay,az,bx,by,bz)
  %2011 = fmul fast float %2010, 5.000000e-01
  %2012 = fadd fast float %2011, %1645
  %2013 = fmul fast float %2012, %2009
  %2014 = fadd fast float %2013, 5.000000e-01
  %2015 = fdiv fast float %2009, %2014
  br label %2019

; <label>:2016                                    ; preds = %1992
  %2017 = fadd fast float %2004, %1645
  %2018 = fdiv fast float 1.000000e+00, %2017
  br label %2019

; <label>:2019                                    ; preds = %2016, %2005
  %2020 = phi float [ %2015, %2005 ], [ %2018, %2016 ]
  %2021 = select i1 %1708, float %2020, float 1.000000e+00
  br label %2022

; <label>:2022                                    ; preds = %2019, %1875, %1866
  %2023 = phi float [ %2021, %2019 ], [ 0.000000e+00, %1866 ], [ %1991, %1875 ]
  %2024 = fsub fast float -0.000000e+00, %587
  %2025 = fsub fast float -0.000000e+00, %588
  %2026 = fsub fast float -0.000000e+00, %589
  %2027 = call float @dx.op.dot3.f32(i32 55, float %1723, float %1724, float %1725, float %2024, float %2025, float %2026)  ; Dot3(ax,ay,az,bx,by,bz)
  %2028 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %2029 = extractvalue %dx.types.CBufRet.f32 %2028, 1
  %2030 = fmul fast float %2029, %2029
  %2031 = fsub fast float 1.000000e+00, %2030
  %2032 = fmul fast float %2027, 2.000000e+00
  %2033 = fadd fast float %2032, %2029
  %2034 = fmul fast float %2033, %2029
  %2035 = fadd fast float %2034, 1.000000e+00
  %2036 = call float @dx.op.unary.f32(i32 24, float %2035)  ; Sqrt(value)
  %2037 = fmul fast float %2036, 0x402921FB60000000
  %2038 = fmul fast float %2037, %2035
  %2039 = fdiv fast float %2031, %2038
  %2040 = fmul fast float %1759, %1682
  %2041 = fmul fast float %2040, %2023
  %2042 = fmul fast float %2041, %2039
  %2043 = fmul fast float %2042, %1674
  %2044 = fmul fast float %2042, %1675
  %2045 = fmul fast float %2042, %1676
  %2046 = fadd fast float %2043, %1649
  %2047 = fadd fast float %2044, %1650
  %2048 = fadd fast float %2045, %1651
  br label %2049

; <label>:2049                                    ; preds = %2022, %1648
  %2050 = phi float [ %2046, %2022 ], [ %1649, %1648 ]
  %2051 = phi float [ %2047, %2022 ], [ %1650, %1648 ]
  %2052 = phi float [ %2048, %2022 ], [ %1651, %1648 ]
  %2053 = add nuw i32 %1652, 1
  %2054 = icmp eq i32 %2053, %1575
  br i1 %2054, label %2055, label %1648, !llvm.loop !57

; <label>:2055                                    ; preds = %2049
  br label %2056

; <label>:2056                                    ; preds = %2055, %1612
  %2057 = phi float [ %1548, %1612 ], [ %2050, %2055 ]
  %2058 = phi float [ %1549, %1612 ], [ %2051, %2055 ]
  %2059 = phi float [ %1550, %1612 ], [ %2052, %2055 ]
  %2060 = add nuw nsw i32 %422, 1
  %2061 = icmp ult i32 %2060, %417
  br i1 %2061, label %418, label %2062

; <label>:2062                                    ; preds = %2056
  %2063 = uitofp i32 %417 to float
  %2064 = fdiv fast float %2057, %2063
  %2065 = fdiv fast float %2058, %2063
  %2066 = fdiv fast float %2059, %2063
  %2067 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2068 = extractvalue %dx.types.CBufRet.f32 %2067, 2
  %2069 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2070 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2069, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2071 = extractvalue %dx.types.ResRet.f32 %2070, 0
  %2072 = extractvalue %dx.types.ResRet.f32 %2070, 1
  %2073 = extractvalue %dx.types.ResRet.f32 %2070, 2
  %2074 = fmul fast float %2071, %2068
  %2075 = fmul fast float %2072, %2068
  %2076 = fmul fast float %2073, %2068
  %2077 = fadd fast float %2074, %2064
  %2078 = fadd fast float %2075, %2065
  %2079 = fadd fast float %2076, %2066
  %2080 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2081 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2080, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2082 = extractvalue %dx.types.ResRet.f32 %2081, 0
  %2083 = extractvalue %dx.types.ResRet.f32 %2081, 1
  %2084 = extractvalue %dx.types.ResRet.f32 %2081, 2
  %2085 = extractvalue %dx.types.ResRet.f32 %2081, 3
  %2086 = call float @dx.op.dot3.f32(i32 55, float %2082, float %2083, float %2084, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2087 = fadd fast float %2085, %2086
  %2088 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2089 = extractvalue %dx.types.CBufRet.i32 %2088, 0
  %2090 = icmp eq i32 %2089, 0
  br i1 %2090, label %2097, label %2091, !dx.controlflow.hints !59

; <label>:2091                                    ; preds = %2062
  %2092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2093 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2092, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2094 = extractvalue %dx.types.ResRet.f32 %2093, 0
  %2095 = extractvalue %dx.types.ResRet.f32 %2093, 1
  %2096 = extractvalue %dx.types.ResRet.f32 %2093, 2
  br label %2097

; <label>:2097                                    ; preds = %2091, %2062
  %2098 = phi float [ %2094, %2091 ], [ 0.000000e+00, %2062 ]
  %2099 = phi float [ %2095, %2091 ], [ 0.000000e+00, %2062 ]
  %2100 = phi float [ %2096, %2091 ], [ 0.000000e+00, %2062 ]
  %2101 = extractvalue %dx.types.CBufRet.f32 %2067, 1
  %2102 = fmul fast float %2082, %2077
  %2103 = fmul fast float %2083, %2078
  %2104 = fmul fast float %2084, %2079
  %2105 = fadd fast float %2098, %2102
  %2106 = fadd fast float %2099, %2103
  %2107 = fadd fast float %2100, %2104
  %2108 = fmul fast float %2101, %2105
  %2109 = fmul fast float %2101, %2106
  %2110 = fmul fast float %2101, %2107
  %2111 = fcmp fast ogt float %403, 0.000000e+00
  br i1 %2111, label %2112, label %2138, !dx.controlflow.hints !60

; <label>:2112                                    ; preds = %2097
  %2113 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2114 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2115 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2113, %dx.types.Handle %2114, float %384, float %385, float %380, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2116 = extractvalue %dx.types.ResRet.f32 %2115, 0
  %2117 = extractvalue %dx.types.ResRet.f32 %2115, 1
  %2118 = extractvalue %dx.types.ResRet.f32 %2115, 2
  %2119 = extractvalue %dx.types.ResRet.f32 %2115, 3
  %2120 = extractvalue %dx.types.CBufRet.f32 %1250, 1
  %2121 = fmul fast float %2101, %2120
  %2122 = fmul fast float %2121, %2116
  %2123 = fmul fast float %2121, %2117
  %2124 = fmul fast float %2121, %2118
  %2125 = fmul fast float %2121, %2119
  %2126 = fsub fast float %2122, %2108
  %2127 = fsub fast float %2123, %2109
  %2128 = fsub fast float %2124, %2110
  %2129 = fsub fast float %2125, %2087
  %2130 = fmul fast float %2126, %403
  %2131 = fmul fast float %2127, %403
  %2132 = fmul fast float %2128, %403
  %2133 = fmul fast float %2129, %403
  %2134 = fadd fast float %2130, %2108
  %2135 = fadd fast float %2131, %2109
  %2136 = fadd fast float %2132, %2110
  %2137 = fadd fast float %2133, %2087
  br label %2138

; <label>:2138                                    ; preds = %2112, %2097
  %2139 = phi float [ %2134, %2112 ], [ %2108, %2097 ]
  %2140 = phi float [ %2135, %2112 ], [ %2109, %2097 ]
  %2141 = phi float [ %2136, %2112 ], [ %2110, %2097 ]
  %2142 = phi float [ %2137, %2112 ], [ %2087, %2097 ]
  %2143 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2144 = extractvalue %dx.types.CBufRet.i32 %2143, 0
  %2145 = extractvalue %dx.types.CBufRet.i32 %2143, 1
  %2146 = extractvalue %dx.types.CBufRet.i32 %2143, 2
  %2147 = icmp slt i32 %42, %2144
  %2148 = icmp slt i32 %43, %2145
  %2149 = icmp slt i32 %44, %2146
  %2150 = and i1 %2147, %2148
  %2151 = and i1 %2149, %2150
  br i1 %2151, label %2152, label %2166

; <label>:2152                                    ; preds = %2138
  %2153 = bitcast float %2139 to i32
  %2154 = bitcast float %2140 to i32
  %2155 = bitcast float %2141 to i32
  %2156 = bitcast float %2142 to i32
  %2157 = icmp ult i32 %2153, 2139095040
  %2158 = icmp ult i32 %2154, 2139095040
  %2159 = icmp ult i32 %2155, 2139095040
  %2160 = icmp ult i32 %2156, 2139095040
  %2161 = select i1 %2157, float %2139, float 0.000000e+00
  %2162 = select i1 %2158, float %2140, float 0.000000e+00
  %2163 = select i1 %2159, float %2141, float 0.000000e+00
  %2164 = select i1 %2160, float %2142, float 0.000000e+00
  %2165 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2165, i32 %42, i32 %43, i32 %44, float %2161, float %2162, float %2163, float %2164, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2166

; <label>:2166                                    ; preds = %2152, %2138, %209
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!48}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !32, !34, !40}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<float>"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{!33}
!33 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!34 = !{!35, !36, !37, !38, !39}
!35 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!36 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!37 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!38 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!39 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!40 = !{!41, !42, !43, !44, !45, !46, !47}
!41 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!42 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!43 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!44 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!45 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!46 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!47 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!48 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !49}
!49 = !{i32 0, i64 16, i32 4, !50, i32 5, !51}
!50 = !{i32 4, i32 4, i32 4}
!51 = !{i32 0}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 2}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !"dx.controlflow.hints", i32 1}
