;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: fdf7e33bb6efd588bedd06681f7a5e36
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S2             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S3             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s4     1
; LightFunctionSampler              sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T7             t7     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T8             t8     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T9             t9     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T10            t10     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T11            t11     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T12            t12     1
; ConservativeDepthTexture          texture     f32          2d     T13            t13     1
; VBufferA                          texture     f32          3d     T14            t14     1
; VBufferB                          texture     f32          3d     T15            t15     1
; LocalShadowedLightScattering      texture     f32          3d     T16            t16     1
; LightFunctionTexture              texture     f32          2d     T17            t17     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %37 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %38 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %39 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.i32 %39, 0
  %41 = extractvalue %dx.types.CBufRet.i32 %39, 2
  %42 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.i32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.i32 %42, 1
  %45 = extractvalue %dx.types.CBufRet.i32 %42, 2
  %46 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.i32 %46, 0
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.f32 %48, 2
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %57 = extractvalue %dx.types.CBufRet.f32 %56, 0
  %58 = extractvalue %dx.types.CBufRet.f32 %56, 1
  %59 = extractvalue %dx.types.CBufRet.f32 %56, 2
  %60 = extractvalue %dx.types.CBufRet.f32 %56, 3
  %61 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.i32 %61, 0
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = extractvalue %dx.types.CBufRet.f32 %63, 3
  %68 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.f32 %68, 0
  %70 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.i32 %70, 1
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = extractvalue %dx.types.CBufRet.f32 %72, 1
  %75 = extractvalue %dx.types.CBufRet.f32 %72, 2
  %76 = extractvalue %dx.types.CBufRet.f32 %72, 3
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 2
  %81 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.i32 %92, 3
  %94 = icmp eq i32 %93, 0
  %95 = uitofp i32 %36 to float
  %96 = uitofp i32 %37 to float
  %97 = uitofp i32 %38 to float
  br i1 %94, label %204, label %98

; <label>:98                                      ; preds = %0
  %99 = fadd fast float %95, 5.000000e-01
  %100 = fadd fast float %96, 5.000000e-01
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = fdiv fast float %99, %102
  %105 = fdiv fast float %100, %103
  %106 = fmul fast float %104, 2.000000e+00
  %107 = fmul fast float %105, 2.000000e+00
  %108 = fadd fast float %106, -1.000000e+00
  %109 = fadd fast float %107, -1.000000e+00
  %110 = fsub fast float -0.000000e+00, %109
  %111 = fadd fast float %97, -1.000000e+00
  %112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.f32 %112, 2
  %114 = fdiv fast float %111, %113
  %115 = call float @dx.op.unary.f32(i32 21, float %114)  ; Exp(value)
  %116 = extractvalue %dx.types.CBufRet.f32 %112, 1
  %117 = fsub fast float %115, %116
  %118 = extractvalue %dx.types.CBufRet.f32 %112, 0
  %119 = fdiv fast float %117, %118
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 3
  %122 = fcmp fast ult float %121, 1.000000e+00
  br i1 %122, label %129, label %123, !dx.controlflow.hints !45

; <label>:123                                     ; preds = %98
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %126 = fmul fast float %125, %119
  %127 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %128 = fadd fast float %126, %127
  br label %136

; <label>:129                                     ; preds = %98
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 3
  %132 = fadd fast float %131, %119
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = fmul fast float %132, %133
  %135 = fdiv fast float 1.000000e+00, %134
  br label %136

; <label>:136                                     ; preds = %129, %123
  %137 = phi float [ %128, %123 ], [ %135, %129 ]
  %138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %139 = extractvalue %dx.types.CBufRet.f32 %138, 0
  %140 = extractvalue %dx.types.CBufRet.f32 %138, 1
  %141 = extractvalue %dx.types.CBufRet.f32 %138, 2
  %142 = extractvalue %dx.types.CBufRet.f32 %138, 3
  %143 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %144 = extractvalue %dx.types.CBufRet.f32 %143, 0
  %145 = extractvalue %dx.types.CBufRet.f32 %143, 1
  %146 = extractvalue %dx.types.CBufRet.f32 %143, 2
  %147 = extractvalue %dx.types.CBufRet.f32 %143, 3
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = fmul fast float %139, %108
  %159 = call float @dx.op.tertiary.f32(i32 46, float %110, float %144, float %158)  ; FMad(a,b,c)
  %160 = call float @dx.op.tertiary.f32(i32 46, float %137, float %149, float %159)  ; FMad(a,b,c)
  %161 = fadd fast float %160, %154
  %162 = fmul fast float %140, %108
  %163 = call float @dx.op.tertiary.f32(i32 46, float %110, float %145, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %137, float %150, float %163)  ; FMad(a,b,c)
  %165 = fadd fast float %164, %155
  %166 = fmul fast float %141, %108
  %167 = call float @dx.op.tertiary.f32(i32 46, float %110, float %146, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %137, float %151, float %167)  ; FMad(a,b,c)
  %169 = fadd fast float %168, %156
  %170 = fmul fast float %142, %108
  %171 = call float @dx.op.tertiary.f32(i32 46, float %110, float %147, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %137, float %152, float %171)  ; FMad(a,b,c)
  %173 = fadd fast float %172, %157
  %174 = fdiv fast float %161, %173
  %175 = fdiv fast float %165, %173
  %176 = fdiv fast float %169, %173
  %177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %178 = extractvalue %dx.types.CBufRet.f32 %177, 2
  %179 = extractvalue %dx.types.CBufRet.f32 %177, 3
  %180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %181 = extractvalue %dx.types.CBufRet.f32 %180, 2
  %182 = extractvalue %dx.types.CBufRet.f32 %180, 3
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.f32 %186, 2
  %188 = extractvalue %dx.types.CBufRet.f32 %186, 3
  %189 = fmul fast float %178, %174
  %190 = call float @dx.op.tertiary.f32(i32 46, float %175, float %181, float %189)  ; FMad(a,b,c)
  %191 = call float @dx.op.tertiary.f32(i32 46, float %176, float %184, float %190)  ; FMad(a,b,c)
  %192 = fadd fast float %191, %187
  %193 = fmul fast float %179, %174
  %194 = call float @dx.op.tertiary.f32(i32 46, float %175, float %182, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %176, float %185, float %194)  ; FMad(a,b,c)
  %196 = fadd fast float %195, %188
  %197 = fdiv fast float %192, %196
  %198 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %199 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %198, i32 0, i32 %36, i32 %37, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %200 = extractvalue %dx.types.ResRet.f32 %199, 0
  %201 = fcmp fast ogt float %200, %197
  br i1 %201, label %202, label %204

; <label>:202                                     ; preds = %136
  %203 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %203, i32 %36, i32 %37, i32 %38, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1450

; <label>:204                                     ; preds = %136, %0
  %205 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.i32 %205, 0
  %207 = mul i32 %36, 1664525
  %208 = mul i32 %37, 1664525
  %209 = mul i32 %38, 1664525
  %210 = mul i32 %206, 1664525
  %211 = add i32 %207, 1013904223
  %212 = add i32 %208, 1013904223
  %213 = add i32 %209, 1013904223
  %214 = add i32 %210, 1013904223
  %215 = mul i32 %214, %212
  %216 = add i32 %211, %215
  %217 = mul i32 %216, %213
  %218 = add i32 %217, %212
  %219 = mul i32 %218, %216
  %220 = add i32 %219, %213
  %221 = mul i32 %220, %218
  %222 = add i32 %221, %214
  %223 = lshr i32 %216, 16
  %224 = lshr i32 %218, 16
  %225 = lshr i32 %220, 16
  %226 = lshr i32 %222, 16
  %227 = xor i32 %223, %216
  %228 = xor i32 %224, %218
  %229 = xor i32 %225, %220
  %230 = xor i32 %226, %222
  %231 = mul i32 %230, %228
  %232 = add i32 %231, %227
  %233 = mul i32 %232, %229
  %234 = add i32 %233, %228
  %235 = mul i32 %234, %232
  %236 = add i32 %235, %229
  %237 = uitofp i32 %232 to float
  %238 = uitofp i32 %234 to float
  %239 = uitofp i32 %236 to float
  %240 = fmul fast float %237, 0x3E00000000000000
  %241 = fmul fast float %238, 0x3E00000000000000
  %242 = fmul fast float %239, 0x3E00000000000000
  %243 = fadd fast float %240, -1.000000e+00
  %244 = fadd fast float %241, -1.000000e+00
  %245 = fadd fast float %242, -1.000000e+00
  %246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.f32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.f32 %246, 1
  %249 = extractvalue %dx.types.CBufRet.f32 %246, 2
  %250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %251 = extractvalue %dx.types.CBufRet.f32 %250, 3
  %252 = fmul fast float %243, %251
  %253 = fmul fast float %244, %251
  %254 = fmul fast float %245, %251
  %255 = fadd fast float %252, %247
  %256 = fadd fast float %253, %248
  %257 = fadd fast float %254, %249
  %258 = fadd fast float %255, %95
  %259 = fadd fast float %256, %96
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = fdiv fast float %258, %261
  %264 = fdiv fast float %259, %262
  %265 = fmul fast float %263, 2.000000e+00
  %266 = fmul fast float %264, 2.000000e+00
  %267 = fadd fast float %265, -1.000000e+00
  %268 = fadd fast float %266, -1.000000e+00
  %269 = fsub fast float -0.000000e+00, %268
  %270 = fadd fast float %257, %97
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 2
  %273 = fdiv fast float %270, %272
  %274 = call float @dx.op.unary.f32(i32 21, float %273)  ; Exp(value)
  %275 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %276 = fsub fast float %274, %275
  %277 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %278 = fdiv fast float %276, %277
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 3
  %281 = fcmp fast ult float %280, 1.000000e+00
  br i1 %281, label %288, label %282, !dx.controlflow.hints !45

; <label>:282                                     ; preds = %204
  %283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.f32 %283, 2
  %285 = fmul fast float %284, %278
  %286 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %287 = fadd fast float %285, %286
  br label %295

; <label>:288                                     ; preds = %204
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 3
  %291 = fadd fast float %290, %278
  %292 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %293 = fmul fast float %291, %292
  %294 = fdiv fast float 1.000000e+00, %293
  br label %295

; <label>:295                                     ; preds = %288, %282
  %296 = phi float [ %287, %282 ], [ %294, %288 ]
  %297 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %298 = extractvalue %dx.types.CBufRet.f32 %297, 0
  %299 = extractvalue %dx.types.CBufRet.f32 %297, 1
  %300 = extractvalue %dx.types.CBufRet.f32 %297, 2
  %301 = extractvalue %dx.types.CBufRet.f32 %297, 3
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = extractvalue %dx.types.CBufRet.f32 %302, 1
  %305 = extractvalue %dx.types.CBufRet.f32 %302, 2
  %306 = extractvalue %dx.types.CBufRet.f32 %302, 3
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %309 = extractvalue %dx.types.CBufRet.f32 %307, 1
  %310 = extractvalue %dx.types.CBufRet.f32 %307, 2
  %311 = extractvalue %dx.types.CBufRet.f32 %307, 3
  %312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %313 = extractvalue %dx.types.CBufRet.f32 %312, 0
  %314 = extractvalue %dx.types.CBufRet.f32 %312, 1
  %315 = extractvalue %dx.types.CBufRet.f32 %312, 2
  %316 = extractvalue %dx.types.CBufRet.f32 %312, 3
  %317 = fmul fast float %298, %267
  %318 = call float @dx.op.tertiary.f32(i32 46, float %269, float %303, float %317)  ; FMad(a,b,c)
  %319 = call float @dx.op.tertiary.f32(i32 46, float %296, float %308, float %318)  ; FMad(a,b,c)
  %320 = fadd fast float %319, %313
  %321 = fmul fast float %299, %267
  %322 = call float @dx.op.tertiary.f32(i32 46, float %269, float %304, float %321)  ; FMad(a,b,c)
  %323 = call float @dx.op.tertiary.f32(i32 46, float %296, float %309, float %322)  ; FMad(a,b,c)
  %324 = fadd fast float %323, %314
  %325 = fmul fast float %300, %267
  %326 = call float @dx.op.tertiary.f32(i32 46, float %269, float %305, float %325)  ; FMad(a,b,c)
  %327 = call float @dx.op.tertiary.f32(i32 46, float %296, float %310, float %326)  ; FMad(a,b,c)
  %328 = fadd fast float %327, %315
  %329 = fmul fast float %301, %267
  %330 = call float @dx.op.tertiary.f32(i32 46, float %269, float %306, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %296, float %311, float %330)  ; FMad(a,b,c)
  %332 = fadd fast float %331, %316
  %333 = fdiv fast float %320, %332
  %334 = fdiv fast float %324, %332
  %335 = fdiv fast float %328, %332
  %336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %337 = extractvalue %dx.types.CBufRet.f32 %336, 0
  %338 = extractvalue %dx.types.CBufRet.f32 %336, 1
  %339 = extractvalue %dx.types.CBufRet.f32 %336, 2
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = fmul fast float %337, 2.097152e+06
  %345 = fmul fast float %338, 2.097152e+06
  %346 = fmul fast float %339, 2.097152e+06
  %347 = fadd fast float %344, %333
  %348 = fsub fast float %347, %341
  %349 = fadd fast float %345, %334
  %350 = fsub fast float %349, %342
  %351 = fadd fast float %346, %335
  %352 = fsub fast float %351, %343
  %353 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %354 = extractvalue %dx.types.CBufRet.f32 %353, 0
  %355 = extractvalue %dx.types.CBufRet.f32 %353, 1
  %356 = extractvalue %dx.types.CBufRet.f32 %353, 2
  %357 = fsub fast float %333, %354
  %358 = fsub fast float %334, %355
  %359 = fsub fast float %335, %356
  %360 = fmul fast float %357, %357
  %361 = fmul fast float %358, %358
  %362 = fadd fast float %360, %361
  %363 = fmul fast float %359, %359
  %364 = fadd fast float %362, %363
  %365 = call float @dx.op.unary.f32(i32 24, float %364)  ; Sqrt(value)
  %366 = fdiv fast float %357, %365
  %367 = fdiv fast float %358, %365
  %368 = fdiv fast float %359, %365
  %369 = icmp eq i32 %41, 0
  br i1 %369, label %370, label %372, !dx.controlflow.hints !46

; <label>:370                                     ; preds = %295
  %371 = extractvalue %dx.types.CBufRet.f32 %250, 1
  br label %565

; <label>:372                                     ; preds = %295
  %373 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %374 = extractvalue %dx.types.CBufRet.f32 %373, 2
  %375 = fcmp fast ogt float %374, 0.000000e+00
  br i1 %375, label %376, label %498

; <label>:376                                     ; preds = %372
  %377 = icmp eq i32 %71, 0
  br i1 %377, label %413, label %378, !dx.controlflow.hints !47

; <label>:378                                     ; preds = %376
  %379 = fmul fast float %333, %73
  %380 = call float @dx.op.tertiary.f32(i32 46, float %334, float %78, float %379)  ; FMad(a,b,c)
  %381 = call float @dx.op.tertiary.f32(i32 46, float %335, float %83, float %380)  ; FMad(a,b,c)
  %382 = fadd fast float %381, %88
  %383 = fmul fast float %333, %74
  %384 = call float @dx.op.tertiary.f32(i32 46, float %334, float %79, float %383)  ; FMad(a,b,c)
  %385 = call float @dx.op.tertiary.f32(i32 46, float %335, float %84, float %384)  ; FMad(a,b,c)
  %386 = fadd fast float %385, %89
  %387 = fmul fast float %333, %76
  %388 = call float @dx.op.tertiary.f32(i32 46, float %334, float %81, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %335, float %86, float %388)  ; FMad(a,b,c)
  %390 = fadd fast float %389, %91
  %391 = fdiv fast float %382, %390
  %392 = fdiv fast float %386, %390
  %393 = fcmp fast ole float %391, 1.000000e+00
  %394 = fcmp fast ole float %392, 1.000000e+00
  %395 = fcmp fast oge float %391, 0.000000e+00
  %396 = fcmp fast oge float %392, 0.000000e+00
  %397 = and i1 %395, %393
  %398 = and i1 %396, %394
  %399 = and i1 %397, %398
  br i1 %399, label %400, label %413

; <label>:400                                     ; preds = %378
  %401 = fmul fast float %333, %75
  %402 = call float @dx.op.tertiary.f32(i32 46, float %334, float %80, float %401)  ; FMad(a,b,c)
  %403 = call float @dx.op.tertiary.f32(i32 46, float %335, float %85, float %402)  ; FMad(a,b,c)
  %404 = fadd fast float %403, %90
  %405 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %406 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %407 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %405, %dx.types.Handle %406, float %391, float %392, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %408 = extractvalue %dx.types.ResRet.f32 %407, 0
  %409 = fcmp fast olt float %404, %408
  %410 = fcmp fast ogt float %408, 0x3FEFAE1480000000
  %411 = or i1 %409, %410
  %412 = uitofp i1 %411 to float
  br label %413

; <label>:413                                     ; preds = %400, %378, %376
  %414 = phi float [ %412, %400 ], [ 1.000000e+00, %378 ], [ 1.000000e+00, %376 ]
  %415 = icmp eq i32 %62, 0
  br i1 %415, label %495, label %416

; <label>:416                                     ; preds = %413
  %417 = fcmp fast oge float %278, %64
  %418 = fcmp fast oge float %278, %65
  %419 = fcmp fast oge float %278, %66
  %420 = fcmp fast oge float %278, %67
  %421 = zext i1 %417 to i32
  %422 = zext i1 %418 to i32
  %423 = zext i1 %419 to i32
  %424 = zext i1 %420 to i32
  %425 = add nuw nsw i32 %421, %422
  %426 = add nuw nsw i32 %425, %423
  %427 = add nuw nsw i32 %426, %424
  %428 = icmp ult i32 %427, %62
  br i1 %428, label %429, label %495

; <label>:429                                     ; preds = %416
  %430 = shl nuw nsw i32 %427, 2
  %431 = add nuw nsw i32 %430, 9
  %432 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 %431)  ; CBufferLoadLegacy(handle,regIndex)
  %433 = extractvalue %dx.types.CBufRet.f32 %432, 0
  %434 = extractvalue %dx.types.CBufRet.f32 %432, 1
  %435 = extractvalue %dx.types.CBufRet.f32 %432, 3
  %436 = add nuw nsw i32 %430, 10
  %437 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 %436)  ; CBufferLoadLegacy(handle,regIndex)
  %438 = extractvalue %dx.types.CBufRet.f32 %437, 0
  %439 = extractvalue %dx.types.CBufRet.f32 %437, 1
  %440 = extractvalue %dx.types.CBufRet.f32 %437, 3
  %441 = add nuw nsw i32 %430, 11
  %442 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 %441)  ; CBufferLoadLegacy(handle,regIndex)
  %443 = extractvalue %dx.types.CBufRet.f32 %442, 0
  %444 = extractvalue %dx.types.CBufRet.f32 %442, 1
  %445 = extractvalue %dx.types.CBufRet.f32 %442, 3
  %446 = add nuw nsw i32 %430, 12
  %447 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 %446)  ; CBufferLoadLegacy(handle,regIndex)
  %448 = extractvalue %dx.types.CBufRet.f32 %447, 0
  %449 = extractvalue %dx.types.CBufRet.f32 %447, 1
  %450 = extractvalue %dx.types.CBufRet.f32 %447, 3
  %451 = fmul fast float %433, %333
  %452 = call float @dx.op.tertiary.f32(i32 46, float %334, float %438, float %451)  ; FMad(a,b,c)
  %453 = call float @dx.op.tertiary.f32(i32 46, float %335, float %443, float %452)  ; FMad(a,b,c)
  %454 = fadd fast float %453, %448
  %455 = fmul fast float %434, %333
  %456 = call float @dx.op.tertiary.f32(i32 46, float %334, float %439, float %455)  ; FMad(a,b,c)
  %457 = call float @dx.op.tertiary.f32(i32 46, float %335, float %444, float %456)  ; FMad(a,b,c)
  %458 = fadd fast float %457, %449
  %459 = fmul fast float %435, %333
  %460 = call float @dx.op.tertiary.f32(i32 46, float %334, float %440, float %459)  ; FMad(a,b,c)
  %461 = call float @dx.op.tertiary.f32(i32 46, float %335, float %445, float %460)  ; FMad(a,b,c)
  %462 = fadd fast float %461, %450
  %463 = fdiv fast float %454, %462
  %464 = fdiv fast float %458, %462
  %465 = add nuw nsw i32 %427, 25
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 %465)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 0
  %468 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %469 = extractvalue %dx.types.CBufRet.f32 %466, 2
  %470 = extractvalue %dx.types.CBufRet.f32 %466, 3
  %471 = fcmp fast ole float %463, %469
  %472 = fcmp fast ole float %464, %470
  %473 = fcmp fast oge float %463, %467
  %474 = fcmp fast oge float %464, %468
  %475 = and i1 %473, %471
  %476 = and i1 %474, %472
  %477 = and i1 %475, %476
  br i1 %477, label %478, label %495

; <label>:478                                     ; preds = %429
  %479 = extractvalue %dx.types.CBufRet.f32 %447, 2
  %480 = extractvalue %dx.types.CBufRet.f32 %442, 2
  %481 = extractvalue %dx.types.CBufRet.f32 %437, 2
  %482 = extractvalue %dx.types.CBufRet.f32 %432, 2
  %483 = fmul fast float %482, %333
  %484 = call float @dx.op.tertiary.f32(i32 46, float %334, float %481, float %483)  ; FMad(a,b,c)
  %485 = call float @dx.op.tertiary.f32(i32 46, float %335, float %480, float %484)  ; FMad(a,b,c)
  %486 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %487 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %488 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %486, %dx.types.Handle %487, float %463, float %464, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %489 = extractvalue %dx.types.ResRet.f32 %488, 0
  %490 = fsub fast float 1.000000e+00, %479
  %491 = fsub fast float %490, %485
  %492 = fsub fast float %489, %69
  %493 = fcmp fast olt float %491, %492
  %494 = uitofp i1 %493 to float
  br label %495

; <label>:495                                     ; preds = %478, %429, %416, %413
  %496 = phi float [ %494, %478 ], [ 1.000000e+00, %429 ], [ 1.000000e+00, %416 ], [ 1.000000e+00, %413 ]
  %497 = fmul fast float %496, %414
  br label %498

; <label>:498                                     ; preds = %495, %372
  %499 = phi float [ %497, %495 ], [ 1.000000e+00, %372 ]
  %500 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %501 = extractvalue %dx.types.CBufRet.f32 %500, 0
  %502 = extractvalue %dx.types.CBufRet.f32 %500, 1
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 0
  %505 = extractvalue %dx.types.CBufRet.f32 %503, 1
  %506 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %507 = extractvalue %dx.types.CBufRet.f32 %506, 0
  %508 = extractvalue %dx.types.CBufRet.f32 %506, 1
  %509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %510 = extractvalue %dx.types.CBufRet.f32 %509, 0
  %511 = extractvalue %dx.types.CBufRet.f32 %509, 1
  %512 = fmul fast float %501, %333
  %513 = call float @dx.op.tertiary.f32(i32 46, float %334, float %504, float %512)  ; FMad(a,b,c)
  %514 = call float @dx.op.tertiary.f32(i32 46, float %335, float %507, float %513)  ; FMad(a,b,c)
  %515 = fadd fast float %514, %510
  %516 = fmul fast float %502, %333
  %517 = call float @dx.op.tertiary.f32(i32 46, float %334, float %505, float %516)  ; FMad(a,b,c)
  %518 = call float @dx.op.tertiary.f32(i32 46, float %335, float %508, float %517)  ; FMad(a,b,c)
  %519 = fadd fast float %518, %511
  %520 = fmul fast float %515, 5.000000e-01
  %521 = fmul fast float %519, 5.000000e-01
  %522 = fadd fast float %520, 5.000000e-01
  %523 = fsub fast float 5.000000e-01, %521
  %524 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %525 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %526 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %524, %dx.types.Handle %525, float %522, float %523, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %527 = extractvalue %dx.types.ResRet.f32 %526, 0
  %528 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %529 = extractvalue %dx.types.CBufRet.f32 %528, 2
  %530 = fcmp fast ogt float %529, 0.000000e+00
  br i1 %530, label %531, label %540

; <label>:531                                     ; preds = %498
  %532 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %31, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %533 = extractvalue %dx.types.CBufRet.f32 %532, 0
  %534 = extractvalue %dx.types.CBufRet.f32 %532, 1
  %535 = extractvalue %dx.types.CBufRet.f32 %532, 2
  %536 = call float @dx.op.dot3.f32(i32 55, float %57, float %58, float %59, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %537 = fmul fast float %533, %536
  %538 = fmul fast float %534, %536
  %539 = fmul fast float %535, %536
  br label %540

; <label>:540                                     ; preds = %531, %498
  %541 = phi float [ %537, %531 ], [ %57, %498 ]
  %542 = phi float [ %538, %531 ], [ %58, %498 ]
  %543 = phi float [ %539, %531 ], [ %59, %498 ]
  %544 = fsub fast float -0.000000e+00, %366
  %545 = fsub fast float -0.000000e+00, %367
  %546 = fsub fast float -0.000000e+00, %368
  %547 = call float @dx.op.dot3.f32(i32 55, float %53, float %54, float %55, float %544, float %545, float %546)  ; Dot3(ax,ay,az,bx,by,bz)
  %548 = extractvalue %dx.types.CBufRet.f32 %250, 1
  %549 = fmul fast float %548, %548
  %550 = fsub fast float 1.000000e+00, %549
  %551 = fmul fast float %547, 2.000000e+00
  %552 = fadd fast float %551, %548
  %553 = fmul fast float %552, %548
  %554 = fadd fast float %553, 1.000000e+00
  %555 = call float @dx.op.unary.f32(i32 24, float %554)  ; Sqrt(value)
  %556 = fmul fast float %555, 0x402921FB60000000
  %557 = fmul fast float %556, %554
  %558 = fdiv fast float %550, %557
  %559 = fmul fast float %499, %60
  %560 = fmul fast float %559, %527
  %561 = fmul fast float %560, %558
  %562 = fmul fast float %561, %541
  %563 = fmul fast float %561, %542
  %564 = fmul fast float %561, %543
  br label %565

; <label>:565                                     ; preds = %540, %370
  %566 = phi float [ %371, %370 ], [ %548, %540 ]
  %567 = phi float [ 0.000000e+00, %370 ], [ %562, %540 ]
  %568 = phi float [ 0.000000e+00, %370 ], [ %563, %540 ]
  %569 = phi float [ 0.000000e+00, %370 ], [ %564, %540 ]
  %570 = fmul fast float %566, %367
  %571 = fmul fast float %566, %368
  %572 = fmul fast float %566, %366
  %573 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.f32 %573, 3
  %575 = fcmp fast ogt float %574, 0.000000e+00
  %576 = extractvalue %dx.types.CBufRet.f32 %573, 2
  %577 = fcmp fast ogt float %576, 0.000000e+00
  %578 = or i1 %575, %577
  br i1 %578, label %579, label %647

; <label>:579                                     ; preds = %565
  %580 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %581 = extractvalue %dx.types.CBufRet.f32 %580, 0
  %582 = extractvalue %dx.types.CBufRet.f32 %580, 1
  %583 = extractvalue %dx.types.CBufRet.f32 %580, 2
  %584 = fmul fast float %581, %348
  %585 = fmul fast float %582, %350
  %586 = fmul fast float %583, %352
  %587 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %588 = extractvalue %dx.types.CBufRet.f32 %587, 0
  %589 = extractvalue %dx.types.CBufRet.f32 %587, 1
  %590 = extractvalue %dx.types.CBufRet.f32 %587, 2
  %591 = fadd fast float %584, %588
  %592 = fadd fast float %585, %589
  %593 = fadd fast float %586, %590
  %594 = call float @dx.op.binary.f32(i32 35, float %591, float 0.000000e+00)  ; FMax(a,b)
  %595 = call float @dx.op.binary.f32(i32 35, float %592, float 0.000000e+00)  ; FMax(a,b)
  %596 = call float @dx.op.binary.f32(i32 35, float %593, float 0.000000e+00)  ; FMax(a,b)
  %597 = call float @dx.op.binary.f32(i32 36, float %594, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %598 = call float @dx.op.binary.f32(i32 36, float %595, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %599 = call float @dx.op.binary.f32(i32 36, float %596, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = extractvalue %dx.types.CBufRet.f32 %600, 1
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 2
  %604 = fmul fast float %601, %597
  %605 = fmul fast float %602, %598
  %606 = fmul fast float %603, %599
  %607 = fptosi float %604 to i32
  %608 = fptosi float %605 to i32
  %609 = fptosi float %606 to i32
  %610 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %611 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %610, i32 0, i32 %607, i32 %608, i32 %609, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %612 = extractvalue %dx.types.ResRet.i32 %611, 0
  %613 = extractvalue %dx.types.ResRet.i32 %611, 1
  %614 = extractvalue %dx.types.ResRet.i32 %611, 2
  %615 = extractvalue %dx.types.ResRet.i32 %611, 3
  %616 = uitofp i32 %612 to float
  %617 = uitofp i32 %613 to float
  %618 = uitofp i32 %614 to float
  %619 = uitofp i32 %615 to float
  %620 = extractvalue %dx.types.CBufRet.f32 %600, 3
  %621 = fadd fast float %620, 1.000000e+00
  %622 = fmul fast float %621, %616
  %623 = fmul fast float %621, %617
  %624 = fmul fast float %621, %618
  %625 = fdiv fast float %604, %619
  %626 = fdiv fast float %605, %619
  %627 = fdiv fast float %606, %619
  %628 = call float @dx.op.unary.f32(i32 22, float %625)  ; Frc(value)
  %629 = call float @dx.op.unary.f32(i32 22, float %626)  ; Frc(value)
  %630 = call float @dx.op.unary.f32(i32 22, float %627)  ; Frc(value)
  %631 = fmul fast float %620, %628
  %632 = fmul fast float %620, %629
  %633 = fmul fast float %620, %630
  %634 = fadd fast float %622, 5.000000e-01
  %635 = fadd fast float %634, %631
  %636 = fadd fast float %623, 5.000000e-01
  %637 = fadd fast float %636, %632
  %638 = fadd fast float %624, 5.000000e-01
  %639 = fadd fast float %638, %633
  %640 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.f32 %640, 0
  %642 = extractvalue %dx.types.CBufRet.f32 %640, 1
  %643 = extractvalue %dx.types.CBufRet.f32 %640, 2
  %644 = fmul fast float %635, %641
  %645 = fmul fast float %637, %642
  %646 = fmul fast float %639, %643
  br label %647

; <label>:647                                     ; preds = %579, %565
  %648 = phi float [ %644, %579 ], [ 0.000000e+00, %565 ]
  %649 = phi float [ %645, %579 ], [ 0.000000e+00, %565 ]
  %650 = phi float [ %646, %579 ], [ 0.000000e+00, %565 ]
  br i1 %575, label %651, label %799

; <label>:651                                     ; preds = %647
  %652 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %653 = extractvalue %dx.types.CBufRet.f32 %652, 3
  %654 = fcmp fast ogt float %653, 0.000000e+00
  br i1 %654, label %655, label %733

; <label>:655                                     ; preds = %651
  %656 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %657 = extractvalue %dx.types.CBufRet.f32 %656, 0
  %658 = extractvalue %dx.types.CBufRet.f32 %656, 1
  %659 = extractvalue %dx.types.CBufRet.f32 %656, 2
  %660 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %661 = extractvalue %dx.types.CBufRet.f32 %660, 2
  %662 = fcmp fast ogt float %661, 0.000000e+00
  br i1 %662, label %663, label %699, !dx.controlflow.hints !48

; <label>:663                                     ; preds = %655
  %664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %665 = extractvalue %dx.types.CBufRet.f32 %664, 0
  %666 = fmul fast float %665, %365
  %667 = extractvalue %dx.types.CBufRet.f32 %664, 1
  %668 = fadd fast float %666, %667
  %669 = call float @dx.op.unary.f32(i32 7, float %668)  ; Saturate(value)
  %670 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %671 = extractvalue %dx.types.CBufRet.f32 %670, 1
  %672 = extractvalue %dx.types.CBufRet.f32 %670, 0
  %673 = fsub fast float -0.000000e+00, %672
  %674 = call float @dx.op.dot2.f32(i32 54, float %366, float %367, float %671, float %673)  ; Dot2(ax,ay,bx,by)
  %675 = call float @dx.op.dot2.f32(i32 54, float %366, float %367, float %672, float %671)  ; Dot2(ax,ay,bx,by)
  %676 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %677 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %678 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %676, %dx.types.Handle %677, float %674, float %675, float %368, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %679 = extractvalue %dx.types.ResRet.f32 %678, 0
  %680 = extractvalue %dx.types.ResRet.f32 %678, 1
  %681 = extractvalue %dx.types.ResRet.f32 %678, 2
  %682 = extractvalue %dx.types.CBufRet.f32 %664, 2
  %683 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %676, %dx.types.Handle %677, float %674, float %675, float %368, float undef, i32 undef, i32 undef, i32 undef, float %682)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %684 = extractvalue %dx.types.ResRet.f32 %683, 0
  %685 = extractvalue %dx.types.ResRet.f32 %683, 1
  %686 = extractvalue %dx.types.ResRet.f32 %683, 2
  %687 = fsub fast float %679, %684
  %688 = fsub fast float %680, %685
  %689 = fsub fast float %681, %686
  %690 = fmul fast float %687, %669
  %691 = fmul fast float %688, %669
  %692 = fmul fast float %689, %669
  %693 = fadd fast float %690, %684
  %694 = fadd fast float %691, %685
  %695 = fadd fast float %692, %686
  %696 = fmul fast float %693, %657
  %697 = fmul fast float %694, %658
  %698 = fmul fast float %695, %659
  br label %699

; <label>:699                                     ; preds = %663, %655
  %700 = phi float [ %696, %663 ], [ %657, %655 ]
  %701 = phi float [ %697, %663 ], [ %658, %655 ]
  %702 = phi float [ %698, %663 ], [ %659, %655 ]
  %703 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %704 = extractvalue %dx.types.CBufRet.f32 %703, 0
  %705 = extractvalue %dx.types.CBufRet.f32 %703, 1
  %706 = extractvalue %dx.types.CBufRet.f32 %703, 2
  %707 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %708 = extractvalue %dx.types.CBufRet.f32 %707, 1
  %709 = fmul fast float %708, %704
  %710 = fmul fast float %708, %705
  %711 = fmul fast float %708, %706
  %712 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %713 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %714 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %712, %dx.types.Handle %713, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %715 = extractvalue %dx.types.ResRet.f32 %714, 0
  %716 = extractvalue %dx.types.ResRet.f32 %714, 1
  %717 = extractvalue %dx.types.ResRet.f32 %714, 2
  %718 = fmul fast float %709, %715
  %719 = fmul fast float %710, %716
  %720 = fmul fast float %711, %717
  %721 = fadd fast float %718, %700
  %722 = fadd fast float %719, %701
  %723 = fadd fast float %720, %702
  %724 = fmul fast float %721, 0x3FD20DD740000000
  %725 = fmul fast float %722, 0x3FD20DD740000000
  %726 = fmul fast float %723, 0x3FD20DD740000000
  %727 = call float @dx.op.dot4.f32(i32 56, float %724, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %728 = call float @dx.op.dot4.f32(i32 56, float %725, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %729 = call float @dx.op.dot4.f32(i32 56, float %726, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %730 = call float @dx.op.binary.f32(i32 35, float %727, float 0.000000e+00)  ; FMax(a,b)
  %731 = call float @dx.op.binary.f32(i32 35, float %728, float 0.000000e+00)  ; FMax(a,b)
  %732 = call float @dx.op.binary.f32(i32 35, float %729, float 0.000000e+00)  ; FMax(a,b)
  br label %765

; <label>:733                                     ; preds = %651
  %734 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %735 = extractvalue %dx.types.CBufRet.f32 %734, 0
  %736 = extractvalue %dx.types.CBufRet.f32 %734, 1
  %737 = extractvalue %dx.types.CBufRet.f32 %734, 2
  %738 = extractvalue %dx.types.CBufRet.f32 %734, 3
  %739 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %740 = extractvalue %dx.types.CBufRet.f32 %739, 0
  %741 = extractvalue %dx.types.CBufRet.f32 %739, 1
  %742 = extractvalue %dx.types.CBufRet.f32 %739, 2
  %743 = extractvalue %dx.types.CBufRet.f32 %739, 3
  %744 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %745 = extractvalue %dx.types.CBufRet.f32 %744, 0
  %746 = extractvalue %dx.types.CBufRet.f32 %744, 1
  %747 = extractvalue %dx.types.CBufRet.f32 %744, 2
  %748 = extractvalue %dx.types.CBufRet.f32 %744, 3
  %749 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %750 = extractvalue %dx.types.CBufRet.f32 %749, 0
  %751 = extractvalue %dx.types.CBufRet.f32 %749, 1
  %752 = extractvalue %dx.types.CBufRet.f32 %749, 2
  %753 = call float @dx.op.dot4.f32(i32 56, float %735, float %736, float %737, float %738, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %754 = call float @dx.op.dot4.f32(i32 56, float %740, float %741, float %742, float %743, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %755 = call float @dx.op.dot4.f32(i32 56, float %745, float %746, float %747, float %748, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %756 = call float @dx.op.binary.f32(i32 35, float %753, float 0.000000e+00)  ; FMax(a,b)
  %757 = call float @dx.op.binary.f32(i32 35, float %754, float 0.000000e+00)  ; FMax(a,b)
  %758 = call float @dx.op.binary.f32(i32 35, float %755, float 0.000000e+00)  ; FMax(a,b)
  %759 = fmul fast float %750, 0x3FD45F3060000000
  %760 = fmul fast float %759, %756
  %761 = fmul fast float %751, 0x3FD45F3060000000
  %762 = fmul fast float %761, %757
  %763 = fmul fast float %752, 0x3FD45F3060000000
  %764 = fmul fast float %763, %758
  br label %765

; <label>:765                                     ; preds = %733, %699
  %766 = phi float [ %730, %699 ], [ %760, %733 ]
  %767 = phi float [ %731, %699 ], [ %762, %733 ]
  %768 = phi float [ %732, %699 ], [ %764, %733 ]
  %769 = extractvalue %dx.types.CBufRet.f32 %250, 0
  %770 = fcmp fast ogt float %769, 0.000000e+00
  br i1 %770, label %771, label %790

; <label>:771                                     ; preds = %765
  %772 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %773 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %774 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %772, %dx.types.Handle %773, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %775 = extractvalue %dx.types.ResRet.f32 %774, 0
  %776 = extractvalue %dx.types.ResRet.f32 %774, 1
  %777 = extractvalue %dx.types.ResRet.f32 %774, 2
  %778 = fmul fast float %775, 2.000000e+00
  %779 = fmul fast float %776, 2.000000e+00
  %780 = fmul fast float %777, 2.000000e+00
  %781 = fadd fast float %778, -1.000000e+00
  %782 = fadd fast float %779, -1.000000e+00
  %783 = fadd fast float %780, -1.000000e+00
  %784 = fmul fast float %781, %781
  %785 = fmul fast float %782, %782
  %786 = fadd fast float %784, %785
  %787 = fmul fast float %783, %783
  %788 = fadd fast float %786, %787
  %789 = call float @dx.op.unary.f32(i32 24, float %788)  ; Sqrt(value)
  br label %790

; <label>:790                                     ; preds = %771, %765
  %791 = phi float [ %789, %771 ], [ 1.000000e+00, %765 ]
  %792 = fmul fast float %574, %791
  %793 = fmul fast float %792, %766
  %794 = fmul fast float %792, %767
  %795 = fmul fast float %792, %768
  %796 = fadd fast float %793, %567
  %797 = fadd fast float %794, %568
  %798 = fadd fast float %795, %569
  br label %799

; <label>:799                                     ; preds = %790, %647
  %800 = phi float [ %796, %790 ], [ %567, %647 ]
  %801 = phi float [ %797, %790 ], [ %568, %647 ]
  %802 = phi float [ %798, %790 ], [ %569, %647 ]
  %803 = extractvalue %dx.types.CBufRet.f32 %573, 2
  %804 = fcmp fast ogt float %803, 0.000000e+00
  br i1 %804, label %805, label %870

; <label>:805                                     ; preds = %799
  %806 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %807 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %808 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %806, %dx.types.Handle %807, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %809 = extractvalue %dx.types.ResRet.f32 %808, 0
  %810 = extractvalue %dx.types.ResRet.f32 %808, 1
  %811 = extractvalue %dx.types.ResRet.f32 %808, 2
  %812 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %813 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %812, %dx.types.Handle %807, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %814 = extractvalue %dx.types.ResRet.f32 %813, 0
  %815 = extractvalue %dx.types.ResRet.f32 %813, 1
  %816 = extractvalue %dx.types.ResRet.f32 %813, 2
  %817 = fmul fast float %814, 2.000000e+00
  %818 = fmul fast float %815, 2.000000e+00
  %819 = fmul fast float %816, 2.000000e+00
  %820 = fadd fast float %817, -1.000000e+00
  %821 = fadd fast float %818, -1.000000e+00
  %822 = fadd fast float %819, -1.000000e+00
  %823 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %824 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %823, %dx.types.Handle %807, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %825 = extractvalue %dx.types.ResRet.f32 %824, 0
  %826 = extractvalue %dx.types.ResRet.f32 %824, 1
  %827 = extractvalue %dx.types.ResRet.f32 %824, 2
  %828 = fmul fast float %825, 2.000000e+00
  %829 = fmul fast float %826, 2.000000e+00
  %830 = fmul fast float %827, 2.000000e+00
  %831 = fadd fast float %828, -1.000000e+00
  %832 = fadd fast float %829, -1.000000e+00
  %833 = fadd fast float %830, -1.000000e+00
  %834 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %835 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %834, %dx.types.Handle %807, float %648, float %649, float %650, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %836 = extractvalue %dx.types.ResRet.f32 %835, 0
  %837 = extractvalue %dx.types.ResRet.f32 %835, 1
  %838 = extractvalue %dx.types.ResRet.f32 %835, 2
  %839 = fmul fast float %836, 2.000000e+00
  %840 = fmul fast float %837, 2.000000e+00
  %841 = fmul fast float %838, 2.000000e+00
  %842 = fadd fast float %839, -1.000000e+00
  %843 = fadd fast float %840, -1.000000e+00
  %844 = fadd fast float %841, -1.000000e+00
  %845 = fmul fast float %809, 0x3FFBB67B80000000
  %846 = fmul fast float %845, %820
  %847 = fmul fast float %845, %821
  %848 = fmul fast float %845, %822
  %849 = fmul fast float %810, 0x3FFBB67B80000000
  %850 = fmul fast float %849, %831
  %851 = fmul fast float %849, %832
  %852 = fmul fast float %849, %833
  %853 = fmul fast float %811, 0x3FFBB67B80000000
  %854 = fmul fast float %853, %842
  %855 = fmul fast float %853, %843
  %856 = fmul fast float %853, %844
  %857 = fmul fast float %803, 0x3FD45F3060000000
  %858 = call float @dx.op.dot4.f32(i32 56, float %809, float %846, float %847, float %848, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %859 = call float @dx.op.dot4.f32(i32 56, float %810, float %850, float %851, float %852, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %860 = call float @dx.op.dot4.f32(i32 56, float %811, float %854, float %855, float %856, float 1.000000e+00, float %570, float %571, float %572)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %861 = call float @dx.op.binary.f32(i32 35, float %858, float 0.000000e+00)  ; FMax(a,b)
  %862 = call float @dx.op.binary.f32(i32 35, float %859, float 0.000000e+00)  ; FMax(a,b)
  %863 = call float @dx.op.binary.f32(i32 35, float %860, float 0.000000e+00)  ; FMax(a,b)
  %864 = fmul fast float %861, %857
  %865 = fmul fast float %862, %857
  %866 = fmul fast float %863, %857
  %867 = fadd fast float %864, %800
  %868 = fadd fast float %865, %801
  %869 = fadd fast float %866, %802
  br label %870

; <label>:870                                     ; preds = %805, %799
  %871 = phi float [ %867, %805 ], [ %800, %799 ]
  %872 = phi float [ %868, %805 ], [ %801, %799 ]
  %873 = phi float [ %869, %805 ], [ %802, %799 ]
  %874 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %875 = extractvalue %dx.types.CBufRet.i32 %874, 0
  %876 = extractvalue %dx.types.CBufRet.i32 %874, 1
  %877 = mul i32 %875, %36
  %878 = mul i32 %876, %37
  %879 = fmul fast float %278, %49
  %880 = fadd fast float %879, %50
  %881 = call float @dx.op.unary.f32(i32 23, float %880)  ; Log(value)
  %882 = fmul fast float %881, %51
  %883 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %882)  ; FMax(a,b)
  %884 = fptoui float %883 to i32
  %885 = add nsw i32 %45, -1
  %886 = call i32 @dx.op.binary.i32(i32 40, i32 %884, i32 %885)  ; UMin(a,b)
  %887 = and i32 %47, 31
  %888 = lshr i32 %877, %887
  %889 = lshr i32 %878, %887
  %890 = mul i32 %886, %44
  %891 = add i32 %890, %889
  %892 = mul i32 %891, %43
  %893 = add i32 %892, %888
  %894 = shl i32 %893, 1
  %895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %896 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %895, i32 %894, i32 undef)  ; BufferLoad(srv,index,wot)
  %897 = extractvalue %dx.types.ResRet.i32 %896, 0
  %898 = call i32 @dx.op.binary.i32(i32 40, i32 %897, i32 %40)  ; UMin(a,b)
  %899 = or i32 %894, 1
  %900 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %895, i32 %899, i32 undef)  ; BufferLoad(srv,index,wot)
  %901 = extractvalue %dx.types.ResRet.i32 %900, 0
  %902 = add i32 %36, 1
  %903 = add i32 %37, 1
  %904 = add i32 %38, 1
  %905 = uitofp i32 %902 to float
  %906 = uitofp i32 %903 to float
  %907 = fadd fast float %255, %905
  %908 = fadd fast float %256, %906
  %909 = fdiv fast float %907, %261
  %910 = fdiv fast float %908, %262
  %911 = fmul fast float %909, 2.000000e+00
  %912 = fmul fast float %910, 2.000000e+00
  %913 = fadd fast float %911, -1.000000e+00
  %914 = fadd fast float %912, -1.000000e+00
  %915 = fsub fast float -0.000000e+00, %914
  %916 = uitofp i32 %904 to float
  %917 = fadd fast float %257, %916
  %918 = fdiv fast float %917, %272
  %919 = call float @dx.op.unary.f32(i32 21, float %918)  ; Exp(value)
  %920 = fsub fast float %919, %275
  %921 = fdiv fast float %920, %277
  br i1 %281, label %928, label %922, !dx.controlflow.hints !45

; <label>:922                                     ; preds = %870
  %923 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %924 = extractvalue %dx.types.CBufRet.f32 %923, 2
  %925 = fmul fast float %924, %921
  %926 = extractvalue %dx.types.CBufRet.f32 %279, 2
  %927 = fadd fast float %925, %926
  br label %935

; <label>:928                                     ; preds = %870
  %929 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %930 = extractvalue %dx.types.CBufRet.f32 %929, 3
  %931 = fadd fast float %930, %921
  %932 = extractvalue %dx.types.CBufRet.f32 %929, 2
  %933 = fmul fast float %931, %932
  %934 = fdiv fast float 1.000000e+00, %933
  br label %935

; <label>:935                                     ; preds = %928, %922
  %936 = phi float [ %927, %922 ], [ %934, %928 ]
  %937 = fmul fast float %298, %913
  %938 = call float @dx.op.tertiary.f32(i32 46, float %915, float %303, float %937)  ; FMad(a,b,c)
  %939 = call float @dx.op.tertiary.f32(i32 46, float %936, float %308, float %938)  ; FMad(a,b,c)
  %940 = fadd fast float %939, %313
  %941 = fmul fast float %299, %913
  %942 = call float @dx.op.tertiary.f32(i32 46, float %915, float %304, float %941)  ; FMad(a,b,c)
  %943 = call float @dx.op.tertiary.f32(i32 46, float %936, float %309, float %942)  ; FMad(a,b,c)
  %944 = fadd fast float %943, %314
  %945 = fmul fast float %300, %913
  %946 = call float @dx.op.tertiary.f32(i32 46, float %915, float %305, float %945)  ; FMad(a,b,c)
  %947 = call float @dx.op.tertiary.f32(i32 46, float %936, float %310, float %946)  ; FMad(a,b,c)
  %948 = fadd fast float %947, %315
  %949 = fmul fast float %301, %913
  %950 = call float @dx.op.tertiary.f32(i32 46, float %915, float %306, float %949)  ; FMad(a,b,c)
  %951 = call float @dx.op.tertiary.f32(i32 46, float %936, float %311, float %950)  ; FMad(a,b,c)
  %952 = fadd fast float %951, %316
  %953 = fdiv fast float %940, %952
  %954 = fdiv fast float %944, %952
  %955 = fdiv fast float %948, %952
  %956 = fsub fast float %333, %953
  %957 = fsub fast float %334, %954
  %958 = fsub fast float %335, %955
  %959 = fmul fast float %956, %956
  %960 = fmul fast float %957, %957
  %961 = fadd fast float %960, %959
  %962 = fmul fast float %958, %958
  %963 = fadd fast float %961, %962
  %964 = call float @dx.op.unary.f32(i32 24, float %963)  ; Sqrt(value)
  %965 = extractvalue %dx.types.CBufRet.f32 %250, 2
  %966 = fmul fast float %965, %964
  %967 = call float @dx.op.binary.f32(i32 35, float %966, float 1.000000e+00)  ; FMax(a,b)
  %968 = fmul fast float %967, %967
  %969 = icmp eq i32 %898, 0
  br i1 %969, label %1379, label %970

; <label>:970                                     ; preds = %935
  br label %971

; <label>:971                                     ; preds = %1372, %970
  %972 = phi float [ %1373, %1372 ], [ %871, %970 ]
  %973 = phi float [ %1374, %1372 ], [ %872, %970 ]
  %974 = phi float [ %1375, %1372 ], [ %873, %970 ]
  %975 = phi i32 [ %1376, %1372 ], [ 0, %970 ]
  %976 = add i32 %975, %901
  %977 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %978 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %977, i32 %976, i32 undef)  ; BufferLoad(srv,index,wot)
  %979 = extractvalue %dx.types.ResRet.i32 %978, 0
  %980 = mul i32 %979, 6
  %981 = add i32 %980, 4
  %982 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %983 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %981, i32 undef)  ; BufferLoad(srv,index,wot)
  %984 = extractvalue %dx.types.ResRet.f32 %983, 0
  %985 = extractvalue %dx.types.ResRet.f32 %983, 1
  %986 = extractvalue %dx.types.ResRet.f32 %983, 2
  %987 = add i32 %980, 3
  %988 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %987, i32 undef)  ; BufferLoad(srv,index,wot)
  %989 = extractvalue %dx.types.ResRet.f32 %988, 3
  %990 = add i32 %980, 2
  %991 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %990, i32 undef)  ; BufferLoad(srv,index,wot)
  %992 = extractvalue %dx.types.ResRet.f32 %991, 0
  %993 = extractvalue %dx.types.ResRet.f32 %991, 1
  %994 = extractvalue %dx.types.ResRet.f32 %991, 2
  %995 = or i32 %980, 1
  %996 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %995, i32 undef)  ; BufferLoad(srv,index,wot)
  %997 = extractvalue %dx.types.ResRet.f32 %996, 0
  %998 = extractvalue %dx.types.ResRet.f32 %996, 1
  %999 = extractvalue %dx.types.ResRet.f32 %996, 2
  %1000 = extractvalue %dx.types.ResRet.f32 %996, 3
  %1001 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %980, i32 undef)  ; BufferLoad(srv,index,wot)
  %1002 = extractvalue %dx.types.ResRet.f32 %1001, 3
  %1003 = bitcast float %989 to i32
  %1004 = lshr i32 %1003, 16
  %1005 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1004)  ; LegacyF16ToF32(value)
  %1006 = fcmp fast ogt float %1005, 0.000000e+00
  br i1 %1006, label %1007, label %1372

; <label>:1007                                    ; preds = %971
  %1008 = extractvalue %dx.types.ResRet.f32 %1001, 2
  %1009 = extractvalue %dx.types.ResRet.f32 %1001, 1
  %1010 = extractvalue %dx.types.ResRet.f32 %1001, 0
  %1011 = extractvalue %dx.types.ResRet.f32 %991, 3
  %1012 = extractvalue %dx.types.ResRet.f32 %988, 2
  %1013 = extractvalue %dx.types.ResRet.f32 %988, 0
  %1014 = add i32 %980, 5
  %1015 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %982, i32 %1014, i32 undef)  ; BufferLoad(srv,index,wot)
  %1016 = extractvalue %dx.types.ResRet.f32 %1015, 3
  %1017 = bitcast float %1011 to i32
  %1018 = lshr i32 %1017, 16
  %1019 = and i32 %1018, 3
  %1020 = bitcast float %1013 to i32
  %1021 = and i32 %1020, 65535
  %1022 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1021)  ; LegacyF16ToF32(value)
  %1023 = lshr i32 %1020, 16
  %1024 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1023)  ; LegacyF16ToF32(value)
  %1025 = bitcast float %1012 to i32
  %1026 = and i32 %1025, 65535
  %1027 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1026)  ; LegacyF16ToF32(value)
  %1028 = fsub fast float -0.000000e+00, %1027
  %1029 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1003)  ; LegacyF16ToF32(value)
  %1030 = fsub fast float -0.000000e+00, %1029
  %1031 = fcmp fast oeq float %1000, 0.000000e+00
  %1032 = icmp eq i32 %1019, 2
  %1033 = icmp eq i32 %1019, 3
  %1034 = bitcast float %1016 to i32
  %1035 = and i32 %1034, 65535
  %1036 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1035)  ; LegacyF16ToF32(value)
  %1037 = lshr i32 %1034, 16
  %1038 = and i32 %1037, 1023
  %1039 = uitofp i32 %1038 to float
  %1040 = fmul fast float %1039, 9.765625e-04
  %1041 = fsub fast float %1010, %333
  %1042 = fsub fast float %1009, %334
  %1043 = fsub fast float %1008, %335
  %1044 = call float @dx.op.dot3.f32(i32 55, float %1041, float %1042, float %1043, float %1041, float %1042, float %1043)  ; Dot3(ax,ay,az,bx,by,bz)
  %1045 = call float @dx.op.unary.f32(i32 25, float %1044)  ; Rsqrt(value)
  %1046 = fmul fast float %1045, %1041
  %1047 = fmul fast float %1045, %1042
  %1048 = fmul fast float %1045, %1043
  br i1 %1031, label %1049, label %1056

; <label>:1049                                    ; preds = %1007
  %1050 = fmul fast float %1002, %1002
  %1051 = fmul fast float %1050, %1044
  %1052 = fmul fast float %1051, %1051
  %1053 = fsub fast float 1.000000e+00, %1052
  %1054 = call float @dx.op.unary.f32(i32 7, float %1053)  ; Saturate(value)
  %1055 = fmul fast float %1054, %1054
  br label %1066

; <label>:1056                                    ; preds = %1007
  %1057 = fmul fast float %1041, %1002
  %1058 = fmul fast float %1042, %1002
  %1059 = fmul fast float %1043, %1002
  %1060 = call float @dx.op.dot3.f32(i32 55, float %1057, float %1058, float %1059, float %1057, float %1058, float %1059)  ; Dot3(ax,ay,az,bx,by,bz)
  %1061 = call float @dx.op.unary.f32(i32 7, float %1060)  ; Saturate(value)
  %1062 = fsub fast float 1.000000e+00, %1061
  %1063 = call float @dx.op.unary.f32(i32 23, float %1062)  ; Log(value)
  %1064 = fmul fast float %1063, %1000
  %1065 = call float @dx.op.unary.f32(i32 21, float %1064)  ; Exp(value)
  br label %1066

; <label>:1066                                    ; preds = %1056, %1049
  %1067 = phi float [ %1055, %1049 ], [ %1065, %1056 ]
  br i1 %1032, label %1068, label %1075

; <label>:1068                                    ; preds = %1066
  %1069 = call float @dx.op.dot3.f32(i32 55, float %1046, float %1047, float %1048, float %992, float %993, float %994)  ; Dot3(ax,ay,az,bx,by,bz)
  %1070 = fsub fast float %1069, %1022
  %1071 = fmul fast float %1070, %1024
  %1072 = call float @dx.op.unary.f32(i32 7, float %1071)  ; Saturate(value)
  %1073 = fmul fast float %1072, %1072
  %1074 = fmul fast float %1073, %1067
  br label %1075

; <label>:1075                                    ; preds = %1068, %1066
  %1076 = phi float [ %1074, %1068 ], [ %1067, %1066 ]
  br i1 %1033, label %1077, label %1081

; <label>:1077                                    ; preds = %1075
  %1078 = call float @dx.op.dot3.f32(i32 55, float %992, float %993, float %994, float %1046, float %1047, float %1048)  ; Dot3(ax,ay,az,bx,by,bz)
  %1079 = fcmp fast olt float %1078, 0.000000e+00
  %1080 = select i1 %1079, float 0.000000e+00, float %1076
  br label %1081

; <label>:1081                                    ; preds = %1077, %1075
  %1082 = phi float [ %1080, %1077 ], [ %1076, %1075 ]
  br i1 %1033, label %1083, label %1315

; <label>:1083                                    ; preds = %1081
  %1084 = fmul fast float %994, %985
  %1085 = fmul fast float %993, %986
  %1086 = fsub fast float %1084, %1085
  %1087 = fmul fast float %992, %986
  %1088 = fmul fast float %994, %984
  %1089 = fsub fast float %1087, %1088
  %1090 = fmul fast float %993, %984
  %1091 = fmul fast float %992, %985
  %1092 = fsub fast float %1090, %1091
  %1093 = fcmp fast ogt float %1040, 0x3FA1EB8520000000
  br i1 %1093, label %1094, label %1189

; <label>:1094                                    ; preds = %1083
  %1095 = fmul fast float %1041, %1086
  %1096 = call float @dx.op.tertiary.f32(i32 46, float %1089, float %1042, float %1095)  ; FMad(a,b,c)
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1092, float %1043, float %1096)  ; FMad(a,b,c)
  %1098 = fmul fast float %1041, %984
  %1099 = call float @dx.op.tertiary.f32(i32 46, float %985, float %1042, float %1098)  ; FMad(a,b,c)
  %1100 = call float @dx.op.tertiary.f32(i32 46, float %986, float %1043, float %1099)  ; FMad(a,b,c)
  %1101 = fmul fast float %1041, %992
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %993, float %1042, float %1101)  ; FMad(a,b,c)
  %1103 = call float @dx.op.tertiary.f32(i32 46, float %994, float %1043, float %1102)  ; FMad(a,b,c)
  %1104 = fmul fast float %1040, %1040
  %1105 = fsub fast float 1.000000e+00, %1104
  %1106 = call float @dx.op.unary.f32(i32 24, float %1105)  ; Sqrt(value)
  %1107 = fmul fast float %1040, %1036
  %1108 = call float @dx.op.binary.f32(i32 36, float %1103, float %1107)  ; FMin(a,b)
  %1109 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1107)  ; FMax(a,b)
  %1110 = fdiv fast float %1108, %1109
  %1111 = fmul fast float %1106, %1036
  %1112 = fmul fast float %1111, %1110
  %1113 = fcmp fast ogt float %1097, 0.000000e+00
  %1114 = fcmp fast ogt float %1100, 0.000000e+00
  %1115 = fcmp fast olt float %1097, 0.000000e+00
  %1116 = fcmp fast olt float %1100, 0.000000e+00
  %1117 = zext i1 %1113 to i32
  %1118 = zext i1 %1114 to i32
  %1119 = zext i1 %1115 to i32
  %1120 = zext i1 %1116 to i32
  %1121 = sub nsw i32 %1117, %1119
  %1122 = sub nsw i32 %1118, %1120
  %1123 = sitofp i32 %1121 to float
  %1124 = sitofp i32 %1122 to float
  %1125 = fadd fast float %1112, %1027
  %1126 = fadd fast float %1112, %1029
  %1127 = call float @dx.op.unary.f32(i32 6, float %1097)  ; FAbs(value)
  %1128 = call float @dx.op.unary.f32(i32 6, float %1100)  ; FAbs(value)
  %1129 = call float @dx.op.binary.f32(i32 35, float %1127, float %1125)  ; FMax(a,b)
  %1130 = call float @dx.op.binary.f32(i32 35, float %1128, float %1126)  ; FMax(a,b)
  %1131 = fsub fast float %1028, %1112
  %1132 = fadd fast float %1131, %1129
  %1133 = fmul fast float %1132, %1123
  %1134 = fsub fast float %1030, %1112
  %1135 = fadd fast float %1134, %1130
  %1136 = fmul fast float %1135, %1124
  %1137 = fsub fast float %1103, %1108
  %1138 = call float @dx.op.binary.f32(i32 35, float %1137, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1139 = call float @dx.op.unary.f32(i32 6, float %1133)  ; FAbs(value)
  %1140 = call float @dx.op.unary.f32(i32 6, float %1136)  ; FAbs(value)
  %1141 = fdiv fast float %1139, %1138
  %1142 = fdiv fast float %1140, %1138
  %1143 = fmul fast float %1141, %1108
  %1144 = fmul fast float %1142, %1108
  %1145 = fsub fast float %1143, %1112
  %1146 = fsub fast float %1144, %1112
  %1147 = fsub fast float -0.000000e+00, %1123
  %1148 = fsub fast float -0.000000e+00, %1124
  %1149 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1147)  ; FMax(a,b)
  %1150 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1148)  ; FMax(a,b)
  %1151 = fmul fast float %1145, %1149
  %1152 = fmul fast float %1146, %1150
  %1153 = fsub fast float %1151, %1027
  %1154 = fsub fast float %1152, %1029
  %1155 = call float @dx.op.binary.f32(i32 35, float %1153, float %1028)  ; FMax(a,b)
  %1156 = call float @dx.op.binary.f32(i32 35, float %1154, float %1030)  ; FMax(a,b)
  %1157 = call float @dx.op.binary.f32(i32 36, float %1155, float %1027)  ; FMin(a,b)
  %1158 = call float @dx.op.binary.f32(i32 36, float %1156, float %1029)  ; FMin(a,b)
  %1159 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1123)  ; FMax(a,b)
  %1160 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1124)  ; FMax(a,b)
  %1161 = fmul fast float %1159, %1145
  %1162 = fmul fast float %1160, %1146
  %1163 = fsub fast float %1027, %1161
  %1164 = fsub fast float %1029, %1162
  %1165 = call float @dx.op.binary.f32(i32 35, float %1163, float %1028)  ; FMax(a,b)
  %1166 = call float @dx.op.binary.f32(i32 35, float %1164, float %1030)  ; FMax(a,b)
  %1167 = call float @dx.op.binary.f32(i32 36, float %1165, float %1027)  ; FMin(a,b)
  %1168 = call float @dx.op.binary.f32(i32 36, float %1166, float %1029)  ; FMin(a,b)
  %1169 = fadd fast float %1167, %1157
  %1170 = fadd fast float %1168, %1158
  %1171 = fmul fast float %1169, 5.000000e-01
  %1172 = fmul fast float %1170, 5.000000e-01
  %1173 = fsub fast float %1167, %1157
  %1174 = fsub fast float %1168, %1158
  %1175 = fmul fast float %1173, 5.000000e-01
  %1176 = fmul fast float %1174, 5.000000e-01
  %1177 = fmul fast float %1171, %1086
  %1178 = fmul fast float %1171, %1089
  %1179 = fmul fast float %1171, %1092
  %1180 = fsub fast float %1041, %1177
  %1181 = fsub fast float %1042, %1178
  %1182 = fsub fast float %1043, %1179
  %1183 = fmul fast float %1172, %984
  %1184 = fmul fast float %1172, %985
  %1185 = fmul fast float %1172, %986
  %1186 = fsub fast float %1180, %1183
  %1187 = fsub fast float %1181, %1184
  %1188 = fsub fast float %1182, %1185
  br label %1189

; <label>:1189                                    ; preds = %1094, %1083
  %1190 = phi float [ %1186, %1094 ], [ %1041, %1083 ]
  %1191 = phi float [ %1187, %1094 ], [ %1042, %1083 ]
  %1192 = phi float [ %1188, %1094 ], [ %1043, %1083 ]
  %1193 = phi float [ %1175, %1094 ], [ %1027, %1083 ]
  %1194 = phi float [ %1176, %1094 ], [ %1029, %1083 ]
  %1195 = fcmp fast oeq float %1193, 0.000000e+00
  %1196 = fcmp fast oeq float %1194, 0.000000e+00
  %1197 = or i1 %1195, %1196
  br i1 %1197, label %1345, label %1198

; <label>:1198                                    ; preds = %1189
  %1199 = call float @dx.op.dot3.f32(i32 55, float %1086, float %1089, float %1092, float %1190, float %1191, float %1192)  ; Dot3(ax,ay,az,bx,by,bz)
  %1200 = call float @dx.op.dot3.f32(i32 55, float %984, float %985, float %986, float %1190, float %1191, float %1192)  ; Dot3(ax,ay,az,bx,by,bz)
  %1201 = call float @dx.op.dot3.f32(i32 55, float %992, float %993, float %994, float %1190, float %1191, float %1192)  ; Dot3(ax,ay,az,bx,by,bz)
  %1202 = fsub fast float %1199, %1193
  %1203 = fadd fast float %1199, %1193
  %1204 = fsub fast float %1200, %1194
  %1205 = fadd fast float %1200, %1194
  %1206 = fmul fast float %1201, %1201
  %1207 = call float @dx.op.dot2.f32(i32 54, float %1202, float %1204, float %1202, float %1204)  ; Dot2(ax,ay,bx,by)
  %1208 = fadd fast float %1207, %1206
  %1209 = call float @dx.op.unary.f32(i32 25, float %1208)  ; Rsqrt(value)
  %1210 = fmul fast float %1209, %1202
  %1211 = fmul fast float %1209, %1204
  %1212 = fmul fast float %1209, %1201
  %1213 = call float @dx.op.dot2.f32(i32 54, float %1203, float %1204, float %1203, float %1204)  ; Dot2(ax,ay,bx,by)
  %1214 = fadd fast float %1213, %1206
  %1215 = call float @dx.op.unary.f32(i32 25, float %1214)  ; Rsqrt(value)
  %1216 = fmul fast float %1215, %1203
  %1217 = fmul fast float %1215, %1204
  %1218 = fmul fast float %1215, %1201
  %1219 = call float @dx.op.dot2.f32(i32 54, float %1203, float %1205, float %1203, float %1205)  ; Dot2(ax,ay,bx,by)
  %1220 = fadd fast float %1219, %1206
  %1221 = call float @dx.op.unary.f32(i32 25, float %1220)  ; Rsqrt(value)
  %1222 = fmul fast float %1221, %1203
  %1223 = fmul fast float %1221, %1205
  %1224 = fmul fast float %1221, %1201
  %1225 = call float @dx.op.dot2.f32(i32 54, float %1202, float %1205, float %1202, float %1205)  ; Dot2(ax,ay,bx,by)
  %1226 = fadd fast float %1225, %1206
  %1227 = call float @dx.op.unary.f32(i32 25, float %1226)  ; Rsqrt(value)
  %1228 = fmul fast float %1227, %1202
  %1229 = fmul fast float %1227, %1205
  %1230 = fmul fast float %1227, %1201
  %1231 = call float @dx.op.dot3.f32(i32 55, float %1210, float %1211, float %1212, float %1216, float %1217, float %1218)  ; Dot3(ax,ay,az,bx,by,bz)
  %1232 = call float @dx.op.dot3.f32(i32 55, float %1216, float %1217, float %1218, float %1222, float %1223, float %1224)  ; Dot3(ax,ay,az,bx,by,bz)
  %1233 = call float @dx.op.dot3.f32(i32 55, float %1222, float %1223, float %1224, float %1228, float %1229, float %1230)  ; Dot3(ax,ay,az,bx,by,bz)
  %1234 = call float @dx.op.dot3.f32(i32 55, float %1228, float %1229, float %1230, float %1210, float %1211, float %1212)  ; Dot3(ax,ay,az,bx,by,bz)
  %1235 = fmul fast float %1231, 0x3FC6666660000000
  %1236 = fsub fast float 0x3FF921FF20000000, %1235
  %1237 = fadd fast float %1231, 1.000000e+00
  %1238 = call float @dx.op.unary.f32(i32 25, float %1237)  ; Rsqrt(value)
  %1239 = fmul fast float %1232, 0x3FC6666660000000
  %1240 = fsub fast float 0x3FF921FF20000000, %1239
  %1241 = fadd fast float %1232, 1.000000e+00
  %1242 = call float @dx.op.unary.f32(i32 25, float %1241)  ; Rsqrt(value)
  %1243 = fmul fast float %1242, %1240
  %1244 = fmul fast float %1233, 0x3FC6666660000000
  %1245 = fsub fast float 0x3FF921FF20000000, %1244
  %1246 = fadd fast float %1233, 1.000000e+00
  %1247 = call float @dx.op.unary.f32(i32 25, float %1246)  ; Rsqrt(value)
  %1248 = fmul fast float %1234, 0x3FC6666660000000
  %1249 = fsub fast float 0x3FF921FF20000000, %1248
  %1250 = fadd fast float %1234, 1.000000e+00
  %1251 = call float @dx.op.unary.f32(i32 25, float %1250)  ; Rsqrt(value)
  %1252 = fmul fast float %1251, %1249
  %1253 = fmul fast float %1236, %1238
  %1254 = fsub fast float -0.000000e+00, %1253
  %1255 = fmul fast float %1210, %1254
  %1256 = fmul fast float %1211, %1254
  %1257 = fmul fast float %1212, %1254
  %1258 = fmul fast float %1243, %1222
  %1259 = fmul fast float %1243, %1223
  %1260 = fmul fast float %1243, %1224
  %1261 = fadd fast float %1258, %1255
  %1262 = fadd fast float %1259, %1256
  %1263 = fadd fast float %1260, %1257
  %1264 = fmul fast float %1263, %1217
  %1265 = fmul fast float %1262, %1218
  %1266 = fsub fast float %1264, %1265
  %1267 = fmul fast float %1261, %1218
  %1268 = fmul fast float %1263, %1216
  %1269 = fsub fast float %1267, %1268
  %1270 = fmul fast float %1262, %1216
  %1271 = fmul fast float %1261, %1217
  %1272 = fsub fast float %1270, %1271
  %1273 = fmul fast float %1252, %1210
  %1274 = fmul fast float %1252, %1211
  %1275 = fmul fast float %1252, %1212
  %1276 = fmul fast float %1245, %1247
  %1277 = fsub fast float -0.000000e+00, %1276
  %1278 = fmul fast float %1222, %1277
  %1279 = fmul fast float %1223, %1277
  %1280 = fmul fast float %1224, %1277
  %1281 = fadd fast float %1273, %1278
  %1282 = fadd fast float %1274, %1279
  %1283 = fadd fast float %1275, %1280
  %1284 = fmul fast float %1283, %1229
  %1285 = fmul fast float %1282, %1230
  %1286 = fsub fast float %1284, %1285
  %1287 = fmul fast float %1281, %1230
  %1288 = fmul fast float %1283, %1228
  %1289 = fsub fast float %1287, %1288
  %1290 = fmul fast float %1282, %1228
  %1291 = fmul fast float %1281, %1229
  %1292 = fsub fast float %1290, %1291
  %1293 = fadd fast float %1286, %1266
  %1294 = fadd fast float %1289, %1269
  %1295 = fadd fast float %1292, %1272
  %1296 = fmul fast float %1293, %1086
  %1297 = fmul fast float %1293, %1089
  %1298 = fmul fast float %1293, %1092
  %1299 = fmul fast float %1294, %984
  %1300 = fmul fast float %1294, %985
  %1301 = fmul fast float %1294, %986
  %1302 = fadd fast float %1296, %1299
  %1303 = fadd fast float %1297, %1300
  %1304 = fadd fast float %1298, %1301
  %1305 = fmul fast float %1295, %992
  %1306 = fmul fast float %1295, %993
  %1307 = fmul fast float %1295, %994
  %1308 = fadd fast float %1302, %1305
  %1309 = fadd fast float %1303, %1306
  %1310 = fadd fast float %1304, %1307
  %1311 = call float @dx.op.dot3.f32(i32 55, float %1308, float %1309, float %1310, float %1308, float %1309, float %1310)  ; Dot3(ax,ay,az,bx,by,bz)
  %1312 = call float @dx.op.unary.f32(i32 25, float %1311)  ; Rsqrt(value)
  %1313 = fmul fast float %1311, 5.000000e-01
  %1314 = fmul fast float %1313, %1312
  br label %1345

; <label>:1315                                    ; preds = %1081
  %1316 = fmul fast float %1029, 5.000000e-01
  %1317 = fmul fast float %1316, %984
  %1318 = fmul fast float %1316, %985
  %1319 = fmul fast float %1316, %986
  %1320 = fsub fast float %1041, %1317
  %1321 = fsub fast float %1042, %1318
  %1322 = fsub fast float %1043, %1319
  %1323 = fadd fast float %1317, %1041
  %1324 = fadd fast float %1318, %1042
  %1325 = fadd fast float %1319, %1043
  %1326 = fcmp fast ogt float %1029, 0.000000e+00
  %1327 = call float @dx.op.dot3.f32(i32 55, float %1320, float %1321, float %1322, float %1320, float %1321, float %1322)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1326, label %1328, label %1339, !dx.controlflow.hints !49

; <label>:1328                                    ; preds = %1315
  %1329 = call float @dx.op.dot3.f32(i32 55, float %1323, float %1324, float %1325, float %1323, float %1324, float %1325)  ; Dot3(ax,ay,az,bx,by,bz)
  %1330 = call float @dx.op.unary.f32(i32 25, float %1327)  ; Rsqrt(value)
  %1331 = call float @dx.op.unary.f32(i32 25, float %1329)  ; Rsqrt(value)
  %1332 = fmul fast float %1331, %1330
  %1333 = call float @dx.op.dot3.f32(i32 55, float %1320, float %1321, float %1322, float %1323, float %1324, float %1325)  ; Dot3(ax,ay,az,bx,by,bz)
  %1334 = fmul fast float %1333, 5.000000e-01
  %1335 = fadd fast float %1334, %968
  %1336 = fmul fast float %1335, %1332
  %1337 = fadd fast float %1336, 5.000000e-01
  %1338 = fdiv fast float %1332, %1337
  br label %1342

; <label>:1339                                    ; preds = %1315
  %1340 = fadd fast float %1327, %968
  %1341 = fdiv fast float 1.000000e+00, %1340
  br label %1342

; <label>:1342                                    ; preds = %1339, %1328
  %1343 = phi float [ %1338, %1328 ], [ %1341, %1339 ]
  %1344 = select i1 %1031, float %1343, float 1.000000e+00
  br label %1345

; <label>:1345                                    ; preds = %1342, %1198, %1189
  %1346 = phi float [ %1344, %1342 ], [ 0.000000e+00, %1189 ], [ %1314, %1198 ]
  %1347 = fsub fast float -0.000000e+00, %366
  %1348 = fsub fast float -0.000000e+00, %367
  %1349 = fsub fast float -0.000000e+00, %368
  %1350 = call float @dx.op.dot3.f32(i32 55, float %1046, float %1047, float %1048, float %1347, float %1348, float %1349)  ; Dot3(ax,ay,az,bx,by,bz)
  %1351 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1352 = extractvalue %dx.types.CBufRet.f32 %1351, 1
  %1353 = fmul fast float %1352, %1352
  %1354 = fsub fast float 1.000000e+00, %1353
  %1355 = fmul fast float %1350, 2.000000e+00
  %1356 = fadd fast float %1355, %1352
  %1357 = fmul fast float %1356, %1352
  %1358 = fadd fast float %1357, 1.000000e+00
  %1359 = call float @dx.op.unary.f32(i32 24, float %1358)  ; Sqrt(value)
  %1360 = fmul fast float %1359, 0x402921FB60000000
  %1361 = fmul fast float %1360, %1358
  %1362 = fdiv fast float %1354, %1361
  %1363 = fmul fast float %1082, %1005
  %1364 = fmul fast float %1363, %1346
  %1365 = fmul fast float %1364, %1362
  %1366 = fmul fast float %1365, %997
  %1367 = fmul fast float %1365, %998
  %1368 = fmul fast float %1365, %999
  %1369 = fadd fast float %1366, %972
  %1370 = fadd fast float %1367, %973
  %1371 = fadd fast float %1368, %974
  br label %1372

; <label>:1372                                    ; preds = %1345, %971
  %1373 = phi float [ %1369, %1345 ], [ %972, %971 ]
  %1374 = phi float [ %1370, %1345 ], [ %973, %971 ]
  %1375 = phi float [ %1371, %1345 ], [ %974, %971 ]
  %1376 = add nuw i32 %975, 1
  %1377 = icmp eq i32 %1376, %898
  br i1 %1377, label %1378, label %971, !llvm.loop !50

; <label>:1378                                    ; preds = %1372
  br label %1379

; <label>:1379                                    ; preds = %1378, %935
  %1380 = phi float [ %871, %935 ], [ %1373, %1378 ]
  %1381 = phi float [ %872, %935 ], [ %1374, %1378 ]
  %1382 = phi float [ %873, %935 ], [ %1375, %1378 ]
  %1383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1384 = extractvalue %dx.types.CBufRet.f32 %1383, 2
  %1385 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1386 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1385, i32 0, i32 %36, i32 %37, i32 %38, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1387 = extractvalue %dx.types.ResRet.f32 %1386, 0
  %1388 = extractvalue %dx.types.ResRet.f32 %1386, 1
  %1389 = extractvalue %dx.types.ResRet.f32 %1386, 2
  %1390 = fmul fast float %1387, %1384
  %1391 = fmul fast float %1388, %1384
  %1392 = fmul fast float %1389, %1384
  %1393 = fadd fast float %1390, %1380
  %1394 = fadd fast float %1391, %1381
  %1395 = fadd fast float %1392, %1382
  %1396 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1397 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1396, i32 0, i32 %36, i32 %37, i32 %38, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1398 = extractvalue %dx.types.ResRet.f32 %1397, 0
  %1399 = extractvalue %dx.types.ResRet.f32 %1397, 1
  %1400 = extractvalue %dx.types.ResRet.f32 %1397, 2
  %1401 = extractvalue %dx.types.ResRet.f32 %1397, 3
  %1402 = call float @dx.op.dot3.f32(i32 55, float %1398, float %1399, float %1400, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1403 = fadd fast float %1401, %1402
  %1404 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1405 = extractvalue %dx.types.CBufRet.i32 %1404, 0
  %1406 = icmp eq i32 %1405, 0
  br i1 %1406, label %1413, label %1407, !dx.controlflow.hints !52

; <label>:1407                                    ; preds = %1379
  %1408 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1409 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1408, i32 0, i32 %36, i32 %37, i32 %38, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1410 = extractvalue %dx.types.ResRet.f32 %1409, 0
  %1411 = extractvalue %dx.types.ResRet.f32 %1409, 1
  %1412 = extractvalue %dx.types.ResRet.f32 %1409, 2
  br label %1413

; <label>:1413                                    ; preds = %1407, %1379
  %1414 = phi float [ %1410, %1407 ], [ 0.000000e+00, %1379 ]
  %1415 = phi float [ %1411, %1407 ], [ 0.000000e+00, %1379 ]
  %1416 = phi float [ %1412, %1407 ], [ 0.000000e+00, %1379 ]
  %1417 = extractvalue %dx.types.CBufRet.f32 %1383, 1
  %1418 = fmul fast float %1398, %1393
  %1419 = fmul fast float %1399, %1394
  %1420 = fmul fast float %1400, %1395
  %1421 = fadd fast float %1414, %1418
  %1422 = fadd fast float %1415, %1419
  %1423 = fadd fast float %1416, %1420
  %1424 = fmul fast float %1417, %1421
  %1425 = fmul fast float %1417, %1422
  %1426 = fmul fast float %1417, %1423
  %1427 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %31, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1428 = extractvalue %dx.types.CBufRet.i32 %1427, 0
  %1429 = extractvalue %dx.types.CBufRet.i32 %1427, 1
  %1430 = extractvalue %dx.types.CBufRet.i32 %1427, 2
  %1431 = icmp slt i32 %36, %1428
  %1432 = icmp slt i32 %37, %1429
  %1433 = icmp slt i32 %38, %1430
  %1434 = and i1 %1431, %1432
  %1435 = and i1 %1433, %1434
  br i1 %1435, label %1436, label %1450

; <label>:1436                                    ; preds = %1413
  %1437 = bitcast float %1424 to i32
  %1438 = bitcast float %1425 to i32
  %1439 = bitcast float %1426 to i32
  %1440 = bitcast float %1403 to i32
  %1441 = icmp ult i32 %1437, 2139095040
  %1442 = icmp ult i32 %1438, 2139095040
  %1443 = icmp ult i32 %1439, 2139095040
  %1444 = icmp ult i32 %1440, 2139095040
  %1445 = select i1 %1441, float %1424, float 0.000000e+00
  %1446 = select i1 %1442, float %1425, float 0.000000e+00
  %1447 = select i1 %1443, float %1426, float 0.000000e+00
  %1448 = select i1 %1444, float %1403, float 0.000000e+00
  %1449 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1449, i32 %36, i32 %37, i32 %38, float %1445, float %1446, float %1447, float %1448, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1450

; <label>:1450                                    ; preds = %1436, %1413, %202
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!41}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !26, !28, !34}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !9}
!16 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!17 = !{i32 9, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !9}
!18 = !{i32 10, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !7}
!19 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !7}
!20 = !{i32 12, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 5, i32 0, !9}
!21 = !{i32 13, %"class.Texture2D<float>"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!22 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!23 = !{i32 15, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 4, i32 0, !9}
!24 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!25 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!26 = !{!27}
!27 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!28 = !{!29, !30, !31, !32, !33}
!29 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!30 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!31 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!32 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!33 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!34 = !{!35, !36, !37, !38, !39, !40}
!35 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!36 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!37 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!38 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!39 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!40 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!41 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !42}
!42 = !{i32 4, !43, i32 5, !44}
!43 = !{i32 4, i32 4, i32 4}
!44 = !{i32 0}
!45 = distinct !{!45, !"dx.controlflow.hints", i32 2}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 1}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !51}
!51 = !{!"llvm.loop.unroll.disable"}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
