;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 23d9bd1fe2cafc7fa2559d3b722db178
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S0   s4,space1000     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S3             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S4             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s4     1
; LightFunctionSampler              sampler      NA          NA      S6             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; GlobalDistanceFieldPageAtlasTexture   texture     f32          3d     T16            t16     1
; GlobalDistanceFieldPageTableTexture   texture     u32          3d     T17            t17     1
; ConservativeDepthTexture          texture     f32          2d     T18            t18     1
; VBufferA                          texture     f32          3d     T19            t19     1
; VBufferB                          texture     f32          3d     T20            t20     1
; LocalShadowedLightScattering      texture     f32          3d     T21            t21     1
; LightFunctionTexture              texture     f32          2d     T22            t22     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %43 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.i32 %67, 1
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 1
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %83 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %89, 3
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %99 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.i32 %99, 3
  %101 = icmp eq i32 %100, 0
  %102 = uitofp i32 %42 to float
  %103 = uitofp i32 %43 to float
  %104 = uitofp i32 %44 to float
  br i1 %101, label %211, label %105

; <label>:105                                     ; preds = %0
  %106 = fadd fast float %102, 5.000000e-01
  %107 = fadd fast float %103, 5.000000e-01
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = fdiv fast float %106, %109
  %112 = fdiv fast float %107, %110
  %113 = fmul fast float %111, 2.000000e+00
  %114 = fmul fast float %112, 2.000000e+00
  %115 = fadd fast float %113, -1.000000e+00
  %116 = fadd fast float %114, -1.000000e+00
  %117 = fsub fast float -0.000000e+00, %116
  %118 = fadd fast float %104, -1.000000e+00
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %121 = fdiv fast float %118, %120
  %122 = call float @dx.op.unary.f32(i32 21, float %121)  ; Exp(value)
  %123 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %124 = fsub fast float %122, %123
  %125 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %126 = fdiv fast float %124, %125
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %129 = fcmp fast ult float %128, 1.000000e+00
  br i1 %129, label %136, label %130, !dx.controlflow.hints !52

; <label>:130                                     ; preds = %105
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %133 = fmul fast float %132, %126
  %134 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %135 = fadd fast float %133, %134
  br label %143

; <label>:136                                     ; preds = %105
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 3
  %139 = fadd fast float %138, %126
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 2
  %141 = fmul fast float %139, %140
  %142 = fdiv fast float 1.000000e+00, %141
  br label %143

; <label>:143                                     ; preds = %136, %130
  %144 = phi float [ %135, %130 ], [ %142, %136 ]
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = extractvalue %dx.types.CBufRet.f32 %145, 3
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = extractvalue %dx.types.CBufRet.f32 %160, 3
  %165 = fmul fast float %146, %115
  %166 = call float @dx.op.tertiary.f32(i32 46, float %117, float %151, float %165)  ; FMad(a,b,c)
  %167 = call float @dx.op.tertiary.f32(i32 46, float %144, float %156, float %166)  ; FMad(a,b,c)
  %168 = fadd fast float %167, %161
  %169 = fmul fast float %147, %115
  %170 = call float @dx.op.tertiary.f32(i32 46, float %117, float %152, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %144, float %157, float %170)  ; FMad(a,b,c)
  %172 = fadd fast float %171, %162
  %173 = fmul fast float %148, %115
  %174 = call float @dx.op.tertiary.f32(i32 46, float %117, float %153, float %173)  ; FMad(a,b,c)
  %175 = call float @dx.op.tertiary.f32(i32 46, float %144, float %158, float %174)  ; FMad(a,b,c)
  %176 = fadd fast float %175, %163
  %177 = fmul fast float %149, %115
  %178 = call float @dx.op.tertiary.f32(i32 46, float %117, float %154, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %144, float %159, float %178)  ; FMad(a,b,c)
  %180 = fadd fast float %179, %164
  %181 = fdiv fast float %168, %180
  %182 = fdiv fast float %172, %180
  %183 = fdiv fast float %176, %180
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %196 = fmul fast float %185, %181
  %197 = call float @dx.op.tertiary.f32(i32 46, float %182, float %188, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %183, float %191, float %197)  ; FMad(a,b,c)
  %199 = fadd fast float %198, %194
  %200 = fmul fast float %186, %181
  %201 = call float @dx.op.tertiary.f32(i32 46, float %182, float %189, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %183, float %192, float %201)  ; FMad(a,b,c)
  %203 = fadd fast float %202, %195
  %204 = fdiv fast float %199, %203
  %205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %206 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %205, i32 0, i32 %42, i32 %43, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %207 = extractvalue %dx.types.ResRet.f32 %206, 0
  %208 = fcmp fast ogt float %207, %204
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %143
  %210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %210, i32 %42, i32 %43, i32 %44, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2098

; <label>:211                                     ; preds = %143, %0
  %212 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.i32 %212, 0
  %214 = mul i32 %42, 1664525
  %215 = mul i32 %43, 1664525
  %216 = mul i32 %44, 1664525
  %217 = mul i32 %213, 1664525
  %218 = add i32 %214, 1013904223
  %219 = add i32 %215, 1013904223
  %220 = add i32 %216, 1013904223
  %221 = add i32 %217, 1013904223
  %222 = mul i32 %221, %219
  %223 = add i32 %218, %222
  %224 = mul i32 %223, %220
  %225 = add i32 %224, %219
  %226 = mul i32 %225, %223
  %227 = add i32 %226, %220
  %228 = mul i32 %227, %225
  %229 = add i32 %228, %221
  %230 = lshr i32 %223, 16
  %231 = lshr i32 %225, 16
  %232 = lshr i32 %227, 16
  %233 = lshr i32 %229, 16
  %234 = xor i32 %230, %223
  %235 = xor i32 %231, %225
  %236 = xor i32 %232, %227
  %237 = xor i32 %233, %229
  %238 = mul i32 %237, %235
  %239 = add i32 %238, %234
  %240 = mul i32 %239, %236
  %241 = add i32 %240, %235
  %242 = mul i32 %241, %239
  %243 = add i32 %242, %236
  %244 = uitofp i32 %239 to float
  %245 = uitofp i32 %241 to float
  %246 = uitofp i32 %243 to float
  %247 = fmul fast float %244, 0x3E00000000000000
  %248 = fmul fast float %245, 0x3E00000000000000
  %249 = fmul fast float %246, 0x3E00000000000000
  %250 = fadd fast float %247, -1.000000e+00
  %251 = fadd fast float %248, -1.000000e+00
  %252 = fadd fast float %249, -1.000000e+00
  %253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %254 = extractvalue %dx.types.CBufRet.f32 %253, 0
  %255 = extractvalue %dx.types.CBufRet.f32 %253, 1
  %256 = extractvalue %dx.types.CBufRet.f32 %253, 2
  %257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %258 = extractvalue %dx.types.CBufRet.f32 %257, 3
  %259 = fmul fast float %250, %258
  %260 = fmul fast float %251, %258
  %261 = fmul fast float %252, %258
  %262 = fadd fast float %259, %254
  %263 = fadd fast float %260, %255
  %264 = fadd fast float %261, %256
  %265 = fadd fast float %262, %102
  %266 = fadd fast float %263, %103
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = extractvalue %dx.types.CBufRet.f32 %267, 1
  %270 = fdiv fast float %265, %268
  %271 = fdiv fast float %266, %269
  %272 = fmul fast float %270, 2.000000e+00
  %273 = fmul fast float %271, 2.000000e+00
  %274 = fadd fast float %272, -1.000000e+00
  %275 = fadd fast float %273, -1.000000e+00
  %276 = fsub fast float -0.000000e+00, %275
  %277 = fadd fast float %264, %104
  %278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %279 = extractvalue %dx.types.CBufRet.f32 %278, 2
  %280 = fdiv fast float %277, %279
  %281 = call float @dx.op.unary.f32(i32 21, float %280)  ; Exp(value)
  %282 = extractvalue %dx.types.CBufRet.f32 %278, 1
  %283 = fsub fast float %281, %282
  %284 = extractvalue %dx.types.CBufRet.f32 %278, 0
  %285 = fdiv fast float %283, %284
  %286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.f32 %286, 3
  %288 = fcmp fast ult float %287, 1.000000e+00
  br i1 %288, label %295, label %289, !dx.controlflow.hints !52

; <label>:289                                     ; preds = %211
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %292 = fmul fast float %291, %285
  %293 = extractvalue %dx.types.CBufRet.f32 %286, 2
  %294 = fadd fast float %292, %293
  br label %302

; <label>:295                                     ; preds = %211
  %296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %297 = extractvalue %dx.types.CBufRet.f32 %296, 3
  %298 = fadd fast float %297, %285
  %299 = extractvalue %dx.types.CBufRet.f32 %296, 2
  %300 = fmul fast float %298, %299
  %301 = fdiv fast float 1.000000e+00, %300
  br label %302

; <label>:302                                     ; preds = %295, %289
  %303 = phi float [ %294, %289 ], [ %301, %295 ]
  %304 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %305 = extractvalue %dx.types.CBufRet.f32 %304, 0
  %306 = extractvalue %dx.types.CBufRet.f32 %304, 1
  %307 = extractvalue %dx.types.CBufRet.f32 %304, 2
  %308 = extractvalue %dx.types.CBufRet.f32 %304, 3
  %309 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %310 = extractvalue %dx.types.CBufRet.f32 %309, 0
  %311 = extractvalue %dx.types.CBufRet.f32 %309, 1
  %312 = extractvalue %dx.types.CBufRet.f32 %309, 2
  %313 = extractvalue %dx.types.CBufRet.f32 %309, 3
  %314 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %315 = extractvalue %dx.types.CBufRet.f32 %314, 0
  %316 = extractvalue %dx.types.CBufRet.f32 %314, 1
  %317 = extractvalue %dx.types.CBufRet.f32 %314, 2
  %318 = extractvalue %dx.types.CBufRet.f32 %314, 3
  %319 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %320 = extractvalue %dx.types.CBufRet.f32 %319, 0
  %321 = extractvalue %dx.types.CBufRet.f32 %319, 1
  %322 = extractvalue %dx.types.CBufRet.f32 %319, 2
  %323 = extractvalue %dx.types.CBufRet.f32 %319, 3
  %324 = fmul fast float %305, %274
  %325 = call float @dx.op.tertiary.f32(i32 46, float %276, float %310, float %324)  ; FMad(a,b,c)
  %326 = call float @dx.op.tertiary.f32(i32 46, float %303, float %315, float %325)  ; FMad(a,b,c)
  %327 = fadd fast float %326, %320
  %328 = fmul fast float %306, %274
  %329 = call float @dx.op.tertiary.f32(i32 46, float %276, float %311, float %328)  ; FMad(a,b,c)
  %330 = call float @dx.op.tertiary.f32(i32 46, float %303, float %316, float %329)  ; FMad(a,b,c)
  %331 = fadd fast float %330, %321
  %332 = fmul fast float %307, %274
  %333 = call float @dx.op.tertiary.f32(i32 46, float %276, float %312, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %303, float %317, float %333)  ; FMad(a,b,c)
  %335 = fadd fast float %334, %322
  %336 = fmul fast float %308, %274
  %337 = call float @dx.op.tertiary.f32(i32 46, float %276, float %313, float %336)  ; FMad(a,b,c)
  %338 = call float @dx.op.tertiary.f32(i32 46, float %303, float %318, float %337)  ; FMad(a,b,c)
  %339 = fadd fast float %338, %323
  %340 = fdiv fast float %327, %339
  %341 = fdiv fast float %331, %339
  %342 = fdiv fast float %335, %339
  %343 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %344 = extractvalue %dx.types.CBufRet.f32 %343, 0
  %345 = extractvalue %dx.types.CBufRet.f32 %343, 1
  %346 = extractvalue %dx.types.CBufRet.f32 %343, 2
  %347 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %348 = extractvalue %dx.types.CBufRet.f32 %347, 0
  %349 = extractvalue %dx.types.CBufRet.f32 %347, 1
  %350 = extractvalue %dx.types.CBufRet.f32 %347, 2
  %351 = fmul fast float %344, 2.097152e+06
  %352 = fmul fast float %345, 2.097152e+06
  %353 = fmul fast float %346, 2.097152e+06
  %354 = fadd fast float %351, %340
  %355 = fsub fast float %354, %348
  %356 = fadd fast float %352, %341
  %357 = fsub fast float %356, %349
  %358 = fadd fast float %353, %342
  %359 = fsub fast float %358, %350
  %360 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %361 = extractvalue %dx.types.CBufRet.f32 %360, 0
  %362 = extractvalue %dx.types.CBufRet.f32 %360, 1
  %363 = extractvalue %dx.types.CBufRet.f32 %360, 2
  %364 = fsub fast float %340, %361
  %365 = fsub fast float %341, %362
  %366 = fsub fast float %342, %363
  %367 = fmul fast float %364, %364
  %368 = fmul fast float %365, %365
  %369 = fadd fast float %367, %368
  %370 = fmul fast float %366, %366
  %371 = fadd fast float %369, %370
  %372 = call float @dx.op.unary.f32(i32 24, float %371)  ; Sqrt(value)
  %373 = fdiv fast float %364, %372
  %374 = fdiv fast float %365, %372
  %375 = fdiv fast float %366, %372
  %376 = icmp eq i32 %47, 0
  br i1 %376, label %377, label %379, !dx.controlflow.hints !53

; <label>:377                                     ; preds = %302
  %378 = extractvalue %dx.types.CBufRet.f32 %257, 1
  br label %1025

; <label>:379                                     ; preds = %302
  %380 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %381 = extractvalue %dx.types.CBufRet.f32 %380, 2
  %382 = fcmp fast ogt float %381, 0.000000e+00
  br i1 %382, label %383, label %958

; <label>:383                                     ; preds = %379
  %384 = icmp eq i32 %78, 0
  br i1 %384, label %420, label %385, !dx.controlflow.hints !54

; <label>:385                                     ; preds = %383
  %386 = fmul fast float %340, %80
  %387 = call float @dx.op.tertiary.f32(i32 46, float %341, float %85, float %386)  ; FMad(a,b,c)
  %388 = call float @dx.op.tertiary.f32(i32 46, float %342, float %90, float %387)  ; FMad(a,b,c)
  %389 = fadd fast float %388, %95
  %390 = fmul fast float %340, %81
  %391 = call float @dx.op.tertiary.f32(i32 46, float %341, float %86, float %390)  ; FMad(a,b,c)
  %392 = call float @dx.op.tertiary.f32(i32 46, float %342, float %91, float %391)  ; FMad(a,b,c)
  %393 = fadd fast float %392, %96
  %394 = fmul fast float %340, %83
  %395 = call float @dx.op.tertiary.f32(i32 46, float %341, float %88, float %394)  ; FMad(a,b,c)
  %396 = call float @dx.op.tertiary.f32(i32 46, float %342, float %93, float %395)  ; FMad(a,b,c)
  %397 = fadd fast float %396, %98
  %398 = fdiv fast float %389, %397
  %399 = fdiv fast float %393, %397
  %400 = fcmp fast ole float %398, 1.000000e+00
  %401 = fcmp fast ole float %399, 1.000000e+00
  %402 = fcmp fast oge float %398, 0.000000e+00
  %403 = fcmp fast oge float %399, 0.000000e+00
  %404 = and i1 %402, %400
  %405 = and i1 %403, %401
  %406 = and i1 %404, %405
  br i1 %406, label %407, label %420

; <label>:407                                     ; preds = %385
  %408 = fmul fast float %340, %82
  %409 = call float @dx.op.tertiary.f32(i32 46, float %341, float %87, float %408)  ; FMad(a,b,c)
  %410 = call float @dx.op.tertiary.f32(i32 46, float %342, float %92, float %409)  ; FMad(a,b,c)
  %411 = fadd fast float %410, %97
  %412 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %413 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %414 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %412, %dx.types.Handle %413, float %398, float %399, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %415 = extractvalue %dx.types.ResRet.f32 %414, 0
  %416 = fcmp fast olt float %411, %415
  %417 = fcmp fast ogt float %415, 0x3FEFAE1480000000
  %418 = or i1 %416, %417
  %419 = uitofp i1 %418 to float
  br label %420

; <label>:420                                     ; preds = %407, %385, %383
  %421 = phi float [ %419, %407 ], [ 1.000000e+00, %385 ], [ 1.000000e+00, %383 ]
  %422 = icmp eq i32 %68, 0
  br i1 %422, label %502, label %423

; <label>:423                                     ; preds = %420
  %424 = fcmp fast oge float %285, %71
  %425 = fcmp fast oge float %285, %72
  %426 = fcmp fast oge float %285, %73
  %427 = fcmp fast oge float %285, %74
  %428 = zext i1 %424 to i32
  %429 = zext i1 %425 to i32
  %430 = zext i1 %426 to i32
  %431 = zext i1 %427 to i32
  %432 = add nuw nsw i32 %428, %429
  %433 = add nuw nsw i32 %432, %430
  %434 = add nuw nsw i32 %433, %431
  %435 = icmp ult i32 %434, %68
  br i1 %435, label %436, label %502

; <label>:436                                     ; preds = %423
  %437 = shl nuw nsw i32 %434, 2
  %438 = add nuw nsw i32 %437, 9
  %439 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %438)  ; CBufferLoadLegacy(handle,regIndex)
  %440 = extractvalue %dx.types.CBufRet.f32 %439, 0
  %441 = extractvalue %dx.types.CBufRet.f32 %439, 1
  %442 = extractvalue %dx.types.CBufRet.f32 %439, 3
  %443 = add nuw nsw i32 %437, 10
  %444 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %443)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.f32 %444, 0
  %446 = extractvalue %dx.types.CBufRet.f32 %444, 1
  %447 = extractvalue %dx.types.CBufRet.f32 %444, 3
  %448 = add nuw nsw i32 %437, 11
  %449 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %448)  ; CBufferLoadLegacy(handle,regIndex)
  %450 = extractvalue %dx.types.CBufRet.f32 %449, 0
  %451 = extractvalue %dx.types.CBufRet.f32 %449, 1
  %452 = extractvalue %dx.types.CBufRet.f32 %449, 3
  %453 = add nuw nsw i32 %437, 12
  %454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %453)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.f32 %454, 0
  %456 = extractvalue %dx.types.CBufRet.f32 %454, 1
  %457 = extractvalue %dx.types.CBufRet.f32 %454, 3
  %458 = fmul fast float %440, %340
  %459 = call float @dx.op.tertiary.f32(i32 46, float %341, float %445, float %458)  ; FMad(a,b,c)
  %460 = call float @dx.op.tertiary.f32(i32 46, float %342, float %450, float %459)  ; FMad(a,b,c)
  %461 = fadd fast float %460, %455
  %462 = fmul fast float %441, %340
  %463 = call float @dx.op.tertiary.f32(i32 46, float %341, float %446, float %462)  ; FMad(a,b,c)
  %464 = call float @dx.op.tertiary.f32(i32 46, float %342, float %451, float %463)  ; FMad(a,b,c)
  %465 = fadd fast float %464, %456
  %466 = fmul fast float %442, %340
  %467 = call float @dx.op.tertiary.f32(i32 46, float %341, float %447, float %466)  ; FMad(a,b,c)
  %468 = call float @dx.op.tertiary.f32(i32 46, float %342, float %452, float %467)  ; FMad(a,b,c)
  %469 = fadd fast float %468, %457
  %470 = fdiv fast float %461, %469
  %471 = fdiv fast float %465, %469
  %472 = add nuw nsw i32 %434, 25
  %473 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %472)  ; CBufferLoadLegacy(handle,regIndex)
  %474 = extractvalue %dx.types.CBufRet.f32 %473, 0
  %475 = extractvalue %dx.types.CBufRet.f32 %473, 1
  %476 = extractvalue %dx.types.CBufRet.f32 %473, 2
  %477 = extractvalue %dx.types.CBufRet.f32 %473, 3
  %478 = fcmp fast ole float %470, %476
  %479 = fcmp fast ole float %471, %477
  %480 = fcmp fast oge float %470, %474
  %481 = fcmp fast oge float %471, %475
  %482 = and i1 %480, %478
  %483 = and i1 %481, %479
  %484 = and i1 %482, %483
  br i1 %484, label %485, label %502

; <label>:485                                     ; preds = %436
  %486 = extractvalue %dx.types.CBufRet.f32 %454, 2
  %487 = extractvalue %dx.types.CBufRet.f32 %449, 2
  %488 = extractvalue %dx.types.CBufRet.f32 %444, 2
  %489 = extractvalue %dx.types.CBufRet.f32 %439, 2
  %490 = fmul fast float %489, %340
  %491 = call float @dx.op.tertiary.f32(i32 46, float %341, float %488, float %490)  ; FMad(a,b,c)
  %492 = call float @dx.op.tertiary.f32(i32 46, float %342, float %487, float %491)  ; FMad(a,b,c)
  %493 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %494 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %495 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %493, %dx.types.Handle %494, float %470, float %471, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %496 = extractvalue %dx.types.ResRet.f32 %495, 0
  %497 = fsub fast float 1.000000e+00, %486
  %498 = fsub fast float %497, %492
  %499 = fsub fast float %496, %76
  %500 = fcmp fast olt float %498, %499
  %501 = uitofp i1 %500 to float
  br label %502

; <label>:502                                     ; preds = %485, %436, %423, %420
  %503 = phi float [ %501, %485 ], [ 1.000000e+00, %436 ], [ 1.000000e+00, %423 ], [ 1.000000e+00, %420 ]
  %504 = fmul fast float %503, %421
  %505 = fsub fast float %340, %348
  %506 = fsub fast float %341, %349
  %507 = fsub fast float %342, %350
  %508 = mul i32 %69, 336
  %509 = add i32 %508, 128
  %510 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %511 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %509, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %512 = add i32 %508, 144
  %513 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %512, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %514 = add i32 %508, 160
  %515 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %514, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %516 = add i32 %508, 176
  %517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %516, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %518 = add i32 %508, 256
  %519 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %518, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %520 = extractvalue %dx.types.ResRet.i32 %519, 0
  %521 = extractvalue %dx.types.ResRet.i32 %519, 1
  %522 = extractvalue %dx.types.ResRet.i32 %519, 2
  %523 = bitcast i32 %520 to float
  %524 = bitcast i32 %521 to float
  %525 = bitcast i32 %522 to float
  %526 = add i32 %508, 268
  %527 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %526, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %528 = extractvalue %dx.types.ResRet.i32 %527, 0
  %529 = add i32 %508, 272
  %530 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %529, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %531 = add i32 %508, 288
  %532 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %531, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %533 = icmp eq i32 %528, 0
  %534 = fadd fast float %523, %344
  %535 = fadd fast float %524, %345
  %536 = fadd fast float %525, %346
  %537 = fmul fast float %534, 2.097152e+06
  %538 = fmul fast float %535, 2.097152e+06
  %539 = fmul fast float %536, 2.097152e+06
  %540 = fadd fast float %537, %505
  %541 = fadd fast float %538, %506
  %542 = fadd fast float %539, %507
  br i1 %533, label %543, label %783

; <label>:543                                     ; preds = %502
  %544 = extractvalue %dx.types.ResRet.i32 %532, 2
  %545 = bitcast i32 %544 to float
  %546 = extractvalue %dx.types.ResRet.i32 %532, 1
  %547 = bitcast i32 %546 to float
  %548 = extractvalue %dx.types.ResRet.i32 %532, 0
  %549 = bitcast i32 %548 to float
  %550 = add i32 %508, 320
  %551 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %550, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %552 = extractvalue %dx.types.ResRet.i32 %551, 0
  %553 = add i32 %508, 316
  %554 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %553, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %555 = extractvalue %dx.types.ResRet.i32 %554, 0
  %556 = add i32 %508, 300
  %557 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %556, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %558 = extractvalue %dx.types.ResRet.i32 %557, 0
  %559 = bitcast i32 %558 to float
  %560 = fadd fast float %540, %549
  %561 = fadd fast float %541, %547
  %562 = fadd fast float %542, %545
  %563 = fmul fast float %560, %560
  %564 = fmul fast float %561, %561
  %565 = fadd fast float %563, %564
  %566 = fmul fast float %562, %562
  %567 = fadd fast float %565, %566
  %568 = call float @dx.op.unary.f32(i32 24, float %567)  ; Sqrt(value)
  %569 = call float @dx.op.unary.f32(i32 23, float %568)  ; Log(value)
  %570 = fadd fast float %569, %559
  %571 = call float @dx.op.unary.f32(i32 27, float %570)  ; Round_ni(value)
  %572 = fptosi float %571 to i32
  %573 = sub nsw i32 %572, %555
  %574 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %573)  ; IMax(a,b)
  %575 = icmp slt i32 %574, %552
  br i1 %575, label %576, label %955

; <label>:576                                     ; preds = %543
  %577 = add nsw i32 %574, %69
  %578 = mul i32 %577, 336
  %579 = add i32 %578, 128
  %580 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %579, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %581 = extractvalue %dx.types.ResRet.i32 %580, 0
  %582 = extractvalue %dx.types.ResRet.i32 %580, 1
  %583 = extractvalue %dx.types.ResRet.i32 %580, 2
  %584 = bitcast i32 %581 to float
  %585 = bitcast i32 %582 to float
  %586 = bitcast i32 %583 to float
  %587 = add i32 %578, 144
  %588 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %587, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %589 = extractvalue %dx.types.ResRet.i32 %588, 0
  %590 = extractvalue %dx.types.ResRet.i32 %588, 1
  %591 = extractvalue %dx.types.ResRet.i32 %588, 2
  %592 = bitcast i32 %589 to float
  %593 = bitcast i32 %590 to float
  %594 = bitcast i32 %591 to float
  %595 = add i32 %578, 160
  %596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %595, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %597 = extractvalue %dx.types.ResRet.i32 %596, 0
  %598 = extractvalue %dx.types.ResRet.i32 %596, 1
  %599 = extractvalue %dx.types.ResRet.i32 %596, 2
  %600 = bitcast i32 %597 to float
  %601 = bitcast i32 %598 to float
  %602 = bitcast i32 %599 to float
  %603 = add i32 %578, 176
  %604 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %603, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %605 = extractvalue %dx.types.ResRet.i32 %604, 0
  %606 = extractvalue %dx.types.ResRet.i32 %604, 1
  %607 = extractvalue %dx.types.ResRet.i32 %604, 2
  %608 = bitcast i32 %605 to float
  %609 = bitcast i32 %606 to float
  %610 = bitcast i32 %607 to float
  %611 = add i32 %578, 256
  %612 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %611, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %613 = extractvalue %dx.types.ResRet.i32 %612, 0
  %614 = extractvalue %dx.types.ResRet.i32 %612, 1
  %615 = extractvalue %dx.types.ResRet.i32 %612, 2
  %616 = bitcast i32 %613 to float
  %617 = bitcast i32 %614 to float
  %618 = bitcast i32 %615 to float
  %619 = add i32 %578, 272
  %620 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %619, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %621 = extractvalue %dx.types.ResRet.i32 %620, 0
  %622 = extractvalue %dx.types.ResRet.i32 %620, 1
  %623 = extractvalue %dx.types.ResRet.i32 %620, 2
  %624 = bitcast i32 %621 to float
  %625 = bitcast i32 %622 to float
  %626 = bitcast i32 %623 to float
  %627 = fadd fast float %616, %344
  %628 = fadd fast float %617, %345
  %629 = fadd fast float %618, %346
  %630 = fmul fast float %627, 2.097152e+06
  %631 = fmul fast float %628, 2.097152e+06
  %632 = fmul fast float %629, 2.097152e+06
  %633 = fadd fast float %630, %505
  %634 = fadd fast float %633, %624
  %635 = fadd fast float %631, %506
  %636 = fadd fast float %635, %625
  %637 = fadd fast float %632, %507
  %638 = fadd fast float %637, %626
  %639 = fmul fast float %634, %584
  %640 = call float @dx.op.tertiary.f32(i32 46, float %636, float %592, float %639)  ; FMad(a,b,c)
  %641 = call float @dx.op.tertiary.f32(i32 46, float %638, float %600, float %640)  ; FMad(a,b,c)
  %642 = fadd fast float %641, %608
  %643 = fmul fast float %634, %585
  %644 = call float @dx.op.tertiary.f32(i32 46, float %636, float %593, float %643)  ; FMad(a,b,c)
  %645 = call float @dx.op.tertiary.f32(i32 46, float %638, float %601, float %644)  ; FMad(a,b,c)
  %646 = fadd fast float %645, %609
  %647 = fmul fast float %634, %586
  %648 = call float @dx.op.tertiary.f32(i32 46, float %636, float %594, float %647)  ; FMad(a,b,c)
  %649 = call float @dx.op.tertiary.f32(i32 46, float %638, float %602, float %648)  ; FMad(a,b,c)
  %650 = fadd fast float %649, %610
  %651 = fmul fast float %642, 1.280000e+02
  %652 = fmul fast float %646, 1.280000e+02
  %653 = fptoui float %651 to i32
  %654 = fptoui float %652 to i32
  %655 = icmp ult i32 %577, 8192
  br i1 %655, label %662, label %656

; <label>:656                                     ; preds = %576
  %657 = mul i32 %577, 21845
  %658 = shl i32 %654, 7
  %659 = add i32 %657, -178946048
  %660 = add i32 %659, %653
  %661 = add i32 %660, %658
  br label %662

; <label>:662                                     ; preds = %656, %576
  %663 = phi i32 [ %661, %656 ], [ %577, %576 ]
  %664 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %665 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %664, i32 %663, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %666 = extractvalue %dx.types.ResRet.i32 %665, 0
  %667 = lshr i32 %666, 20
  %668 = and i32 %667, 63
  %669 = and i32 %666, 134217728
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %777, label %671

; <label>:671                                     ; preds = %662
  %672 = icmp eq i32 %668, 0
  %673 = zext i1 %672 to i32
  %674 = add i32 %668, %577
  %675 = fmul fast float %642, 1.638400e+04
  %676 = fmul fast float %646, 1.638400e+04
  %677 = fptoui float %675 to i32
  %678 = fptoui float %676 to i32
  br i1 %672, label %754, label %679

; <label>:679                                     ; preds = %671
  %680 = add i32 %578, 304
  %681 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %680, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %682 = extractvalue %dx.types.ResRet.i32 %681, 0
  %683 = extractvalue %dx.types.ResRet.i32 %681, 1
  %684 = mul i32 %674, 336
  %685 = add i32 %684, 304
  %686 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %685, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %687 = extractvalue %dx.types.ResRet.i32 %686, 0
  %688 = extractvalue %dx.types.ResRet.i32 %686, 1
  %689 = shl i32 %682, 5
  %690 = shl i32 %683, 5
  %691 = shl i32 %687, 5
  %692 = shl i32 %688, 5
  %693 = sub i32 %653, %689
  %694 = sub i32 %654, %690
  %695 = and i32 %667, 31
  %696 = shl i32 %691, %695
  %697 = shl i32 %692, %695
  %698 = add i32 %693, %696
  %699 = add i32 %694, %697
  %700 = lshr i32 %698, %695
  %701 = lshr i32 %699, %695
  %702 = shl i32 %700, 7
  %703 = shl i32 %701, 7
  %704 = or i32 %702, 127
  %705 = or i32 %703, 127
  %706 = add i32 %578, 112
  %707 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %706, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %708 = extractvalue %dx.types.ResRet.i32 %707, 2
  %709 = bitcast i32 %708 to float
  %710 = add i32 %684, 112
  %711 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %710, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %712 = extractvalue %dx.types.ResRet.i32 %711, 2
  %713 = bitcast i32 %712 to float
  %714 = sitofp i32 %682 to float
  %715 = sitofp i32 %683 to float
  %716 = sitofp i32 %687 to float
  %717 = sitofp i32 %688 to float
  %718 = shl i32 1, %695
  %719 = uitofp i32 %718 to float
  %720 = fdiv fast float 1.000000e+00, %719
  %721 = fmul fast float %720, %714
  %722 = fmul fast float %720, %715
  %723 = fsub fast float %716, %721
  %724 = fsub fast float %717, %722
  %725 = fmul fast float %723, 2.500000e-01
  %726 = fmul fast float %724, 2.500000e-01
  %727 = fmul fast float %720, %709
  %728 = fsub fast float %713, %727
  %729 = fmul fast float %720, %642
  %730 = fmul fast float %720, %646
  %731 = fadd fast float %725, %729
  %732 = fadd fast float %726, %730
  %733 = fmul fast float %731, 1.638400e+04
  %734 = fmul fast float %732, 1.638400e+04
  %735 = fptoui float %733 to i32
  %736 = fptoui float %734 to i32
  %737 = call i32 @dx.op.binary.i32(i32 39, i32 %735, i32 %702)  ; UMax(a,b)
  %738 = call i32 @dx.op.binary.i32(i32 39, i32 %736, i32 %703)  ; UMax(a,b)
  %739 = call i32 @dx.op.binary.i32(i32 40, i32 %737, i32 %704)  ; UMin(a,b)
  %740 = call i32 @dx.op.binary.i32(i32 40, i32 %738, i32 %705)  ; UMin(a,b)
  %741 = icmp ult i32 %674, 8192
  br i1 %741, label %747, label %742

; <label>:742                                     ; preds = %679
  %743 = mul i32 %674, 21845
  %744 = add i32 %743, -178946048
  %745 = add i32 %744, %700
  %746 = add i32 %745, %703
  br label %747

; <label>:747                                     ; preds = %742, %679
  %748 = phi i32 [ %746, %742 ], [ %674, %679 ]
  %749 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %664, i32 %748, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %750 = extractvalue %dx.types.ResRet.i32 %749, 0
  %751 = and i32 %750, 200278016
  %752 = icmp eq i32 %751, 134217728
  %753 = zext i1 %752 to i32
  br label %754

; <label>:754                                     ; preds = %747, %671
  %755 = phi i32 [ %739, %747 ], [ %677, %671 ]
  %756 = phi i32 [ %740, %747 ], [ %678, %671 ]
  %757 = phi i32 [ %753, %747 ], [ %673, %671 ]
  %758 = phi i32 [ %750, %747 ], [ %666, %671 ]
  %759 = phi float [ %720, %747 ], [ 1.000000e+00, %671 ]
  %760 = phi float [ %728, %747 ], [ 0.000000e+00, %671 ]
  %761 = icmp eq i32 %757, 0
  br i1 %761, label %777, label %762

; <label>:762                                     ; preds = %754
  %763 = shl i32 %758, 7
  %764 = and i32 %763, 130944
  %765 = lshr i32 %758, 3
  %766 = and i32 %765, 130944
  %767 = and i32 %755, 127
  %768 = and i32 %756, 127
  %769 = or i32 %764, %767
  %770 = or i32 %766, %768
  %771 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %772 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %771, i32 0, i32 %769, i32 %770, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %773 = extractvalue %dx.types.ResRet.i32 %772, 0
  %774 = bitcast i32 %773 to float
  %775 = fsub fast float %774, %760
  %776 = fdiv fast float %775, %759
  br label %777

; <label>:777                                     ; preds = %762, %754, %662
  %778 = phi float [ %776, %762 ], [ 0.000000e+00, %754 ], [ 0.000000e+00, %662 ]
  %779 = phi i1 [ true, %762 ], [ false, %754 ], [ false, %662 ]
  %780 = fcmp fast ogt float %778, %650
  %781 = and i1 %779, %780
  %782 = select i1 %781, float 0.000000e+00, float 1.000000e+00
  br label %955

; <label>:783                                     ; preds = %502
  %784 = extractvalue %dx.types.ResRet.i32 %517, 3
  %785 = extractvalue %dx.types.ResRet.i32 %517, 2
  %786 = extractvalue %dx.types.ResRet.i32 %517, 1
  %787 = extractvalue %dx.types.ResRet.i32 %517, 0
  %788 = extractvalue %dx.types.ResRet.i32 %515, 3
  %789 = extractvalue %dx.types.ResRet.i32 %515, 2
  %790 = extractvalue %dx.types.ResRet.i32 %515, 1
  %791 = extractvalue %dx.types.ResRet.i32 %515, 0
  %792 = extractvalue %dx.types.ResRet.i32 %513, 3
  %793 = extractvalue %dx.types.ResRet.i32 %513, 2
  %794 = extractvalue %dx.types.ResRet.i32 %513, 1
  %795 = extractvalue %dx.types.ResRet.i32 %513, 0
  %796 = extractvalue %dx.types.ResRet.i32 %511, 3
  %797 = extractvalue %dx.types.ResRet.i32 %511, 2
  %798 = extractvalue %dx.types.ResRet.i32 %511, 1
  %799 = extractvalue %dx.types.ResRet.i32 %511, 0
  %800 = extractvalue %dx.types.ResRet.i32 %530, 2
  %801 = bitcast i32 %800 to float
  %802 = extractvalue %dx.types.ResRet.i32 %530, 1
  %803 = bitcast i32 %802 to float
  %804 = extractvalue %dx.types.ResRet.i32 %530, 0
  %805 = bitcast i32 %804 to float
  %806 = fadd fast float %540, %805
  %807 = fadd fast float %541, %803
  %808 = fadd fast float %542, %801
  %809 = icmp eq i32 %528, 2
  br i1 %809, label %856, label %810

; <label>:810                                     ; preds = %783
  %811 = call float @dx.op.unary.f32(i32 6, float %806)  ; FAbs(value)
  %812 = call float @dx.op.unary.f32(i32 6, float %807)  ; FAbs(value)
  %813 = fcmp fast ult float %811, %812
  %814 = call float @dx.op.unary.f32(i32 6, float %808)  ; FAbs(value)
  %815 = fcmp fast ult float %811, %814
  %816 = or i1 %813, %815
  br i1 %816, label %820, label %817

; <label>:817                                     ; preds = %810
  %818 = fcmp ule float %806, 0.000000e+00
  %819 = zext i1 %818 to i32
  br label %828

; <label>:820                                     ; preds = %810
  %821 = fcmp fast ogt float %812, %814
  br i1 %821, label %822, label %825

; <label>:822                                     ; preds = %820
  %823 = fcmp fast ogt float %807, 0.000000e+00
  %824 = select i1 %823, i32 2, i32 3
  br label %828

; <label>:825                                     ; preds = %820
  %826 = fcmp fast ogt float %808, 0.000000e+00
  %827 = select i1 %826, i32 4, i32 5
  br label %828

; <label>:828                                     ; preds = %825, %822, %817
  %829 = phi i32 [ %819, %817 ], [ %824, %822 ], [ %827, %825 ]
  %830 = add i32 %829, %69
  %831 = mul i32 %830, 336
  %832 = add i32 %831, 128
  %833 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %832, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %834 = extractvalue %dx.types.ResRet.i32 %833, 0
  %835 = extractvalue %dx.types.ResRet.i32 %833, 1
  %836 = extractvalue %dx.types.ResRet.i32 %833, 2
  %837 = extractvalue %dx.types.ResRet.i32 %833, 3
  %838 = add i32 %831, 144
  %839 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %838, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %840 = extractvalue %dx.types.ResRet.i32 %839, 0
  %841 = extractvalue %dx.types.ResRet.i32 %839, 1
  %842 = extractvalue %dx.types.ResRet.i32 %839, 2
  %843 = extractvalue %dx.types.ResRet.i32 %839, 3
  %844 = add i32 %831, 160
  %845 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %844, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %846 = extractvalue %dx.types.ResRet.i32 %845, 0
  %847 = extractvalue %dx.types.ResRet.i32 %845, 1
  %848 = extractvalue %dx.types.ResRet.i32 %845, 2
  %849 = extractvalue %dx.types.ResRet.i32 %845, 3
  %850 = add i32 %831, 176
  %851 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %510, i32 %850, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %852 = extractvalue %dx.types.ResRet.i32 %851, 0
  %853 = extractvalue %dx.types.ResRet.i32 %851, 1
  %854 = extractvalue %dx.types.ResRet.i32 %851, 2
  %855 = extractvalue %dx.types.ResRet.i32 %851, 3
  br label %856

; <label>:856                                     ; preds = %828, %783
  %857 = phi i32 [ %834, %828 ], [ %799, %783 ]
  %858 = phi i32 [ %835, %828 ], [ %798, %783 ]
  %859 = phi i32 [ %836, %828 ], [ %797, %783 ]
  %860 = phi i32 [ %837, %828 ], [ %796, %783 ]
  %861 = phi i32 [ %840, %828 ], [ %795, %783 ]
  %862 = phi i32 [ %841, %828 ], [ %794, %783 ]
  %863 = phi i32 [ %842, %828 ], [ %793, %783 ]
  %864 = phi i32 [ %843, %828 ], [ %792, %783 ]
  %865 = phi i32 [ %846, %828 ], [ %791, %783 ]
  %866 = phi i32 [ %847, %828 ], [ %790, %783 ]
  %867 = phi i32 [ %848, %828 ], [ %789, %783 ]
  %868 = phi i32 [ %849, %828 ], [ %788, %783 ]
  %869 = phi i32 [ %852, %828 ], [ %787, %783 ]
  %870 = phi i32 [ %853, %828 ], [ %786, %783 ]
  %871 = phi i32 [ %854, %828 ], [ %785, %783 ]
  %872 = phi i32 [ %855, %828 ], [ %784, %783 ]
  %873 = phi i32 [ %830, %828 ], [ %69, %783 ]
  %874 = bitcast i32 %872 to float
  %875 = bitcast i32 %871 to float
  %876 = bitcast i32 %870 to float
  %877 = bitcast i32 %869 to float
  %878 = bitcast i32 %868 to float
  %879 = bitcast i32 %867 to float
  %880 = bitcast i32 %866 to float
  %881 = bitcast i32 %865 to float
  %882 = bitcast i32 %864 to float
  %883 = bitcast i32 %863 to float
  %884 = bitcast i32 %862 to float
  %885 = bitcast i32 %861 to float
  %886 = bitcast i32 %860 to float
  %887 = bitcast i32 %859 to float
  %888 = bitcast i32 %858 to float
  %889 = bitcast i32 %857 to float
  %890 = fmul fast float %889, %806
  %891 = call float @dx.op.tertiary.f32(i32 46, float %807, float %885, float %890)  ; FMad(a,b,c)
  %892 = call float @dx.op.tertiary.f32(i32 46, float %808, float %881, float %891)  ; FMad(a,b,c)
  %893 = fadd fast float %892, %877
  %894 = fmul fast float %888, %806
  %895 = call float @dx.op.tertiary.f32(i32 46, float %807, float %884, float %894)  ; FMad(a,b,c)
  %896 = call float @dx.op.tertiary.f32(i32 46, float %808, float %880, float %895)  ; FMad(a,b,c)
  %897 = fadd fast float %896, %876
  %898 = fmul fast float %887, %806
  %899 = call float @dx.op.tertiary.f32(i32 46, float %807, float %883, float %898)  ; FMad(a,b,c)
  %900 = call float @dx.op.tertiary.f32(i32 46, float %808, float %879, float %899)  ; FMad(a,b,c)
  %901 = fadd fast float %900, %875
  %902 = fmul fast float %886, %806
  %903 = call float @dx.op.tertiary.f32(i32 46, float %807, float %882, float %902)  ; FMad(a,b,c)
  %904 = call float @dx.op.tertiary.f32(i32 46, float %808, float %878, float %903)  ; FMad(a,b,c)
  %905 = fadd fast float %904, %874
  %906 = fdiv fast float %893, %905
  %907 = fdiv fast float %897, %905
  %908 = fdiv fast float %901, %905
  %909 = icmp ult i32 %873, 8192
  br i1 %909, label %920, label %910

; <label>:910                                     ; preds = %856
  %911 = fmul fast float %907, 1.280000e+02
  %912 = fptoui float %911 to i32
  %913 = fmul fast float %906, 1.280000e+02
  %914 = fptoui float %913 to i32
  %915 = mul i32 %873, 21845
  %916 = shl i32 %912, 7
  %917 = add i32 %915, -178946048
  %918 = add i32 %917, %914
  %919 = add i32 %918, %916
  br label %920

; <label>:920                                     ; preds = %910, %856
  %921 = phi i32 [ %919, %910 ], [ %873, %856 ]
  %922 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %923 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %922, i32 %921, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %924 = extractvalue %dx.types.ResRet.i32 %923, 0
  %925 = lshr i32 %924, 20
  %926 = and i32 %924, 134217728
  %927 = icmp eq i32 %926, 0
  %928 = and i32 %925, 31
  %929 = lshr i32 16384, %928
  %930 = uitofp i32 %929 to float
  %931 = select i1 %909, float 1.280000e+02, float %930
  br i1 %927, label %949, label %932

; <label>:932                                     ; preds = %920
  %933 = lshr i32 %924, 3
  %934 = and i32 %933, 130944
  %935 = fmul fast float %931, %907
  %936 = fptoui float %935 to i32
  %937 = and i32 %936, 127
  %938 = or i32 %937, %934
  %939 = shl i32 %924, 7
  %940 = and i32 %939, 130944
  %941 = fmul fast float %931, %906
  %942 = fptoui float %941 to i32
  %943 = and i32 %942, 127
  %944 = or i32 %943, %940
  %945 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %946 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %945, i32 0, i32 %944, i32 %938, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %947 = extractvalue %dx.types.ResRet.i32 %946, 0
  %948 = bitcast i32 %947 to float
  br label %949

; <label>:949                                     ; preds = %932, %920
  %950 = phi float [ %948, %932 ], [ 0.000000e+00, %920 ]
  %951 = phi i1 [ true, %932 ], [ false, %920 ]
  %952 = fcmp fast ogt float %950, %908
  %953 = and i1 %951, %952
  %954 = select i1 %953, float 0.000000e+00, float 1.000000e+00
  br label %955

; <label>:955                                     ; preds = %949, %777, %543
  %956 = phi float [ 1.000000e+00, %543 ], [ %782, %777 ], [ %954, %949 ]
  %957 = fmul fast float %504, %956
  br label %958

; <label>:958                                     ; preds = %955, %379
  %959 = phi float [ %957, %955 ], [ 1.000000e+00, %379 ]
  %960 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %961 = extractvalue %dx.types.CBufRet.f32 %960, 0
  %962 = extractvalue %dx.types.CBufRet.f32 %960, 1
  %963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %964 = extractvalue %dx.types.CBufRet.f32 %963, 0
  %965 = extractvalue %dx.types.CBufRet.f32 %963, 1
  %966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %967 = extractvalue %dx.types.CBufRet.f32 %966, 0
  %968 = extractvalue %dx.types.CBufRet.f32 %966, 1
  %969 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %970 = extractvalue %dx.types.CBufRet.f32 %969, 0
  %971 = extractvalue %dx.types.CBufRet.f32 %969, 1
  %972 = fmul fast float %961, %340
  %973 = call float @dx.op.tertiary.f32(i32 46, float %341, float %964, float %972)  ; FMad(a,b,c)
  %974 = call float @dx.op.tertiary.f32(i32 46, float %342, float %967, float %973)  ; FMad(a,b,c)
  %975 = fadd fast float %974, %970
  %976 = fmul fast float %962, %340
  %977 = call float @dx.op.tertiary.f32(i32 46, float %341, float %965, float %976)  ; FMad(a,b,c)
  %978 = call float @dx.op.tertiary.f32(i32 46, float %342, float %968, float %977)  ; FMad(a,b,c)
  %979 = fadd fast float %978, %971
  %980 = fmul fast float %975, 5.000000e-01
  %981 = fmul fast float %979, 5.000000e-01
  %982 = fadd fast float %980, 5.000000e-01
  %983 = fsub fast float 5.000000e-01, %981
  %984 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %985 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %986 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %984, %dx.types.Handle %985, float %982, float %983, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %987 = extractvalue %dx.types.ResRet.f32 %986, 0
  %988 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %989 = extractvalue %dx.types.CBufRet.f32 %988, 2
  %990 = fcmp fast ogt float %989, 0.000000e+00
  br i1 %990, label %991, label %1000

; <label>:991                                     ; preds = %958
  %992 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %993 = extractvalue %dx.types.CBufRet.f32 %992, 0
  %994 = extractvalue %dx.types.CBufRet.f32 %992, 1
  %995 = extractvalue %dx.types.CBufRet.f32 %992, 2
  %996 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %997 = fmul fast float %993, %996
  %998 = fmul fast float %994, %996
  %999 = fmul fast float %995, %996
  br label %1000

; <label>:1000                                    ; preds = %991, %958
  %1001 = phi float [ %997, %991 ], [ %63, %958 ]
  %1002 = phi float [ %998, %991 ], [ %64, %958 ]
  %1003 = phi float [ %999, %991 ], [ %65, %958 ]
  %1004 = fsub fast float -0.000000e+00, %373
  %1005 = fsub fast float -0.000000e+00, %374
  %1006 = fsub fast float -0.000000e+00, %375
  %1007 = call float @dx.op.dot3.f32(i32 55, float %59, float %60, float %61, float %1004, float %1005, float %1006)  ; Dot3(ax,ay,az,bx,by,bz)
  %1008 = extractvalue %dx.types.CBufRet.f32 %257, 1
  %1009 = fmul fast float %1008, %1008
  %1010 = fsub fast float 1.000000e+00, %1009
  %1011 = fmul fast float %1007, 2.000000e+00
  %1012 = fadd fast float %1011, %1008
  %1013 = fmul fast float %1012, %1008
  %1014 = fadd fast float %1013, 1.000000e+00
  %1015 = call float @dx.op.unary.f32(i32 24, float %1014)  ; Sqrt(value)
  %1016 = fmul fast float %1015, 0x402921FB60000000
  %1017 = fmul fast float %1016, %1014
  %1018 = fdiv fast float %1010, %1017
  %1019 = fmul fast float %959, %66
  %1020 = fmul fast float %1019, %987
  %1021 = fmul fast float %1020, %1018
  %1022 = fmul fast float %1021, %1001
  %1023 = fmul fast float %1021, %1002
  %1024 = fmul fast float %1021, %1003
  br label %1025

; <label>:1025                                    ; preds = %1000, %377
  %1026 = phi float [ %378, %377 ], [ %1008, %1000 ]
  %1027 = phi float [ 0.000000e+00, %377 ], [ %1022, %1000 ]
  %1028 = phi float [ 0.000000e+00, %377 ], [ %1023, %1000 ]
  %1029 = phi float [ 0.000000e+00, %377 ], [ %1024, %1000 ]
  %1030 = fmul fast float %1026, %374
  %1031 = fmul fast float %1026, %375
  %1032 = fmul fast float %1026, %373
  %1033 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1034 = extractvalue %dx.types.CBufRet.f32 %1033, 3
  %1035 = fcmp fast ogt float %1034, 0.000000e+00
  %1036 = extractvalue %dx.types.CBufRet.f32 %1033, 2
  %1037 = fcmp fast ogt float %1036, 0.000000e+00
  %1038 = or i1 %1035, %1037
  br i1 %1038, label %1039, label %1107

; <label>:1039                                    ; preds = %1025
  %1040 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1041 = extractvalue %dx.types.CBufRet.f32 %1040, 0
  %1042 = extractvalue %dx.types.CBufRet.f32 %1040, 1
  %1043 = extractvalue %dx.types.CBufRet.f32 %1040, 2
  %1044 = fmul fast float %1041, %355
  %1045 = fmul fast float %1042, %357
  %1046 = fmul fast float %1043, %359
  %1047 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1048 = extractvalue %dx.types.CBufRet.f32 %1047, 0
  %1049 = extractvalue %dx.types.CBufRet.f32 %1047, 1
  %1050 = extractvalue %dx.types.CBufRet.f32 %1047, 2
  %1051 = fadd fast float %1044, %1048
  %1052 = fadd fast float %1045, %1049
  %1053 = fadd fast float %1046, %1050
  %1054 = call float @dx.op.binary.f32(i32 35, float %1051, float 0.000000e+00)  ; FMax(a,b)
  %1055 = call float @dx.op.binary.f32(i32 35, float %1052, float 0.000000e+00)  ; FMax(a,b)
  %1056 = call float @dx.op.binary.f32(i32 35, float %1053, float 0.000000e+00)  ; FMax(a,b)
  %1057 = call float @dx.op.binary.f32(i32 36, float %1054, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1058 = call float @dx.op.binary.f32(i32 36, float %1055, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1059 = call float @dx.op.binary.f32(i32 36, float %1056, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1061 = extractvalue %dx.types.CBufRet.f32 %1060, 0
  %1062 = extractvalue %dx.types.CBufRet.f32 %1060, 1
  %1063 = extractvalue %dx.types.CBufRet.f32 %1060, 2
  %1064 = fmul fast float %1061, %1057
  %1065 = fmul fast float %1062, %1058
  %1066 = fmul fast float %1063, %1059
  %1067 = fptosi float %1064 to i32
  %1068 = fptosi float %1065 to i32
  %1069 = fptosi float %1066 to i32
  %1070 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1071 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1070, i32 0, i32 %1067, i32 %1068, i32 %1069, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1072 = extractvalue %dx.types.ResRet.i32 %1071, 0
  %1073 = extractvalue %dx.types.ResRet.i32 %1071, 1
  %1074 = extractvalue %dx.types.ResRet.i32 %1071, 2
  %1075 = extractvalue %dx.types.ResRet.i32 %1071, 3
  %1076 = uitofp i32 %1072 to float
  %1077 = uitofp i32 %1073 to float
  %1078 = uitofp i32 %1074 to float
  %1079 = uitofp i32 %1075 to float
  %1080 = extractvalue %dx.types.CBufRet.f32 %1060, 3
  %1081 = fadd fast float %1080, 1.000000e+00
  %1082 = fmul fast float %1081, %1076
  %1083 = fmul fast float %1081, %1077
  %1084 = fmul fast float %1081, %1078
  %1085 = fdiv fast float %1064, %1079
  %1086 = fdiv fast float %1065, %1079
  %1087 = fdiv fast float %1066, %1079
  %1088 = call float @dx.op.unary.f32(i32 22, float %1085)  ; Frc(value)
  %1089 = call float @dx.op.unary.f32(i32 22, float %1086)  ; Frc(value)
  %1090 = call float @dx.op.unary.f32(i32 22, float %1087)  ; Frc(value)
  %1091 = fmul fast float %1080, %1088
  %1092 = fmul fast float %1080, %1089
  %1093 = fmul fast float %1080, %1090
  %1094 = fadd fast float %1082, 5.000000e-01
  %1095 = fadd fast float %1094, %1091
  %1096 = fadd fast float %1083, 5.000000e-01
  %1097 = fadd fast float %1096, %1092
  %1098 = fadd fast float %1084, 5.000000e-01
  %1099 = fadd fast float %1098, %1093
  %1100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1101 = extractvalue %dx.types.CBufRet.f32 %1100, 0
  %1102 = extractvalue %dx.types.CBufRet.f32 %1100, 1
  %1103 = extractvalue %dx.types.CBufRet.f32 %1100, 2
  %1104 = fmul fast float %1095, %1101
  %1105 = fmul fast float %1097, %1102
  %1106 = fmul fast float %1099, %1103
  br label %1107

; <label>:1107                                    ; preds = %1039, %1025
  %1108 = phi float [ %1104, %1039 ], [ 0.000000e+00, %1025 ]
  %1109 = phi float [ %1105, %1039 ], [ 0.000000e+00, %1025 ]
  %1110 = phi float [ %1106, %1039 ], [ 0.000000e+00, %1025 ]
  br i1 %1035, label %1111, label %1447

; <label>:1111                                    ; preds = %1107
  %1112 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1113 = extractvalue %dx.types.CBufRet.f32 %1112, 3
  %1114 = fcmp fast ogt float %1113, 0.000000e+00
  br i1 %1114, label %1115, label %1193

; <label>:1115                                    ; preds = %1111
  %1116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1117 = extractvalue %dx.types.CBufRet.f32 %1116, 0
  %1118 = extractvalue %dx.types.CBufRet.f32 %1116, 1
  %1119 = extractvalue %dx.types.CBufRet.f32 %1116, 2
  %1120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1121 = extractvalue %dx.types.CBufRet.f32 %1120, 2
  %1122 = fcmp fast ogt float %1121, 0.000000e+00
  br i1 %1122, label %1123, label %1159, !dx.controlflow.hints !55

; <label>:1123                                    ; preds = %1115
  %1124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1125 = extractvalue %dx.types.CBufRet.f32 %1124, 0
  %1126 = fmul fast float %1125, %372
  %1127 = extractvalue %dx.types.CBufRet.f32 %1124, 1
  %1128 = fadd fast float %1126, %1127
  %1129 = call float @dx.op.unary.f32(i32 7, float %1128)  ; Saturate(value)
  %1130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1131 = extractvalue %dx.types.CBufRet.f32 %1130, 1
  %1132 = extractvalue %dx.types.CBufRet.f32 %1130, 0
  %1133 = fsub fast float -0.000000e+00, %1132
  %1134 = call float @dx.op.dot2.f32(i32 54, float %373, float %374, float %1131, float %1133)  ; Dot2(ax,ay,bx,by)
  %1135 = call float @dx.op.dot2.f32(i32 54, float %373, float %374, float %1132, float %1131)  ; Dot2(ax,ay,bx,by)
  %1136 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1138 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1136, %dx.types.Handle %1137, float %1134, float %1135, float %375, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1139 = extractvalue %dx.types.ResRet.f32 %1138, 0
  %1140 = extractvalue %dx.types.ResRet.f32 %1138, 1
  %1141 = extractvalue %dx.types.ResRet.f32 %1138, 2
  %1142 = extractvalue %dx.types.CBufRet.f32 %1124, 2
  %1143 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1136, %dx.types.Handle %1137, float %1134, float %1135, float %375, float undef, i32 undef, i32 undef, i32 undef, float %1142)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1144 = extractvalue %dx.types.ResRet.f32 %1143, 0
  %1145 = extractvalue %dx.types.ResRet.f32 %1143, 1
  %1146 = extractvalue %dx.types.ResRet.f32 %1143, 2
  %1147 = fsub fast float %1139, %1144
  %1148 = fsub fast float %1140, %1145
  %1149 = fsub fast float %1141, %1146
  %1150 = fmul fast float %1147, %1129
  %1151 = fmul fast float %1148, %1129
  %1152 = fmul fast float %1149, %1129
  %1153 = fadd fast float %1150, %1144
  %1154 = fadd fast float %1151, %1145
  %1155 = fadd fast float %1152, %1146
  %1156 = fmul fast float %1153, %1117
  %1157 = fmul fast float %1154, %1118
  %1158 = fmul fast float %1155, %1119
  br label %1159

; <label>:1159                                    ; preds = %1123, %1115
  %1160 = phi float [ %1156, %1123 ], [ %1117, %1115 ]
  %1161 = phi float [ %1157, %1123 ], [ %1118, %1115 ]
  %1162 = phi float [ %1158, %1123 ], [ %1119, %1115 ]
  %1163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1164 = extractvalue %dx.types.CBufRet.f32 %1163, 0
  %1165 = extractvalue %dx.types.CBufRet.f32 %1163, 1
  %1166 = extractvalue %dx.types.CBufRet.f32 %1163, 2
  %1167 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1168 = extractvalue %dx.types.CBufRet.f32 %1167, 1
  %1169 = fmul fast float %1168, %1164
  %1170 = fmul fast float %1168, %1165
  %1171 = fmul fast float %1168, %1166
  %1172 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1173 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1174 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1172, %dx.types.Handle %1173, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1175 = extractvalue %dx.types.ResRet.f32 %1174, 0
  %1176 = extractvalue %dx.types.ResRet.f32 %1174, 1
  %1177 = extractvalue %dx.types.ResRet.f32 %1174, 2
  %1178 = fmul fast float %1169, %1175
  %1179 = fmul fast float %1170, %1176
  %1180 = fmul fast float %1171, %1177
  %1181 = fadd fast float %1178, %1160
  %1182 = fadd fast float %1179, %1161
  %1183 = fadd fast float %1180, %1162
  %1184 = fmul fast float %1181, 0x3FD20DD740000000
  %1185 = fmul fast float %1182, 0x3FD20DD740000000
  %1186 = fmul fast float %1183, 0x3FD20DD740000000
  %1187 = call float @dx.op.dot4.f32(i32 56, float %1184, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1188 = call float @dx.op.dot4.f32(i32 56, float %1185, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1189 = call float @dx.op.dot4.f32(i32 56, float %1186, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1190 = call float @dx.op.binary.f32(i32 35, float %1187, float 0.000000e+00)  ; FMax(a,b)
  %1191 = call float @dx.op.binary.f32(i32 35, float %1188, float 0.000000e+00)  ; FMax(a,b)
  %1192 = call float @dx.op.binary.f32(i32 35, float %1189, float 0.000000e+00)  ; FMax(a,b)
  br label %1225

; <label>:1193                                    ; preds = %1111
  %1194 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1195 = extractvalue %dx.types.CBufRet.f32 %1194, 0
  %1196 = extractvalue %dx.types.CBufRet.f32 %1194, 1
  %1197 = extractvalue %dx.types.CBufRet.f32 %1194, 2
  %1198 = extractvalue %dx.types.CBufRet.f32 %1194, 3
  %1199 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1200 = extractvalue %dx.types.CBufRet.f32 %1199, 0
  %1201 = extractvalue %dx.types.CBufRet.f32 %1199, 1
  %1202 = extractvalue %dx.types.CBufRet.f32 %1199, 2
  %1203 = extractvalue %dx.types.CBufRet.f32 %1199, 3
  %1204 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1205 = extractvalue %dx.types.CBufRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.CBufRet.f32 %1204, 1
  %1207 = extractvalue %dx.types.CBufRet.f32 %1204, 2
  %1208 = extractvalue %dx.types.CBufRet.f32 %1204, 3
  %1209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1210 = extractvalue %dx.types.CBufRet.f32 %1209, 0
  %1211 = extractvalue %dx.types.CBufRet.f32 %1209, 1
  %1212 = extractvalue %dx.types.CBufRet.f32 %1209, 2
  %1213 = call float @dx.op.dot4.f32(i32 56, float %1195, float %1196, float %1197, float %1198, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1214 = call float @dx.op.dot4.f32(i32 56, float %1200, float %1201, float %1202, float %1203, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1215 = call float @dx.op.dot4.f32(i32 56, float %1205, float %1206, float %1207, float %1208, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1216 = call float @dx.op.binary.f32(i32 35, float %1213, float 0.000000e+00)  ; FMax(a,b)
  %1217 = call float @dx.op.binary.f32(i32 35, float %1214, float 0.000000e+00)  ; FMax(a,b)
  %1218 = call float @dx.op.binary.f32(i32 35, float %1215, float 0.000000e+00)  ; FMax(a,b)
  %1219 = fmul fast float %1210, 0x3FD45F3060000000
  %1220 = fmul fast float %1219, %1216
  %1221 = fmul fast float %1211, 0x3FD45F3060000000
  %1222 = fmul fast float %1221, %1217
  %1223 = fmul fast float %1212, 0x3FD45F3060000000
  %1224 = fmul fast float %1223, %1218
  br label %1225

; <label>:1225                                    ; preds = %1193, %1159
  %1226 = phi float [ %1190, %1159 ], [ %1220, %1193 ]
  %1227 = phi float [ %1191, %1159 ], [ %1222, %1193 ]
  %1228 = phi float [ %1192, %1159 ], [ %1224, %1193 ]
  %1229 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1230 = extractvalue %dx.types.CBufRet.i32 %1229, 2
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1274, label %1232

; <label>:1232                                    ; preds = %1225
  br label %1233

; <label>:1233                                    ; preds = %1267, %1232
  %1234 = phi i32 [ %1268, %1267 ], [ 0, %1232 ]
  %1235 = add i32 %1234, 41
  %1236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1235)  ; CBufferLoadLegacy(handle,regIndex)
  %1237 = extractvalue %dx.types.CBufRet.f32 %1236, 3
  %1238 = extractvalue %dx.types.CBufRet.f32 %1236, 0
  %1239 = extractvalue %dx.types.CBufRet.f32 %1236, 1
  %1240 = extractvalue %dx.types.CBufRet.f32 %1236, 2
  %1241 = fadd fast float %1237, %340
  %1242 = fsub fast float %1241, %1238
  %1243 = fadd fast float %1237, %341
  %1244 = fsub fast float %1243, %1239
  %1245 = fadd fast float %1237, %342
  %1246 = fsub fast float %1245, %1240
  %1247 = call float @dx.op.binary.f32(i32 35, float %1242, float 0.000000e+00)  ; FMax(a,b)
  %1248 = call float @dx.op.binary.f32(i32 35, float %1244, float 0.000000e+00)  ; FMax(a,b)
  %1249 = call float @dx.op.binary.f32(i32 35, float %1246, float 0.000000e+00)  ; FMax(a,b)
  %1250 = fsub fast float %1237, %340
  %1251 = fadd fast float %1250, %1238
  %1252 = fsub fast float %1237, %341
  %1253 = fadd fast float %1252, %1239
  %1254 = fsub fast float %1237, %342
  %1255 = fadd fast float %1254, %1240
  %1256 = call float @dx.op.binary.f32(i32 35, float %1251, float 0.000000e+00)  ; FMax(a,b)
  %1257 = call float @dx.op.binary.f32(i32 35, float %1253, float 0.000000e+00)  ; FMax(a,b)
  %1258 = call float @dx.op.binary.f32(i32 35, float %1255, float 0.000000e+00)  ; FMax(a,b)
  %1259 = call float @dx.op.binary.f32(i32 36, float %1247, float %1256)  ; FMin(a,b)
  %1260 = call float @dx.op.binary.f32(i32 36, float %1248, float %1257)  ; FMin(a,b)
  %1261 = call float @dx.op.binary.f32(i32 36, float %1249, float %1258)  ; FMin(a,b)
  %1262 = call float @dx.op.binary.f32(i32 36, float %1260, float %1261)  ; FMin(a,b)
  %1263 = call float @dx.op.binary.f32(i32 36, float %1259, float %1262)  ; FMin(a,b)
  %1264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1265 = extractvalue %dx.types.CBufRet.f32 %1264, 0
  %1266 = fcmp fast ogt float %1263, %1265
  br i1 %1266, label %1272, label %1267

; <label>:1267                                    ; preds = %1233
  %1268 = add i32 %1234, 1
  %1269 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1270 = extractvalue %dx.types.CBufRet.i32 %1269, 2
  %1271 = icmp ult i32 %1268, %1270
  br i1 %1271, label %1233, label %1272

; <label>:1272                                    ; preds = %1267, %1233
  %1273 = phi i32 [ -1, %1267 ], [ %1234, %1233 ]
  br label %1274

; <label>:1274                                    ; preds = %1272, %1225
  %1275 = phi i32 [ -1, %1225 ], [ %1273, %1272 ]
  %1276 = icmp sgt i32 %1275, -1
  br i1 %1276, label %1277, label %1415

; <label>:1277                                    ; preds = %1274
  %1278 = add i32 %1275, 41
  %1279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1278)  ; CBufferLoadLegacy(handle,regIndex)
  %1280 = extractvalue %dx.types.CBufRet.f32 %1279, 3
  %1281 = fmul fast float %1280, 0x3F947AE140000000
  %1282 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1283 = extractvalue %dx.types.CBufRet.f32 %1282, 0
  %1284 = fdiv fast float 1.000000e+00, %1283
  br label %1285

; <label>:1285                                    ; preds = %1397, %1277
  %1286 = phi float [ 1.000000e+00, %1277 ], [ %1410, %1397 ]
  %1287 = phi float [ 2.000000e+00, %1277 ], [ %1412, %1397 ]
  %1288 = phi i32 [ 0, %1277 ], [ %1413, %1397 ]
  %1289 = icmp ult i32 %1288, 10
  br i1 %1289, label %1290, label %1294

; <label>:1290                                    ; preds = %1285
  %1291 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1292 = extractvalue %dx.types.CBufRet.f32 %1291, 0
  %1293 = fcmp fast olt float %1287, %1292
  br label %1294

; <label>:1294                                    ; preds = %1290, %1285
  %1295 = phi i1 [ false, %1285 ], [ %1293, %1290 ]
  br i1 %1295, label %1296, label %1414

; <label>:1296                                    ; preds = %1294
  %1297 = fadd fast float %1287, %342
  %1298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1299 = extractvalue %dx.types.CBufRet.f32 %1298, 0
  %1300 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1301 = extractvalue %dx.types.CBufRet.i32 %1300, 2
  %1302 = icmp ult i32 %1275, %1301
  br i1 %1302, label %1303, label %1397

; <label>:1303                                    ; preds = %1296
  br label %1304

; <label>:1304                                    ; preds = %1391, %1303
  %1305 = phi i32 [ %1392, %1391 ], [ %1275, %1303 ]
  %1306 = add i32 %1305, 47
  %1307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1306)  ; CBufferLoadLegacy(handle,regIndex)
  %1308 = extractvalue %dx.types.CBufRet.f32 %1307, 0
  %1309 = extractvalue %dx.types.CBufRet.f32 %1307, 1
  %1310 = extractvalue %dx.types.CBufRet.f32 %1307, 2
  %1311 = extractvalue %dx.types.CBufRet.f32 %1307, 3
  %1312 = fmul fast float %1311, %340
  %1313 = fmul fast float %1311, %341
  %1314 = fmul fast float %1311, %1297
  %1315 = fadd fast float %1312, %1308
  %1316 = fadd fast float %1313, %1309
  %1317 = fadd fast float %1314, %1310
  %1318 = call float @dx.op.unary.f32(i32 22, float %1315)  ; Frc(value)
  %1319 = call float @dx.op.unary.f32(i32 22, float %1316)  ; Frc(value)
  %1320 = call float @dx.op.unary.f32(i32 22, float %1317)  ; Frc(value)
  %1321 = call float @dx.op.unary.f32(i32 22, float %1318)  ; Frc(value)
  %1322 = call float @dx.op.unary.f32(i32 22, float %1319)  ; Frc(value)
  %1323 = call float @dx.op.unary.f32(i32 22, float %1320)  ; Frc(value)
  %1324 = call float @dx.op.unary.f32(i32 7, float %1321)  ; Saturate(value)
  %1325 = call float @dx.op.unary.f32(i32 7, float %1322)  ; Saturate(value)
  %1326 = call float @dx.op.unary.f32(i32 7, float %1323)  ; Saturate(value)
  %1327 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1328 = extractvalue %dx.types.CBufRet.i32 %1327, 2
  %1329 = uitofp i32 %1328 to float
  %1330 = fmul fast float %1329, %1324
  %1331 = fmul fast float %1329, %1325
  %1332 = fmul fast float %1329, %1326
  %1333 = mul i32 %1328, %1305
  %1334 = sitofp i32 %1333 to float
  %1335 = fadd fast float %1334, %1332
  %1336 = fptosi float %1330 to i32
  %1337 = fptosi float %1331 to i32
  %1338 = fptosi float %1335 to i32
  %1339 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1340 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1339, i32 0, i32 %1336, i32 %1337, i32 %1338, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1341 = extractvalue %dx.types.ResRet.i32 %1340, 0
  %1342 = icmp eq i32 %1341, -1
  br i1 %1342, label %1391, label %1343

; <label>:1343                                    ; preds = %1304
  %1344 = fmul fast float %1329, %1321
  %1345 = fmul fast float %1329, %1322
  %1346 = fmul fast float %1329, %1323
  %1347 = call float @dx.op.unary.f32(i32 22, float %1344)  ; Frc(value)
  %1348 = call float @dx.op.unary.f32(i32 22, float %1345)  ; Frc(value)
  %1349 = call float @dx.op.unary.f32(i32 22, float %1346)  ; Frc(value)
  %1350 = shl i32 %1341, 3
  %1351 = and i32 %1350, 1016
  %1352 = lshr i32 %1341, 4
  %1353 = and i32 %1352, 1016
  %1354 = lshr i32 %1341, 11
  %1355 = and i32 %1354, 8184
  %1356 = uitofp i32 %1351 to float
  %1357 = uitofp i32 %1353 to float
  %1358 = uitofp i32 %1355 to float
  %1359 = fmul fast float %1347, 7.000000e+00
  %1360 = fmul fast float %1348, 7.000000e+00
  %1361 = fmul fast float %1349, 7.000000e+00
  %1362 = fadd fast float %1356, 5.000000e-01
  %1363 = fadd fast float %1362, %1359
  %1364 = fadd fast float %1357, 5.000000e-01
  %1365 = fadd fast float %1364, %1360
  %1366 = fadd fast float %1358, 5.000000e-01
  %1367 = fadd fast float %1366, %1361
  %1368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %1369 = extractvalue %dx.types.CBufRet.f32 %1368, 0
  %1370 = extractvalue %dx.types.CBufRet.f32 %1368, 1
  %1371 = extractvalue %dx.types.CBufRet.f32 %1368, 2
  %1372 = fmul fast float %1369, %1363
  %1373 = fmul fast float %1365, %1370
  %1374 = fmul fast float %1367, %1371
  %1375 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1376 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1377 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1375, %dx.types.Handle %1376, float %1372, float %1373, float %1374, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1378 = extractvalue %dx.types.ResRet.f32 %1377, 0
  %1379 = fcmp fast olt float %1378, 1.000000e+00
  br i1 %1379, label %1380, label %1391

; <label>:1380                                    ; preds = %1343
  %1381 = add i32 %1305, 41
  %1382 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1381)  ; CBufferLoadLegacy(handle,regIndex)
  %1383 = extractvalue %dx.types.CBufRet.f32 %1382, 3
  %1384 = fmul fast float %1383, 8.000000e+00
  %1385 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1386 = extractvalue %dx.types.CBufRet.f32 %1385, 0
  %1387 = fmul fast float %1384, %1386
  %1388 = fmul fast float %1378, 2.000000e+00
  %1389 = fadd fast float %1388, -1.000000e+00
  %1390 = fmul fast float %1387, %1389
  br label %1397

; <label>:1391                                    ; preds = %1343, %1304
  %1392 = add i32 %1305, 1
  %1393 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1394 = extractvalue %dx.types.CBufRet.i32 %1393, 2
  %1395 = icmp ult i32 %1392, %1394
  br i1 %1395, label %1304, label %1396

; <label>:1396                                    ; preds = %1391
  br label %1397

; <label>:1397                                    ; preds = %1396, %1380, %1296
  %1398 = phi float [ %1390, %1380 ], [ %1299, %1296 ], [ %1299, %1396 ]
  %1399 = bitcast float %1287 to i32
  %1400 = sub nsw i32 2129859010, %1399
  %1401 = bitcast i32 %1400 to float
  %1402 = fmul fast float %1398, %1401
  %1403 = call float @dx.op.unary.f32(i32 7, float %1402)  ; Saturate(value)
  %1404 = fadd fast float %1398, %1287
  %1405 = fmul fast float %1404, %1284
  %1406 = fmul fast float %1405, %1405
  %1407 = fmul fast float %1406, 0x3FE3333340000000
  %1408 = call float @dx.op.unary.f32(i32 7, float %1407)  ; Saturate(value)
  %1409 = call float @dx.op.binary.f32(i32 35, float %1403, float %1408)  ; FMax(a,b)
  %1410 = call float @dx.op.binary.f32(i32 36, float %1286, float %1409)  ; FMin(a,b)
  %1411 = call float @dx.op.binary.f32(i32 35, float %1398, float %1281)  ; FMax(a,b)
  %1412 = fadd fast float %1411, %1287
  %1413 = add i32 %1288, 1
  br label %1285, !llvm.loop !56

; <label>:1414                                    ; preds = %1294
  br label %1415

; <label>:1415                                    ; preds = %1414, %1274
  %1416 = phi float [ 1.000000e+00, %1274 ], [ %1286, %1414 ]
  %1417 = extractvalue %dx.types.CBufRet.f32 %257, 0
  %1418 = fcmp fast ogt float %1417, 0.000000e+00
  br i1 %1418, label %1419, label %1438

; <label>:1419                                    ; preds = %1415
  %1420 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1421 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1422 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1420, %dx.types.Handle %1421, float %1108, float %1109, float %1110, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1423 = extractvalue %dx.types.ResRet.f32 %1422, 0
  %1424 = extractvalue %dx.types.ResRet.f32 %1422, 1
  %1425 = extractvalue %dx.types.ResRet.f32 %1422, 2
  %1426 = fmul fast float %1423, 2.000000e+00
  %1427 = fmul fast float %1424, 2.000000e+00
  %1428 = fmul fast float %1425, 2.000000e+00
  %1429 = fadd fast float %1426, -1.000000e+00
  %1430 = fadd fast float %1427, -1.000000e+00
  %1431 = fadd fast float %1428, -1.000000e+00
  %1432 = fmul fast float %1429, %1429
  %1433 = fmul fast float %1430, %1430
  %1434 = fadd fast float %1432, %1433
  %1435 = fmul fast float %1431, %1431
  %1436 = fadd fast float %1434, %1435
  %1437 = call float @dx.op.unary.f32(i32 24, float %1436)  ; Sqrt(value)
  br label %1438

; <label>:1438                                    ; preds = %1419, %1415
  %1439 = phi float [ %1437, %1419 ], [ %1416, %1415 ]
  %1440 = fmul fast float %1034, %1439
  %1441 = fmul fast float %1440, %1226
  %1442 = fmul fast float %1440, %1227
  %1443 = fmul fast float %1440, %1228
  %1444 = fadd fast float %1441, %1027
  %1445 = fadd fast float %1442, %1028
  %1446 = fadd fast float %1443, %1029
  br label %1447

; <label>:1447                                    ; preds = %1438, %1107
  %1448 = phi float [ %1444, %1438 ], [ %1027, %1107 ]
  %1449 = phi float [ %1445, %1438 ], [ %1028, %1107 ]
  %1450 = phi float [ %1446, %1438 ], [ %1029, %1107 ]
  %1451 = extractvalue %dx.types.CBufRet.f32 %1033, 2
  %1452 = fcmp fast ogt float %1451, 0.000000e+00
  br i1 %1452, label %1453, label %1518

; <label>:1453                                    ; preds = %1447
  %1454 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1455 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1456 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1454, %dx.types.Handle %1455, float %1108, float %1109, float %1110, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1457 = extractvalue %dx.types.ResRet.f32 %1456, 0
  %1458 = extractvalue %dx.types.ResRet.f32 %1456, 1
  %1459 = extractvalue %dx.types.ResRet.f32 %1456, 2
  %1460 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1461 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1460, %dx.types.Handle %1455, float %1108, float %1109, float %1110, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1462 = extractvalue %dx.types.ResRet.f32 %1461, 0
  %1463 = extractvalue %dx.types.ResRet.f32 %1461, 1
  %1464 = extractvalue %dx.types.ResRet.f32 %1461, 2
  %1465 = fmul fast float %1462, 2.000000e+00
  %1466 = fmul fast float %1463, 2.000000e+00
  %1467 = fmul fast float %1464, 2.000000e+00
  %1468 = fadd fast float %1465, -1.000000e+00
  %1469 = fadd fast float %1466, -1.000000e+00
  %1470 = fadd fast float %1467, -1.000000e+00
  %1471 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1472 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1471, %dx.types.Handle %1455, float %1108, float %1109, float %1110, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1473 = extractvalue %dx.types.ResRet.f32 %1472, 0
  %1474 = extractvalue %dx.types.ResRet.f32 %1472, 1
  %1475 = extractvalue %dx.types.ResRet.f32 %1472, 2
  %1476 = fmul fast float %1473, 2.000000e+00
  %1477 = fmul fast float %1474, 2.000000e+00
  %1478 = fmul fast float %1475, 2.000000e+00
  %1479 = fadd fast float %1476, -1.000000e+00
  %1480 = fadd fast float %1477, -1.000000e+00
  %1481 = fadd fast float %1478, -1.000000e+00
  %1482 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1483 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1482, %dx.types.Handle %1455, float %1108, float %1109, float %1110, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1484 = extractvalue %dx.types.ResRet.f32 %1483, 0
  %1485 = extractvalue %dx.types.ResRet.f32 %1483, 1
  %1486 = extractvalue %dx.types.ResRet.f32 %1483, 2
  %1487 = fmul fast float %1484, 2.000000e+00
  %1488 = fmul fast float %1485, 2.000000e+00
  %1489 = fmul fast float %1486, 2.000000e+00
  %1490 = fadd fast float %1487, -1.000000e+00
  %1491 = fadd fast float %1488, -1.000000e+00
  %1492 = fadd fast float %1489, -1.000000e+00
  %1493 = fmul fast float %1457, 0x3FFBB67B80000000
  %1494 = fmul fast float %1493, %1468
  %1495 = fmul fast float %1493, %1469
  %1496 = fmul fast float %1493, %1470
  %1497 = fmul fast float %1458, 0x3FFBB67B80000000
  %1498 = fmul fast float %1497, %1479
  %1499 = fmul fast float %1497, %1480
  %1500 = fmul fast float %1497, %1481
  %1501 = fmul fast float %1459, 0x3FFBB67B80000000
  %1502 = fmul fast float %1501, %1490
  %1503 = fmul fast float %1501, %1491
  %1504 = fmul fast float %1501, %1492
  %1505 = fmul fast float %1451, 0x3FD45F3060000000
  %1506 = call float @dx.op.dot4.f32(i32 56, float %1457, float %1494, float %1495, float %1496, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1507 = call float @dx.op.dot4.f32(i32 56, float %1458, float %1498, float %1499, float %1500, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1508 = call float @dx.op.dot4.f32(i32 56, float %1459, float %1502, float %1503, float %1504, float 1.000000e+00, float %1030, float %1031, float %1032)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1509 = call float @dx.op.binary.f32(i32 35, float %1506, float 0.000000e+00)  ; FMax(a,b)
  %1510 = call float @dx.op.binary.f32(i32 35, float %1507, float 0.000000e+00)  ; FMax(a,b)
  %1511 = call float @dx.op.binary.f32(i32 35, float %1508, float 0.000000e+00)  ; FMax(a,b)
  %1512 = fmul fast float %1509, %1505
  %1513 = fmul fast float %1510, %1505
  %1514 = fmul fast float %1511, %1505
  %1515 = fadd fast float %1512, %1448
  %1516 = fadd fast float %1513, %1449
  %1517 = fadd fast float %1514, %1450
  br label %1518

; <label>:1518                                    ; preds = %1453, %1447
  %1519 = phi float [ %1515, %1453 ], [ %1448, %1447 ]
  %1520 = phi float [ %1516, %1453 ], [ %1449, %1447 ]
  %1521 = phi float [ %1517, %1453 ], [ %1450, %1447 ]
  %1522 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1523 = extractvalue %dx.types.CBufRet.i32 %1522, 0
  %1524 = extractvalue %dx.types.CBufRet.i32 %1522, 1
  %1525 = mul i32 %1523, %42
  %1526 = mul i32 %1524, %43
  %1527 = fmul fast float %285, %55
  %1528 = fadd fast float %1527, %56
  %1529 = call float @dx.op.unary.f32(i32 23, float %1528)  ; Log(value)
  %1530 = fmul fast float %1529, %57
  %1531 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1530)  ; FMax(a,b)
  %1532 = fptoui float %1531 to i32
  %1533 = add nsw i32 %51, -1
  %1534 = call i32 @dx.op.binary.i32(i32 40, i32 %1532, i32 %1533)  ; UMin(a,b)
  %1535 = and i32 %53, 31
  %1536 = lshr i32 %1525, %1535
  %1537 = lshr i32 %1526, %1535
  %1538 = mul i32 %1534, %50
  %1539 = add i32 %1538, %1537
  %1540 = mul i32 %1539, %49
  %1541 = add i32 %1540, %1536
  %1542 = shl i32 %1541, 1
  %1543 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1544 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1543, i32 %1542, i32 undef)  ; BufferLoad(srv,index,wot)
  %1545 = extractvalue %dx.types.ResRet.i32 %1544, 0
  %1546 = call i32 @dx.op.binary.i32(i32 40, i32 %1545, i32 %46)  ; UMin(a,b)
  %1547 = or i32 %1542, 1
  %1548 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1543, i32 %1547, i32 undef)  ; BufferLoad(srv,index,wot)
  %1549 = extractvalue %dx.types.ResRet.i32 %1548, 0
  %1550 = add i32 %42, 1
  %1551 = add i32 %43, 1
  %1552 = add i32 %44, 1
  %1553 = uitofp i32 %1550 to float
  %1554 = uitofp i32 %1551 to float
  %1555 = fadd fast float %262, %1553
  %1556 = fadd fast float %263, %1554
  %1557 = fdiv fast float %1555, %268
  %1558 = fdiv fast float %1556, %269
  %1559 = fmul fast float %1557, 2.000000e+00
  %1560 = fmul fast float %1558, 2.000000e+00
  %1561 = fadd fast float %1559, -1.000000e+00
  %1562 = fadd fast float %1560, -1.000000e+00
  %1563 = fsub fast float -0.000000e+00, %1562
  %1564 = uitofp i32 %1552 to float
  %1565 = fadd fast float %264, %1564
  %1566 = fdiv fast float %1565, %279
  %1567 = call float @dx.op.unary.f32(i32 21, float %1566)  ; Exp(value)
  %1568 = fsub fast float %1567, %282
  %1569 = fdiv fast float %1568, %284
  br i1 %288, label %1576, label %1570, !dx.controlflow.hints !52

; <label>:1570                                    ; preds = %1518
  %1571 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1572 = extractvalue %dx.types.CBufRet.f32 %1571, 2
  %1573 = fmul fast float %1572, %1569
  %1574 = extractvalue %dx.types.CBufRet.f32 %286, 2
  %1575 = fadd fast float %1573, %1574
  br label %1583

; <label>:1576                                    ; preds = %1518
  %1577 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1578 = extractvalue %dx.types.CBufRet.f32 %1577, 3
  %1579 = fadd fast float %1578, %1569
  %1580 = extractvalue %dx.types.CBufRet.f32 %1577, 2
  %1581 = fmul fast float %1579, %1580
  %1582 = fdiv fast float 1.000000e+00, %1581
  br label %1583

; <label>:1583                                    ; preds = %1576, %1570
  %1584 = phi float [ %1575, %1570 ], [ %1582, %1576 ]
  %1585 = fmul fast float %305, %1561
  %1586 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %310, float %1585)  ; FMad(a,b,c)
  %1587 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %315, float %1586)  ; FMad(a,b,c)
  %1588 = fadd fast float %1587, %320
  %1589 = fmul fast float %306, %1561
  %1590 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %311, float %1589)  ; FMad(a,b,c)
  %1591 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %316, float %1590)  ; FMad(a,b,c)
  %1592 = fadd fast float %1591, %321
  %1593 = fmul fast float %307, %1561
  %1594 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %312, float %1593)  ; FMad(a,b,c)
  %1595 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %317, float %1594)  ; FMad(a,b,c)
  %1596 = fadd fast float %1595, %322
  %1597 = fmul fast float %308, %1561
  %1598 = call float @dx.op.tertiary.f32(i32 46, float %1563, float %313, float %1597)  ; FMad(a,b,c)
  %1599 = call float @dx.op.tertiary.f32(i32 46, float %1584, float %318, float %1598)  ; FMad(a,b,c)
  %1600 = fadd fast float %1599, %323
  %1601 = fdiv fast float %1588, %1600
  %1602 = fdiv fast float %1592, %1600
  %1603 = fdiv fast float %1596, %1600
  %1604 = fsub fast float %340, %1601
  %1605 = fsub fast float %341, %1602
  %1606 = fsub fast float %342, %1603
  %1607 = fmul fast float %1604, %1604
  %1608 = fmul fast float %1605, %1605
  %1609 = fadd fast float %1608, %1607
  %1610 = fmul fast float %1606, %1606
  %1611 = fadd fast float %1609, %1610
  %1612 = call float @dx.op.unary.f32(i32 24, float %1611)  ; Sqrt(value)
  %1613 = extractvalue %dx.types.CBufRet.f32 %257, 2
  %1614 = fmul fast float %1613, %1612
  %1615 = call float @dx.op.binary.f32(i32 35, float %1614, float 1.000000e+00)  ; FMax(a,b)
  %1616 = fmul fast float %1615, %1615
  %1617 = icmp eq i32 %1546, 0
  br i1 %1617, label %2027, label %1618

; <label>:1618                                    ; preds = %1583
  br label %1619

; <label>:1619                                    ; preds = %2020, %1618
  %1620 = phi float [ %2021, %2020 ], [ %1519, %1618 ]
  %1621 = phi float [ %2022, %2020 ], [ %1520, %1618 ]
  %1622 = phi float [ %2023, %2020 ], [ %1521, %1618 ]
  %1623 = phi i32 [ %2024, %2020 ], [ 0, %1618 ]
  %1624 = add i32 %1623, %1549
  %1625 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1626 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1625, i32 %1624, i32 undef)  ; BufferLoad(srv,index,wot)
  %1627 = extractvalue %dx.types.ResRet.i32 %1626, 0
  %1628 = mul i32 %1627, 6
  %1629 = add i32 %1628, 4
  %1630 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1631 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1629, i32 undef)  ; BufferLoad(srv,index,wot)
  %1632 = extractvalue %dx.types.ResRet.f32 %1631, 0
  %1633 = extractvalue %dx.types.ResRet.f32 %1631, 1
  %1634 = extractvalue %dx.types.ResRet.f32 %1631, 2
  %1635 = add i32 %1628, 3
  %1636 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1635, i32 undef)  ; BufferLoad(srv,index,wot)
  %1637 = extractvalue %dx.types.ResRet.f32 %1636, 3
  %1638 = add i32 %1628, 2
  %1639 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1638, i32 undef)  ; BufferLoad(srv,index,wot)
  %1640 = extractvalue %dx.types.ResRet.f32 %1639, 0
  %1641 = extractvalue %dx.types.ResRet.f32 %1639, 1
  %1642 = extractvalue %dx.types.ResRet.f32 %1639, 2
  %1643 = or i32 %1628, 1
  %1644 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1643, i32 undef)  ; BufferLoad(srv,index,wot)
  %1645 = extractvalue %dx.types.ResRet.f32 %1644, 0
  %1646 = extractvalue %dx.types.ResRet.f32 %1644, 1
  %1647 = extractvalue %dx.types.ResRet.f32 %1644, 2
  %1648 = extractvalue %dx.types.ResRet.f32 %1644, 3
  %1649 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1628, i32 undef)  ; BufferLoad(srv,index,wot)
  %1650 = extractvalue %dx.types.ResRet.f32 %1649, 3
  %1651 = bitcast float %1637 to i32
  %1652 = lshr i32 %1651, 16
  %1653 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1652)  ; LegacyF16ToF32(value)
  %1654 = fcmp fast ogt float %1653, 0.000000e+00
  br i1 %1654, label %1655, label %2020

; <label>:1655                                    ; preds = %1619
  %1656 = extractvalue %dx.types.ResRet.f32 %1649, 2
  %1657 = extractvalue %dx.types.ResRet.f32 %1649, 1
  %1658 = extractvalue %dx.types.ResRet.f32 %1649, 0
  %1659 = extractvalue %dx.types.ResRet.f32 %1639, 3
  %1660 = extractvalue %dx.types.ResRet.f32 %1636, 2
  %1661 = extractvalue %dx.types.ResRet.f32 %1636, 0
  %1662 = add i32 %1628, 5
  %1663 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1630, i32 %1662, i32 undef)  ; BufferLoad(srv,index,wot)
  %1664 = extractvalue %dx.types.ResRet.f32 %1663, 3
  %1665 = bitcast float %1659 to i32
  %1666 = lshr i32 %1665, 16
  %1667 = and i32 %1666, 3
  %1668 = bitcast float %1661 to i32
  %1669 = and i32 %1668, 65535
  %1670 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1669)  ; LegacyF16ToF32(value)
  %1671 = lshr i32 %1668, 16
  %1672 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1671)  ; LegacyF16ToF32(value)
  %1673 = bitcast float %1660 to i32
  %1674 = and i32 %1673, 65535
  %1675 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1674)  ; LegacyF16ToF32(value)
  %1676 = fsub fast float -0.000000e+00, %1675
  %1677 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1651)  ; LegacyF16ToF32(value)
  %1678 = fsub fast float -0.000000e+00, %1677
  %1679 = fcmp fast oeq float %1648, 0.000000e+00
  %1680 = icmp eq i32 %1667, 2
  %1681 = icmp eq i32 %1667, 3
  %1682 = bitcast float %1664 to i32
  %1683 = and i32 %1682, 65535
  %1684 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1683)  ; LegacyF16ToF32(value)
  %1685 = lshr i32 %1682, 16
  %1686 = and i32 %1685, 1023
  %1687 = uitofp i32 %1686 to float
  %1688 = fmul fast float %1687, 9.765625e-04
  %1689 = fsub fast float %1658, %340
  %1690 = fsub fast float %1657, %341
  %1691 = fsub fast float %1656, %342
  %1692 = call float @dx.op.dot3.f32(i32 55, float %1689, float %1690, float %1691, float %1689, float %1690, float %1691)  ; Dot3(ax,ay,az,bx,by,bz)
  %1693 = call float @dx.op.unary.f32(i32 25, float %1692)  ; Rsqrt(value)
  %1694 = fmul fast float %1693, %1689
  %1695 = fmul fast float %1693, %1690
  %1696 = fmul fast float %1693, %1691
  br i1 %1679, label %1697, label %1704

; <label>:1697                                    ; preds = %1655
  %1698 = fmul fast float %1650, %1650
  %1699 = fmul fast float %1698, %1692
  %1700 = fmul fast float %1699, %1699
  %1701 = fsub fast float 1.000000e+00, %1700
  %1702 = call float @dx.op.unary.f32(i32 7, float %1701)  ; Saturate(value)
  %1703 = fmul fast float %1702, %1702
  br label %1714

; <label>:1704                                    ; preds = %1655
  %1705 = fmul fast float %1689, %1650
  %1706 = fmul fast float %1690, %1650
  %1707 = fmul fast float %1691, %1650
  %1708 = call float @dx.op.dot3.f32(i32 55, float %1705, float %1706, float %1707, float %1705, float %1706, float %1707)  ; Dot3(ax,ay,az,bx,by,bz)
  %1709 = call float @dx.op.unary.f32(i32 7, float %1708)  ; Saturate(value)
  %1710 = fsub fast float 1.000000e+00, %1709
  %1711 = call float @dx.op.unary.f32(i32 23, float %1710)  ; Log(value)
  %1712 = fmul fast float %1711, %1648
  %1713 = call float @dx.op.unary.f32(i32 21, float %1712)  ; Exp(value)
  br label %1714

; <label>:1714                                    ; preds = %1704, %1697
  %1715 = phi float [ %1703, %1697 ], [ %1713, %1704 ]
  br i1 %1680, label %1716, label %1723

; <label>:1716                                    ; preds = %1714
  %1717 = call float @dx.op.dot3.f32(i32 55, float %1694, float %1695, float %1696, float %1640, float %1641, float %1642)  ; Dot3(ax,ay,az,bx,by,bz)
  %1718 = fsub fast float %1717, %1670
  %1719 = fmul fast float %1718, %1672
  %1720 = call float @dx.op.unary.f32(i32 7, float %1719)  ; Saturate(value)
  %1721 = fmul fast float %1720, %1720
  %1722 = fmul fast float %1721, %1715
  br label %1723

; <label>:1723                                    ; preds = %1716, %1714
  %1724 = phi float [ %1722, %1716 ], [ %1715, %1714 ]
  br i1 %1681, label %1725, label %1729

; <label>:1725                                    ; preds = %1723
  %1726 = call float @dx.op.dot3.f32(i32 55, float %1640, float %1641, float %1642, float %1694, float %1695, float %1696)  ; Dot3(ax,ay,az,bx,by,bz)
  %1727 = fcmp fast olt float %1726, 0.000000e+00
  %1728 = select i1 %1727, float 0.000000e+00, float %1724
  br label %1729

; <label>:1729                                    ; preds = %1725, %1723
  %1730 = phi float [ %1728, %1725 ], [ %1724, %1723 ]
  br i1 %1681, label %1731, label %1963

; <label>:1731                                    ; preds = %1729
  %1732 = fmul fast float %1642, %1633
  %1733 = fmul fast float %1641, %1634
  %1734 = fsub fast float %1732, %1733
  %1735 = fmul fast float %1640, %1634
  %1736 = fmul fast float %1642, %1632
  %1737 = fsub fast float %1735, %1736
  %1738 = fmul fast float %1641, %1632
  %1739 = fmul fast float %1640, %1633
  %1740 = fsub fast float %1738, %1739
  %1741 = fcmp fast ogt float %1688, 0x3FA1EB8520000000
  br i1 %1741, label %1742, label %1837

; <label>:1742                                    ; preds = %1731
  %1743 = fmul fast float %1689, %1734
  %1744 = call float @dx.op.tertiary.f32(i32 46, float %1737, float %1690, float %1743)  ; FMad(a,b,c)
  %1745 = call float @dx.op.tertiary.f32(i32 46, float %1740, float %1691, float %1744)  ; FMad(a,b,c)
  %1746 = fmul fast float %1689, %1632
  %1747 = call float @dx.op.tertiary.f32(i32 46, float %1633, float %1690, float %1746)  ; FMad(a,b,c)
  %1748 = call float @dx.op.tertiary.f32(i32 46, float %1634, float %1691, float %1747)  ; FMad(a,b,c)
  %1749 = fmul fast float %1689, %1640
  %1750 = call float @dx.op.tertiary.f32(i32 46, float %1641, float %1690, float %1749)  ; FMad(a,b,c)
  %1751 = call float @dx.op.tertiary.f32(i32 46, float %1642, float %1691, float %1750)  ; FMad(a,b,c)
  %1752 = fmul fast float %1688, %1688
  %1753 = fsub fast float 1.000000e+00, %1752
  %1754 = call float @dx.op.unary.f32(i32 24, float %1753)  ; Sqrt(value)
  %1755 = fmul fast float %1688, %1684
  %1756 = call float @dx.op.binary.f32(i32 36, float %1751, float %1755)  ; FMin(a,b)
  %1757 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1755)  ; FMax(a,b)
  %1758 = fdiv fast float %1756, %1757
  %1759 = fmul fast float %1754, %1684
  %1760 = fmul fast float %1759, %1758
  %1761 = fcmp fast ogt float %1745, 0.000000e+00
  %1762 = fcmp fast ogt float %1748, 0.000000e+00
  %1763 = fcmp fast olt float %1745, 0.000000e+00
  %1764 = fcmp fast olt float %1748, 0.000000e+00
  %1765 = zext i1 %1761 to i32
  %1766 = zext i1 %1762 to i32
  %1767 = zext i1 %1763 to i32
  %1768 = zext i1 %1764 to i32
  %1769 = sub nsw i32 %1765, %1767
  %1770 = sub nsw i32 %1766, %1768
  %1771 = sitofp i32 %1769 to float
  %1772 = sitofp i32 %1770 to float
  %1773 = fadd fast float %1760, %1675
  %1774 = fadd fast float %1760, %1677
  %1775 = call float @dx.op.unary.f32(i32 6, float %1745)  ; FAbs(value)
  %1776 = call float @dx.op.unary.f32(i32 6, float %1748)  ; FAbs(value)
  %1777 = call float @dx.op.binary.f32(i32 35, float %1775, float %1773)  ; FMax(a,b)
  %1778 = call float @dx.op.binary.f32(i32 35, float %1776, float %1774)  ; FMax(a,b)
  %1779 = fsub fast float %1676, %1760
  %1780 = fadd fast float %1779, %1777
  %1781 = fmul fast float %1780, %1771
  %1782 = fsub fast float %1678, %1760
  %1783 = fadd fast float %1782, %1778
  %1784 = fmul fast float %1783, %1772
  %1785 = fsub fast float %1751, %1756
  %1786 = call float @dx.op.binary.f32(i32 35, float %1785, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1787 = call float @dx.op.unary.f32(i32 6, float %1781)  ; FAbs(value)
  %1788 = call float @dx.op.unary.f32(i32 6, float %1784)  ; FAbs(value)
  %1789 = fdiv fast float %1787, %1786
  %1790 = fdiv fast float %1788, %1786
  %1791 = fmul fast float %1789, %1756
  %1792 = fmul fast float %1790, %1756
  %1793 = fsub fast float %1791, %1760
  %1794 = fsub fast float %1792, %1760
  %1795 = fsub fast float -0.000000e+00, %1771
  %1796 = fsub fast float -0.000000e+00, %1772
  %1797 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1795)  ; FMax(a,b)
  %1798 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1796)  ; FMax(a,b)
  %1799 = fmul fast float %1793, %1797
  %1800 = fmul fast float %1794, %1798
  %1801 = fsub fast float %1799, %1675
  %1802 = fsub fast float %1800, %1677
  %1803 = call float @dx.op.binary.f32(i32 35, float %1801, float %1676)  ; FMax(a,b)
  %1804 = call float @dx.op.binary.f32(i32 35, float %1802, float %1678)  ; FMax(a,b)
  %1805 = call float @dx.op.binary.f32(i32 36, float %1803, float %1675)  ; FMin(a,b)
  %1806 = call float @dx.op.binary.f32(i32 36, float %1804, float %1677)  ; FMin(a,b)
  %1807 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1771)  ; FMax(a,b)
  %1808 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1772)  ; FMax(a,b)
  %1809 = fmul fast float %1807, %1793
  %1810 = fmul fast float %1808, %1794
  %1811 = fsub fast float %1675, %1809
  %1812 = fsub fast float %1677, %1810
  %1813 = call float @dx.op.binary.f32(i32 35, float %1811, float %1676)  ; FMax(a,b)
  %1814 = call float @dx.op.binary.f32(i32 35, float %1812, float %1678)  ; FMax(a,b)
  %1815 = call float @dx.op.binary.f32(i32 36, float %1813, float %1675)  ; FMin(a,b)
  %1816 = call float @dx.op.binary.f32(i32 36, float %1814, float %1677)  ; FMin(a,b)
  %1817 = fadd fast float %1815, %1805
  %1818 = fadd fast float %1816, %1806
  %1819 = fmul fast float %1817, 5.000000e-01
  %1820 = fmul fast float %1818, 5.000000e-01
  %1821 = fsub fast float %1815, %1805
  %1822 = fsub fast float %1816, %1806
  %1823 = fmul fast float %1821, 5.000000e-01
  %1824 = fmul fast float %1822, 5.000000e-01
  %1825 = fmul fast float %1819, %1734
  %1826 = fmul fast float %1819, %1737
  %1827 = fmul fast float %1819, %1740
  %1828 = fsub fast float %1689, %1825
  %1829 = fsub fast float %1690, %1826
  %1830 = fsub fast float %1691, %1827
  %1831 = fmul fast float %1820, %1632
  %1832 = fmul fast float %1820, %1633
  %1833 = fmul fast float %1820, %1634
  %1834 = fsub fast float %1828, %1831
  %1835 = fsub fast float %1829, %1832
  %1836 = fsub fast float %1830, %1833
  br label %1837

; <label>:1837                                    ; preds = %1742, %1731
  %1838 = phi float [ %1834, %1742 ], [ %1689, %1731 ]
  %1839 = phi float [ %1835, %1742 ], [ %1690, %1731 ]
  %1840 = phi float [ %1836, %1742 ], [ %1691, %1731 ]
  %1841 = phi float [ %1823, %1742 ], [ %1675, %1731 ]
  %1842 = phi float [ %1824, %1742 ], [ %1677, %1731 ]
  %1843 = fcmp fast oeq float %1841, 0.000000e+00
  %1844 = fcmp fast oeq float %1842, 0.000000e+00
  %1845 = or i1 %1843, %1844
  br i1 %1845, label %1993, label %1846

; <label>:1846                                    ; preds = %1837
  %1847 = call float @dx.op.dot3.f32(i32 55, float %1734, float %1737, float %1740, float %1838, float %1839, float %1840)  ; Dot3(ax,ay,az,bx,by,bz)
  %1848 = call float @dx.op.dot3.f32(i32 55, float %1632, float %1633, float %1634, float %1838, float %1839, float %1840)  ; Dot3(ax,ay,az,bx,by,bz)
  %1849 = call float @dx.op.dot3.f32(i32 55, float %1640, float %1641, float %1642, float %1838, float %1839, float %1840)  ; Dot3(ax,ay,az,bx,by,bz)
  %1850 = fsub fast float %1847, %1841
  %1851 = fadd fast float %1847, %1841
  %1852 = fsub fast float %1848, %1842
  %1853 = fadd fast float %1848, %1842
  %1854 = fmul fast float %1849, %1849
  %1855 = call float @dx.op.dot2.f32(i32 54, float %1850, float %1852, float %1850, float %1852)  ; Dot2(ax,ay,bx,by)
  %1856 = fadd fast float %1855, %1854
  %1857 = call float @dx.op.unary.f32(i32 25, float %1856)  ; Rsqrt(value)
  %1858 = fmul fast float %1857, %1850
  %1859 = fmul fast float %1857, %1852
  %1860 = fmul fast float %1857, %1849
  %1861 = call float @dx.op.dot2.f32(i32 54, float %1851, float %1852, float %1851, float %1852)  ; Dot2(ax,ay,bx,by)
  %1862 = fadd fast float %1861, %1854
  %1863 = call float @dx.op.unary.f32(i32 25, float %1862)  ; Rsqrt(value)
  %1864 = fmul fast float %1863, %1851
  %1865 = fmul fast float %1863, %1852
  %1866 = fmul fast float %1863, %1849
  %1867 = call float @dx.op.dot2.f32(i32 54, float %1851, float %1853, float %1851, float %1853)  ; Dot2(ax,ay,bx,by)
  %1868 = fadd fast float %1867, %1854
  %1869 = call float @dx.op.unary.f32(i32 25, float %1868)  ; Rsqrt(value)
  %1870 = fmul fast float %1869, %1851
  %1871 = fmul fast float %1869, %1853
  %1872 = fmul fast float %1869, %1849
  %1873 = call float @dx.op.dot2.f32(i32 54, float %1850, float %1853, float %1850, float %1853)  ; Dot2(ax,ay,bx,by)
  %1874 = fadd fast float %1873, %1854
  %1875 = call float @dx.op.unary.f32(i32 25, float %1874)  ; Rsqrt(value)
  %1876 = fmul fast float %1875, %1850
  %1877 = fmul fast float %1875, %1853
  %1878 = fmul fast float %1875, %1849
  %1879 = call float @dx.op.dot3.f32(i32 55, float %1858, float %1859, float %1860, float %1864, float %1865, float %1866)  ; Dot3(ax,ay,az,bx,by,bz)
  %1880 = call float @dx.op.dot3.f32(i32 55, float %1864, float %1865, float %1866, float %1870, float %1871, float %1872)  ; Dot3(ax,ay,az,bx,by,bz)
  %1881 = call float @dx.op.dot3.f32(i32 55, float %1870, float %1871, float %1872, float %1876, float %1877, float %1878)  ; Dot3(ax,ay,az,bx,by,bz)
  %1882 = call float @dx.op.dot3.f32(i32 55, float %1876, float %1877, float %1878, float %1858, float %1859, float %1860)  ; Dot3(ax,ay,az,bx,by,bz)
  %1883 = fmul fast float %1879, 0x3FC6666660000000
  %1884 = fsub fast float 0x3FF921FF20000000, %1883
  %1885 = fadd fast float %1879, 1.000000e+00
  %1886 = call float @dx.op.unary.f32(i32 25, float %1885)  ; Rsqrt(value)
  %1887 = fmul fast float %1880, 0x3FC6666660000000
  %1888 = fsub fast float 0x3FF921FF20000000, %1887
  %1889 = fadd fast float %1880, 1.000000e+00
  %1890 = call float @dx.op.unary.f32(i32 25, float %1889)  ; Rsqrt(value)
  %1891 = fmul fast float %1890, %1888
  %1892 = fmul fast float %1881, 0x3FC6666660000000
  %1893 = fsub fast float 0x3FF921FF20000000, %1892
  %1894 = fadd fast float %1881, 1.000000e+00
  %1895 = call float @dx.op.unary.f32(i32 25, float %1894)  ; Rsqrt(value)
  %1896 = fmul fast float %1882, 0x3FC6666660000000
  %1897 = fsub fast float 0x3FF921FF20000000, %1896
  %1898 = fadd fast float %1882, 1.000000e+00
  %1899 = call float @dx.op.unary.f32(i32 25, float %1898)  ; Rsqrt(value)
  %1900 = fmul fast float %1899, %1897
  %1901 = fmul fast float %1884, %1886
  %1902 = fsub fast float -0.000000e+00, %1901
  %1903 = fmul fast float %1858, %1902
  %1904 = fmul fast float %1859, %1902
  %1905 = fmul fast float %1860, %1902
  %1906 = fmul fast float %1891, %1870
  %1907 = fmul fast float %1891, %1871
  %1908 = fmul fast float %1891, %1872
  %1909 = fadd fast float %1906, %1903
  %1910 = fadd fast float %1907, %1904
  %1911 = fadd fast float %1908, %1905
  %1912 = fmul fast float %1911, %1865
  %1913 = fmul fast float %1910, %1866
  %1914 = fsub fast float %1912, %1913
  %1915 = fmul fast float %1909, %1866
  %1916 = fmul fast float %1911, %1864
  %1917 = fsub fast float %1915, %1916
  %1918 = fmul fast float %1910, %1864
  %1919 = fmul fast float %1909, %1865
  %1920 = fsub fast float %1918, %1919
  %1921 = fmul fast float %1900, %1858
  %1922 = fmul fast float %1900, %1859
  %1923 = fmul fast float %1900, %1860
  %1924 = fmul fast float %1893, %1895
  %1925 = fsub fast float -0.000000e+00, %1924
  %1926 = fmul fast float %1870, %1925
  %1927 = fmul fast float %1871, %1925
  %1928 = fmul fast float %1872, %1925
  %1929 = fadd fast float %1921, %1926
  %1930 = fadd fast float %1922, %1927
  %1931 = fadd fast float %1923, %1928
  %1932 = fmul fast float %1931, %1877
  %1933 = fmul fast float %1930, %1878
  %1934 = fsub fast float %1932, %1933
  %1935 = fmul fast float %1929, %1878
  %1936 = fmul fast float %1931, %1876
  %1937 = fsub fast float %1935, %1936
  %1938 = fmul fast float %1930, %1876
  %1939 = fmul fast float %1929, %1877
  %1940 = fsub fast float %1938, %1939
  %1941 = fadd fast float %1934, %1914
  %1942 = fadd fast float %1937, %1917
  %1943 = fadd fast float %1940, %1920
  %1944 = fmul fast float %1941, %1734
  %1945 = fmul fast float %1941, %1737
  %1946 = fmul fast float %1941, %1740
  %1947 = fmul fast float %1942, %1632
  %1948 = fmul fast float %1942, %1633
  %1949 = fmul fast float %1942, %1634
  %1950 = fadd fast float %1944, %1947
  %1951 = fadd fast float %1945, %1948
  %1952 = fadd fast float %1946, %1949
  %1953 = fmul fast float %1943, %1640
  %1954 = fmul fast float %1943, %1641
  %1955 = fmul fast float %1943, %1642
  %1956 = fadd fast float %1950, %1953
  %1957 = fadd fast float %1951, %1954
  %1958 = fadd fast float %1952, %1955
  %1959 = call float @dx.op.dot3.f32(i32 55, float %1956, float %1957, float %1958, float %1956, float %1957, float %1958)  ; Dot3(ax,ay,az,bx,by,bz)
  %1960 = call float @dx.op.unary.f32(i32 25, float %1959)  ; Rsqrt(value)
  %1961 = fmul fast float %1959, 5.000000e-01
  %1962 = fmul fast float %1961, %1960
  br label %1993

; <label>:1963                                    ; preds = %1729
  %1964 = fmul fast float %1677, 5.000000e-01
  %1965 = fmul fast float %1964, %1632
  %1966 = fmul fast float %1964, %1633
  %1967 = fmul fast float %1964, %1634
  %1968 = fsub fast float %1689, %1965
  %1969 = fsub fast float %1690, %1966
  %1970 = fsub fast float %1691, %1967
  %1971 = fadd fast float %1965, %1689
  %1972 = fadd fast float %1966, %1690
  %1973 = fadd fast float %1967, %1691
  %1974 = fcmp fast ogt float %1677, 0.000000e+00
  %1975 = call float @dx.op.dot3.f32(i32 55, float %1968, float %1969, float %1970, float %1968, float %1969, float %1970)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1974, label %1976, label %1987, !dx.controlflow.hints !58

; <label>:1976                                    ; preds = %1963
  %1977 = call float @dx.op.dot3.f32(i32 55, float %1971, float %1972, float %1973, float %1971, float %1972, float %1973)  ; Dot3(ax,ay,az,bx,by,bz)
  %1978 = call float @dx.op.unary.f32(i32 25, float %1975)  ; Rsqrt(value)
  %1979 = call float @dx.op.unary.f32(i32 25, float %1977)  ; Rsqrt(value)
  %1980 = fmul fast float %1979, %1978
  %1981 = call float @dx.op.dot3.f32(i32 55, float %1968, float %1969, float %1970, float %1971, float %1972, float %1973)  ; Dot3(ax,ay,az,bx,by,bz)
  %1982 = fmul fast float %1981, 5.000000e-01
  %1983 = fadd fast float %1982, %1616
  %1984 = fmul fast float %1983, %1980
  %1985 = fadd fast float %1984, 5.000000e-01
  %1986 = fdiv fast float %1980, %1985
  br label %1990

; <label>:1987                                    ; preds = %1963
  %1988 = fadd fast float %1975, %1616
  %1989 = fdiv fast float 1.000000e+00, %1988
  br label %1990

; <label>:1990                                    ; preds = %1987, %1976
  %1991 = phi float [ %1986, %1976 ], [ %1989, %1987 ]
  %1992 = select i1 %1679, float %1991, float 1.000000e+00
  br label %1993

; <label>:1993                                    ; preds = %1990, %1846, %1837
  %1994 = phi float [ %1992, %1990 ], [ 0.000000e+00, %1837 ], [ %1962, %1846 ]
  %1995 = fsub fast float -0.000000e+00, %373
  %1996 = fsub fast float -0.000000e+00, %374
  %1997 = fsub fast float -0.000000e+00, %375
  %1998 = call float @dx.op.dot3.f32(i32 55, float %1694, float %1695, float %1696, float %1995, float %1996, float %1997)  ; Dot3(ax,ay,az,bx,by,bz)
  %1999 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %2000 = extractvalue %dx.types.CBufRet.f32 %1999, 1
  %2001 = fmul fast float %2000, %2000
  %2002 = fsub fast float 1.000000e+00, %2001
  %2003 = fmul fast float %1998, 2.000000e+00
  %2004 = fadd fast float %2003, %2000
  %2005 = fmul fast float %2004, %2000
  %2006 = fadd fast float %2005, 1.000000e+00
  %2007 = call float @dx.op.unary.f32(i32 24, float %2006)  ; Sqrt(value)
  %2008 = fmul fast float %2007, 0x402921FB60000000
  %2009 = fmul fast float %2008, %2006
  %2010 = fdiv fast float %2002, %2009
  %2011 = fmul fast float %1730, %1653
  %2012 = fmul fast float %2011, %1994
  %2013 = fmul fast float %2012, %2010
  %2014 = fmul fast float %2013, %1645
  %2015 = fmul fast float %2013, %1646
  %2016 = fmul fast float %2013, %1647
  %2017 = fadd fast float %2014, %1620
  %2018 = fadd fast float %2015, %1621
  %2019 = fadd fast float %2016, %1622
  br label %2020

; <label>:2020                                    ; preds = %1993, %1619
  %2021 = phi float [ %2017, %1993 ], [ %1620, %1619 ]
  %2022 = phi float [ %2018, %1993 ], [ %1621, %1619 ]
  %2023 = phi float [ %2019, %1993 ], [ %1622, %1619 ]
  %2024 = add nuw i32 %1623, 1
  %2025 = icmp eq i32 %2024, %1546
  br i1 %2025, label %2026, label %1619, !llvm.loop !59

; <label>:2026                                    ; preds = %2020
  br label %2027

; <label>:2027                                    ; preds = %2026, %1583
  %2028 = phi float [ %1519, %1583 ], [ %2021, %2026 ]
  %2029 = phi float [ %1520, %1583 ], [ %2022, %2026 ]
  %2030 = phi float [ %1521, %1583 ], [ %2023, %2026 ]
  %2031 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2032 = extractvalue %dx.types.CBufRet.f32 %2031, 2
  %2033 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2034 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2033, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2035 = extractvalue %dx.types.ResRet.f32 %2034, 0
  %2036 = extractvalue %dx.types.ResRet.f32 %2034, 1
  %2037 = extractvalue %dx.types.ResRet.f32 %2034, 2
  %2038 = fmul fast float %2035, %2032
  %2039 = fmul fast float %2036, %2032
  %2040 = fmul fast float %2037, %2032
  %2041 = fadd fast float %2038, %2028
  %2042 = fadd fast float %2039, %2029
  %2043 = fadd fast float %2040, %2030
  %2044 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2045 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2044, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2046 = extractvalue %dx.types.ResRet.f32 %2045, 0
  %2047 = extractvalue %dx.types.ResRet.f32 %2045, 1
  %2048 = extractvalue %dx.types.ResRet.f32 %2045, 2
  %2049 = extractvalue %dx.types.ResRet.f32 %2045, 3
  %2050 = call float @dx.op.dot3.f32(i32 55, float %2046, float %2047, float %2048, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2051 = fadd fast float %2049, %2050
  %2052 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2053 = extractvalue %dx.types.CBufRet.i32 %2052, 0
  %2054 = icmp eq i32 %2053, 0
  br i1 %2054, label %2061, label %2055, !dx.controlflow.hints !60

; <label>:2055                                    ; preds = %2027
  %2056 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2057 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2056, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2058 = extractvalue %dx.types.ResRet.f32 %2057, 0
  %2059 = extractvalue %dx.types.ResRet.f32 %2057, 1
  %2060 = extractvalue %dx.types.ResRet.f32 %2057, 2
  br label %2061

; <label>:2061                                    ; preds = %2055, %2027
  %2062 = phi float [ %2058, %2055 ], [ 0.000000e+00, %2027 ]
  %2063 = phi float [ %2059, %2055 ], [ 0.000000e+00, %2027 ]
  %2064 = phi float [ %2060, %2055 ], [ 0.000000e+00, %2027 ]
  %2065 = extractvalue %dx.types.CBufRet.f32 %2031, 1
  %2066 = fmul fast float %2046, %2041
  %2067 = fmul fast float %2047, %2042
  %2068 = fmul fast float %2048, %2043
  %2069 = fadd fast float %2062, %2066
  %2070 = fadd fast float %2063, %2067
  %2071 = fadd fast float %2064, %2068
  %2072 = fmul fast float %2065, %2069
  %2073 = fmul fast float %2065, %2070
  %2074 = fmul fast float %2065, %2071
  %2075 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2076 = extractvalue %dx.types.CBufRet.i32 %2075, 0
  %2077 = extractvalue %dx.types.CBufRet.i32 %2075, 1
  %2078 = extractvalue %dx.types.CBufRet.i32 %2075, 2
  %2079 = icmp slt i32 %42, %2076
  %2080 = icmp slt i32 %43, %2077
  %2081 = icmp slt i32 %44, %2078
  %2082 = and i1 %2079, %2080
  %2083 = and i1 %2081, %2082
  br i1 %2083, label %2084, label %2098

; <label>:2084                                    ; preds = %2061
  %2085 = bitcast float %2072 to i32
  %2086 = bitcast float %2073 to i32
  %2087 = bitcast float %2074 to i32
  %2088 = bitcast float %2051 to i32
  %2089 = icmp ult i32 %2085, 2139095040
  %2090 = icmp ult i32 %2086, 2139095040
  %2091 = icmp ult i32 %2087, 2139095040
  %2092 = icmp ult i32 %2088, 2139095040
  %2093 = select i1 %2089, float %2072, float 0.000000e+00
  %2094 = select i1 %2090, float %2073, float 0.000000e+00
  %2095 = select i1 %2091, float %2074, float 0.000000e+00
  %2096 = select i1 %2092, float %2051, float 0.000000e+00
  %2097 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2097, i32 %42, i32 %43, i32 %44, float %2093, float %2094, float %2095, float %2096, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2098

; <label>:2098                                    ; preds = %2084, %2061, %209
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!48}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !32, !34, !40}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !7}
!27 = !{i32 18, %"class.Texture2D<float>"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{!33}
!33 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!34 = !{!35, !36, !37, !38, !39}
!35 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!36 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!37 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!38 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!39 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!40 = !{!41, !42, !43, !44, !45, !46, !47}
!41 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!42 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!43 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!44 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!45 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!46 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!47 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!48 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !49}
!49 = !{i32 0, i64 16, i32 4, !50, i32 5, !51}
!50 = !{i32 4, i32 4, i32 4}
!51 = !{i32 0}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 2}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !57}
!57 = !{!"llvm.loop.unroll.disable"}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !"dx.controlflow.hints", i32 1}
