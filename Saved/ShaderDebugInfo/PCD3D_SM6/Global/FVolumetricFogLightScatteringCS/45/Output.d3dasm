;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: df896ca1f719433e2c771ca023cd0d9b
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S0   s4,space1000     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S3             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S4             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s4     1
; LightScatteringHistorySampler     sampler      NA          NA      S6             s5     1
; LightFunctionSampler              sampler      NA          NA      S7             s6     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; GlobalDistanceFieldPageAtlasTexture   texture     f32          3d     T16            t16     1
; GlobalDistanceFieldPageTableTexture   texture     u32          3d     T17            t17     1
; ConservativeDepthTexture          texture     f32          2d     T18            t18     1
; PrevConservativeDepthTexture      texture     f32          2d     T19            t19     1
; VBufferA                          texture     f32          3d     T20            t20     1
; VBufferB                          texture     f32          3d     T21            t21     1
; LightScatteringHistory            texture     f32          3d     T22            t22     1
; LocalShadowedLightScattering      texture     f32          3d     T23            t23     1
; LightFunctionTexture              texture     f32          2d     T24            t24     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 24, i32 24, i32 0, i8 0 }, i32 24, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 23, i32 23, i32 0, i8 0 }, i32 23, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %38 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %39 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %37, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %38, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %44 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %39, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %45 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %46 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %47 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %51 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.i32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.i32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.i32 %51, 2
  %55 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.i32 %55, 0
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %69 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %70 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.i32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.i32 %70, 1
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %42, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 1
  %82 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.f32 %82, 0
  %84 = extractvalue %dx.types.CBufRet.f32 %82, 1
  %85 = extractvalue %dx.types.CBufRet.f32 %82, 2
  %86 = extractvalue %dx.types.CBufRet.f32 %82, 3
  %87 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.f32 %87, 0
  %89 = extractvalue %dx.types.CBufRet.f32 %87, 1
  %90 = extractvalue %dx.types.CBufRet.f32 %87, 2
  %91 = extractvalue %dx.types.CBufRet.f32 %87, 3
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = extractvalue %dx.types.CBufRet.f32 %92, 1
  %95 = extractvalue %dx.types.CBufRet.f32 %92, 2
  %96 = extractvalue %dx.types.CBufRet.f32 %92, 3
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = extractvalue %dx.types.CBufRet.f32 %97, 1
  %100 = extractvalue %dx.types.CBufRet.f32 %97, 2
  %101 = extractvalue %dx.types.CBufRet.f32 %97, 3
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 3
  %104 = icmp eq i32 %103, 0
  %105 = uitofp i32 %45 to float
  %106 = uitofp i32 %46 to float
  %107 = fadd fast float %105, 5.000000e-01
  %108 = fadd fast float %106, 5.000000e-01
  %109 = uitofp i32 %47 to float
  br i1 %104, label %261, label %110

; <label>:110                                     ; preds = %0
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = fdiv fast float %107, %112
  %115 = fdiv fast float %108, %113
  %116 = fmul fast float %114, 2.000000e+00
  %117 = fmul fast float %115, 2.000000e+00
  %118 = fadd fast float %116, -1.000000e+00
  %119 = fadd fast float %117, -1.000000e+00
  %120 = fsub fast float -0.000000e+00, %119
  %121 = fadd fast float %109, -1.000000e+00
  %122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %123 = extractvalue %dx.types.CBufRet.f32 %122, 2
  %124 = fdiv fast float %121, %123
  %125 = call float @dx.op.unary.f32(i32 21, float %124)  ; Exp(value)
  %126 = extractvalue %dx.types.CBufRet.f32 %122, 1
  %127 = fsub fast float %125, %126
  %128 = extractvalue %dx.types.CBufRet.f32 %122, 0
  %129 = fdiv fast float %127, %128
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 3
  %132 = fcmp fast ult float %131, 1.000000e+00
  br i1 %132, label %139, label %133, !dx.controlflow.hints !55

; <label>:133                                     ; preds = %110
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %136 = fmul fast float %135, %129
  %137 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %138 = fadd fast float %136, %137
  br label %146

; <label>:139                                     ; preds = %110
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %142 = fadd fast float %141, %129
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = fmul fast float %142, %143
  %145 = fdiv fast float 1.000000e+00, %144
  br label %146

; <label>:146                                     ; preds = %139, %133
  %147 = phi float [ %138, %133 ], [ %145, %139 ]
  %148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %149 = extractvalue %dx.types.CBufRet.f32 %148, 0
  %150 = extractvalue %dx.types.CBufRet.f32 %148, 1
  %151 = extractvalue %dx.types.CBufRet.f32 %148, 2
  %152 = extractvalue %dx.types.CBufRet.f32 %148, 3
  %153 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.f32 %153, 0
  %155 = extractvalue %dx.types.CBufRet.f32 %153, 1
  %156 = extractvalue %dx.types.CBufRet.f32 %153, 2
  %157 = extractvalue %dx.types.CBufRet.f32 %153, 3
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 0
  %160 = extractvalue %dx.types.CBufRet.f32 %158, 1
  %161 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %162 = extractvalue %dx.types.CBufRet.f32 %158, 3
  %163 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.f32 %163, 0
  %165 = extractvalue %dx.types.CBufRet.f32 %163, 1
  %166 = extractvalue %dx.types.CBufRet.f32 %163, 2
  %167 = extractvalue %dx.types.CBufRet.f32 %163, 3
  %168 = fmul fast float %149, %118
  %169 = call float @dx.op.tertiary.f32(i32 46, float %120, float %154, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %147, float %159, float %169)  ; FMad(a,b,c)
  %171 = fadd fast float %170, %164
  %172 = fmul fast float %150, %118
  %173 = call float @dx.op.tertiary.f32(i32 46, float %120, float %155, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %147, float %160, float %173)  ; FMad(a,b,c)
  %175 = fadd fast float %174, %165
  %176 = fmul fast float %151, %118
  %177 = call float @dx.op.tertiary.f32(i32 46, float %120, float %156, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %147, float %161, float %177)  ; FMad(a,b,c)
  %179 = fadd fast float %178, %166
  %180 = fmul fast float %152, %118
  %181 = call float @dx.op.tertiary.f32(i32 46, float %120, float %157, float %180)  ; FMad(a,b,c)
  %182 = call float @dx.op.tertiary.f32(i32 46, float %147, float %162, float %181)  ; FMad(a,b,c)
  %183 = fadd fast float %182, %167
  %184 = fdiv fast float %171, %183
  %185 = fdiv fast float %175, %183
  %186 = fdiv fast float %179, %183
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %197 = extractvalue %dx.types.CBufRet.f32 %196, 2
  %198 = extractvalue %dx.types.CBufRet.f32 %196, 3
  %199 = fmul fast float %188, %184
  %200 = call float @dx.op.tertiary.f32(i32 46, float %185, float %191, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %186, float %194, float %200)  ; FMad(a,b,c)
  %202 = fadd fast float %201, %197
  %203 = fmul fast float %189, %184
  %204 = call float @dx.op.tertiary.f32(i32 46, float %185, float %192, float %203)  ; FMad(a,b,c)
  %205 = call float @dx.op.tertiary.f32(i32 46, float %186, float %195, float %204)  ; FMad(a,b,c)
  %206 = fadd fast float %205, %198
  %207 = fdiv fast float %202, %206
  %208 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %209 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %208, i32 0, i32 %45, i32 %46, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %210 = extractvalue %dx.types.ResRet.f32 %209, 0
  %211 = fcmp fast ogt float %210, %207
  br i1 %211, label %212, label %214

; <label>:212                                     ; preds = %146
  %213 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %213, i32 %45, i32 %46, i32 %47, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2357

; <label>:214                                     ; preds = %146
  %215 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.f32 %215, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %215, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %215, 3
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 3
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %227 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %228 = extractvalue %dx.types.CBufRet.f32 %227, 0
  %229 = extractvalue %dx.types.CBufRet.f32 %227, 1
  %230 = extractvalue %dx.types.CBufRet.f32 %227, 3
  %231 = fmul fast float %216, %184
  %232 = call float @dx.op.tertiary.f32(i32 46, float %185, float %220, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %186, float %224, float %232)  ; FMad(a,b,c)
  %234 = fadd fast float %233, %228
  %235 = fmul fast float %217, %184
  %236 = call float @dx.op.tertiary.f32(i32 46, float %185, float %221, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %186, float %225, float %236)  ; FMad(a,b,c)
  %238 = fadd fast float %237, %229
  %239 = fmul fast float %218, %184
  %240 = call float @dx.op.tertiary.f32(i32 46, float %185, float %222, float %239)  ; FMad(a,b,c)
  %241 = call float @dx.op.tertiary.f32(i32 46, float %186, float %226, float %240)  ; FMad(a,b,c)
  %242 = fadd fast float %241, %230
  %243 = fdiv fast float %234, %242
  %244 = fdiv fast float %238, %242
  %245 = fmul fast float %243, 5.000000e-01
  %246 = fmul fast float %244, 5.000000e-01
  %247 = fadd fast float %245, 5.000000e-01
  %248 = fsub fast float 5.000000e-01, %246
  %249 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %250 = extractvalue %dx.types.CBufRet.f32 %249, 0
  %251 = extractvalue %dx.types.CBufRet.f32 %249, 1
  %252 = fmul fast float %250, %247
  %253 = fmul fast float %251, %248
  %254 = fptoui float %252 to i32
  %255 = fptoui float %253 to i32
  %256 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %257 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %256, i32 0, i32 %254, i32 %255, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %258 = extractvalue %dx.types.ResRet.f32 %257, 0
  %259 = fcmp fast ogt float %258, %207
  br i1 %259, label %260, label %261

; <label>:260                                     ; preds = %214
  br label %261

; <label>:261                                     ; preds = %260, %214, %0
  %262 = phi i32 [ 1, %260 ], [ 0, %214 ], [ 0, %0 ]
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = extractvalue %dx.types.CBufRet.f32 %267, 1
  %270 = extractvalue %dx.types.CBufRet.f32 %267, 3
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 3
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = extractvalue %dx.types.CBufRet.f32 %275, 3
  %279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %280 = extractvalue %dx.types.CBufRet.f32 %279, 0
  %281 = extractvalue %dx.types.CBufRet.f32 %279, 1
  %282 = fdiv fast float %107, %280
  %283 = fdiv fast float %108, %281
  %284 = fmul fast float %282, 2.000000e+00
  %285 = fmul fast float %283, 2.000000e+00
  %286 = fadd fast float %284, -1.000000e+00
  %287 = fadd fast float %285, -1.000000e+00
  %288 = fsub fast float -0.000000e+00, %287
  %289 = fadd fast float %109, 5.000000e-01
  %290 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %291 = extractvalue %dx.types.CBufRet.f32 %290, 2
  %292 = fdiv fast float %289, %291
  %293 = call float @dx.op.unary.f32(i32 21, float %292)  ; Exp(value)
  %294 = extractvalue %dx.types.CBufRet.f32 %290, 1
  %295 = fsub fast float %293, %294
  %296 = extractvalue %dx.types.CBufRet.f32 %290, 0
  %297 = fdiv fast float %295, %296
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 3
  %300 = fcmp fast ult float %299, 1.000000e+00
  br i1 %300, label %307, label %301, !dx.controlflow.hints !55

; <label>:301                                     ; preds = %261
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 2
  %304 = fmul fast float %303, %297
  %305 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %306 = fadd fast float %304, %305
  br label %314

; <label>:307                                     ; preds = %261
  %308 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.f32 %308, 3
  %310 = fadd fast float %309, %297
  %311 = extractvalue %dx.types.CBufRet.f32 %308, 2
  %312 = fmul fast float %310, %311
  %313 = fdiv fast float 1.000000e+00, %312
  br label %314

; <label>:314                                     ; preds = %307, %301
  %315 = phi float [ %306, %301 ], [ %313, %307 ]
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = extractvalue %dx.types.CBufRet.f32 %316, 3
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = extractvalue %dx.types.CBufRet.f32 %321, 1
  %324 = extractvalue %dx.types.CBufRet.f32 %321, 2
  %325 = extractvalue %dx.types.CBufRet.f32 %321, 3
  %326 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %327 = extractvalue %dx.types.CBufRet.f32 %326, 0
  %328 = extractvalue %dx.types.CBufRet.f32 %326, 1
  %329 = extractvalue %dx.types.CBufRet.f32 %326, 2
  %330 = extractvalue %dx.types.CBufRet.f32 %326, 3
  %331 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %332 = extractvalue %dx.types.CBufRet.f32 %331, 0
  %333 = extractvalue %dx.types.CBufRet.f32 %331, 1
  %334 = extractvalue %dx.types.CBufRet.f32 %331, 2
  %335 = extractvalue %dx.types.CBufRet.f32 %331, 3
  %336 = fmul fast float %317, %286
  %337 = call float @dx.op.tertiary.f32(i32 46, float %288, float %322, float %336)  ; FMad(a,b,c)
  %338 = call float @dx.op.tertiary.f32(i32 46, float %315, float %327, float %337)  ; FMad(a,b,c)
  %339 = fadd fast float %338, %332
  %340 = fmul fast float %318, %286
  %341 = call float @dx.op.tertiary.f32(i32 46, float %288, float %323, float %340)  ; FMad(a,b,c)
  %342 = call float @dx.op.tertiary.f32(i32 46, float %315, float %328, float %341)  ; FMad(a,b,c)
  %343 = fadd fast float %342, %333
  %344 = fmul fast float %319, %286
  %345 = call float @dx.op.tertiary.f32(i32 46, float %288, float %324, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %315, float %329, float %345)  ; FMad(a,b,c)
  %347 = fadd fast float %346, %334
  %348 = fmul fast float %320, %286
  %349 = call float @dx.op.tertiary.f32(i32 46, float %288, float %325, float %348)  ; FMad(a,b,c)
  %350 = call float @dx.op.tertiary.f32(i32 46, float %315, float %330, float %349)  ; FMad(a,b,c)
  %351 = fadd fast float %350, %335
  %352 = fdiv fast float %339, %351
  %353 = fdiv fast float %343, %351
  %354 = fdiv fast float %347, %351
  %355 = fmul fast float %352, %264
  %356 = call float @dx.op.tertiary.f32(i32 46, float %353, float %268, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %354, float %272, float %356)  ; FMad(a,b,c)
  %358 = fadd fast float %357, %276
  %359 = fmul fast float %352, %265
  %360 = call float @dx.op.tertiary.f32(i32 46, float %353, float %269, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %354, float %273, float %360)  ; FMad(a,b,c)
  %362 = fadd fast float %361, %277
  %363 = fmul fast float %352, %266
  %364 = call float @dx.op.tertiary.f32(i32 46, float %353, float %270, float %363)  ; FMad(a,b,c)
  %365 = call float @dx.op.tertiary.f32(i32 46, float %354, float %274, float %364)  ; FMad(a,b,c)
  %366 = fadd fast float %365, %278
  %367 = fdiv fast float %358, %366
  %368 = fdiv fast float %362, %366
  %369 = fmul fast float %367, 5.000000e-01
  %370 = fmul fast float %368, 5.000000e-01
  %371 = fadd fast float %369, 5.000000e-01
  %372 = fsub fast float 5.000000e-01, %370
  %373 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %374 = extractvalue %dx.types.CBufRet.f32 %373, 0
  %375 = fmul fast float %374, %366
  %376 = extractvalue %dx.types.CBufRet.f32 %373, 1
  %377 = fadd fast float %375, %376
  %378 = call float @dx.op.unary.f32(i32 23, float %377)  ; Log(value)
  %379 = extractvalue %dx.types.CBufRet.f32 %373, 2
  %380 = fmul fast float %379, %378
  %381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %382 = extractvalue %dx.types.CBufRet.f32 %381, 2
  %383 = fmul fast float %380, %382
  %384 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %385 = extractvalue %dx.types.CBufRet.f32 %384, 2
  %386 = extractvalue %dx.types.CBufRet.f32 %384, 3
  %387 = fmul fast float %385, %371
  %388 = fmul fast float %386, %372
  %389 = fcmp fast olt float %387, 0.000000e+00
  %390 = fcmp fast olt float %388, 0.000000e+00
  %391 = fcmp fast olt float %383, 0.000000e+00
  %392 = or i1 %389, %390
  %393 = or i1 %391, %392
  br i1 %393, label %404, label %394

; <label>:394                                     ; preds = %314
  %395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %396 = extractvalue %dx.types.CBufRet.f32 %395, 0
  %397 = fcmp fast ogt float %387, 1.000000e+00
  %398 = fcmp fast ogt float %388, 1.000000e+00
  %399 = fcmp fast ogt float %383, 1.000000e+00
  %400 = or i1 %397, %398
  %401 = or i1 %399, %400
  %402 = icmp ne i32 %262, 0
  %403 = or i1 %402, %401
  br i1 %403, label %404, label %405

; <label>:404                                     ; preds = %394, %314
  br label %405

; <label>:405                                     ; preds = %404, %394
  %406 = phi float [ 0.000000e+00, %404 ], [ %396, %394 ]
  %407 = fcmp fast olt float %406, 0x3F50624DE0000000
  br i1 %407, label %408, label %419

; <label>:408                                     ; preds = %405
  %409 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.i32 %409, 0
  %411 = extractvalue %dx.types.CBufRet.i32 %409, 1
  %412 = extractvalue %dx.types.CBufRet.i32 %409, 2
  %413 = icmp slt i32 %45, %410
  %414 = icmp slt i32 %46, %411
  %415 = icmp slt i32 %47, %412
  %416 = and i1 %413, %414
  %417 = and i1 %415, %416
  %418 = select i1 %417, i32 8, i32 1
  br label %419

; <label>:419                                     ; preds = %408, %405
  %420 = phi i32 [ 1, %405 ], [ %418, %408 ]
  br label %421

; <label>:421                                     ; preds = %2247, %419
  %422 = phi float [ 0.000000e+00, %419 ], [ %2248, %2247 ]
  %423 = phi float [ 0.000000e+00, %419 ], [ %2249, %2247 ]
  %424 = phi float [ 0.000000e+00, %419 ], [ %2250, %2247 ]
  %425 = phi i32 [ 0, %419 ], [ %2251, %2247 ]
  %426 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %43, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.i32 %426, 0
  %428 = shl i32 %425, 3
  %429 = add i32 %427, %428
  %430 = mul i32 %45, 1664525
  %431 = mul i32 %46, 1664525
  %432 = mul i32 %47, 1664525
  %433 = mul i32 %429, 1664525
  %434 = add i32 %430, 1013904223
  %435 = add i32 %431, 1013904223
  %436 = add i32 %432, 1013904223
  %437 = add i32 %433, 1013904223
  %438 = mul i32 %437, %435
  %439 = add i32 %434, %438
  %440 = mul i32 %439, %436
  %441 = add i32 %440, %435
  %442 = mul i32 %441, %439
  %443 = add i32 %442, %436
  %444 = mul i32 %443, %441
  %445 = add i32 %444, %437
  %446 = lshr i32 %439, 16
  %447 = lshr i32 %441, 16
  %448 = lshr i32 %443, 16
  %449 = lshr i32 %445, 16
  %450 = xor i32 %446, %439
  %451 = xor i32 %447, %441
  %452 = xor i32 %448, %443
  %453 = xor i32 %449, %445
  %454 = mul i32 %453, %451
  %455 = add i32 %454, %450
  %456 = mul i32 %455, %452
  %457 = add i32 %456, %451
  %458 = mul i32 %457, %455
  %459 = add i32 %458, %452
  %460 = uitofp i32 %455 to float
  %461 = uitofp i32 %457 to float
  %462 = uitofp i32 %459 to float
  %463 = fmul fast float %460, 0x3E00000000000000
  %464 = fmul fast float %461, 0x3E00000000000000
  %465 = fmul fast float %462, 0x3E00000000000000
  %466 = fadd fast float %463, -1.000000e+00
  %467 = fadd fast float %464, -1.000000e+00
  %468 = fadd fast float %465, -1.000000e+00
  %469 = add nuw nsw i32 %425, 12
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %469)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %473 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %474 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %475 = extractvalue %dx.types.CBufRet.f32 %474, 3
  %476 = fmul fast float %466, %475
  %477 = fmul fast float %467, %475
  %478 = fmul fast float %468, %475
  %479 = fadd fast float %476, %471
  %480 = fadd fast float %477, %472
  %481 = fadd fast float %478, %473
  %482 = fadd fast float %479, %105
  %483 = fadd fast float %480, %106
  %484 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %485 = extractvalue %dx.types.CBufRet.f32 %484, 0
  %486 = extractvalue %dx.types.CBufRet.f32 %484, 1
  %487 = fdiv fast float %482, %485
  %488 = fdiv fast float %483, %486
  %489 = fmul fast float %487, 2.000000e+00
  %490 = fmul fast float %488, 2.000000e+00
  %491 = fadd fast float %489, -1.000000e+00
  %492 = fadd fast float %490, -1.000000e+00
  %493 = fsub fast float -0.000000e+00, %492
  %494 = fadd fast float %481, %109
  %495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %496 = extractvalue %dx.types.CBufRet.f32 %495, 2
  %497 = fdiv fast float %494, %496
  %498 = call float @dx.op.unary.f32(i32 21, float %497)  ; Exp(value)
  %499 = extractvalue %dx.types.CBufRet.f32 %495, 1
  %500 = fsub fast float %498, %499
  %501 = extractvalue %dx.types.CBufRet.f32 %495, 0
  %502 = fdiv fast float %500, %501
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 3
  %505 = fcmp fast ult float %504, 1.000000e+00
  br i1 %505, label %512, label %506, !dx.controlflow.hints !55

; <label>:506                                     ; preds = %421
  %507 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %508 = extractvalue %dx.types.CBufRet.f32 %507, 2
  %509 = fmul fast float %508, %502
  %510 = extractvalue %dx.types.CBufRet.f32 %503, 2
  %511 = fadd fast float %509, %510
  br label %519

; <label>:512                                     ; preds = %421
  %513 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %514 = extractvalue %dx.types.CBufRet.f32 %513, 3
  %515 = fadd fast float %514, %502
  %516 = extractvalue %dx.types.CBufRet.f32 %513, 2
  %517 = fmul fast float %515, %516
  %518 = fdiv fast float 1.000000e+00, %517
  br label %519

; <label>:519                                     ; preds = %512, %506
  %520 = phi float [ %511, %506 ], [ %518, %512 ]
  %521 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %522 = extractvalue %dx.types.CBufRet.f32 %521, 0
  %523 = extractvalue %dx.types.CBufRet.f32 %521, 1
  %524 = extractvalue %dx.types.CBufRet.f32 %521, 2
  %525 = extractvalue %dx.types.CBufRet.f32 %521, 3
  %526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %527 = extractvalue %dx.types.CBufRet.f32 %526, 0
  %528 = extractvalue %dx.types.CBufRet.f32 %526, 1
  %529 = extractvalue %dx.types.CBufRet.f32 %526, 2
  %530 = extractvalue %dx.types.CBufRet.f32 %526, 3
  %531 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %532 = extractvalue %dx.types.CBufRet.f32 %531, 0
  %533 = extractvalue %dx.types.CBufRet.f32 %531, 1
  %534 = extractvalue %dx.types.CBufRet.f32 %531, 2
  %535 = extractvalue %dx.types.CBufRet.f32 %531, 3
  %536 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %537 = extractvalue %dx.types.CBufRet.f32 %536, 0
  %538 = extractvalue %dx.types.CBufRet.f32 %536, 1
  %539 = extractvalue %dx.types.CBufRet.f32 %536, 2
  %540 = extractvalue %dx.types.CBufRet.f32 %536, 3
  %541 = fmul fast float %522, %491
  %542 = call float @dx.op.tertiary.f32(i32 46, float %493, float %527, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %520, float %532, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %537
  %545 = fmul fast float %523, %491
  %546 = call float @dx.op.tertiary.f32(i32 46, float %493, float %528, float %545)  ; FMad(a,b,c)
  %547 = call float @dx.op.tertiary.f32(i32 46, float %520, float %533, float %546)  ; FMad(a,b,c)
  %548 = fadd fast float %547, %538
  %549 = fmul fast float %524, %491
  %550 = call float @dx.op.tertiary.f32(i32 46, float %493, float %529, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %520, float %534, float %550)  ; FMad(a,b,c)
  %552 = fadd fast float %551, %539
  %553 = fmul fast float %525, %491
  %554 = call float @dx.op.tertiary.f32(i32 46, float %493, float %530, float %553)  ; FMad(a,b,c)
  %555 = call float @dx.op.tertiary.f32(i32 46, float %520, float %535, float %554)  ; FMad(a,b,c)
  %556 = fadd fast float %555, %540
  %557 = fdiv fast float %544, %556
  %558 = fdiv fast float %548, %556
  %559 = fdiv fast float %552, %556
  %560 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %561 = extractvalue %dx.types.CBufRet.f32 %560, 0
  %562 = extractvalue %dx.types.CBufRet.f32 %560, 1
  %563 = extractvalue %dx.types.CBufRet.f32 %560, 2
  %564 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %565 = extractvalue %dx.types.CBufRet.f32 %564, 0
  %566 = extractvalue %dx.types.CBufRet.f32 %564, 1
  %567 = extractvalue %dx.types.CBufRet.f32 %564, 2
  %568 = fmul fast float %561, 2.097152e+06
  %569 = fmul fast float %562, 2.097152e+06
  %570 = fmul fast float %563, 2.097152e+06
  %571 = fadd fast float %568, %557
  %572 = fsub fast float %571, %565
  %573 = fadd fast float %569, %558
  %574 = fsub fast float %573, %566
  %575 = fadd fast float %570, %559
  %576 = fsub fast float %575, %567
  %577 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %578 = extractvalue %dx.types.CBufRet.f32 %577, 0
  %579 = extractvalue %dx.types.CBufRet.f32 %577, 1
  %580 = extractvalue %dx.types.CBufRet.f32 %577, 2
  %581 = fsub fast float %557, %578
  %582 = fsub fast float %558, %579
  %583 = fsub fast float %559, %580
  %584 = fmul fast float %581, %581
  %585 = fmul fast float %582, %582
  %586 = fadd fast float %584, %585
  %587 = fmul fast float %583, %583
  %588 = fadd fast float %586, %587
  %589 = call float @dx.op.unary.f32(i32 24, float %588)  ; Sqrt(value)
  %590 = fdiv fast float %581, %589
  %591 = fdiv fast float %582, %589
  %592 = fdiv fast float %583, %589
  %593 = icmp eq i32 %50, 0
  br i1 %593, label %594, label %596, !dx.controlflow.hints !56

; <label>:594                                     ; preds = %519
  %595 = extractvalue %dx.types.CBufRet.f32 %474, 1
  br label %1245

; <label>:596                                     ; preds = %519
  %597 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %598 = extractvalue %dx.types.CBufRet.f32 %597, 2
  %599 = fcmp fast ogt float %598, 0.000000e+00
  br i1 %599, label %600, label %1175

; <label>:600                                     ; preds = %596
  %601 = icmp eq i32 %81, 0
  br i1 %601, label %637, label %602, !dx.controlflow.hints !57

; <label>:602                                     ; preds = %600
  %603 = fmul fast float %557, %83
  %604 = call float @dx.op.tertiary.f32(i32 46, float %558, float %88, float %603)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %559, float %93, float %604)  ; FMad(a,b,c)
  %606 = fadd fast float %605, %98
  %607 = fmul fast float %557, %84
  %608 = call float @dx.op.tertiary.f32(i32 46, float %558, float %89, float %607)  ; FMad(a,b,c)
  %609 = call float @dx.op.tertiary.f32(i32 46, float %559, float %94, float %608)  ; FMad(a,b,c)
  %610 = fadd fast float %609, %99
  %611 = fmul fast float %557, %86
  %612 = call float @dx.op.tertiary.f32(i32 46, float %558, float %91, float %611)  ; FMad(a,b,c)
  %613 = call float @dx.op.tertiary.f32(i32 46, float %559, float %96, float %612)  ; FMad(a,b,c)
  %614 = fadd fast float %613, %101
  %615 = fdiv fast float %606, %614
  %616 = fdiv fast float %610, %614
  %617 = fcmp fast ole float %615, 1.000000e+00
  %618 = fcmp fast ole float %616, 1.000000e+00
  %619 = fcmp fast oge float %615, 0.000000e+00
  %620 = fcmp fast oge float %616, 0.000000e+00
  %621 = and i1 %619, %617
  %622 = and i1 %620, %618
  %623 = and i1 %621, %622
  br i1 %623, label %624, label %637

; <label>:624                                     ; preds = %602
  %625 = fmul fast float %557, %85
  %626 = call float @dx.op.tertiary.f32(i32 46, float %558, float %90, float %625)  ; FMad(a,b,c)
  %627 = call float @dx.op.tertiary.f32(i32 46, float %559, float %95, float %626)  ; FMad(a,b,c)
  %628 = fadd fast float %627, %100
  %629 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %630 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %631 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %629, %dx.types.Handle %630, float %615, float %616, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %632 = extractvalue %dx.types.ResRet.f32 %631, 0
  %633 = fcmp fast olt float %628, %632
  %634 = fcmp fast ogt float %632, 0x3FEFAE1480000000
  %635 = or i1 %633, %634
  %636 = uitofp i1 %635 to float
  br label %637

; <label>:637                                     ; preds = %624, %602, %600
  %638 = phi float [ %636, %624 ], [ 1.000000e+00, %602 ], [ 1.000000e+00, %600 ]
  %639 = icmp eq i32 %71, 0
  br i1 %639, label %719, label %640

; <label>:640                                     ; preds = %637
  %641 = fcmp fast oge float %502, %74
  %642 = fcmp fast oge float %502, %75
  %643 = fcmp fast oge float %502, %76
  %644 = fcmp fast oge float %502, %77
  %645 = zext i1 %641 to i32
  %646 = zext i1 %642 to i32
  %647 = zext i1 %643 to i32
  %648 = zext i1 %644 to i32
  %649 = add nuw nsw i32 %645, %646
  %650 = add nuw nsw i32 %649, %647
  %651 = add nuw nsw i32 %650, %648
  %652 = icmp ult i32 %651, %71
  br i1 %652, label %653, label %719

; <label>:653                                     ; preds = %640
  %654 = shl nuw nsw i32 %651, 2
  %655 = add nuw nsw i32 %654, 9
  %656 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %655)  ; CBufferLoadLegacy(handle,regIndex)
  %657 = extractvalue %dx.types.CBufRet.f32 %656, 0
  %658 = extractvalue %dx.types.CBufRet.f32 %656, 1
  %659 = extractvalue %dx.types.CBufRet.f32 %656, 3
  %660 = add nuw nsw i32 %654, 10
  %661 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %660)  ; CBufferLoadLegacy(handle,regIndex)
  %662 = extractvalue %dx.types.CBufRet.f32 %661, 0
  %663 = extractvalue %dx.types.CBufRet.f32 %661, 1
  %664 = extractvalue %dx.types.CBufRet.f32 %661, 3
  %665 = add nuw nsw i32 %654, 11
  %666 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %665)  ; CBufferLoadLegacy(handle,regIndex)
  %667 = extractvalue %dx.types.CBufRet.f32 %666, 0
  %668 = extractvalue %dx.types.CBufRet.f32 %666, 1
  %669 = extractvalue %dx.types.CBufRet.f32 %666, 3
  %670 = add nuw nsw i32 %654, 12
  %671 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %670)  ; CBufferLoadLegacy(handle,regIndex)
  %672 = extractvalue %dx.types.CBufRet.f32 %671, 0
  %673 = extractvalue %dx.types.CBufRet.f32 %671, 1
  %674 = extractvalue %dx.types.CBufRet.f32 %671, 3
  %675 = fmul fast float %657, %557
  %676 = call float @dx.op.tertiary.f32(i32 46, float %558, float %662, float %675)  ; FMad(a,b,c)
  %677 = call float @dx.op.tertiary.f32(i32 46, float %559, float %667, float %676)  ; FMad(a,b,c)
  %678 = fadd fast float %677, %672
  %679 = fmul fast float %658, %557
  %680 = call float @dx.op.tertiary.f32(i32 46, float %558, float %663, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %559, float %668, float %680)  ; FMad(a,b,c)
  %682 = fadd fast float %681, %673
  %683 = fmul fast float %659, %557
  %684 = call float @dx.op.tertiary.f32(i32 46, float %558, float %664, float %683)  ; FMad(a,b,c)
  %685 = call float @dx.op.tertiary.f32(i32 46, float %559, float %669, float %684)  ; FMad(a,b,c)
  %686 = fadd fast float %685, %674
  %687 = fdiv fast float %678, %686
  %688 = fdiv fast float %682, %686
  %689 = add nuw nsw i32 %651, 25
  %690 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %42, i32 %689)  ; CBufferLoadLegacy(handle,regIndex)
  %691 = extractvalue %dx.types.CBufRet.f32 %690, 0
  %692 = extractvalue %dx.types.CBufRet.f32 %690, 1
  %693 = extractvalue %dx.types.CBufRet.f32 %690, 2
  %694 = extractvalue %dx.types.CBufRet.f32 %690, 3
  %695 = fcmp fast ole float %687, %693
  %696 = fcmp fast ole float %688, %694
  %697 = fcmp fast oge float %687, %691
  %698 = fcmp fast oge float %688, %692
  %699 = and i1 %697, %695
  %700 = and i1 %698, %696
  %701 = and i1 %699, %700
  br i1 %701, label %702, label %719

; <label>:702                                     ; preds = %653
  %703 = extractvalue %dx.types.CBufRet.f32 %671, 2
  %704 = extractvalue %dx.types.CBufRet.f32 %666, 2
  %705 = extractvalue %dx.types.CBufRet.f32 %661, 2
  %706 = extractvalue %dx.types.CBufRet.f32 %656, 2
  %707 = fmul fast float %706, %557
  %708 = call float @dx.op.tertiary.f32(i32 46, float %558, float %705, float %707)  ; FMad(a,b,c)
  %709 = call float @dx.op.tertiary.f32(i32 46, float %559, float %704, float %708)  ; FMad(a,b,c)
  %710 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %711 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %710, %dx.types.Handle %711, float %687, float %688, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  %714 = fsub fast float 1.000000e+00, %703
  %715 = fsub fast float %714, %709
  %716 = fsub fast float %713, %79
  %717 = fcmp fast olt float %715, %716
  %718 = uitofp i1 %717 to float
  br label %719

; <label>:719                                     ; preds = %702, %653, %640, %637
  %720 = phi float [ %718, %702 ], [ 1.000000e+00, %653 ], [ 1.000000e+00, %640 ], [ 1.000000e+00, %637 ]
  %721 = fmul fast float %720, %638
  %722 = fsub fast float %557, %565
  %723 = fsub fast float %558, %566
  %724 = fsub fast float %559, %567
  %725 = mul i32 %72, 336
  %726 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %727 = add i32 %725, 128
  %728 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %727, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %729 = add i32 %725, 144
  %730 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %729, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %731 = add i32 %725, 160
  %732 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %731, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %733 = add i32 %725, 176
  %734 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %733, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %735 = add i32 %725, 256
  %736 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %735, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %737 = extractvalue %dx.types.ResRet.i32 %736, 0
  %738 = extractvalue %dx.types.ResRet.i32 %736, 1
  %739 = extractvalue %dx.types.ResRet.i32 %736, 2
  %740 = bitcast i32 %737 to float
  %741 = bitcast i32 %738 to float
  %742 = bitcast i32 %739 to float
  %743 = add i32 %725, 268
  %744 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %743, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %745 = extractvalue %dx.types.ResRet.i32 %744, 0
  %746 = add i32 %725, 272
  %747 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %746, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %748 = add i32 %725, 288
  %749 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %748, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %750 = icmp eq i32 %745, 0
  %751 = fadd fast float %740, %561
  %752 = fadd fast float %741, %562
  %753 = fadd fast float %742, %563
  %754 = fmul fast float %751, 2.097152e+06
  %755 = fmul fast float %752, 2.097152e+06
  %756 = fmul fast float %753, 2.097152e+06
  %757 = fadd fast float %754, %722
  %758 = fadd fast float %755, %723
  %759 = fadd fast float %756, %724
  br i1 %750, label %760, label %1000

; <label>:760                                     ; preds = %719
  %761 = extractvalue %dx.types.ResRet.i32 %749, 2
  %762 = bitcast i32 %761 to float
  %763 = extractvalue %dx.types.ResRet.i32 %749, 1
  %764 = bitcast i32 %763 to float
  %765 = extractvalue %dx.types.ResRet.i32 %749, 0
  %766 = bitcast i32 %765 to float
  %767 = add i32 %725, 320
  %768 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %767, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %769 = extractvalue %dx.types.ResRet.i32 %768, 0
  %770 = add i32 %725, 316
  %771 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %770, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %772 = extractvalue %dx.types.ResRet.i32 %771, 0
  %773 = add i32 %725, 300
  %774 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %773, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %775 = extractvalue %dx.types.ResRet.i32 %774, 0
  %776 = bitcast i32 %775 to float
  %777 = fadd fast float %757, %766
  %778 = fadd fast float %758, %764
  %779 = fadd fast float %759, %762
  %780 = fmul fast float %777, %777
  %781 = fmul fast float %778, %778
  %782 = fadd fast float %780, %781
  %783 = fmul fast float %779, %779
  %784 = fadd fast float %782, %783
  %785 = call float @dx.op.unary.f32(i32 24, float %784)  ; Sqrt(value)
  %786 = call float @dx.op.unary.f32(i32 23, float %785)  ; Log(value)
  %787 = fadd fast float %786, %776
  %788 = call float @dx.op.unary.f32(i32 27, float %787)  ; Round_ni(value)
  %789 = fptosi float %788 to i32
  %790 = sub nsw i32 %789, %772
  %791 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %790)  ; IMax(a,b)
  %792 = icmp slt i32 %791, %769
  br i1 %792, label %793, label %1172

; <label>:793                                     ; preds = %760
  %794 = add nsw i32 %791, %72
  %795 = mul i32 %794, 336
  %796 = add i32 %795, 112
  %797 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %796, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %798 = extractvalue %dx.types.ResRet.i32 %797, 2
  %799 = bitcast i32 %798 to float
  %800 = add i32 %795, 128
  %801 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %800, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %802 = extractvalue %dx.types.ResRet.i32 %801, 0
  %803 = extractvalue %dx.types.ResRet.i32 %801, 1
  %804 = extractvalue %dx.types.ResRet.i32 %801, 2
  %805 = bitcast i32 %802 to float
  %806 = bitcast i32 %803 to float
  %807 = bitcast i32 %804 to float
  %808 = add i32 %795, 144
  %809 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %808, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %810 = extractvalue %dx.types.ResRet.i32 %809, 0
  %811 = extractvalue %dx.types.ResRet.i32 %809, 1
  %812 = extractvalue %dx.types.ResRet.i32 %809, 2
  %813 = bitcast i32 %810 to float
  %814 = bitcast i32 %811 to float
  %815 = bitcast i32 %812 to float
  %816 = add i32 %795, 160
  %817 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %816, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %818 = extractvalue %dx.types.ResRet.i32 %817, 0
  %819 = extractvalue %dx.types.ResRet.i32 %817, 1
  %820 = extractvalue %dx.types.ResRet.i32 %817, 2
  %821 = bitcast i32 %818 to float
  %822 = bitcast i32 %819 to float
  %823 = bitcast i32 %820 to float
  %824 = add i32 %795, 176
  %825 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %824, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %826 = extractvalue %dx.types.ResRet.i32 %825, 0
  %827 = extractvalue %dx.types.ResRet.i32 %825, 1
  %828 = extractvalue %dx.types.ResRet.i32 %825, 2
  %829 = bitcast i32 %826 to float
  %830 = bitcast i32 %827 to float
  %831 = bitcast i32 %828 to float
  %832 = add i32 %795, 256
  %833 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %832, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %834 = extractvalue %dx.types.ResRet.i32 %833, 0
  %835 = extractvalue %dx.types.ResRet.i32 %833, 1
  %836 = extractvalue %dx.types.ResRet.i32 %833, 2
  %837 = bitcast i32 %834 to float
  %838 = bitcast i32 %835 to float
  %839 = bitcast i32 %836 to float
  %840 = add i32 %795, 272
  %841 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %840, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %842 = extractvalue %dx.types.ResRet.i32 %841, 0
  %843 = extractvalue %dx.types.ResRet.i32 %841, 1
  %844 = extractvalue %dx.types.ResRet.i32 %841, 2
  %845 = bitcast i32 %842 to float
  %846 = bitcast i32 %843 to float
  %847 = bitcast i32 %844 to float
  %848 = fadd fast float %837, %561
  %849 = fadd fast float %838, %562
  %850 = fadd fast float %839, %563
  %851 = fmul fast float %848, 2.097152e+06
  %852 = fmul fast float %849, 2.097152e+06
  %853 = fmul fast float %850, 2.097152e+06
  %854 = fadd fast float %851, %722
  %855 = fadd fast float %854, %845
  %856 = fadd fast float %852, %723
  %857 = fadd fast float %856, %846
  %858 = fadd fast float %853, %724
  %859 = fadd fast float %858, %847
  %860 = fmul fast float %855, %805
  %861 = call float @dx.op.tertiary.f32(i32 46, float %857, float %813, float %860)  ; FMad(a,b,c)
  %862 = call float @dx.op.tertiary.f32(i32 46, float %859, float %821, float %861)  ; FMad(a,b,c)
  %863 = fadd fast float %862, %829
  %864 = fmul fast float %855, %806
  %865 = call float @dx.op.tertiary.f32(i32 46, float %857, float %814, float %864)  ; FMad(a,b,c)
  %866 = call float @dx.op.tertiary.f32(i32 46, float %859, float %822, float %865)  ; FMad(a,b,c)
  %867 = fadd fast float %866, %830
  %868 = fmul fast float %855, %807
  %869 = call float @dx.op.tertiary.f32(i32 46, float %857, float %815, float %868)  ; FMad(a,b,c)
  %870 = call float @dx.op.tertiary.f32(i32 46, float %859, float %823, float %869)  ; FMad(a,b,c)
  %871 = fadd fast float %870, %831
  %872 = fmul fast float %863, 1.280000e+02
  %873 = fmul fast float %867, 1.280000e+02
  %874 = fptoui float %872 to i32
  %875 = fptoui float %873 to i32
  %876 = icmp ult i32 %794, 8192
  br i1 %876, label %883, label %877

; <label>:877                                     ; preds = %793
  %878 = mul i32 %794, 21845
  %879 = shl i32 %875, 7
  %880 = add i32 %878, -178946048
  %881 = add i32 %880, %874
  %882 = add i32 %881, %879
  br label %883

; <label>:883                                     ; preds = %877, %793
  %884 = phi i32 [ %882, %877 ], [ %794, %793 ]
  %885 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %886 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %885, i32 %884, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %887 = extractvalue %dx.types.ResRet.i32 %886, 0
  %888 = lshr i32 %887, 20
  %889 = and i32 %888, 63
  %890 = and i32 %887, 134217728
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %994, label %892

; <label>:892                                     ; preds = %883
  %893 = icmp eq i32 %889, 0
  %894 = zext i1 %893 to i32
  %895 = add i32 %889, %794
  %896 = fmul fast float %863, 1.638400e+04
  %897 = fmul fast float %867, 1.638400e+04
  %898 = fptoui float %896 to i32
  %899 = fptoui float %897 to i32
  br i1 %893, label %971, label %900

; <label>:900                                     ; preds = %892
  %901 = add i32 %795, 304
  %902 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %901, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %903 = extractvalue %dx.types.ResRet.i32 %902, 0
  %904 = extractvalue %dx.types.ResRet.i32 %902, 1
  %905 = mul i32 %895, 336
  %906 = add i32 %905, 112
  %907 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %906, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %908 = extractvalue %dx.types.ResRet.i32 %907, 2
  %909 = bitcast i32 %908 to float
  %910 = add i32 %905, 304
  %911 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %910, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %912 = extractvalue %dx.types.ResRet.i32 %911, 0
  %913 = extractvalue %dx.types.ResRet.i32 %911, 1
  %914 = shl i32 %903, 5
  %915 = shl i32 %904, 5
  %916 = shl i32 %912, 5
  %917 = shl i32 %913, 5
  %918 = sub i32 %874, %914
  %919 = sub i32 %875, %915
  %920 = and i32 %888, 31
  %921 = shl i32 %916, %920
  %922 = shl i32 %917, %920
  %923 = add i32 %918, %921
  %924 = add i32 %919, %922
  %925 = lshr i32 %923, %920
  %926 = lshr i32 %924, %920
  %927 = shl i32 %925, 7
  %928 = shl i32 %926, 7
  %929 = or i32 %927, 127
  %930 = or i32 %928, 127
  %931 = sitofp i32 %903 to float
  %932 = sitofp i32 %904 to float
  %933 = sitofp i32 %912 to float
  %934 = sitofp i32 %913 to float
  %935 = shl i32 1, %920
  %936 = uitofp i32 %935 to float
  %937 = fdiv fast float 1.000000e+00, %936
  %938 = fmul fast float %937, %931
  %939 = fmul fast float %937, %932
  %940 = fsub fast float %933, %938
  %941 = fsub fast float %934, %939
  %942 = fmul fast float %940, 2.500000e-01
  %943 = fmul fast float %941, 2.500000e-01
  %944 = fmul fast float %937, %799
  %945 = fsub fast float %909, %944
  %946 = fmul fast float %937, %863
  %947 = fmul fast float %937, %867
  %948 = fadd fast float %942, %946
  %949 = fadd fast float %943, %947
  %950 = fmul fast float %948, 1.638400e+04
  %951 = fmul fast float %949, 1.638400e+04
  %952 = fptoui float %950 to i32
  %953 = fptoui float %951 to i32
  %954 = call i32 @dx.op.binary.i32(i32 39, i32 %952, i32 %927)  ; UMax(a,b)
  %955 = call i32 @dx.op.binary.i32(i32 39, i32 %953, i32 %928)  ; UMax(a,b)
  %956 = call i32 @dx.op.binary.i32(i32 40, i32 %954, i32 %929)  ; UMin(a,b)
  %957 = call i32 @dx.op.binary.i32(i32 40, i32 %955, i32 %930)  ; UMin(a,b)
  %958 = icmp ult i32 %895, 8192
  br i1 %958, label %964, label %959

; <label>:959                                     ; preds = %900
  %960 = mul i32 %895, 21845
  %961 = add i32 %960, -178946048
  %962 = add i32 %961, %925
  %963 = add i32 %962, %928
  br label %964

; <label>:964                                     ; preds = %959, %900
  %965 = phi i32 [ %963, %959 ], [ %895, %900 ]
  %966 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %885, i32 %965, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %967 = extractvalue %dx.types.ResRet.i32 %966, 0
  %968 = and i32 %967, 200278016
  %969 = icmp eq i32 %968, 134217728
  %970 = zext i1 %969 to i32
  br label %971

; <label>:971                                     ; preds = %964, %892
  %972 = phi i32 [ %956, %964 ], [ %898, %892 ]
  %973 = phi i32 [ %957, %964 ], [ %899, %892 ]
  %974 = phi i32 [ %970, %964 ], [ %894, %892 ]
  %975 = phi i32 [ %967, %964 ], [ %887, %892 ]
  %976 = phi float [ %937, %964 ], [ 1.000000e+00, %892 ]
  %977 = phi float [ %945, %964 ], [ 0.000000e+00, %892 ]
  %978 = icmp eq i32 %974, 0
  br i1 %978, label %994, label %979

; <label>:979                                     ; preds = %971
  %980 = shl i32 %975, 7
  %981 = and i32 %980, 130944
  %982 = lshr i32 %975, 3
  %983 = and i32 %982, 130944
  %984 = and i32 %972, 127
  %985 = and i32 %973, 127
  %986 = or i32 %981, %984
  %987 = or i32 %983, %985
  %988 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %989 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %988, i32 0, i32 %986, i32 %987, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %990 = extractvalue %dx.types.ResRet.i32 %989, 0
  %991 = bitcast i32 %990 to float
  %992 = fsub fast float %991, %977
  %993 = fdiv fast float %992, %976
  br label %994

; <label>:994                                     ; preds = %979, %971, %883
  %995 = phi float [ %993, %979 ], [ 0.000000e+00, %971 ], [ 0.000000e+00, %883 ]
  %996 = phi i1 [ true, %979 ], [ false, %971 ], [ false, %883 ]
  %997 = fcmp fast ogt float %995, %871
  %998 = and i1 %996, %997
  %999 = select i1 %998, float 0.000000e+00, float 1.000000e+00
  br label %1172

; <label>:1000                                    ; preds = %719
  %1001 = extractvalue %dx.types.ResRet.i32 %734, 3
  %1002 = extractvalue %dx.types.ResRet.i32 %734, 2
  %1003 = extractvalue %dx.types.ResRet.i32 %734, 1
  %1004 = extractvalue %dx.types.ResRet.i32 %734, 0
  %1005 = extractvalue %dx.types.ResRet.i32 %732, 3
  %1006 = extractvalue %dx.types.ResRet.i32 %732, 2
  %1007 = extractvalue %dx.types.ResRet.i32 %732, 1
  %1008 = extractvalue %dx.types.ResRet.i32 %732, 0
  %1009 = extractvalue %dx.types.ResRet.i32 %730, 3
  %1010 = extractvalue %dx.types.ResRet.i32 %730, 2
  %1011 = extractvalue %dx.types.ResRet.i32 %730, 1
  %1012 = extractvalue %dx.types.ResRet.i32 %730, 0
  %1013 = extractvalue %dx.types.ResRet.i32 %728, 3
  %1014 = extractvalue %dx.types.ResRet.i32 %728, 2
  %1015 = extractvalue %dx.types.ResRet.i32 %728, 1
  %1016 = extractvalue %dx.types.ResRet.i32 %728, 0
  %1017 = extractvalue %dx.types.ResRet.i32 %747, 2
  %1018 = bitcast i32 %1017 to float
  %1019 = extractvalue %dx.types.ResRet.i32 %747, 1
  %1020 = bitcast i32 %1019 to float
  %1021 = extractvalue %dx.types.ResRet.i32 %747, 0
  %1022 = bitcast i32 %1021 to float
  %1023 = fadd fast float %757, %1022
  %1024 = fadd fast float %758, %1020
  %1025 = fadd fast float %759, %1018
  %1026 = icmp eq i32 %745, 2
  br i1 %1026, label %1073, label %1027

; <label>:1027                                    ; preds = %1000
  %1028 = call float @dx.op.unary.f32(i32 6, float %1023)  ; FAbs(value)
  %1029 = call float @dx.op.unary.f32(i32 6, float %1024)  ; FAbs(value)
  %1030 = fcmp fast ult float %1028, %1029
  %1031 = call float @dx.op.unary.f32(i32 6, float %1025)  ; FAbs(value)
  %1032 = fcmp fast ult float %1028, %1031
  %1033 = or i1 %1030, %1032
  br i1 %1033, label %1037, label %1034

; <label>:1034                                    ; preds = %1027
  %1035 = fcmp ule float %1023, 0.000000e+00
  %1036 = zext i1 %1035 to i32
  br label %1045

; <label>:1037                                    ; preds = %1027
  %1038 = fcmp fast ogt float %1029, %1031
  br i1 %1038, label %1039, label %1042

; <label>:1039                                    ; preds = %1037
  %1040 = fcmp fast ogt float %1024, 0.000000e+00
  %1041 = select i1 %1040, i32 2, i32 3
  br label %1045

; <label>:1042                                    ; preds = %1037
  %1043 = fcmp fast ogt float %1025, 0.000000e+00
  %1044 = select i1 %1043, i32 4, i32 5
  br label %1045

; <label>:1045                                    ; preds = %1042, %1039, %1034
  %1046 = phi i32 [ %1036, %1034 ], [ %1041, %1039 ], [ %1044, %1042 ]
  %1047 = add i32 %1046, %72
  %1048 = mul i32 %1047, 336
  %1049 = add i32 %1048, 128
  %1050 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %1049, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1051 = extractvalue %dx.types.ResRet.i32 %1050, 0
  %1052 = extractvalue %dx.types.ResRet.i32 %1050, 1
  %1053 = extractvalue %dx.types.ResRet.i32 %1050, 2
  %1054 = extractvalue %dx.types.ResRet.i32 %1050, 3
  %1055 = add i32 %1048, 144
  %1056 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %1055, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1057 = extractvalue %dx.types.ResRet.i32 %1056, 0
  %1058 = extractvalue %dx.types.ResRet.i32 %1056, 1
  %1059 = extractvalue %dx.types.ResRet.i32 %1056, 2
  %1060 = extractvalue %dx.types.ResRet.i32 %1056, 3
  %1061 = add i32 %1048, 160
  %1062 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %1061, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1063 = extractvalue %dx.types.ResRet.i32 %1062, 0
  %1064 = extractvalue %dx.types.ResRet.i32 %1062, 1
  %1065 = extractvalue %dx.types.ResRet.i32 %1062, 2
  %1066 = extractvalue %dx.types.ResRet.i32 %1062, 3
  %1067 = add i32 %1048, 176
  %1068 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %726, i32 %1067, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1069 = extractvalue %dx.types.ResRet.i32 %1068, 0
  %1070 = extractvalue %dx.types.ResRet.i32 %1068, 1
  %1071 = extractvalue %dx.types.ResRet.i32 %1068, 2
  %1072 = extractvalue %dx.types.ResRet.i32 %1068, 3
  br label %1073

; <label>:1073                                    ; preds = %1045, %1000
  %1074 = phi i32 [ %1051, %1045 ], [ %1016, %1000 ]
  %1075 = phi i32 [ %1052, %1045 ], [ %1015, %1000 ]
  %1076 = phi i32 [ %1053, %1045 ], [ %1014, %1000 ]
  %1077 = phi i32 [ %1054, %1045 ], [ %1013, %1000 ]
  %1078 = phi i32 [ %1057, %1045 ], [ %1012, %1000 ]
  %1079 = phi i32 [ %1058, %1045 ], [ %1011, %1000 ]
  %1080 = phi i32 [ %1059, %1045 ], [ %1010, %1000 ]
  %1081 = phi i32 [ %1060, %1045 ], [ %1009, %1000 ]
  %1082 = phi i32 [ %1063, %1045 ], [ %1008, %1000 ]
  %1083 = phi i32 [ %1064, %1045 ], [ %1007, %1000 ]
  %1084 = phi i32 [ %1065, %1045 ], [ %1006, %1000 ]
  %1085 = phi i32 [ %1066, %1045 ], [ %1005, %1000 ]
  %1086 = phi i32 [ %1069, %1045 ], [ %1004, %1000 ]
  %1087 = phi i32 [ %1070, %1045 ], [ %1003, %1000 ]
  %1088 = phi i32 [ %1071, %1045 ], [ %1002, %1000 ]
  %1089 = phi i32 [ %1072, %1045 ], [ %1001, %1000 ]
  %1090 = phi i32 [ %1047, %1045 ], [ %72, %1000 ]
  %1091 = bitcast i32 %1089 to float
  %1092 = bitcast i32 %1088 to float
  %1093 = bitcast i32 %1087 to float
  %1094 = bitcast i32 %1086 to float
  %1095 = bitcast i32 %1085 to float
  %1096 = bitcast i32 %1084 to float
  %1097 = bitcast i32 %1083 to float
  %1098 = bitcast i32 %1082 to float
  %1099 = bitcast i32 %1081 to float
  %1100 = bitcast i32 %1080 to float
  %1101 = bitcast i32 %1079 to float
  %1102 = bitcast i32 %1078 to float
  %1103 = bitcast i32 %1077 to float
  %1104 = bitcast i32 %1076 to float
  %1105 = bitcast i32 %1075 to float
  %1106 = bitcast i32 %1074 to float
  %1107 = fmul fast float %1106, %1023
  %1108 = call float @dx.op.tertiary.f32(i32 46, float %1024, float %1102, float %1107)  ; FMad(a,b,c)
  %1109 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1098, float %1108)  ; FMad(a,b,c)
  %1110 = fadd fast float %1109, %1094
  %1111 = fmul fast float %1105, %1023
  %1112 = call float @dx.op.tertiary.f32(i32 46, float %1024, float %1101, float %1111)  ; FMad(a,b,c)
  %1113 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1097, float %1112)  ; FMad(a,b,c)
  %1114 = fadd fast float %1113, %1093
  %1115 = fmul fast float %1104, %1023
  %1116 = call float @dx.op.tertiary.f32(i32 46, float %1024, float %1100, float %1115)  ; FMad(a,b,c)
  %1117 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1096, float %1116)  ; FMad(a,b,c)
  %1118 = fadd fast float %1117, %1092
  %1119 = fmul fast float %1103, %1023
  %1120 = call float @dx.op.tertiary.f32(i32 46, float %1024, float %1099, float %1119)  ; FMad(a,b,c)
  %1121 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1095, float %1120)  ; FMad(a,b,c)
  %1122 = fadd fast float %1121, %1091
  %1123 = fdiv fast float %1110, %1122
  %1124 = fdiv fast float %1114, %1122
  %1125 = fdiv fast float %1118, %1122
  %1126 = icmp ult i32 %1090, 8192
  br i1 %1126, label %1137, label %1127

; <label>:1127                                    ; preds = %1073
  %1128 = fmul fast float %1124, 1.280000e+02
  %1129 = fptoui float %1128 to i32
  %1130 = fmul fast float %1123, 1.280000e+02
  %1131 = fptoui float %1130 to i32
  %1132 = mul i32 %1090, 21845
  %1133 = shl i32 %1129, 7
  %1134 = add i32 %1132, -178946048
  %1135 = add i32 %1134, %1131
  %1136 = add i32 %1135, %1133
  br label %1137

; <label>:1137                                    ; preds = %1127, %1073
  %1138 = phi i32 [ %1136, %1127 ], [ %1090, %1073 ]
  %1139 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1140 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1139, i32 %1138, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1141 = extractvalue %dx.types.ResRet.i32 %1140, 0
  %1142 = lshr i32 %1141, 20
  %1143 = and i32 %1141, 134217728
  %1144 = icmp eq i32 %1143, 0
  %1145 = and i32 %1142, 31
  %1146 = lshr i32 16384, %1145
  %1147 = uitofp i32 %1146 to float
  %1148 = select i1 %1126, float 1.280000e+02, float %1147
  br i1 %1144, label %1166, label %1149

; <label>:1149                                    ; preds = %1137
  %1150 = lshr i32 %1141, 3
  %1151 = and i32 %1150, 130944
  %1152 = fmul fast float %1148, %1124
  %1153 = fptoui float %1152 to i32
  %1154 = and i32 %1153, 127
  %1155 = or i32 %1154, %1151
  %1156 = shl i32 %1141, 7
  %1157 = and i32 %1156, 130944
  %1158 = fmul fast float %1148, %1123
  %1159 = fptoui float %1158 to i32
  %1160 = and i32 %1159, 127
  %1161 = or i32 %1160, %1157
  %1162 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1163 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1162, i32 0, i32 %1161, i32 %1155, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1164 = extractvalue %dx.types.ResRet.i32 %1163, 0
  %1165 = bitcast i32 %1164 to float
  br label %1166

; <label>:1166                                    ; preds = %1149, %1137
  %1167 = phi float [ %1165, %1149 ], [ 0.000000e+00, %1137 ]
  %1168 = phi i1 [ true, %1149 ], [ false, %1137 ]
  %1169 = fcmp fast ogt float %1167, %1125
  %1170 = and i1 %1168, %1169
  %1171 = select i1 %1170, float 0.000000e+00, float 1.000000e+00
  br label %1172

; <label>:1172                                    ; preds = %1166, %994, %760
  %1173 = phi float [ 1.000000e+00, %760 ], [ %999, %994 ], [ %1171, %1166 ]
  %1174 = fmul fast float %721, %1173
  br label %1175

; <label>:1175                                    ; preds = %1172, %596
  %1176 = phi float [ %1174, %1172 ], [ 1.000000e+00, %596 ]
  %1177 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1178 = extractvalue %dx.types.CBufRet.f32 %1177, 0
  %1179 = extractvalue %dx.types.CBufRet.f32 %1177, 1
  %1180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1181 = extractvalue %dx.types.CBufRet.f32 %1180, 0
  %1182 = extractvalue %dx.types.CBufRet.f32 %1180, 1
  %1183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1184 = extractvalue %dx.types.CBufRet.f32 %1183, 0
  %1185 = extractvalue %dx.types.CBufRet.f32 %1183, 1
  %1186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1187 = extractvalue %dx.types.CBufRet.f32 %1186, 0
  %1188 = extractvalue %dx.types.CBufRet.f32 %1186, 1
  %1189 = fmul fast float %1178, %557
  %1190 = call float @dx.op.tertiary.f32(i32 46, float %558, float %1181, float %1189)  ; FMad(a,b,c)
  %1191 = call float @dx.op.tertiary.f32(i32 46, float %559, float %1184, float %1190)  ; FMad(a,b,c)
  %1192 = fadd fast float %1191, %1187
  %1193 = fmul fast float %1179, %557
  %1194 = call float @dx.op.tertiary.f32(i32 46, float %558, float %1182, float %1193)  ; FMad(a,b,c)
  %1195 = call float @dx.op.tertiary.f32(i32 46, float %559, float %1185, float %1194)  ; FMad(a,b,c)
  %1196 = fadd fast float %1195, %1188
  %1197 = fmul fast float %1192, 5.000000e-01
  %1198 = fmul fast float %1196, 5.000000e-01
  %1199 = fadd fast float %1197, 5.000000e-01
  %1200 = fsub fast float 5.000000e-01, %1198
  %1201 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1202 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1203 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1201, %dx.types.Handle %1202, float %1199, float %1200, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1204 = extractvalue %dx.types.ResRet.f32 %1203, 0
  %1205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1206 = extractvalue %dx.types.CBufRet.f32 %1205, 2
  %1207 = fcmp fast ogt float %1206, 0.000000e+00
  br i1 %1207, label %1208, label %1217

; <label>:1208                                    ; preds = %1175
  %1209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1210 = extractvalue %dx.types.CBufRet.f32 %1209, 0
  %1211 = extractvalue %dx.types.CBufRet.f32 %1209, 1
  %1212 = extractvalue %dx.types.CBufRet.f32 %1209, 2
  %1213 = call float @dx.op.dot3.f32(i32 55, float %66, float %67, float %68, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1214 = fmul fast float %1210, %1213
  %1215 = fmul fast float %1211, %1213
  %1216 = fmul fast float %1212, %1213
  br label %1217

; <label>:1217                                    ; preds = %1208, %1175
  %1218 = phi float [ %1214, %1208 ], [ %66, %1175 ]
  %1219 = phi float [ %1215, %1208 ], [ %67, %1175 ]
  %1220 = phi float [ %1216, %1208 ], [ %68, %1175 ]
  %1221 = fsub fast float -0.000000e+00, %590
  %1222 = fsub fast float -0.000000e+00, %591
  %1223 = fsub fast float -0.000000e+00, %592
  %1224 = call float @dx.op.dot3.f32(i32 55, float %62, float %63, float %64, float %1221, float %1222, float %1223)  ; Dot3(ax,ay,az,bx,by,bz)
  %1225 = extractvalue %dx.types.CBufRet.f32 %474, 1
  %1226 = fmul fast float %1225, %1225
  %1227 = fsub fast float 1.000000e+00, %1226
  %1228 = fmul fast float %1224, 2.000000e+00
  %1229 = fadd fast float %1228, %1225
  %1230 = fmul fast float %1229, %1225
  %1231 = fadd fast float %1230, 1.000000e+00
  %1232 = call float @dx.op.unary.f32(i32 24, float %1231)  ; Sqrt(value)
  %1233 = fmul fast float %1232, 0x402921FB60000000
  %1234 = fmul fast float %1233, %1231
  %1235 = fdiv fast float %1227, %1234
  %1236 = fmul fast float %1176, %69
  %1237 = fmul fast float %1236, %1204
  %1238 = fmul fast float %1237, %1235
  %1239 = fmul fast float %1238, %1218
  %1240 = fmul fast float %1238, %1219
  %1241 = fmul fast float %1238, %1220
  %1242 = fadd fast float %1239, %422
  %1243 = fadd fast float %1240, %423
  %1244 = fadd fast float %1241, %424
  br label %1245

; <label>:1245                                    ; preds = %1217, %594
  %1246 = phi float [ %595, %594 ], [ %1225, %1217 ]
  %1247 = phi float [ %422, %594 ], [ %1242, %1217 ]
  %1248 = phi float [ %423, %594 ], [ %1243, %1217 ]
  %1249 = phi float [ %424, %594 ], [ %1244, %1217 ]
  %1250 = fmul fast float %1246, %591
  %1251 = fmul fast float %1246, %592
  %1252 = fmul fast float %1246, %590
  %1253 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1254 = extractvalue %dx.types.CBufRet.f32 %1253, 3
  %1255 = fcmp fast ogt float %1254, 0.000000e+00
  %1256 = extractvalue %dx.types.CBufRet.f32 %1253, 2
  %1257 = fcmp fast ogt float %1256, 0.000000e+00
  %1258 = or i1 %1255, %1257
  br i1 %1258, label %1259, label %1327

; <label>:1259                                    ; preds = %1245
  %1260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1261 = extractvalue %dx.types.CBufRet.f32 %1260, 0
  %1262 = extractvalue %dx.types.CBufRet.f32 %1260, 1
  %1263 = extractvalue %dx.types.CBufRet.f32 %1260, 2
  %1264 = fmul fast float %1261, %572
  %1265 = fmul fast float %1262, %574
  %1266 = fmul fast float %1263, %576
  %1267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1268 = extractvalue %dx.types.CBufRet.f32 %1267, 0
  %1269 = extractvalue %dx.types.CBufRet.f32 %1267, 1
  %1270 = extractvalue %dx.types.CBufRet.f32 %1267, 2
  %1271 = fadd fast float %1264, %1268
  %1272 = fadd fast float %1265, %1269
  %1273 = fadd fast float %1266, %1270
  %1274 = call float @dx.op.binary.f32(i32 35, float %1271, float 0.000000e+00)  ; FMax(a,b)
  %1275 = call float @dx.op.binary.f32(i32 35, float %1272, float 0.000000e+00)  ; FMax(a,b)
  %1276 = call float @dx.op.binary.f32(i32 35, float %1273, float 0.000000e+00)  ; FMax(a,b)
  %1277 = call float @dx.op.binary.f32(i32 36, float %1274, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1278 = call float @dx.op.binary.f32(i32 36, float %1275, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1279 = call float @dx.op.binary.f32(i32 36, float %1276, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1280 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1281 = extractvalue %dx.types.CBufRet.f32 %1280, 0
  %1282 = extractvalue %dx.types.CBufRet.f32 %1280, 1
  %1283 = extractvalue %dx.types.CBufRet.f32 %1280, 2
  %1284 = fmul fast float %1281, %1277
  %1285 = fmul fast float %1282, %1278
  %1286 = fmul fast float %1283, %1279
  %1287 = fptosi float %1284 to i32
  %1288 = fptosi float %1285 to i32
  %1289 = fptosi float %1286 to i32
  %1290 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1291 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1290, i32 0, i32 %1287, i32 %1288, i32 %1289, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1292 = extractvalue %dx.types.ResRet.i32 %1291, 0
  %1293 = extractvalue %dx.types.ResRet.i32 %1291, 1
  %1294 = extractvalue %dx.types.ResRet.i32 %1291, 2
  %1295 = extractvalue %dx.types.ResRet.i32 %1291, 3
  %1296 = uitofp i32 %1292 to float
  %1297 = uitofp i32 %1293 to float
  %1298 = uitofp i32 %1294 to float
  %1299 = uitofp i32 %1295 to float
  %1300 = extractvalue %dx.types.CBufRet.f32 %1280, 3
  %1301 = fadd fast float %1300, 1.000000e+00
  %1302 = fmul fast float %1301, %1296
  %1303 = fmul fast float %1301, %1297
  %1304 = fmul fast float %1301, %1298
  %1305 = fdiv fast float %1284, %1299
  %1306 = fdiv fast float %1285, %1299
  %1307 = fdiv fast float %1286, %1299
  %1308 = call float @dx.op.unary.f32(i32 22, float %1305)  ; Frc(value)
  %1309 = call float @dx.op.unary.f32(i32 22, float %1306)  ; Frc(value)
  %1310 = call float @dx.op.unary.f32(i32 22, float %1307)  ; Frc(value)
  %1311 = fmul fast float %1300, %1308
  %1312 = fmul fast float %1300, %1309
  %1313 = fmul fast float %1300, %1310
  %1314 = fadd fast float %1302, 5.000000e-01
  %1315 = fadd fast float %1314, %1311
  %1316 = fadd fast float %1303, 5.000000e-01
  %1317 = fadd fast float %1316, %1312
  %1318 = fadd fast float %1304, 5.000000e-01
  %1319 = fadd fast float %1318, %1313
  %1320 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1321 = extractvalue %dx.types.CBufRet.f32 %1320, 0
  %1322 = extractvalue %dx.types.CBufRet.f32 %1320, 1
  %1323 = extractvalue %dx.types.CBufRet.f32 %1320, 2
  %1324 = fmul fast float %1315, %1321
  %1325 = fmul fast float %1317, %1322
  %1326 = fmul fast float %1319, %1323
  br label %1327

; <label>:1327                                    ; preds = %1259, %1245
  %1328 = phi float [ %1324, %1259 ], [ 0.000000e+00, %1245 ]
  %1329 = phi float [ %1325, %1259 ], [ 0.000000e+00, %1245 ]
  %1330 = phi float [ %1326, %1259 ], [ 0.000000e+00, %1245 ]
  br i1 %1255, label %1331, label %1667

; <label>:1331                                    ; preds = %1327
  %1332 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1333 = extractvalue %dx.types.CBufRet.f32 %1332, 3
  %1334 = fcmp fast ogt float %1333, 0.000000e+00
  br i1 %1334, label %1335, label %1413

; <label>:1335                                    ; preds = %1331
  %1336 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1337 = extractvalue %dx.types.CBufRet.f32 %1336, 0
  %1338 = extractvalue %dx.types.CBufRet.f32 %1336, 1
  %1339 = extractvalue %dx.types.CBufRet.f32 %1336, 2
  %1340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1341 = extractvalue %dx.types.CBufRet.f32 %1340, 2
  %1342 = fcmp fast ogt float %1341, 0.000000e+00
  br i1 %1342, label %1343, label %1379, !dx.controlflow.hints !58

; <label>:1343                                    ; preds = %1335
  %1344 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1345 = extractvalue %dx.types.CBufRet.f32 %1344, 0
  %1346 = fmul fast float %1345, %589
  %1347 = extractvalue %dx.types.CBufRet.f32 %1344, 1
  %1348 = fadd fast float %1346, %1347
  %1349 = call float @dx.op.unary.f32(i32 7, float %1348)  ; Saturate(value)
  %1350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1351 = extractvalue %dx.types.CBufRet.f32 %1350, 1
  %1352 = extractvalue %dx.types.CBufRet.f32 %1350, 0
  %1353 = fsub fast float -0.000000e+00, %1352
  %1354 = call float @dx.op.dot2.f32(i32 54, float %590, float %591, float %1351, float %1353)  ; Dot2(ax,ay,bx,by)
  %1355 = call float @dx.op.dot2.f32(i32 54, float %590, float %591, float %1352, float %1351)  ; Dot2(ax,ay,bx,by)
  %1356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1357 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1358 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1356, %dx.types.Handle %1357, float %1354, float %1355, float %592, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1359 = extractvalue %dx.types.ResRet.f32 %1358, 0
  %1360 = extractvalue %dx.types.ResRet.f32 %1358, 1
  %1361 = extractvalue %dx.types.ResRet.f32 %1358, 2
  %1362 = extractvalue %dx.types.CBufRet.f32 %1344, 2
  %1363 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1356, %dx.types.Handle %1357, float %1354, float %1355, float %592, float undef, i32 undef, i32 undef, i32 undef, float %1362)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1364 = extractvalue %dx.types.ResRet.f32 %1363, 0
  %1365 = extractvalue %dx.types.ResRet.f32 %1363, 1
  %1366 = extractvalue %dx.types.ResRet.f32 %1363, 2
  %1367 = fsub fast float %1359, %1364
  %1368 = fsub fast float %1360, %1365
  %1369 = fsub fast float %1361, %1366
  %1370 = fmul fast float %1367, %1349
  %1371 = fmul fast float %1368, %1349
  %1372 = fmul fast float %1369, %1349
  %1373 = fadd fast float %1370, %1364
  %1374 = fadd fast float %1371, %1365
  %1375 = fadd fast float %1372, %1366
  %1376 = fmul fast float %1373, %1337
  %1377 = fmul fast float %1374, %1338
  %1378 = fmul fast float %1375, %1339
  br label %1379

; <label>:1379                                    ; preds = %1343, %1335
  %1380 = phi float [ %1376, %1343 ], [ %1337, %1335 ]
  %1381 = phi float [ %1377, %1343 ], [ %1338, %1335 ]
  %1382 = phi float [ %1378, %1343 ], [ %1339, %1335 ]
  %1383 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1384 = extractvalue %dx.types.CBufRet.f32 %1383, 0
  %1385 = extractvalue %dx.types.CBufRet.f32 %1383, 1
  %1386 = extractvalue %dx.types.CBufRet.f32 %1383, 2
  %1387 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1388 = extractvalue %dx.types.CBufRet.f32 %1387, 1
  %1389 = fmul fast float %1388, %1384
  %1390 = fmul fast float %1388, %1385
  %1391 = fmul fast float %1388, %1386
  %1392 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1393 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1394 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1392, %dx.types.Handle %1393, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1395 = extractvalue %dx.types.ResRet.f32 %1394, 0
  %1396 = extractvalue %dx.types.ResRet.f32 %1394, 1
  %1397 = extractvalue %dx.types.ResRet.f32 %1394, 2
  %1398 = fmul fast float %1389, %1395
  %1399 = fmul fast float %1390, %1396
  %1400 = fmul fast float %1391, %1397
  %1401 = fadd fast float %1398, %1380
  %1402 = fadd fast float %1399, %1381
  %1403 = fadd fast float %1400, %1382
  %1404 = fmul fast float %1401, 0x3FD20DD740000000
  %1405 = fmul fast float %1402, 0x3FD20DD740000000
  %1406 = fmul fast float %1403, 0x3FD20DD740000000
  %1407 = call float @dx.op.dot4.f32(i32 56, float %1404, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1408 = call float @dx.op.dot4.f32(i32 56, float %1405, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1409 = call float @dx.op.dot4.f32(i32 56, float %1406, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1410 = call float @dx.op.binary.f32(i32 35, float %1407, float 0.000000e+00)  ; FMax(a,b)
  %1411 = call float @dx.op.binary.f32(i32 35, float %1408, float 0.000000e+00)  ; FMax(a,b)
  %1412 = call float @dx.op.binary.f32(i32 35, float %1409, float 0.000000e+00)  ; FMax(a,b)
  br label %1445

; <label>:1413                                    ; preds = %1331
  %1414 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1415 = extractvalue %dx.types.CBufRet.f32 %1414, 0
  %1416 = extractvalue %dx.types.CBufRet.f32 %1414, 1
  %1417 = extractvalue %dx.types.CBufRet.f32 %1414, 2
  %1418 = extractvalue %dx.types.CBufRet.f32 %1414, 3
  %1419 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1420 = extractvalue %dx.types.CBufRet.f32 %1419, 0
  %1421 = extractvalue %dx.types.CBufRet.f32 %1419, 1
  %1422 = extractvalue %dx.types.CBufRet.f32 %1419, 2
  %1423 = extractvalue %dx.types.CBufRet.f32 %1419, 3
  %1424 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1425 = extractvalue %dx.types.CBufRet.f32 %1424, 0
  %1426 = extractvalue %dx.types.CBufRet.f32 %1424, 1
  %1427 = extractvalue %dx.types.CBufRet.f32 %1424, 2
  %1428 = extractvalue %dx.types.CBufRet.f32 %1424, 3
  %1429 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1430 = extractvalue %dx.types.CBufRet.f32 %1429, 0
  %1431 = extractvalue %dx.types.CBufRet.f32 %1429, 1
  %1432 = extractvalue %dx.types.CBufRet.f32 %1429, 2
  %1433 = call float @dx.op.dot4.f32(i32 56, float %1415, float %1416, float %1417, float %1418, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1434 = call float @dx.op.dot4.f32(i32 56, float %1420, float %1421, float %1422, float %1423, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1435 = call float @dx.op.dot4.f32(i32 56, float %1425, float %1426, float %1427, float %1428, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1436 = call float @dx.op.binary.f32(i32 35, float %1433, float 0.000000e+00)  ; FMax(a,b)
  %1437 = call float @dx.op.binary.f32(i32 35, float %1434, float 0.000000e+00)  ; FMax(a,b)
  %1438 = call float @dx.op.binary.f32(i32 35, float %1435, float 0.000000e+00)  ; FMax(a,b)
  %1439 = fmul fast float %1430, 0x3FD45F3060000000
  %1440 = fmul fast float %1439, %1436
  %1441 = fmul fast float %1431, 0x3FD45F3060000000
  %1442 = fmul fast float %1441, %1437
  %1443 = fmul fast float %1432, 0x3FD45F3060000000
  %1444 = fmul fast float %1443, %1438
  br label %1445

; <label>:1445                                    ; preds = %1413, %1379
  %1446 = phi float [ %1410, %1379 ], [ %1440, %1413 ]
  %1447 = phi float [ %1411, %1379 ], [ %1442, %1413 ]
  %1448 = phi float [ %1412, %1379 ], [ %1444, %1413 ]
  %1449 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1450 = extractvalue %dx.types.CBufRet.i32 %1449, 2
  %1451 = icmp eq i32 %1450, 0
  br i1 %1451, label %1494, label %1452

; <label>:1452                                    ; preds = %1445
  br label %1453

; <label>:1453                                    ; preds = %1487, %1452
  %1454 = phi i32 [ %1488, %1487 ], [ 0, %1452 ]
  %1455 = add i32 %1454, 41
  %1456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1455)  ; CBufferLoadLegacy(handle,regIndex)
  %1457 = extractvalue %dx.types.CBufRet.f32 %1456, 3
  %1458 = extractvalue %dx.types.CBufRet.f32 %1456, 0
  %1459 = extractvalue %dx.types.CBufRet.f32 %1456, 1
  %1460 = extractvalue %dx.types.CBufRet.f32 %1456, 2
  %1461 = fadd fast float %1457, %557
  %1462 = fsub fast float %1461, %1458
  %1463 = fadd fast float %1457, %558
  %1464 = fsub fast float %1463, %1459
  %1465 = fadd fast float %1457, %559
  %1466 = fsub fast float %1465, %1460
  %1467 = call float @dx.op.binary.f32(i32 35, float %1462, float 0.000000e+00)  ; FMax(a,b)
  %1468 = call float @dx.op.binary.f32(i32 35, float %1464, float 0.000000e+00)  ; FMax(a,b)
  %1469 = call float @dx.op.binary.f32(i32 35, float %1466, float 0.000000e+00)  ; FMax(a,b)
  %1470 = fsub fast float %1457, %557
  %1471 = fadd fast float %1470, %1458
  %1472 = fsub fast float %1457, %558
  %1473 = fadd fast float %1472, %1459
  %1474 = fsub fast float %1457, %559
  %1475 = fadd fast float %1474, %1460
  %1476 = call float @dx.op.binary.f32(i32 35, float %1471, float 0.000000e+00)  ; FMax(a,b)
  %1477 = call float @dx.op.binary.f32(i32 35, float %1473, float 0.000000e+00)  ; FMax(a,b)
  %1478 = call float @dx.op.binary.f32(i32 35, float %1475, float 0.000000e+00)  ; FMax(a,b)
  %1479 = call float @dx.op.binary.f32(i32 36, float %1467, float %1476)  ; FMin(a,b)
  %1480 = call float @dx.op.binary.f32(i32 36, float %1468, float %1477)  ; FMin(a,b)
  %1481 = call float @dx.op.binary.f32(i32 36, float %1469, float %1478)  ; FMin(a,b)
  %1482 = call float @dx.op.binary.f32(i32 36, float %1480, float %1481)  ; FMin(a,b)
  %1483 = call float @dx.op.binary.f32(i32 36, float %1479, float %1482)  ; FMin(a,b)
  %1484 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1485 = extractvalue %dx.types.CBufRet.f32 %1484, 0
  %1486 = fcmp fast ogt float %1483, %1485
  br i1 %1486, label %1492, label %1487

; <label>:1487                                    ; preds = %1453
  %1488 = add i32 %1454, 1
  %1489 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1490 = extractvalue %dx.types.CBufRet.i32 %1489, 2
  %1491 = icmp ult i32 %1488, %1490
  br i1 %1491, label %1453, label %1492

; <label>:1492                                    ; preds = %1487, %1453
  %1493 = phi i32 [ -1, %1487 ], [ %1454, %1453 ]
  br label %1494

; <label>:1494                                    ; preds = %1492, %1445
  %1495 = phi i32 [ -1, %1445 ], [ %1493, %1492 ]
  %1496 = icmp sgt i32 %1495, -1
  br i1 %1496, label %1497, label %1635

; <label>:1497                                    ; preds = %1494
  %1498 = add i32 %1495, 41
  %1499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1498)  ; CBufferLoadLegacy(handle,regIndex)
  %1500 = extractvalue %dx.types.CBufRet.f32 %1499, 3
  %1501 = fmul fast float %1500, 0x3F947AE140000000
  %1502 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1503 = extractvalue %dx.types.CBufRet.f32 %1502, 0
  %1504 = fdiv fast float 1.000000e+00, %1503
  br label %1505

; <label>:1505                                    ; preds = %1617, %1497
  %1506 = phi float [ 1.000000e+00, %1497 ], [ %1630, %1617 ]
  %1507 = phi float [ 2.000000e+00, %1497 ], [ %1632, %1617 ]
  %1508 = phi i32 [ 0, %1497 ], [ %1633, %1617 ]
  %1509 = icmp ult i32 %1508, 10
  br i1 %1509, label %1510, label %1514

; <label>:1510                                    ; preds = %1505
  %1511 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1512 = extractvalue %dx.types.CBufRet.f32 %1511, 0
  %1513 = fcmp fast olt float %1507, %1512
  br label %1514

; <label>:1514                                    ; preds = %1510, %1505
  %1515 = phi i1 [ false, %1505 ], [ %1513, %1510 ]
  br i1 %1515, label %1516, label %1634

; <label>:1516                                    ; preds = %1514
  %1517 = fadd fast float %1507, %559
  %1518 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1519 = extractvalue %dx.types.CBufRet.f32 %1518, 0
  %1520 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1521 = extractvalue %dx.types.CBufRet.i32 %1520, 2
  %1522 = icmp ult i32 %1495, %1521
  br i1 %1522, label %1523, label %1617

; <label>:1523                                    ; preds = %1516
  br label %1524

; <label>:1524                                    ; preds = %1611, %1523
  %1525 = phi i32 [ %1612, %1611 ], [ %1495, %1523 ]
  %1526 = add i32 %1525, 47
  %1527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1526)  ; CBufferLoadLegacy(handle,regIndex)
  %1528 = extractvalue %dx.types.CBufRet.f32 %1527, 0
  %1529 = extractvalue %dx.types.CBufRet.f32 %1527, 1
  %1530 = extractvalue %dx.types.CBufRet.f32 %1527, 2
  %1531 = extractvalue %dx.types.CBufRet.f32 %1527, 3
  %1532 = fmul fast float %1531, %557
  %1533 = fmul fast float %1531, %558
  %1534 = fmul fast float %1531, %1517
  %1535 = fadd fast float %1532, %1528
  %1536 = fadd fast float %1533, %1529
  %1537 = fadd fast float %1534, %1530
  %1538 = call float @dx.op.unary.f32(i32 22, float %1535)  ; Frc(value)
  %1539 = call float @dx.op.unary.f32(i32 22, float %1536)  ; Frc(value)
  %1540 = call float @dx.op.unary.f32(i32 22, float %1537)  ; Frc(value)
  %1541 = call float @dx.op.unary.f32(i32 22, float %1538)  ; Frc(value)
  %1542 = call float @dx.op.unary.f32(i32 22, float %1539)  ; Frc(value)
  %1543 = call float @dx.op.unary.f32(i32 22, float %1540)  ; Frc(value)
  %1544 = call float @dx.op.unary.f32(i32 7, float %1541)  ; Saturate(value)
  %1545 = call float @dx.op.unary.f32(i32 7, float %1542)  ; Saturate(value)
  %1546 = call float @dx.op.unary.f32(i32 7, float %1543)  ; Saturate(value)
  %1547 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1548 = extractvalue %dx.types.CBufRet.i32 %1547, 2
  %1549 = uitofp i32 %1548 to float
  %1550 = fmul fast float %1549, %1544
  %1551 = fmul fast float %1549, %1545
  %1552 = fmul fast float %1549, %1546
  %1553 = mul i32 %1548, %1525
  %1554 = sitofp i32 %1553 to float
  %1555 = fadd fast float %1554, %1552
  %1556 = fptosi float %1550 to i32
  %1557 = fptosi float %1551 to i32
  %1558 = fptosi float %1555 to i32
  %1559 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1560 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1559, i32 0, i32 %1556, i32 %1557, i32 %1558, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1561 = extractvalue %dx.types.ResRet.i32 %1560, 0
  %1562 = icmp eq i32 %1561, -1
  br i1 %1562, label %1611, label %1563

; <label>:1563                                    ; preds = %1524
  %1564 = fmul fast float %1549, %1541
  %1565 = fmul fast float %1549, %1542
  %1566 = fmul fast float %1549, %1543
  %1567 = call float @dx.op.unary.f32(i32 22, float %1564)  ; Frc(value)
  %1568 = call float @dx.op.unary.f32(i32 22, float %1565)  ; Frc(value)
  %1569 = call float @dx.op.unary.f32(i32 22, float %1566)  ; Frc(value)
  %1570 = shl i32 %1561, 3
  %1571 = and i32 %1570, 1016
  %1572 = lshr i32 %1561, 4
  %1573 = and i32 %1572, 1016
  %1574 = lshr i32 %1561, 11
  %1575 = and i32 %1574, 8184
  %1576 = uitofp i32 %1571 to float
  %1577 = uitofp i32 %1573 to float
  %1578 = uitofp i32 %1575 to float
  %1579 = fmul fast float %1567, 7.000000e+00
  %1580 = fmul fast float %1568, 7.000000e+00
  %1581 = fmul fast float %1569, 7.000000e+00
  %1582 = fadd fast float %1576, 5.000000e-01
  %1583 = fadd fast float %1582, %1579
  %1584 = fadd fast float %1577, 5.000000e-01
  %1585 = fadd fast float %1584, %1580
  %1586 = fadd fast float %1578, 5.000000e-01
  %1587 = fadd fast float %1586, %1581
  %1588 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %1589 = extractvalue %dx.types.CBufRet.f32 %1588, 0
  %1590 = extractvalue %dx.types.CBufRet.f32 %1588, 1
  %1591 = extractvalue %dx.types.CBufRet.f32 %1588, 2
  %1592 = fmul fast float %1589, %1583
  %1593 = fmul fast float %1585, %1590
  %1594 = fmul fast float %1587, %1591
  %1595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1596 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1597 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1595, %dx.types.Handle %1596, float %1592, float %1593, float %1594, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1598 = extractvalue %dx.types.ResRet.f32 %1597, 0
  %1599 = fcmp fast olt float %1598, 1.000000e+00
  br i1 %1599, label %1600, label %1611

; <label>:1600                                    ; preds = %1563
  %1601 = add i32 %1525, 41
  %1602 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 %1601)  ; CBufferLoadLegacy(handle,regIndex)
  %1603 = extractvalue %dx.types.CBufRet.f32 %1602, 3
  %1604 = fmul fast float %1603, 8.000000e+00
  %1605 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1606 = extractvalue %dx.types.CBufRet.f32 %1605, 0
  %1607 = fmul fast float %1604, %1606
  %1608 = fmul fast float %1598, 2.000000e+00
  %1609 = fadd fast float %1608, -1.000000e+00
  %1610 = fmul fast float %1607, %1609
  br label %1617

; <label>:1611                                    ; preds = %1563, %1524
  %1612 = add i32 %1525, 1
  %1613 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1614 = extractvalue %dx.types.CBufRet.i32 %1613, 2
  %1615 = icmp ult i32 %1612, %1614
  br i1 %1615, label %1524, label %1616

; <label>:1616                                    ; preds = %1611
  br label %1617

; <label>:1617                                    ; preds = %1616, %1600, %1516
  %1618 = phi float [ %1610, %1600 ], [ %1519, %1516 ], [ %1519, %1616 ]
  %1619 = bitcast float %1507 to i32
  %1620 = sub nsw i32 2129859010, %1619
  %1621 = bitcast i32 %1620 to float
  %1622 = fmul fast float %1618, %1621
  %1623 = call float @dx.op.unary.f32(i32 7, float %1622)  ; Saturate(value)
  %1624 = fadd fast float %1618, %1507
  %1625 = fmul fast float %1624, %1504
  %1626 = fmul fast float %1625, %1625
  %1627 = fmul fast float %1626, 0x3FE3333340000000
  %1628 = call float @dx.op.unary.f32(i32 7, float %1627)  ; Saturate(value)
  %1629 = call float @dx.op.binary.f32(i32 35, float %1623, float %1628)  ; FMax(a,b)
  %1630 = call float @dx.op.binary.f32(i32 36, float %1506, float %1629)  ; FMin(a,b)
  %1631 = call float @dx.op.binary.f32(i32 35, float %1618, float %1501)  ; FMax(a,b)
  %1632 = fadd fast float %1631, %1507
  %1633 = add i32 %1508, 1
  br label %1505, !llvm.loop !59

; <label>:1634                                    ; preds = %1514
  br label %1635

; <label>:1635                                    ; preds = %1634, %1494
  %1636 = phi float [ 1.000000e+00, %1494 ], [ %1506, %1634 ]
  %1637 = extractvalue %dx.types.CBufRet.f32 %474, 0
  %1638 = fcmp fast ogt float %1637, 0.000000e+00
  br i1 %1638, label %1639, label %1658

; <label>:1639                                    ; preds = %1635
  %1640 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1641 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1642 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1640, %dx.types.Handle %1641, float %1328, float %1329, float %1330, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1643 = extractvalue %dx.types.ResRet.f32 %1642, 0
  %1644 = extractvalue %dx.types.ResRet.f32 %1642, 1
  %1645 = extractvalue %dx.types.ResRet.f32 %1642, 2
  %1646 = fmul fast float %1643, 2.000000e+00
  %1647 = fmul fast float %1644, 2.000000e+00
  %1648 = fmul fast float %1645, 2.000000e+00
  %1649 = fadd fast float %1646, -1.000000e+00
  %1650 = fadd fast float %1647, -1.000000e+00
  %1651 = fadd fast float %1648, -1.000000e+00
  %1652 = fmul fast float %1649, %1649
  %1653 = fmul fast float %1650, %1650
  %1654 = fadd fast float %1652, %1653
  %1655 = fmul fast float %1651, %1651
  %1656 = fadd fast float %1654, %1655
  %1657 = call float @dx.op.unary.f32(i32 24, float %1656)  ; Sqrt(value)
  br label %1658

; <label>:1658                                    ; preds = %1639, %1635
  %1659 = phi float [ %1657, %1639 ], [ %1636, %1635 ]
  %1660 = fmul fast float %1254, %1659
  %1661 = fmul fast float %1660, %1446
  %1662 = fmul fast float %1660, %1447
  %1663 = fmul fast float %1660, %1448
  %1664 = fadd fast float %1661, %1247
  %1665 = fadd fast float %1662, %1248
  %1666 = fadd fast float %1663, %1249
  br label %1667

; <label>:1667                                    ; preds = %1658, %1327
  %1668 = phi float [ %1664, %1658 ], [ %1247, %1327 ]
  %1669 = phi float [ %1665, %1658 ], [ %1248, %1327 ]
  %1670 = phi float [ %1666, %1658 ], [ %1249, %1327 ]
  %1671 = extractvalue %dx.types.CBufRet.f32 %1253, 2
  %1672 = fcmp fast ogt float %1671, 0.000000e+00
  br i1 %1672, label %1673, label %1738

; <label>:1673                                    ; preds = %1667
  %1674 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1675 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1676 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1674, %dx.types.Handle %1675, float %1328, float %1329, float %1330, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1677 = extractvalue %dx.types.ResRet.f32 %1676, 0
  %1678 = extractvalue %dx.types.ResRet.f32 %1676, 1
  %1679 = extractvalue %dx.types.ResRet.f32 %1676, 2
  %1680 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1681 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1680, %dx.types.Handle %1675, float %1328, float %1329, float %1330, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1682 = extractvalue %dx.types.ResRet.f32 %1681, 0
  %1683 = extractvalue %dx.types.ResRet.f32 %1681, 1
  %1684 = extractvalue %dx.types.ResRet.f32 %1681, 2
  %1685 = fmul fast float %1682, 2.000000e+00
  %1686 = fmul fast float %1683, 2.000000e+00
  %1687 = fmul fast float %1684, 2.000000e+00
  %1688 = fadd fast float %1685, -1.000000e+00
  %1689 = fadd fast float %1686, -1.000000e+00
  %1690 = fadd fast float %1687, -1.000000e+00
  %1691 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1692 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1691, %dx.types.Handle %1675, float %1328, float %1329, float %1330, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1693 = extractvalue %dx.types.ResRet.f32 %1692, 0
  %1694 = extractvalue %dx.types.ResRet.f32 %1692, 1
  %1695 = extractvalue %dx.types.ResRet.f32 %1692, 2
  %1696 = fmul fast float %1693, 2.000000e+00
  %1697 = fmul fast float %1694, 2.000000e+00
  %1698 = fmul fast float %1695, 2.000000e+00
  %1699 = fadd fast float %1696, -1.000000e+00
  %1700 = fadd fast float %1697, -1.000000e+00
  %1701 = fadd fast float %1698, -1.000000e+00
  %1702 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1703 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1702, %dx.types.Handle %1675, float %1328, float %1329, float %1330, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1704 = extractvalue %dx.types.ResRet.f32 %1703, 0
  %1705 = extractvalue %dx.types.ResRet.f32 %1703, 1
  %1706 = extractvalue %dx.types.ResRet.f32 %1703, 2
  %1707 = fmul fast float %1704, 2.000000e+00
  %1708 = fmul fast float %1705, 2.000000e+00
  %1709 = fmul fast float %1706, 2.000000e+00
  %1710 = fadd fast float %1707, -1.000000e+00
  %1711 = fadd fast float %1708, -1.000000e+00
  %1712 = fadd fast float %1709, -1.000000e+00
  %1713 = fmul fast float %1677, 0x3FFBB67B80000000
  %1714 = fmul fast float %1713, %1688
  %1715 = fmul fast float %1713, %1689
  %1716 = fmul fast float %1713, %1690
  %1717 = fmul fast float %1678, 0x3FFBB67B80000000
  %1718 = fmul fast float %1717, %1699
  %1719 = fmul fast float %1717, %1700
  %1720 = fmul fast float %1717, %1701
  %1721 = fmul fast float %1679, 0x3FFBB67B80000000
  %1722 = fmul fast float %1721, %1710
  %1723 = fmul fast float %1721, %1711
  %1724 = fmul fast float %1721, %1712
  %1725 = fmul fast float %1671, 0x3FD45F3060000000
  %1726 = call float @dx.op.dot4.f32(i32 56, float %1677, float %1714, float %1715, float %1716, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1727 = call float @dx.op.dot4.f32(i32 56, float %1678, float %1718, float %1719, float %1720, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1728 = call float @dx.op.dot4.f32(i32 56, float %1679, float %1722, float %1723, float %1724, float 1.000000e+00, float %1250, float %1251, float %1252)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1729 = call float @dx.op.binary.f32(i32 35, float %1726, float 0.000000e+00)  ; FMax(a,b)
  %1730 = call float @dx.op.binary.f32(i32 35, float %1727, float 0.000000e+00)  ; FMax(a,b)
  %1731 = call float @dx.op.binary.f32(i32 35, float %1728, float 0.000000e+00)  ; FMax(a,b)
  %1732 = fmul fast float %1729, %1725
  %1733 = fmul fast float %1730, %1725
  %1734 = fmul fast float %1731, %1725
  %1735 = fadd fast float %1732, %1668
  %1736 = fadd fast float %1733, %1669
  %1737 = fadd fast float %1734, %1670
  br label %1738

; <label>:1738                                    ; preds = %1673, %1667
  %1739 = phi float [ %1735, %1673 ], [ %1668, %1667 ]
  %1740 = phi float [ %1736, %1673 ], [ %1669, %1667 ]
  %1741 = phi float [ %1737, %1673 ], [ %1670, %1667 ]
  %1742 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1743 = extractvalue %dx.types.CBufRet.i32 %1742, 0
  %1744 = extractvalue %dx.types.CBufRet.i32 %1742, 1
  %1745 = mul i32 %1743, %45
  %1746 = mul i32 %1744, %46
  %1747 = fmul fast float %502, %58
  %1748 = fadd fast float %1747, %59
  %1749 = call float @dx.op.unary.f32(i32 23, float %1748)  ; Log(value)
  %1750 = fmul fast float %1749, %60
  %1751 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1750)  ; FMax(a,b)
  %1752 = fptoui float %1751 to i32
  %1753 = add nsw i32 %54, -1
  %1754 = call i32 @dx.op.binary.i32(i32 40, i32 %1752, i32 %1753)  ; UMin(a,b)
  %1755 = and i32 %56, 31
  %1756 = lshr i32 %1745, %1755
  %1757 = lshr i32 %1746, %1755
  %1758 = mul i32 %1754, %53
  %1759 = add i32 %1758, %1757
  %1760 = mul i32 %1759, %52
  %1761 = add i32 %1760, %1756
  %1762 = shl i32 %1761, 1
  %1763 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1764 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1763, i32 %1762, i32 undef)  ; BufferLoad(srv,index,wot)
  %1765 = extractvalue %dx.types.ResRet.i32 %1764, 0
  %1766 = call i32 @dx.op.binary.i32(i32 40, i32 %1765, i32 %49)  ; UMin(a,b)
  %1767 = or i32 %1762, 1
  %1768 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1763, i32 %1767, i32 undef)  ; BufferLoad(srv,index,wot)
  %1769 = extractvalue %dx.types.ResRet.i32 %1768, 0
  %1770 = add i32 %45, 1
  %1771 = add i32 %46, 1
  %1772 = add i32 %47, 1
  %1773 = uitofp i32 %1770 to float
  %1774 = uitofp i32 %1771 to float
  %1775 = fadd fast float %479, %1773
  %1776 = fadd fast float %480, %1774
  %1777 = fdiv fast float %1775, %485
  %1778 = fdiv fast float %1776, %486
  %1779 = fmul fast float %1777, 2.000000e+00
  %1780 = fmul fast float %1778, 2.000000e+00
  %1781 = fadd fast float %1779, -1.000000e+00
  %1782 = fadd fast float %1780, -1.000000e+00
  %1783 = fsub fast float -0.000000e+00, %1782
  %1784 = uitofp i32 %1772 to float
  %1785 = fadd fast float %481, %1784
  %1786 = fdiv fast float %1785, %496
  %1787 = call float @dx.op.unary.f32(i32 21, float %1786)  ; Exp(value)
  %1788 = fsub fast float %1787, %499
  %1789 = fdiv fast float %1788, %501
  br i1 %505, label %1796, label %1790, !dx.controlflow.hints !55

; <label>:1790                                    ; preds = %1738
  %1791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1792 = extractvalue %dx.types.CBufRet.f32 %1791, 2
  %1793 = fmul fast float %1792, %1789
  %1794 = extractvalue %dx.types.CBufRet.f32 %503, 2
  %1795 = fadd fast float %1793, %1794
  br label %1803

; <label>:1796                                    ; preds = %1738
  %1797 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1798 = extractvalue %dx.types.CBufRet.f32 %1797, 3
  %1799 = fadd fast float %1798, %1789
  %1800 = extractvalue %dx.types.CBufRet.f32 %1797, 2
  %1801 = fmul fast float %1799, %1800
  %1802 = fdiv fast float 1.000000e+00, %1801
  br label %1803

; <label>:1803                                    ; preds = %1796, %1790
  %1804 = phi float [ %1795, %1790 ], [ %1802, %1796 ]
  %1805 = fmul fast float %522, %1781
  %1806 = call float @dx.op.tertiary.f32(i32 46, float %1783, float %527, float %1805)  ; FMad(a,b,c)
  %1807 = call float @dx.op.tertiary.f32(i32 46, float %1804, float %532, float %1806)  ; FMad(a,b,c)
  %1808 = fadd fast float %1807, %537
  %1809 = fmul fast float %523, %1781
  %1810 = call float @dx.op.tertiary.f32(i32 46, float %1783, float %528, float %1809)  ; FMad(a,b,c)
  %1811 = call float @dx.op.tertiary.f32(i32 46, float %1804, float %533, float %1810)  ; FMad(a,b,c)
  %1812 = fadd fast float %1811, %538
  %1813 = fmul fast float %524, %1781
  %1814 = call float @dx.op.tertiary.f32(i32 46, float %1783, float %529, float %1813)  ; FMad(a,b,c)
  %1815 = call float @dx.op.tertiary.f32(i32 46, float %1804, float %534, float %1814)  ; FMad(a,b,c)
  %1816 = fadd fast float %1815, %539
  %1817 = fmul fast float %525, %1781
  %1818 = call float @dx.op.tertiary.f32(i32 46, float %1783, float %530, float %1817)  ; FMad(a,b,c)
  %1819 = call float @dx.op.tertiary.f32(i32 46, float %1804, float %535, float %1818)  ; FMad(a,b,c)
  %1820 = fadd fast float %1819, %540
  %1821 = fdiv fast float %1808, %1820
  %1822 = fdiv fast float %1812, %1820
  %1823 = fdiv fast float %1816, %1820
  %1824 = fsub fast float %557, %1821
  %1825 = fsub fast float %558, %1822
  %1826 = fsub fast float %559, %1823
  %1827 = fmul fast float %1824, %1824
  %1828 = fmul fast float %1825, %1825
  %1829 = fadd fast float %1828, %1827
  %1830 = fmul fast float %1826, %1826
  %1831 = fadd fast float %1829, %1830
  %1832 = call float @dx.op.unary.f32(i32 24, float %1831)  ; Sqrt(value)
  %1833 = extractvalue %dx.types.CBufRet.f32 %474, 2
  %1834 = fmul fast float %1833, %1832
  %1835 = call float @dx.op.binary.f32(i32 35, float %1834, float 1.000000e+00)  ; FMax(a,b)
  %1836 = fmul fast float %1835, %1835
  %1837 = icmp eq i32 %1766, 0
  br i1 %1837, label %2247, label %1838

; <label>:1838                                    ; preds = %1803
  br label %1839

; <label>:1839                                    ; preds = %2240, %1838
  %1840 = phi float [ %2241, %2240 ], [ %1739, %1838 ]
  %1841 = phi float [ %2242, %2240 ], [ %1740, %1838 ]
  %1842 = phi float [ %2243, %2240 ], [ %1741, %1838 ]
  %1843 = phi i32 [ %2244, %2240 ], [ 0, %1838 ]
  %1844 = add i32 %1843, %1769
  %1845 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1846 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1845, i32 %1844, i32 undef)  ; BufferLoad(srv,index,wot)
  %1847 = extractvalue %dx.types.ResRet.i32 %1846, 0
  %1848 = mul i32 %1847, 6
  %1849 = add i32 %1848, 4
  %1850 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1851 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1849, i32 undef)  ; BufferLoad(srv,index,wot)
  %1852 = extractvalue %dx.types.ResRet.f32 %1851, 0
  %1853 = extractvalue %dx.types.ResRet.f32 %1851, 1
  %1854 = extractvalue %dx.types.ResRet.f32 %1851, 2
  %1855 = add i32 %1848, 3
  %1856 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1855, i32 undef)  ; BufferLoad(srv,index,wot)
  %1857 = extractvalue %dx.types.ResRet.f32 %1856, 3
  %1858 = add i32 %1848, 2
  %1859 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1858, i32 undef)  ; BufferLoad(srv,index,wot)
  %1860 = extractvalue %dx.types.ResRet.f32 %1859, 0
  %1861 = extractvalue %dx.types.ResRet.f32 %1859, 1
  %1862 = extractvalue %dx.types.ResRet.f32 %1859, 2
  %1863 = or i32 %1848, 1
  %1864 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1863, i32 undef)  ; BufferLoad(srv,index,wot)
  %1865 = extractvalue %dx.types.ResRet.f32 %1864, 0
  %1866 = extractvalue %dx.types.ResRet.f32 %1864, 1
  %1867 = extractvalue %dx.types.ResRet.f32 %1864, 2
  %1868 = extractvalue %dx.types.ResRet.f32 %1864, 3
  %1869 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1848, i32 undef)  ; BufferLoad(srv,index,wot)
  %1870 = extractvalue %dx.types.ResRet.f32 %1869, 3
  %1871 = bitcast float %1857 to i32
  %1872 = lshr i32 %1871, 16
  %1873 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1872)  ; LegacyF16ToF32(value)
  %1874 = fcmp fast ogt float %1873, 0.000000e+00
  br i1 %1874, label %1875, label %2240

; <label>:1875                                    ; preds = %1839
  %1876 = extractvalue %dx.types.ResRet.f32 %1869, 2
  %1877 = extractvalue %dx.types.ResRet.f32 %1869, 1
  %1878 = extractvalue %dx.types.ResRet.f32 %1869, 0
  %1879 = extractvalue %dx.types.ResRet.f32 %1859, 3
  %1880 = extractvalue %dx.types.ResRet.f32 %1856, 2
  %1881 = extractvalue %dx.types.ResRet.f32 %1856, 0
  %1882 = add i32 %1848, 5
  %1883 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1850, i32 %1882, i32 undef)  ; BufferLoad(srv,index,wot)
  %1884 = extractvalue %dx.types.ResRet.f32 %1883, 3
  %1885 = bitcast float %1879 to i32
  %1886 = lshr i32 %1885, 16
  %1887 = and i32 %1886, 3
  %1888 = bitcast float %1881 to i32
  %1889 = and i32 %1888, 65535
  %1890 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1889)  ; LegacyF16ToF32(value)
  %1891 = lshr i32 %1888, 16
  %1892 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1891)  ; LegacyF16ToF32(value)
  %1893 = bitcast float %1880 to i32
  %1894 = and i32 %1893, 65535
  %1895 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1894)  ; LegacyF16ToF32(value)
  %1896 = fsub fast float -0.000000e+00, %1895
  %1897 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1871)  ; LegacyF16ToF32(value)
  %1898 = fsub fast float -0.000000e+00, %1897
  %1899 = fcmp fast oeq float %1868, 0.000000e+00
  %1900 = icmp eq i32 %1887, 2
  %1901 = icmp eq i32 %1887, 3
  %1902 = bitcast float %1884 to i32
  %1903 = and i32 %1902, 65535
  %1904 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1903)  ; LegacyF16ToF32(value)
  %1905 = lshr i32 %1902, 16
  %1906 = and i32 %1905, 1023
  %1907 = uitofp i32 %1906 to float
  %1908 = fmul fast float %1907, 9.765625e-04
  %1909 = fsub fast float %1878, %557
  %1910 = fsub fast float %1877, %558
  %1911 = fsub fast float %1876, %559
  %1912 = call float @dx.op.dot3.f32(i32 55, float %1909, float %1910, float %1911, float %1909, float %1910, float %1911)  ; Dot3(ax,ay,az,bx,by,bz)
  %1913 = call float @dx.op.unary.f32(i32 25, float %1912)  ; Rsqrt(value)
  %1914 = fmul fast float %1913, %1909
  %1915 = fmul fast float %1913, %1910
  %1916 = fmul fast float %1913, %1911
  br i1 %1899, label %1917, label %1924

; <label>:1917                                    ; preds = %1875
  %1918 = fmul fast float %1870, %1870
  %1919 = fmul fast float %1918, %1912
  %1920 = fmul fast float %1919, %1919
  %1921 = fsub fast float 1.000000e+00, %1920
  %1922 = call float @dx.op.unary.f32(i32 7, float %1921)  ; Saturate(value)
  %1923 = fmul fast float %1922, %1922
  br label %1934

; <label>:1924                                    ; preds = %1875
  %1925 = fmul fast float %1909, %1870
  %1926 = fmul fast float %1910, %1870
  %1927 = fmul fast float %1911, %1870
  %1928 = call float @dx.op.dot3.f32(i32 55, float %1925, float %1926, float %1927, float %1925, float %1926, float %1927)  ; Dot3(ax,ay,az,bx,by,bz)
  %1929 = call float @dx.op.unary.f32(i32 7, float %1928)  ; Saturate(value)
  %1930 = fsub fast float 1.000000e+00, %1929
  %1931 = call float @dx.op.unary.f32(i32 23, float %1930)  ; Log(value)
  %1932 = fmul fast float %1931, %1868
  %1933 = call float @dx.op.unary.f32(i32 21, float %1932)  ; Exp(value)
  br label %1934

; <label>:1934                                    ; preds = %1924, %1917
  %1935 = phi float [ %1923, %1917 ], [ %1933, %1924 ]
  br i1 %1900, label %1936, label %1943

; <label>:1936                                    ; preds = %1934
  %1937 = call float @dx.op.dot3.f32(i32 55, float %1914, float %1915, float %1916, float %1860, float %1861, float %1862)  ; Dot3(ax,ay,az,bx,by,bz)
  %1938 = fsub fast float %1937, %1890
  %1939 = fmul fast float %1938, %1892
  %1940 = call float @dx.op.unary.f32(i32 7, float %1939)  ; Saturate(value)
  %1941 = fmul fast float %1940, %1940
  %1942 = fmul fast float %1941, %1935
  br label %1943

; <label>:1943                                    ; preds = %1936, %1934
  %1944 = phi float [ %1942, %1936 ], [ %1935, %1934 ]
  br i1 %1901, label %1945, label %1949

; <label>:1945                                    ; preds = %1943
  %1946 = call float @dx.op.dot3.f32(i32 55, float %1860, float %1861, float %1862, float %1914, float %1915, float %1916)  ; Dot3(ax,ay,az,bx,by,bz)
  %1947 = fcmp fast olt float %1946, 0.000000e+00
  %1948 = select i1 %1947, float 0.000000e+00, float %1944
  br label %1949

; <label>:1949                                    ; preds = %1945, %1943
  %1950 = phi float [ %1948, %1945 ], [ %1944, %1943 ]
  br i1 %1901, label %1951, label %2183

; <label>:1951                                    ; preds = %1949
  %1952 = fmul fast float %1862, %1853
  %1953 = fmul fast float %1861, %1854
  %1954 = fsub fast float %1952, %1953
  %1955 = fmul fast float %1860, %1854
  %1956 = fmul fast float %1862, %1852
  %1957 = fsub fast float %1955, %1956
  %1958 = fmul fast float %1861, %1852
  %1959 = fmul fast float %1860, %1853
  %1960 = fsub fast float %1958, %1959
  %1961 = fcmp fast ogt float %1908, 0x3FA1EB8520000000
  br i1 %1961, label %1962, label %2057

; <label>:1962                                    ; preds = %1951
  %1963 = fmul fast float %1909, %1954
  %1964 = call float @dx.op.tertiary.f32(i32 46, float %1957, float %1910, float %1963)  ; FMad(a,b,c)
  %1965 = call float @dx.op.tertiary.f32(i32 46, float %1960, float %1911, float %1964)  ; FMad(a,b,c)
  %1966 = fmul fast float %1909, %1852
  %1967 = call float @dx.op.tertiary.f32(i32 46, float %1853, float %1910, float %1966)  ; FMad(a,b,c)
  %1968 = call float @dx.op.tertiary.f32(i32 46, float %1854, float %1911, float %1967)  ; FMad(a,b,c)
  %1969 = fmul fast float %1909, %1860
  %1970 = call float @dx.op.tertiary.f32(i32 46, float %1861, float %1910, float %1969)  ; FMad(a,b,c)
  %1971 = call float @dx.op.tertiary.f32(i32 46, float %1862, float %1911, float %1970)  ; FMad(a,b,c)
  %1972 = fmul fast float %1908, %1908
  %1973 = fsub fast float 1.000000e+00, %1972
  %1974 = call float @dx.op.unary.f32(i32 24, float %1973)  ; Sqrt(value)
  %1975 = fmul fast float %1908, %1904
  %1976 = call float @dx.op.binary.f32(i32 36, float %1971, float %1975)  ; FMin(a,b)
  %1977 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1975)  ; FMax(a,b)
  %1978 = fdiv fast float %1976, %1977
  %1979 = fmul fast float %1974, %1904
  %1980 = fmul fast float %1979, %1978
  %1981 = fcmp fast ogt float %1965, 0.000000e+00
  %1982 = fcmp fast ogt float %1968, 0.000000e+00
  %1983 = fcmp fast olt float %1965, 0.000000e+00
  %1984 = fcmp fast olt float %1968, 0.000000e+00
  %1985 = zext i1 %1981 to i32
  %1986 = zext i1 %1982 to i32
  %1987 = zext i1 %1983 to i32
  %1988 = zext i1 %1984 to i32
  %1989 = sub nsw i32 %1985, %1987
  %1990 = sub nsw i32 %1986, %1988
  %1991 = sitofp i32 %1989 to float
  %1992 = sitofp i32 %1990 to float
  %1993 = fadd fast float %1980, %1895
  %1994 = fadd fast float %1980, %1897
  %1995 = call float @dx.op.unary.f32(i32 6, float %1965)  ; FAbs(value)
  %1996 = call float @dx.op.unary.f32(i32 6, float %1968)  ; FAbs(value)
  %1997 = call float @dx.op.binary.f32(i32 35, float %1995, float %1993)  ; FMax(a,b)
  %1998 = call float @dx.op.binary.f32(i32 35, float %1996, float %1994)  ; FMax(a,b)
  %1999 = fsub fast float %1896, %1980
  %2000 = fadd fast float %1999, %1997
  %2001 = fmul fast float %2000, %1991
  %2002 = fsub fast float %1898, %1980
  %2003 = fadd fast float %2002, %1998
  %2004 = fmul fast float %2003, %1992
  %2005 = fsub fast float %1971, %1976
  %2006 = call float @dx.op.binary.f32(i32 35, float %2005, float 0x3F50624DE0000000)  ; FMax(a,b)
  %2007 = call float @dx.op.unary.f32(i32 6, float %2001)  ; FAbs(value)
  %2008 = call float @dx.op.unary.f32(i32 6, float %2004)  ; FAbs(value)
  %2009 = fdiv fast float %2007, %2006
  %2010 = fdiv fast float %2008, %2006
  %2011 = fmul fast float %2009, %1976
  %2012 = fmul fast float %2010, %1976
  %2013 = fsub fast float %2011, %1980
  %2014 = fsub fast float %2012, %1980
  %2015 = fsub fast float -0.000000e+00, %1991
  %2016 = fsub fast float -0.000000e+00, %1992
  %2017 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2015)  ; FMax(a,b)
  %2018 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2016)  ; FMax(a,b)
  %2019 = fmul fast float %2013, %2017
  %2020 = fmul fast float %2014, %2018
  %2021 = fsub fast float %2019, %1895
  %2022 = fsub fast float %2020, %1897
  %2023 = call float @dx.op.binary.f32(i32 35, float %2021, float %1896)  ; FMax(a,b)
  %2024 = call float @dx.op.binary.f32(i32 35, float %2022, float %1898)  ; FMax(a,b)
  %2025 = call float @dx.op.binary.f32(i32 36, float %2023, float %1895)  ; FMin(a,b)
  %2026 = call float @dx.op.binary.f32(i32 36, float %2024, float %1897)  ; FMin(a,b)
  %2027 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1991)  ; FMax(a,b)
  %2028 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1992)  ; FMax(a,b)
  %2029 = fmul fast float %2027, %2013
  %2030 = fmul fast float %2028, %2014
  %2031 = fsub fast float %1895, %2029
  %2032 = fsub fast float %1897, %2030
  %2033 = call float @dx.op.binary.f32(i32 35, float %2031, float %1896)  ; FMax(a,b)
  %2034 = call float @dx.op.binary.f32(i32 35, float %2032, float %1898)  ; FMax(a,b)
  %2035 = call float @dx.op.binary.f32(i32 36, float %2033, float %1895)  ; FMin(a,b)
  %2036 = call float @dx.op.binary.f32(i32 36, float %2034, float %1897)  ; FMin(a,b)
  %2037 = fadd fast float %2035, %2025
  %2038 = fadd fast float %2036, %2026
  %2039 = fmul fast float %2037, 5.000000e-01
  %2040 = fmul fast float %2038, 5.000000e-01
  %2041 = fsub fast float %2035, %2025
  %2042 = fsub fast float %2036, %2026
  %2043 = fmul fast float %2041, 5.000000e-01
  %2044 = fmul fast float %2042, 5.000000e-01
  %2045 = fmul fast float %2039, %1954
  %2046 = fmul fast float %2039, %1957
  %2047 = fmul fast float %2039, %1960
  %2048 = fsub fast float %1909, %2045
  %2049 = fsub fast float %1910, %2046
  %2050 = fsub fast float %1911, %2047
  %2051 = fmul fast float %2040, %1852
  %2052 = fmul fast float %2040, %1853
  %2053 = fmul fast float %2040, %1854
  %2054 = fsub fast float %2048, %2051
  %2055 = fsub fast float %2049, %2052
  %2056 = fsub fast float %2050, %2053
  br label %2057

; <label>:2057                                    ; preds = %1962, %1951
  %2058 = phi float [ %2054, %1962 ], [ %1909, %1951 ]
  %2059 = phi float [ %2055, %1962 ], [ %1910, %1951 ]
  %2060 = phi float [ %2056, %1962 ], [ %1911, %1951 ]
  %2061 = phi float [ %2043, %1962 ], [ %1895, %1951 ]
  %2062 = phi float [ %2044, %1962 ], [ %1897, %1951 ]
  %2063 = fcmp fast oeq float %2061, 0.000000e+00
  %2064 = fcmp fast oeq float %2062, 0.000000e+00
  %2065 = or i1 %2063, %2064
  br i1 %2065, label %2213, label %2066

; <label>:2066                                    ; preds = %2057
  %2067 = call float @dx.op.dot3.f32(i32 55, float %1954, float %1957, float %1960, float %2058, float %2059, float %2060)  ; Dot3(ax,ay,az,bx,by,bz)
  %2068 = call float @dx.op.dot3.f32(i32 55, float %1852, float %1853, float %1854, float %2058, float %2059, float %2060)  ; Dot3(ax,ay,az,bx,by,bz)
  %2069 = call float @dx.op.dot3.f32(i32 55, float %1860, float %1861, float %1862, float %2058, float %2059, float %2060)  ; Dot3(ax,ay,az,bx,by,bz)
  %2070 = fsub fast float %2067, %2061
  %2071 = fadd fast float %2067, %2061
  %2072 = fsub fast float %2068, %2062
  %2073 = fadd fast float %2068, %2062
  %2074 = fmul fast float %2069, %2069
  %2075 = call float @dx.op.dot2.f32(i32 54, float %2070, float %2072, float %2070, float %2072)  ; Dot2(ax,ay,bx,by)
  %2076 = fadd fast float %2075, %2074
  %2077 = call float @dx.op.unary.f32(i32 25, float %2076)  ; Rsqrt(value)
  %2078 = fmul fast float %2077, %2070
  %2079 = fmul fast float %2077, %2072
  %2080 = fmul fast float %2077, %2069
  %2081 = call float @dx.op.dot2.f32(i32 54, float %2071, float %2072, float %2071, float %2072)  ; Dot2(ax,ay,bx,by)
  %2082 = fadd fast float %2081, %2074
  %2083 = call float @dx.op.unary.f32(i32 25, float %2082)  ; Rsqrt(value)
  %2084 = fmul fast float %2083, %2071
  %2085 = fmul fast float %2083, %2072
  %2086 = fmul fast float %2083, %2069
  %2087 = call float @dx.op.dot2.f32(i32 54, float %2071, float %2073, float %2071, float %2073)  ; Dot2(ax,ay,bx,by)
  %2088 = fadd fast float %2087, %2074
  %2089 = call float @dx.op.unary.f32(i32 25, float %2088)  ; Rsqrt(value)
  %2090 = fmul fast float %2089, %2071
  %2091 = fmul fast float %2089, %2073
  %2092 = fmul fast float %2089, %2069
  %2093 = call float @dx.op.dot2.f32(i32 54, float %2070, float %2073, float %2070, float %2073)  ; Dot2(ax,ay,bx,by)
  %2094 = fadd fast float %2093, %2074
  %2095 = call float @dx.op.unary.f32(i32 25, float %2094)  ; Rsqrt(value)
  %2096 = fmul fast float %2095, %2070
  %2097 = fmul fast float %2095, %2073
  %2098 = fmul fast float %2095, %2069
  %2099 = call float @dx.op.dot3.f32(i32 55, float %2078, float %2079, float %2080, float %2084, float %2085, float %2086)  ; Dot3(ax,ay,az,bx,by,bz)
  %2100 = call float @dx.op.dot3.f32(i32 55, float %2084, float %2085, float %2086, float %2090, float %2091, float %2092)  ; Dot3(ax,ay,az,bx,by,bz)
  %2101 = call float @dx.op.dot3.f32(i32 55, float %2090, float %2091, float %2092, float %2096, float %2097, float %2098)  ; Dot3(ax,ay,az,bx,by,bz)
  %2102 = call float @dx.op.dot3.f32(i32 55, float %2096, float %2097, float %2098, float %2078, float %2079, float %2080)  ; Dot3(ax,ay,az,bx,by,bz)
  %2103 = fmul fast float %2099, 0x3FC6666660000000
  %2104 = fsub fast float 0x3FF921FF20000000, %2103
  %2105 = fadd fast float %2099, 1.000000e+00
  %2106 = call float @dx.op.unary.f32(i32 25, float %2105)  ; Rsqrt(value)
  %2107 = fmul fast float %2100, 0x3FC6666660000000
  %2108 = fsub fast float 0x3FF921FF20000000, %2107
  %2109 = fadd fast float %2100, 1.000000e+00
  %2110 = call float @dx.op.unary.f32(i32 25, float %2109)  ; Rsqrt(value)
  %2111 = fmul fast float %2110, %2108
  %2112 = fmul fast float %2101, 0x3FC6666660000000
  %2113 = fsub fast float 0x3FF921FF20000000, %2112
  %2114 = fadd fast float %2101, 1.000000e+00
  %2115 = call float @dx.op.unary.f32(i32 25, float %2114)  ; Rsqrt(value)
  %2116 = fmul fast float %2102, 0x3FC6666660000000
  %2117 = fsub fast float 0x3FF921FF20000000, %2116
  %2118 = fadd fast float %2102, 1.000000e+00
  %2119 = call float @dx.op.unary.f32(i32 25, float %2118)  ; Rsqrt(value)
  %2120 = fmul fast float %2119, %2117
  %2121 = fmul fast float %2104, %2106
  %2122 = fsub fast float -0.000000e+00, %2121
  %2123 = fmul fast float %2078, %2122
  %2124 = fmul fast float %2079, %2122
  %2125 = fmul fast float %2080, %2122
  %2126 = fmul fast float %2111, %2090
  %2127 = fmul fast float %2111, %2091
  %2128 = fmul fast float %2111, %2092
  %2129 = fadd fast float %2126, %2123
  %2130 = fadd fast float %2127, %2124
  %2131 = fadd fast float %2128, %2125
  %2132 = fmul fast float %2131, %2085
  %2133 = fmul fast float %2130, %2086
  %2134 = fsub fast float %2132, %2133
  %2135 = fmul fast float %2129, %2086
  %2136 = fmul fast float %2131, %2084
  %2137 = fsub fast float %2135, %2136
  %2138 = fmul fast float %2130, %2084
  %2139 = fmul fast float %2129, %2085
  %2140 = fsub fast float %2138, %2139
  %2141 = fmul fast float %2120, %2078
  %2142 = fmul fast float %2120, %2079
  %2143 = fmul fast float %2120, %2080
  %2144 = fmul fast float %2113, %2115
  %2145 = fsub fast float -0.000000e+00, %2144
  %2146 = fmul fast float %2090, %2145
  %2147 = fmul fast float %2091, %2145
  %2148 = fmul fast float %2092, %2145
  %2149 = fadd fast float %2141, %2146
  %2150 = fadd fast float %2142, %2147
  %2151 = fadd fast float %2143, %2148
  %2152 = fmul fast float %2151, %2097
  %2153 = fmul fast float %2150, %2098
  %2154 = fsub fast float %2152, %2153
  %2155 = fmul fast float %2149, %2098
  %2156 = fmul fast float %2151, %2096
  %2157 = fsub fast float %2155, %2156
  %2158 = fmul fast float %2150, %2096
  %2159 = fmul fast float %2149, %2097
  %2160 = fsub fast float %2158, %2159
  %2161 = fadd fast float %2154, %2134
  %2162 = fadd fast float %2157, %2137
  %2163 = fadd fast float %2160, %2140
  %2164 = fmul fast float %2161, %1954
  %2165 = fmul fast float %2161, %1957
  %2166 = fmul fast float %2161, %1960
  %2167 = fmul fast float %2162, %1852
  %2168 = fmul fast float %2162, %1853
  %2169 = fmul fast float %2162, %1854
  %2170 = fadd fast float %2164, %2167
  %2171 = fadd fast float %2165, %2168
  %2172 = fadd fast float %2166, %2169
  %2173 = fmul fast float %2163, %1860
  %2174 = fmul fast float %2163, %1861
  %2175 = fmul fast float %2163, %1862
  %2176 = fadd fast float %2170, %2173
  %2177 = fadd fast float %2171, %2174
  %2178 = fadd fast float %2172, %2175
  %2179 = call float @dx.op.dot3.f32(i32 55, float %2176, float %2177, float %2178, float %2176, float %2177, float %2178)  ; Dot3(ax,ay,az,bx,by,bz)
  %2180 = call float @dx.op.unary.f32(i32 25, float %2179)  ; Rsqrt(value)
  %2181 = fmul fast float %2179, 5.000000e-01
  %2182 = fmul fast float %2181, %2180
  br label %2213

; <label>:2183                                    ; preds = %1949
  %2184 = fmul fast float %1897, 5.000000e-01
  %2185 = fmul fast float %2184, %1852
  %2186 = fmul fast float %2184, %1853
  %2187 = fmul fast float %2184, %1854
  %2188 = fsub fast float %1909, %2185
  %2189 = fsub fast float %1910, %2186
  %2190 = fsub fast float %1911, %2187
  %2191 = fadd fast float %2185, %1909
  %2192 = fadd fast float %2186, %1910
  %2193 = fadd fast float %2187, %1911
  %2194 = fcmp fast ogt float %1897, 0.000000e+00
  %2195 = call float @dx.op.dot3.f32(i32 55, float %2188, float %2189, float %2190, float %2188, float %2189, float %2190)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %2194, label %2196, label %2207, !dx.controlflow.hints !61

; <label>:2196                                    ; preds = %2183
  %2197 = call float @dx.op.dot3.f32(i32 55, float %2191, float %2192, float %2193, float %2191, float %2192, float %2193)  ; Dot3(ax,ay,az,bx,by,bz)
  %2198 = call float @dx.op.unary.f32(i32 25, float %2195)  ; Rsqrt(value)
  %2199 = call float @dx.op.unary.f32(i32 25, float %2197)  ; Rsqrt(value)
  %2200 = fmul fast float %2199, %2198
  %2201 = call float @dx.op.dot3.f32(i32 55, float %2188, float %2189, float %2190, float %2191, float %2192, float %2193)  ; Dot3(ax,ay,az,bx,by,bz)
  %2202 = fmul fast float %2201, 5.000000e-01
  %2203 = fadd fast float %2202, %1836
  %2204 = fmul fast float %2203, %2200
  %2205 = fadd fast float %2204, 5.000000e-01
  %2206 = fdiv fast float %2200, %2205
  br label %2210

; <label>:2207                                    ; preds = %2183
  %2208 = fadd fast float %2195, %1836
  %2209 = fdiv fast float 1.000000e+00, %2208
  br label %2210

; <label>:2210                                    ; preds = %2207, %2196
  %2211 = phi float [ %2206, %2196 ], [ %2209, %2207 ]
  %2212 = select i1 %1899, float %2211, float 1.000000e+00
  br label %2213

; <label>:2213                                    ; preds = %2210, %2066, %2057
  %2214 = phi float [ %2212, %2210 ], [ 0.000000e+00, %2057 ], [ %2182, %2066 ]
  %2215 = fsub fast float -0.000000e+00, %590
  %2216 = fsub fast float -0.000000e+00, %591
  %2217 = fsub fast float -0.000000e+00, %592
  %2218 = call float @dx.op.dot3.f32(i32 55, float %1914, float %1915, float %1916, float %2215, float %2216, float %2217)  ; Dot3(ax,ay,az,bx,by,bz)
  %2219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %44, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %2220 = extractvalue %dx.types.CBufRet.f32 %2219, 1
  %2221 = fmul fast float %2220, %2220
  %2222 = fsub fast float 1.000000e+00, %2221
  %2223 = fmul fast float %2218, 2.000000e+00
  %2224 = fadd fast float %2223, %2220
  %2225 = fmul fast float %2224, %2220
  %2226 = fadd fast float %2225, 1.000000e+00
  %2227 = call float @dx.op.unary.f32(i32 24, float %2226)  ; Sqrt(value)
  %2228 = fmul fast float %2227, 0x402921FB60000000
  %2229 = fmul fast float %2228, %2226
  %2230 = fdiv fast float %2222, %2229
  %2231 = fmul fast float %1950, %1873
  %2232 = fmul fast float %2231, %2214
  %2233 = fmul fast float %2232, %2230
  %2234 = fmul fast float %2233, %1865
  %2235 = fmul fast float %2233, %1866
  %2236 = fmul fast float %2233, %1867
  %2237 = fadd fast float %2234, %1840
  %2238 = fadd fast float %2235, %1841
  %2239 = fadd fast float %2236, %1842
  br label %2240

; <label>:2240                                    ; preds = %2213, %1839
  %2241 = phi float [ %2237, %2213 ], [ %1840, %1839 ]
  %2242 = phi float [ %2238, %2213 ], [ %1841, %1839 ]
  %2243 = phi float [ %2239, %2213 ], [ %1842, %1839 ]
  %2244 = add nuw i32 %1843, 1
  %2245 = icmp eq i32 %2244, %1766
  br i1 %2245, label %2246, label %1839, !llvm.loop !62

; <label>:2246                                    ; preds = %2240
  br label %2247

; <label>:2247                                    ; preds = %2246, %1803
  %2248 = phi float [ %1739, %1803 ], [ %2241, %2246 ]
  %2249 = phi float [ %1740, %1803 ], [ %2242, %2246 ]
  %2250 = phi float [ %1741, %1803 ], [ %2243, %2246 ]
  %2251 = add nuw nsw i32 %425, 1
  %2252 = icmp ult i32 %2251, %420
  br i1 %2252, label %421, label %2253

; <label>:2253                                    ; preds = %2247
  %2254 = uitofp i32 %420 to float
  %2255 = fdiv fast float %2248, %2254
  %2256 = fdiv fast float %2249, %2254
  %2257 = fdiv fast float %2250, %2254
  %2258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %43, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2259 = extractvalue %dx.types.CBufRet.f32 %2258, 2
  %2260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2261 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2260, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2262 = extractvalue %dx.types.ResRet.f32 %2261, 0
  %2263 = extractvalue %dx.types.ResRet.f32 %2261, 1
  %2264 = extractvalue %dx.types.ResRet.f32 %2261, 2
  %2265 = fmul fast float %2262, %2259
  %2266 = fmul fast float %2263, %2259
  %2267 = fmul fast float %2264, %2259
  %2268 = fadd fast float %2265, %2255
  %2269 = fadd fast float %2266, %2256
  %2270 = fadd fast float %2267, %2257
  %2271 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2272 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2271, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2273 = extractvalue %dx.types.ResRet.f32 %2272, 0
  %2274 = extractvalue %dx.types.ResRet.f32 %2272, 1
  %2275 = extractvalue %dx.types.ResRet.f32 %2272, 2
  %2276 = extractvalue %dx.types.ResRet.f32 %2272, 3
  %2277 = call float @dx.op.dot3.f32(i32 55, float %2273, float %2274, float %2275, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2278 = fadd fast float %2276, %2277
  %2279 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %44, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2280 = extractvalue %dx.types.CBufRet.i32 %2279, 0
  %2281 = icmp eq i32 %2280, 0
  br i1 %2281, label %2288, label %2282, !dx.controlflow.hints !63

; <label>:2282                                    ; preds = %2253
  %2283 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2284 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2283, i32 0, i32 %45, i32 %46, i32 %47, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2285 = extractvalue %dx.types.ResRet.f32 %2284, 0
  %2286 = extractvalue %dx.types.ResRet.f32 %2284, 1
  %2287 = extractvalue %dx.types.ResRet.f32 %2284, 2
  br label %2288

; <label>:2288                                    ; preds = %2282, %2253
  %2289 = phi float [ %2285, %2282 ], [ 0.000000e+00, %2253 ]
  %2290 = phi float [ %2286, %2282 ], [ 0.000000e+00, %2253 ]
  %2291 = phi float [ %2287, %2282 ], [ 0.000000e+00, %2253 ]
  %2292 = extractvalue %dx.types.CBufRet.f32 %2258, 1
  %2293 = fmul fast float %2273, %2268
  %2294 = fmul fast float %2274, %2269
  %2295 = fmul fast float %2275, %2270
  %2296 = fadd fast float %2289, %2293
  %2297 = fadd fast float %2290, %2294
  %2298 = fadd fast float %2291, %2295
  %2299 = fmul fast float %2292, %2296
  %2300 = fmul fast float %2292, %2297
  %2301 = fmul fast float %2292, %2298
  %2302 = fcmp fast ogt float %406, 0.000000e+00
  br i1 %2302, label %2303, label %2329, !dx.controlflow.hints !64

; <label>:2303                                    ; preds = %2288
  %2304 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2305 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2306 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2304, %dx.types.Handle %2305, float %387, float %388, float %383, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2307 = extractvalue %dx.types.ResRet.f32 %2306, 0
  %2308 = extractvalue %dx.types.ResRet.f32 %2306, 1
  %2309 = extractvalue %dx.types.ResRet.f32 %2306, 2
  %2310 = extractvalue %dx.types.ResRet.f32 %2306, 3
  %2311 = extractvalue %dx.types.CBufRet.f32 %1253, 1
  %2312 = fmul fast float %2292, %2311
  %2313 = fmul fast float %2312, %2307
  %2314 = fmul fast float %2312, %2308
  %2315 = fmul fast float %2312, %2309
  %2316 = fmul fast float %2312, %2310
  %2317 = fsub fast float %2313, %2299
  %2318 = fsub fast float %2314, %2300
  %2319 = fsub fast float %2315, %2301
  %2320 = fsub fast float %2316, %2278
  %2321 = fmul fast float %2317, %406
  %2322 = fmul fast float %2318, %406
  %2323 = fmul fast float %2319, %406
  %2324 = fmul fast float %2320, %406
  %2325 = fadd fast float %2321, %2299
  %2326 = fadd fast float %2322, %2300
  %2327 = fadd fast float %2323, %2301
  %2328 = fadd fast float %2324, %2278
  br label %2329

; <label>:2329                                    ; preds = %2303, %2288
  %2330 = phi float [ %2325, %2303 ], [ %2299, %2288 ]
  %2331 = phi float [ %2326, %2303 ], [ %2300, %2288 ]
  %2332 = phi float [ %2327, %2303 ], [ %2301, %2288 ]
  %2333 = phi float [ %2328, %2303 ], [ %2278, %2288 ]
  %2334 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2335 = extractvalue %dx.types.CBufRet.i32 %2334, 0
  %2336 = extractvalue %dx.types.CBufRet.i32 %2334, 1
  %2337 = extractvalue %dx.types.CBufRet.i32 %2334, 2
  %2338 = icmp slt i32 %45, %2335
  %2339 = icmp slt i32 %46, %2336
  %2340 = icmp slt i32 %47, %2337
  %2341 = and i1 %2338, %2339
  %2342 = and i1 %2340, %2341
  br i1 %2342, label %2343, label %2357

; <label>:2343                                    ; preds = %2329
  %2344 = bitcast float %2330 to i32
  %2345 = bitcast float %2331 to i32
  %2346 = bitcast float %2332 to i32
  %2347 = bitcast float %2333 to i32
  %2348 = icmp ult i32 %2344, 2139095040
  %2349 = icmp ult i32 %2345, 2139095040
  %2350 = icmp ult i32 %2346, 2139095040
  %2351 = icmp ult i32 %2347, 2139095040
  %2352 = select i1 %2348, float %2330, float 0.000000e+00
  %2353 = select i1 %2349, float %2331, float 0.000000e+00
  %2354 = select i1 %2350, float %2332, float 0.000000e+00
  %2355 = select i1 %2351, float %2333, float 0.000000e+00
  %2356 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2356, i32 %45, i32 %46, i32 %47, float %2352, float %2353, float %2354, float %2355, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2357

; <label>:2357                                    ; preds = %2343, %2329, %212
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!51}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !34, !36, !42}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !7}
!27 = !{i32 18, %"class.Texture2D<float>"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<float>"* undef, !"", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!31 = !{i32 22, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 4, i32 0, !9}
!32 = !{i32 23, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 23, i32 1, i32 4, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{!35}
!35 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!36 = !{!37, !38, !39, !40, !41}
!37 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!38 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!39 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!40 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!41 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!42 = !{!43, !44, !45, !46, !47, !48, !49, !50}
!43 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!44 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!45 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!46 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!47 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!48 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!49 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!50 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!51 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !52}
!52 = !{i32 0, i64 16, i32 4, !53, i32 5, !54}
!53 = !{i32 4, i32 4, i32 4}
!54 = !{i32 0}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 2}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !"dx.controlflow.hints", i32 1}
!59 = distinct !{!59, !60}
!60 = !{!"llvm.loop.unroll.disable"}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !"dx.controlflow.hints", i32 1}
!64 = distinct !{!64, !"dx.controlflow.hints", i32 1}
