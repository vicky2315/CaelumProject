;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 600a0af149d48cebf7e2f53d11f4c248
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S0   s4,space1000     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S2             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S3             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S4             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S5             s4     1
; LightScatteringHistorySampler     sampler      NA          NA      S6             s5     1
; LightFunctionSampler              sampler      NA          NA      S7             s6     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T7             t7     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T8             t8     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T9             t9     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T10            t10     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T11            t11     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T12            t12     1
; GlobalDistanceFieldPageAtlasTexture   texture     f32          3d     T13            t13     1
; GlobalDistanceFieldPageTableTexture   texture     u32          3d     T14            t14     1
; ConservativeDepthTexture          texture     f32          2d     T15            t15     1
; PrevConservativeDepthTexture      texture     f32          2d     T16            t16     1
; VBufferA                          texture     f32          3d     T17            t17     1
; VBufferB                          texture     f32          3d     T18            t18     1
; LightScatteringHistory            texture     f32          3d     T19            t19     1
; LocalShadowedLightScattering      texture     f32          3d     T20            t20     1
; LightFunctionTexture              texture     f32          2d     T21            t21     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %43 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 2
  %73 = extractvalue %dx.types.CBufRet.f32 %69, 3
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.i32 %76, 1
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = extractvalue %dx.types.CBufRet.f32 %78, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %86 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %87 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = extractvalue %dx.types.CBufRet.f32 %93, 1
  %96 = extractvalue %dx.types.CBufRet.f32 %93, 2
  %97 = extractvalue %dx.types.CBufRet.f32 %93, 3
  %98 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.i32 %98, 3
  %100 = icmp eq i32 %99, 0
  %101 = uitofp i32 %42 to float
  %102 = uitofp i32 %43 to float
  %103 = fadd fast float %101, 5.000000e-01
  %104 = fadd fast float %102, 5.000000e-01
  %105 = uitofp i32 %44 to float
  br i1 %100, label %257, label %106

; <label>:106                                     ; preds = %0
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = extractvalue %dx.types.CBufRet.f32 %107, 1
  %110 = fdiv fast float %103, %108
  %111 = fdiv fast float %104, %109
  %112 = fmul fast float %110, 2.000000e+00
  %113 = fmul fast float %111, 2.000000e+00
  %114 = fadd fast float %112, -1.000000e+00
  %115 = fadd fast float %113, -1.000000e+00
  %116 = fsub fast float -0.000000e+00, %115
  %117 = fadd fast float %105, -1.000000e+00
  %118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.f32 %118, 2
  %120 = fdiv fast float %117, %119
  %121 = call float @dx.op.unary.f32(i32 21, float %120)  ; Exp(value)
  %122 = extractvalue %dx.types.CBufRet.f32 %118, 1
  %123 = fsub fast float %121, %122
  %124 = extractvalue %dx.types.CBufRet.f32 %118, 0
  %125 = fdiv fast float %123, %124
  %126 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.f32 %126, 3
  %128 = fcmp fast ult float %127, 1.000000e+00
  br i1 %128, label %135, label %129, !dx.controlflow.hints !51

; <label>:129                                     ; preds = %106
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %132 = fmul fast float %131, %125
  %133 = extractvalue %dx.types.CBufRet.f32 %126, 2
  %134 = fadd fast float %132, %133
  br label %142

; <label>:135                                     ; preds = %106
  %136 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %137 = extractvalue %dx.types.CBufRet.f32 %136, 3
  %138 = fadd fast float %137, %125
  %139 = extractvalue %dx.types.CBufRet.f32 %136, 2
  %140 = fmul fast float %138, %139
  %141 = fdiv fast float 1.000000e+00, %140
  br label %142

; <label>:142                                     ; preds = %135, %129
  %143 = phi float [ %134, %129 ], [ %141, %135 ]
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %144, 3
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %149, 3
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = extractvalue %dx.types.CBufRet.f32 %159, 1
  %162 = extractvalue %dx.types.CBufRet.f32 %159, 2
  %163 = extractvalue %dx.types.CBufRet.f32 %159, 3
  %164 = fmul fast float %145, %114
  %165 = call float @dx.op.tertiary.f32(i32 46, float %116, float %150, float %164)  ; FMad(a,b,c)
  %166 = call float @dx.op.tertiary.f32(i32 46, float %143, float %155, float %165)  ; FMad(a,b,c)
  %167 = fadd fast float %166, %160
  %168 = fmul fast float %146, %114
  %169 = call float @dx.op.tertiary.f32(i32 46, float %116, float %151, float %168)  ; FMad(a,b,c)
  %170 = call float @dx.op.tertiary.f32(i32 46, float %143, float %156, float %169)  ; FMad(a,b,c)
  %171 = fadd fast float %170, %161
  %172 = fmul fast float %147, %114
  %173 = call float @dx.op.tertiary.f32(i32 46, float %116, float %152, float %172)  ; FMad(a,b,c)
  %174 = call float @dx.op.tertiary.f32(i32 46, float %143, float %157, float %173)  ; FMad(a,b,c)
  %175 = fadd fast float %174, %162
  %176 = fmul fast float %148, %114
  %177 = call float @dx.op.tertiary.f32(i32 46, float %116, float %153, float %176)  ; FMad(a,b,c)
  %178 = call float @dx.op.tertiary.f32(i32 46, float %143, float %158, float %177)  ; FMad(a,b,c)
  %179 = fadd fast float %178, %163
  %180 = fdiv fast float %167, %179
  %181 = fdiv fast float %171, %179
  %182 = fdiv fast float %175, %179
  %183 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %184 = extractvalue %dx.types.CBufRet.f32 %183, 2
  %185 = extractvalue %dx.types.CBufRet.f32 %183, 3
  %186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.f32 %186, 2
  %188 = extractvalue %dx.types.CBufRet.f32 %186, 3
  %189 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %190 = extractvalue %dx.types.CBufRet.f32 %189, 2
  %191 = extractvalue %dx.types.CBufRet.f32 %189, 3
  %192 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %193 = extractvalue %dx.types.CBufRet.f32 %192, 2
  %194 = extractvalue %dx.types.CBufRet.f32 %192, 3
  %195 = fmul fast float %184, %180
  %196 = call float @dx.op.tertiary.f32(i32 46, float %181, float %187, float %195)  ; FMad(a,b,c)
  %197 = call float @dx.op.tertiary.f32(i32 46, float %182, float %190, float %196)  ; FMad(a,b,c)
  %198 = fadd fast float %197, %193
  %199 = fmul fast float %185, %180
  %200 = call float @dx.op.tertiary.f32(i32 46, float %181, float %188, float %199)  ; FMad(a,b,c)
  %201 = call float @dx.op.tertiary.f32(i32 46, float %182, float %191, float %200)  ; FMad(a,b,c)
  %202 = fadd fast float %201, %194
  %203 = fdiv fast float %198, %202
  %204 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %205 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %204, i32 0, i32 %42, i32 %43, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %206 = extractvalue %dx.types.ResRet.f32 %205, 0
  %207 = fcmp fast ogt float %206, %203
  br i1 %207, label %208, label %210

; <label>:208                                     ; preds = %142
  %209 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %209, i32 %42, i32 %43, i32 %44, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1900

; <label>:210                                     ; preds = %142
  %211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %212 = extractvalue %dx.types.CBufRet.f32 %211, 0
  %213 = extractvalue %dx.types.CBufRet.f32 %211, 1
  %214 = extractvalue %dx.types.CBufRet.f32 %211, 3
  %215 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.f32 %215, 0
  %217 = extractvalue %dx.types.CBufRet.f32 %215, 1
  %218 = extractvalue %dx.types.CBufRet.f32 %215, 3
  %219 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %220 = extractvalue %dx.types.CBufRet.f32 %219, 0
  %221 = extractvalue %dx.types.CBufRet.f32 %219, 1
  %222 = extractvalue %dx.types.CBufRet.f32 %219, 3
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 3
  %227 = fmul fast float %212, %180
  %228 = call float @dx.op.tertiary.f32(i32 46, float %181, float %216, float %227)  ; FMad(a,b,c)
  %229 = call float @dx.op.tertiary.f32(i32 46, float %182, float %220, float %228)  ; FMad(a,b,c)
  %230 = fadd fast float %229, %224
  %231 = fmul fast float %213, %180
  %232 = call float @dx.op.tertiary.f32(i32 46, float %181, float %217, float %231)  ; FMad(a,b,c)
  %233 = call float @dx.op.tertiary.f32(i32 46, float %182, float %221, float %232)  ; FMad(a,b,c)
  %234 = fadd fast float %233, %225
  %235 = fmul fast float %214, %180
  %236 = call float @dx.op.tertiary.f32(i32 46, float %181, float %218, float %235)  ; FMad(a,b,c)
  %237 = call float @dx.op.tertiary.f32(i32 46, float %182, float %222, float %236)  ; FMad(a,b,c)
  %238 = fadd fast float %237, %226
  %239 = fdiv fast float %230, %238
  %240 = fdiv fast float %234, %238
  %241 = fmul fast float %239, 5.000000e-01
  %242 = fmul fast float %240, 5.000000e-01
  %243 = fadd fast float %241, 5.000000e-01
  %244 = fsub fast float 5.000000e-01, %242
  %245 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %246 = extractvalue %dx.types.CBufRet.f32 %245, 0
  %247 = extractvalue %dx.types.CBufRet.f32 %245, 1
  %248 = fmul fast float %246, %243
  %249 = fmul fast float %247, %244
  %250 = fptoui float %248 to i32
  %251 = fptoui float %249 to i32
  %252 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %253 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %252, i32 0, i32 %250, i32 %251, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %254 = extractvalue %dx.types.ResRet.f32 %253, 0
  %255 = fcmp fast ogt float %254, %203
  br i1 %255, label %256, label %257

; <label>:256                                     ; preds = %210
  br label %257

; <label>:257                                     ; preds = %256, %210, %0
  %258 = phi i32 [ 1, %256 ], [ 0, %210 ], [ 0, %0 ]
  %259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %260 = extractvalue %dx.types.CBufRet.f32 %259, 0
  %261 = extractvalue %dx.types.CBufRet.f32 %259, 1
  %262 = extractvalue %dx.types.CBufRet.f32 %259, 3
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %267 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %268 = extractvalue %dx.types.CBufRet.f32 %267, 0
  %269 = extractvalue %dx.types.CBufRet.f32 %267, 1
  %270 = extractvalue %dx.types.CBufRet.f32 %267, 3
  %271 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %272 = extractvalue %dx.types.CBufRet.f32 %271, 0
  %273 = extractvalue %dx.types.CBufRet.f32 %271, 1
  %274 = extractvalue %dx.types.CBufRet.f32 %271, 3
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %277 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %278 = fdiv fast float %103, %276
  %279 = fdiv fast float %104, %277
  %280 = fmul fast float %278, 2.000000e+00
  %281 = fmul fast float %279, 2.000000e+00
  %282 = fadd fast float %280, -1.000000e+00
  %283 = fadd fast float %281, -1.000000e+00
  %284 = fsub fast float -0.000000e+00, %283
  %285 = fadd fast float %105, 5.000000e-01
  %286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.f32 %286, 2
  %288 = fdiv fast float %285, %287
  %289 = call float @dx.op.unary.f32(i32 21, float %288)  ; Exp(value)
  %290 = extractvalue %dx.types.CBufRet.f32 %286, 1
  %291 = fsub fast float %289, %290
  %292 = extractvalue %dx.types.CBufRet.f32 %286, 0
  %293 = fdiv fast float %291, %292
  %294 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.f32 %294, 3
  %296 = fcmp fast ult float %295, 1.000000e+00
  br i1 %296, label %303, label %297, !dx.controlflow.hints !51

; <label>:297                                     ; preds = %257
  %298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %299 = extractvalue %dx.types.CBufRet.f32 %298, 2
  %300 = fmul fast float %299, %293
  %301 = extractvalue %dx.types.CBufRet.f32 %294, 2
  %302 = fadd fast float %300, %301
  br label %310

; <label>:303                                     ; preds = %257
  %304 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %305 = extractvalue %dx.types.CBufRet.f32 %304, 3
  %306 = fadd fast float %305, %293
  %307 = extractvalue %dx.types.CBufRet.f32 %304, 2
  %308 = fmul fast float %306, %307
  %309 = fdiv fast float 1.000000e+00, %308
  br label %310

; <label>:310                                     ; preds = %303, %297
  %311 = phi float [ %302, %297 ], [ %309, %303 ]
  %312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %313 = extractvalue %dx.types.CBufRet.f32 %312, 0
  %314 = extractvalue %dx.types.CBufRet.f32 %312, 1
  %315 = extractvalue %dx.types.CBufRet.f32 %312, 2
  %316 = extractvalue %dx.types.CBufRet.f32 %312, 3
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = extractvalue %dx.types.CBufRet.f32 %317, 3
  %322 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %323 = extractvalue %dx.types.CBufRet.f32 %322, 0
  %324 = extractvalue %dx.types.CBufRet.f32 %322, 1
  %325 = extractvalue %dx.types.CBufRet.f32 %322, 2
  %326 = extractvalue %dx.types.CBufRet.f32 %322, 3
  %327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %328 = extractvalue %dx.types.CBufRet.f32 %327, 0
  %329 = extractvalue %dx.types.CBufRet.f32 %327, 1
  %330 = extractvalue %dx.types.CBufRet.f32 %327, 2
  %331 = extractvalue %dx.types.CBufRet.f32 %327, 3
  %332 = fmul fast float %313, %282
  %333 = call float @dx.op.tertiary.f32(i32 46, float %284, float %318, float %332)  ; FMad(a,b,c)
  %334 = call float @dx.op.tertiary.f32(i32 46, float %311, float %323, float %333)  ; FMad(a,b,c)
  %335 = fadd fast float %334, %328
  %336 = fmul fast float %314, %282
  %337 = call float @dx.op.tertiary.f32(i32 46, float %284, float %319, float %336)  ; FMad(a,b,c)
  %338 = call float @dx.op.tertiary.f32(i32 46, float %311, float %324, float %337)  ; FMad(a,b,c)
  %339 = fadd fast float %338, %329
  %340 = fmul fast float %315, %282
  %341 = call float @dx.op.tertiary.f32(i32 46, float %284, float %320, float %340)  ; FMad(a,b,c)
  %342 = call float @dx.op.tertiary.f32(i32 46, float %311, float %325, float %341)  ; FMad(a,b,c)
  %343 = fadd fast float %342, %330
  %344 = fmul fast float %316, %282
  %345 = call float @dx.op.tertiary.f32(i32 46, float %284, float %321, float %344)  ; FMad(a,b,c)
  %346 = call float @dx.op.tertiary.f32(i32 46, float %311, float %326, float %345)  ; FMad(a,b,c)
  %347 = fadd fast float %346, %331
  %348 = fdiv fast float %335, %347
  %349 = fdiv fast float %339, %347
  %350 = fdiv fast float %343, %347
  %351 = fmul fast float %348, %260
  %352 = call float @dx.op.tertiary.f32(i32 46, float %349, float %264, float %351)  ; FMad(a,b,c)
  %353 = call float @dx.op.tertiary.f32(i32 46, float %350, float %268, float %352)  ; FMad(a,b,c)
  %354 = fadd fast float %353, %272
  %355 = fmul fast float %348, %261
  %356 = call float @dx.op.tertiary.f32(i32 46, float %349, float %265, float %355)  ; FMad(a,b,c)
  %357 = call float @dx.op.tertiary.f32(i32 46, float %350, float %269, float %356)  ; FMad(a,b,c)
  %358 = fadd fast float %357, %273
  %359 = fmul fast float %348, %262
  %360 = call float @dx.op.tertiary.f32(i32 46, float %349, float %266, float %359)  ; FMad(a,b,c)
  %361 = call float @dx.op.tertiary.f32(i32 46, float %350, float %270, float %360)  ; FMad(a,b,c)
  %362 = fadd fast float %361, %274
  %363 = fdiv fast float %354, %362
  %364 = fdiv fast float %358, %362
  %365 = fmul fast float %363, 5.000000e-01
  %366 = fmul fast float %364, 5.000000e-01
  %367 = fadd fast float %365, 5.000000e-01
  %368 = fsub fast float 5.000000e-01, %366
  %369 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %370 = extractvalue %dx.types.CBufRet.f32 %369, 0
  %371 = fmul fast float %370, %362
  %372 = extractvalue %dx.types.CBufRet.f32 %369, 1
  %373 = fadd fast float %371, %372
  %374 = call float @dx.op.unary.f32(i32 23, float %373)  ; Log(value)
  %375 = extractvalue %dx.types.CBufRet.f32 %369, 2
  %376 = fmul fast float %375, %374
  %377 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %378 = extractvalue %dx.types.CBufRet.f32 %377, 2
  %379 = fmul fast float %376, %378
  %380 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %381 = extractvalue %dx.types.CBufRet.f32 %380, 2
  %382 = extractvalue %dx.types.CBufRet.f32 %380, 3
  %383 = fmul fast float %381, %367
  %384 = fmul fast float %382, %368
  %385 = fcmp fast olt float %383, 0.000000e+00
  %386 = fcmp fast olt float %384, 0.000000e+00
  %387 = fcmp fast olt float %379, 0.000000e+00
  %388 = or i1 %385, %386
  %389 = or i1 %387, %388
  br i1 %389, label %400, label %390

; <label>:390                                     ; preds = %310
  %391 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %392 = extractvalue %dx.types.CBufRet.f32 %391, 0
  %393 = fcmp fast ogt float %383, 1.000000e+00
  %394 = fcmp fast ogt float %384, 1.000000e+00
  %395 = fcmp fast ogt float %379, 1.000000e+00
  %396 = or i1 %393, %394
  %397 = or i1 %395, %396
  %398 = icmp ne i32 %258, 0
  %399 = or i1 %398, %397
  br i1 %399, label %400, label %401

; <label>:400                                     ; preds = %390, %310
  br label %401

; <label>:401                                     ; preds = %400, %390
  %402 = phi float [ 0.000000e+00, %400 ], [ %392, %390 ]
  %403 = fcmp fast olt float %402, 0x3F50624DE0000000
  br i1 %403, label %404, label %415

; <label>:404                                     ; preds = %401
  %405 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %406 = extractvalue %dx.types.CBufRet.i32 %405, 0
  %407 = extractvalue %dx.types.CBufRet.i32 %405, 1
  %408 = extractvalue %dx.types.CBufRet.i32 %405, 2
  %409 = icmp slt i32 %42, %406
  %410 = icmp slt i32 %43, %407
  %411 = icmp slt i32 %44, %408
  %412 = and i1 %409, %410
  %413 = and i1 %411, %412
  %414 = select i1 %413, i32 4, i32 1
  br label %415

; <label>:415                                     ; preds = %404, %401
  %416 = phi i32 [ 1, %401 ], [ %414, %404 ]
  br label %417

; <label>:417                                     ; preds = %1790, %415
  %418 = phi float [ 0.000000e+00, %415 ], [ %1791, %1790 ]
  %419 = phi float [ 0.000000e+00, %415 ], [ %1792, %1790 ]
  %420 = phi float [ 0.000000e+00, %415 ], [ %1793, %1790 ]
  %421 = phi i32 [ 0, %415 ], [ %1794, %1790 ]
  %422 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %423 = extractvalue %dx.types.CBufRet.i32 %422, 0
  %424 = shl i32 %421, 3
  %425 = add i32 %423, %424
  %426 = mul i32 %42, 1664525
  %427 = mul i32 %43, 1664525
  %428 = mul i32 %44, 1664525
  %429 = mul i32 %425, 1664525
  %430 = add i32 %426, 1013904223
  %431 = add i32 %427, 1013904223
  %432 = add i32 %428, 1013904223
  %433 = add i32 %429, 1013904223
  %434 = mul i32 %433, %431
  %435 = add i32 %430, %434
  %436 = mul i32 %435, %432
  %437 = add i32 %436, %431
  %438 = mul i32 %437, %435
  %439 = add i32 %438, %432
  %440 = mul i32 %439, %437
  %441 = add i32 %440, %433
  %442 = lshr i32 %435, 16
  %443 = lshr i32 %437, 16
  %444 = lshr i32 %439, 16
  %445 = lshr i32 %441, 16
  %446 = xor i32 %442, %435
  %447 = xor i32 %443, %437
  %448 = xor i32 %444, %439
  %449 = xor i32 %445, %441
  %450 = mul i32 %449, %447
  %451 = add i32 %450, %446
  %452 = mul i32 %451, %448
  %453 = add i32 %452, %447
  %454 = mul i32 %453, %451
  %455 = add i32 %454, %448
  %456 = uitofp i32 %451 to float
  %457 = uitofp i32 %453 to float
  %458 = uitofp i32 %455 to float
  %459 = fmul fast float %456, 0x3E00000000000000
  %460 = fmul fast float %457, 0x3E00000000000000
  %461 = fmul fast float %458, 0x3E00000000000000
  %462 = fadd fast float %459, -1.000000e+00
  %463 = fadd fast float %460, -1.000000e+00
  %464 = fadd fast float %461, -1.000000e+00
  %465 = add nuw nsw i32 %421, 12
  %466 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %465)  ; CBufferLoadLegacy(handle,regIndex)
  %467 = extractvalue %dx.types.CBufRet.f32 %466, 0
  %468 = extractvalue %dx.types.CBufRet.f32 %466, 1
  %469 = extractvalue %dx.types.CBufRet.f32 %466, 2
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 3
  %472 = fmul fast float %462, %471
  %473 = fmul fast float %463, %471
  %474 = fmul fast float %464, %471
  %475 = fadd fast float %472, %467
  %476 = fadd fast float %473, %468
  %477 = fadd fast float %474, %469
  %478 = fadd fast float %475, %101
  %479 = fadd fast float %476, %102
  %480 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %481 = extractvalue %dx.types.CBufRet.f32 %480, 0
  %482 = extractvalue %dx.types.CBufRet.f32 %480, 1
  %483 = fdiv fast float %478, %481
  %484 = fdiv fast float %479, %482
  %485 = fmul fast float %483, 2.000000e+00
  %486 = fmul fast float %484, 2.000000e+00
  %487 = fadd fast float %485, -1.000000e+00
  %488 = fadd fast float %486, -1.000000e+00
  %489 = fsub fast float -0.000000e+00, %488
  %490 = fadd fast float %477, %105
  %491 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %492 = extractvalue %dx.types.CBufRet.f32 %491, 2
  %493 = fdiv fast float %490, %492
  %494 = call float @dx.op.unary.f32(i32 21, float %493)  ; Exp(value)
  %495 = extractvalue %dx.types.CBufRet.f32 %491, 1
  %496 = fsub fast float %494, %495
  %497 = extractvalue %dx.types.CBufRet.f32 %491, 0
  %498 = fdiv fast float %496, %497
  %499 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %500 = extractvalue %dx.types.CBufRet.f32 %499, 3
  %501 = fcmp fast ult float %500, 1.000000e+00
  br i1 %501, label %508, label %502, !dx.controlflow.hints !51

; <label>:502                                     ; preds = %417
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 2
  %505 = fmul fast float %504, %498
  %506 = extractvalue %dx.types.CBufRet.f32 %499, 2
  %507 = fadd fast float %505, %506
  br label %515

; <label>:508                                     ; preds = %417
  %509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %510 = extractvalue %dx.types.CBufRet.f32 %509, 3
  %511 = fadd fast float %510, %498
  %512 = extractvalue %dx.types.CBufRet.f32 %509, 2
  %513 = fmul fast float %511, %512
  %514 = fdiv fast float 1.000000e+00, %513
  br label %515

; <label>:515                                     ; preds = %508, %502
  %516 = phi float [ %507, %502 ], [ %514, %508 ]
  %517 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %518 = extractvalue %dx.types.CBufRet.f32 %517, 0
  %519 = extractvalue %dx.types.CBufRet.f32 %517, 1
  %520 = extractvalue %dx.types.CBufRet.f32 %517, 2
  %521 = extractvalue %dx.types.CBufRet.f32 %517, 3
  %522 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %523 = extractvalue %dx.types.CBufRet.f32 %522, 0
  %524 = extractvalue %dx.types.CBufRet.f32 %522, 1
  %525 = extractvalue %dx.types.CBufRet.f32 %522, 2
  %526 = extractvalue %dx.types.CBufRet.f32 %522, 3
  %527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %528 = extractvalue %dx.types.CBufRet.f32 %527, 0
  %529 = extractvalue %dx.types.CBufRet.f32 %527, 1
  %530 = extractvalue %dx.types.CBufRet.f32 %527, 2
  %531 = extractvalue %dx.types.CBufRet.f32 %527, 3
  %532 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %533 = extractvalue %dx.types.CBufRet.f32 %532, 0
  %534 = extractvalue %dx.types.CBufRet.f32 %532, 1
  %535 = extractvalue %dx.types.CBufRet.f32 %532, 2
  %536 = extractvalue %dx.types.CBufRet.f32 %532, 3
  %537 = fmul fast float %518, %487
  %538 = call float @dx.op.tertiary.f32(i32 46, float %489, float %523, float %537)  ; FMad(a,b,c)
  %539 = call float @dx.op.tertiary.f32(i32 46, float %516, float %528, float %538)  ; FMad(a,b,c)
  %540 = fadd fast float %539, %533
  %541 = fmul fast float %519, %487
  %542 = call float @dx.op.tertiary.f32(i32 46, float %489, float %524, float %541)  ; FMad(a,b,c)
  %543 = call float @dx.op.tertiary.f32(i32 46, float %516, float %529, float %542)  ; FMad(a,b,c)
  %544 = fadd fast float %543, %534
  %545 = fmul fast float %520, %487
  %546 = call float @dx.op.tertiary.f32(i32 46, float %489, float %525, float %545)  ; FMad(a,b,c)
  %547 = call float @dx.op.tertiary.f32(i32 46, float %516, float %530, float %546)  ; FMad(a,b,c)
  %548 = fadd fast float %547, %535
  %549 = fmul fast float %521, %487
  %550 = call float @dx.op.tertiary.f32(i32 46, float %489, float %526, float %549)  ; FMad(a,b,c)
  %551 = call float @dx.op.tertiary.f32(i32 46, float %516, float %531, float %550)  ; FMad(a,b,c)
  %552 = fadd fast float %551, %536
  %553 = fdiv fast float %540, %552
  %554 = fdiv fast float %544, %552
  %555 = fdiv fast float %548, %552
  %556 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %557 = extractvalue %dx.types.CBufRet.f32 %556, 0
  %558 = extractvalue %dx.types.CBufRet.f32 %556, 1
  %559 = extractvalue %dx.types.CBufRet.f32 %556, 2
  %560 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %561 = extractvalue %dx.types.CBufRet.f32 %560, 0
  %562 = extractvalue %dx.types.CBufRet.f32 %560, 1
  %563 = extractvalue %dx.types.CBufRet.f32 %560, 2
  %564 = fmul fast float %557, 2.097152e+06
  %565 = fmul fast float %558, 2.097152e+06
  %566 = fmul fast float %559, 2.097152e+06
  %567 = fadd fast float %564, %553
  %568 = fsub fast float %567, %561
  %569 = fadd fast float %565, %554
  %570 = fsub fast float %569, %562
  %571 = fadd fast float %566, %555
  %572 = fsub fast float %571, %563
  %573 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %574 = extractvalue %dx.types.CBufRet.f32 %573, 0
  %575 = extractvalue %dx.types.CBufRet.f32 %573, 1
  %576 = extractvalue %dx.types.CBufRet.f32 %573, 2
  %577 = fsub fast float %553, %574
  %578 = fsub fast float %554, %575
  %579 = fsub fast float %555, %576
  %580 = fmul fast float %577, %577
  %581 = fmul fast float %578, %578
  %582 = fadd fast float %580, %581
  %583 = fmul fast float %579, %579
  %584 = fadd fast float %582, %583
  %585 = call float @dx.op.unary.f32(i32 24, float %584)  ; Sqrt(value)
  %586 = fdiv fast float %577, %585
  %587 = fdiv fast float %578, %585
  %588 = fdiv fast float %579, %585
  %589 = icmp eq i32 %47, 0
  br i1 %589, label %590, label %592, !dx.controlflow.hints !52

; <label>:590                                     ; preds = %515
  %591 = extractvalue %dx.types.CBufRet.f32 %470, 1
  br label %788

; <label>:592                                     ; preds = %515
  %593 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %594 = extractvalue %dx.types.CBufRet.f32 %593, 2
  %595 = fcmp fast ogt float %594, 0.000000e+00
  br i1 %595, label %596, label %718

; <label>:596                                     ; preds = %592
  %597 = icmp eq i32 %77, 0
  br i1 %597, label %633, label %598, !dx.controlflow.hints !53

; <label>:598                                     ; preds = %596
  %599 = fmul fast float %553, %79
  %600 = call float @dx.op.tertiary.f32(i32 46, float %554, float %84, float %599)  ; FMad(a,b,c)
  %601 = call float @dx.op.tertiary.f32(i32 46, float %555, float %89, float %600)  ; FMad(a,b,c)
  %602 = fadd fast float %601, %94
  %603 = fmul fast float %553, %80
  %604 = call float @dx.op.tertiary.f32(i32 46, float %554, float %85, float %603)  ; FMad(a,b,c)
  %605 = call float @dx.op.tertiary.f32(i32 46, float %555, float %90, float %604)  ; FMad(a,b,c)
  %606 = fadd fast float %605, %95
  %607 = fmul fast float %553, %82
  %608 = call float @dx.op.tertiary.f32(i32 46, float %554, float %87, float %607)  ; FMad(a,b,c)
  %609 = call float @dx.op.tertiary.f32(i32 46, float %555, float %92, float %608)  ; FMad(a,b,c)
  %610 = fadd fast float %609, %97
  %611 = fdiv fast float %602, %610
  %612 = fdiv fast float %606, %610
  %613 = fcmp fast ole float %611, 1.000000e+00
  %614 = fcmp fast ole float %612, 1.000000e+00
  %615 = fcmp fast oge float %611, 0.000000e+00
  %616 = fcmp fast oge float %612, 0.000000e+00
  %617 = and i1 %615, %613
  %618 = and i1 %616, %614
  %619 = and i1 %617, %618
  br i1 %619, label %620, label %633

; <label>:620                                     ; preds = %598
  %621 = fmul fast float %553, %81
  %622 = call float @dx.op.tertiary.f32(i32 46, float %554, float %86, float %621)  ; FMad(a,b,c)
  %623 = call float @dx.op.tertiary.f32(i32 46, float %555, float %91, float %622)  ; FMad(a,b,c)
  %624 = fadd fast float %623, %96
  %625 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %626 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %627 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %625, %dx.types.Handle %626, float %611, float %612, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %628 = extractvalue %dx.types.ResRet.f32 %627, 0
  %629 = fcmp fast olt float %624, %628
  %630 = fcmp fast ogt float %628, 0x3FEFAE1480000000
  %631 = or i1 %629, %630
  %632 = uitofp i1 %631 to float
  br label %633

; <label>:633                                     ; preds = %620, %598, %596
  %634 = phi float [ %632, %620 ], [ 1.000000e+00, %598 ], [ 1.000000e+00, %596 ]
  %635 = icmp eq i32 %68, 0
  br i1 %635, label %715, label %636

; <label>:636                                     ; preds = %633
  %637 = fcmp fast oge float %498, %70
  %638 = fcmp fast oge float %498, %71
  %639 = fcmp fast oge float %498, %72
  %640 = fcmp fast oge float %498, %73
  %641 = zext i1 %637 to i32
  %642 = zext i1 %638 to i32
  %643 = zext i1 %639 to i32
  %644 = zext i1 %640 to i32
  %645 = add nuw nsw i32 %641, %642
  %646 = add nuw nsw i32 %645, %643
  %647 = add nuw nsw i32 %646, %644
  %648 = icmp ult i32 %647, %68
  br i1 %648, label %649, label %715

; <label>:649                                     ; preds = %636
  %650 = shl nuw nsw i32 %647, 2
  %651 = add nuw nsw i32 %650, 9
  %652 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %651)  ; CBufferLoadLegacy(handle,regIndex)
  %653 = extractvalue %dx.types.CBufRet.f32 %652, 0
  %654 = extractvalue %dx.types.CBufRet.f32 %652, 1
  %655 = extractvalue %dx.types.CBufRet.f32 %652, 3
  %656 = add nuw nsw i32 %650, 10
  %657 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %656)  ; CBufferLoadLegacy(handle,regIndex)
  %658 = extractvalue %dx.types.CBufRet.f32 %657, 0
  %659 = extractvalue %dx.types.CBufRet.f32 %657, 1
  %660 = extractvalue %dx.types.CBufRet.f32 %657, 3
  %661 = add nuw nsw i32 %650, 11
  %662 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %661)  ; CBufferLoadLegacy(handle,regIndex)
  %663 = extractvalue %dx.types.CBufRet.f32 %662, 0
  %664 = extractvalue %dx.types.CBufRet.f32 %662, 1
  %665 = extractvalue %dx.types.CBufRet.f32 %662, 3
  %666 = add nuw nsw i32 %650, 12
  %667 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %666)  ; CBufferLoadLegacy(handle,regIndex)
  %668 = extractvalue %dx.types.CBufRet.f32 %667, 0
  %669 = extractvalue %dx.types.CBufRet.f32 %667, 1
  %670 = extractvalue %dx.types.CBufRet.f32 %667, 3
  %671 = fmul fast float %653, %553
  %672 = call float @dx.op.tertiary.f32(i32 46, float %554, float %658, float %671)  ; FMad(a,b,c)
  %673 = call float @dx.op.tertiary.f32(i32 46, float %555, float %663, float %672)  ; FMad(a,b,c)
  %674 = fadd fast float %673, %668
  %675 = fmul fast float %654, %553
  %676 = call float @dx.op.tertiary.f32(i32 46, float %554, float %659, float %675)  ; FMad(a,b,c)
  %677 = call float @dx.op.tertiary.f32(i32 46, float %555, float %664, float %676)  ; FMad(a,b,c)
  %678 = fadd fast float %677, %669
  %679 = fmul fast float %655, %553
  %680 = call float @dx.op.tertiary.f32(i32 46, float %554, float %660, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %555, float %665, float %680)  ; FMad(a,b,c)
  %682 = fadd fast float %681, %670
  %683 = fdiv fast float %674, %682
  %684 = fdiv fast float %678, %682
  %685 = add nuw nsw i32 %647, 25
  %686 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %685)  ; CBufferLoadLegacy(handle,regIndex)
  %687 = extractvalue %dx.types.CBufRet.f32 %686, 0
  %688 = extractvalue %dx.types.CBufRet.f32 %686, 1
  %689 = extractvalue %dx.types.CBufRet.f32 %686, 2
  %690 = extractvalue %dx.types.CBufRet.f32 %686, 3
  %691 = fcmp fast ole float %683, %689
  %692 = fcmp fast ole float %684, %690
  %693 = fcmp fast oge float %683, %687
  %694 = fcmp fast oge float %684, %688
  %695 = and i1 %693, %691
  %696 = and i1 %694, %692
  %697 = and i1 %695, %696
  br i1 %697, label %698, label %715

; <label>:698                                     ; preds = %649
  %699 = extractvalue %dx.types.CBufRet.f32 %667, 2
  %700 = extractvalue %dx.types.CBufRet.f32 %662, 2
  %701 = extractvalue %dx.types.CBufRet.f32 %657, 2
  %702 = extractvalue %dx.types.CBufRet.f32 %652, 2
  %703 = fmul fast float %702, %553
  %704 = call float @dx.op.tertiary.f32(i32 46, float %554, float %701, float %703)  ; FMad(a,b,c)
  %705 = call float @dx.op.tertiary.f32(i32 46, float %555, float %700, float %704)  ; FMad(a,b,c)
  %706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %707 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %708 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %706, %dx.types.Handle %707, float %683, float %684, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %709 = extractvalue %dx.types.ResRet.f32 %708, 0
  %710 = fsub fast float 1.000000e+00, %699
  %711 = fsub fast float %710, %705
  %712 = fsub fast float %709, %75
  %713 = fcmp fast olt float %711, %712
  %714 = uitofp i1 %713 to float
  br label %715

; <label>:715                                     ; preds = %698, %649, %636, %633
  %716 = phi float [ %714, %698 ], [ 1.000000e+00, %649 ], [ 1.000000e+00, %636 ], [ 1.000000e+00, %633 ]
  %717 = fmul fast float %716, %634
  br label %718

; <label>:718                                     ; preds = %715, %592
  %719 = phi float [ %717, %715 ], [ 1.000000e+00, %592 ]
  %720 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %721 = extractvalue %dx.types.CBufRet.f32 %720, 0
  %722 = extractvalue %dx.types.CBufRet.f32 %720, 1
  %723 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %724 = extractvalue %dx.types.CBufRet.f32 %723, 0
  %725 = extractvalue %dx.types.CBufRet.f32 %723, 1
  %726 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %727 = extractvalue %dx.types.CBufRet.f32 %726, 0
  %728 = extractvalue %dx.types.CBufRet.f32 %726, 1
  %729 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %730 = extractvalue %dx.types.CBufRet.f32 %729, 0
  %731 = extractvalue %dx.types.CBufRet.f32 %729, 1
  %732 = fmul fast float %721, %553
  %733 = call float @dx.op.tertiary.f32(i32 46, float %554, float %724, float %732)  ; FMad(a,b,c)
  %734 = call float @dx.op.tertiary.f32(i32 46, float %555, float %727, float %733)  ; FMad(a,b,c)
  %735 = fadd fast float %734, %730
  %736 = fmul fast float %722, %553
  %737 = call float @dx.op.tertiary.f32(i32 46, float %554, float %725, float %736)  ; FMad(a,b,c)
  %738 = call float @dx.op.tertiary.f32(i32 46, float %555, float %728, float %737)  ; FMad(a,b,c)
  %739 = fadd fast float %738, %731
  %740 = fmul fast float %735, 5.000000e-01
  %741 = fmul fast float %739, 5.000000e-01
  %742 = fadd fast float %740, 5.000000e-01
  %743 = fsub fast float 5.000000e-01, %741
  %744 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %745 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %746 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %744, %dx.types.Handle %745, float %742, float %743, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %747 = extractvalue %dx.types.ResRet.f32 %746, 0
  %748 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %749 = extractvalue %dx.types.CBufRet.f32 %748, 2
  %750 = fcmp fast ogt float %749, 0.000000e+00
  br i1 %750, label %751, label %760

; <label>:751                                     ; preds = %718
  %752 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %753 = extractvalue %dx.types.CBufRet.f32 %752, 0
  %754 = extractvalue %dx.types.CBufRet.f32 %752, 1
  %755 = extractvalue %dx.types.CBufRet.f32 %752, 2
  %756 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %757 = fmul fast float %753, %756
  %758 = fmul fast float %754, %756
  %759 = fmul fast float %755, %756
  br label %760

; <label>:760                                     ; preds = %751, %718
  %761 = phi float [ %757, %751 ], [ %63, %718 ]
  %762 = phi float [ %758, %751 ], [ %64, %718 ]
  %763 = phi float [ %759, %751 ], [ %65, %718 ]
  %764 = fsub fast float -0.000000e+00, %586
  %765 = fsub fast float -0.000000e+00, %587
  %766 = fsub fast float -0.000000e+00, %588
  %767 = call float @dx.op.dot3.f32(i32 55, float %59, float %60, float %61, float %764, float %765, float %766)  ; Dot3(ax,ay,az,bx,by,bz)
  %768 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %769 = fmul fast float %768, %768
  %770 = fsub fast float 1.000000e+00, %769
  %771 = fmul fast float %767, 2.000000e+00
  %772 = fadd fast float %771, %768
  %773 = fmul fast float %772, %768
  %774 = fadd fast float %773, 1.000000e+00
  %775 = call float @dx.op.unary.f32(i32 24, float %774)  ; Sqrt(value)
  %776 = fmul fast float %775, 0x402921FB60000000
  %777 = fmul fast float %776, %774
  %778 = fdiv fast float %770, %777
  %779 = fmul fast float %719, %66
  %780 = fmul fast float %779, %747
  %781 = fmul fast float %780, %778
  %782 = fmul fast float %781, %761
  %783 = fmul fast float %781, %762
  %784 = fmul fast float %781, %763
  %785 = fadd fast float %782, %418
  %786 = fadd fast float %783, %419
  %787 = fadd fast float %784, %420
  br label %788

; <label>:788                                     ; preds = %760, %590
  %789 = phi float [ %591, %590 ], [ %768, %760 ]
  %790 = phi float [ %418, %590 ], [ %785, %760 ]
  %791 = phi float [ %419, %590 ], [ %786, %760 ]
  %792 = phi float [ %420, %590 ], [ %787, %760 ]
  %793 = fmul fast float %789, %587
  %794 = fmul fast float %789, %588
  %795 = fmul fast float %789, %586
  %796 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %797 = extractvalue %dx.types.CBufRet.f32 %796, 3
  %798 = fcmp fast ogt float %797, 0.000000e+00
  %799 = extractvalue %dx.types.CBufRet.f32 %796, 2
  %800 = fcmp fast ogt float %799, 0.000000e+00
  %801 = or i1 %798, %800
  br i1 %801, label %802, label %870

; <label>:802                                     ; preds = %788
  %803 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %804 = extractvalue %dx.types.CBufRet.f32 %803, 0
  %805 = extractvalue %dx.types.CBufRet.f32 %803, 1
  %806 = extractvalue %dx.types.CBufRet.f32 %803, 2
  %807 = fmul fast float %804, %568
  %808 = fmul fast float %805, %570
  %809 = fmul fast float %806, %572
  %810 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %811 = extractvalue %dx.types.CBufRet.f32 %810, 0
  %812 = extractvalue %dx.types.CBufRet.f32 %810, 1
  %813 = extractvalue %dx.types.CBufRet.f32 %810, 2
  %814 = fadd fast float %807, %811
  %815 = fadd fast float %808, %812
  %816 = fadd fast float %809, %813
  %817 = call float @dx.op.binary.f32(i32 35, float %814, float 0.000000e+00)  ; FMax(a,b)
  %818 = call float @dx.op.binary.f32(i32 35, float %815, float 0.000000e+00)  ; FMax(a,b)
  %819 = call float @dx.op.binary.f32(i32 35, float %816, float 0.000000e+00)  ; FMax(a,b)
  %820 = call float @dx.op.binary.f32(i32 36, float %817, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %821 = call float @dx.op.binary.f32(i32 36, float %818, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %822 = call float @dx.op.binary.f32(i32 36, float %819, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %823 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %824 = extractvalue %dx.types.CBufRet.f32 %823, 0
  %825 = extractvalue %dx.types.CBufRet.f32 %823, 1
  %826 = extractvalue %dx.types.CBufRet.f32 %823, 2
  %827 = fmul fast float %824, %820
  %828 = fmul fast float %825, %821
  %829 = fmul fast float %826, %822
  %830 = fptosi float %827 to i32
  %831 = fptosi float %828 to i32
  %832 = fptosi float %829 to i32
  %833 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %834 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %833, i32 0, i32 %830, i32 %831, i32 %832, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %835 = extractvalue %dx.types.ResRet.i32 %834, 0
  %836 = extractvalue %dx.types.ResRet.i32 %834, 1
  %837 = extractvalue %dx.types.ResRet.i32 %834, 2
  %838 = extractvalue %dx.types.ResRet.i32 %834, 3
  %839 = uitofp i32 %835 to float
  %840 = uitofp i32 %836 to float
  %841 = uitofp i32 %837 to float
  %842 = uitofp i32 %838 to float
  %843 = extractvalue %dx.types.CBufRet.f32 %823, 3
  %844 = fadd fast float %843, 1.000000e+00
  %845 = fmul fast float %844, %839
  %846 = fmul fast float %844, %840
  %847 = fmul fast float %844, %841
  %848 = fdiv fast float %827, %842
  %849 = fdiv fast float %828, %842
  %850 = fdiv fast float %829, %842
  %851 = call float @dx.op.unary.f32(i32 22, float %848)  ; Frc(value)
  %852 = call float @dx.op.unary.f32(i32 22, float %849)  ; Frc(value)
  %853 = call float @dx.op.unary.f32(i32 22, float %850)  ; Frc(value)
  %854 = fmul fast float %843, %851
  %855 = fmul fast float %843, %852
  %856 = fmul fast float %843, %853
  %857 = fadd fast float %845, 5.000000e-01
  %858 = fadd fast float %857, %854
  %859 = fadd fast float %846, 5.000000e-01
  %860 = fadd fast float %859, %855
  %861 = fadd fast float %847, 5.000000e-01
  %862 = fadd fast float %861, %856
  %863 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %864 = extractvalue %dx.types.CBufRet.f32 %863, 0
  %865 = extractvalue %dx.types.CBufRet.f32 %863, 1
  %866 = extractvalue %dx.types.CBufRet.f32 %863, 2
  %867 = fmul fast float %858, %864
  %868 = fmul fast float %860, %865
  %869 = fmul fast float %862, %866
  br label %870

; <label>:870                                     ; preds = %802, %788
  %871 = phi float [ %867, %802 ], [ 0.000000e+00, %788 ]
  %872 = phi float [ %868, %802 ], [ 0.000000e+00, %788 ]
  %873 = phi float [ %869, %802 ], [ 0.000000e+00, %788 ]
  br i1 %798, label %874, label %1210

; <label>:874                                     ; preds = %870
  %875 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %876 = extractvalue %dx.types.CBufRet.f32 %875, 3
  %877 = fcmp fast ogt float %876, 0.000000e+00
  br i1 %877, label %878, label %956

; <label>:878                                     ; preds = %874
  %879 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %880 = extractvalue %dx.types.CBufRet.f32 %879, 0
  %881 = extractvalue %dx.types.CBufRet.f32 %879, 1
  %882 = extractvalue %dx.types.CBufRet.f32 %879, 2
  %883 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %884 = extractvalue %dx.types.CBufRet.f32 %883, 2
  %885 = fcmp fast ogt float %884, 0.000000e+00
  br i1 %885, label %886, label %922, !dx.controlflow.hints !54

; <label>:886                                     ; preds = %878
  %887 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %888 = extractvalue %dx.types.CBufRet.f32 %887, 0
  %889 = fmul fast float %888, %585
  %890 = extractvalue %dx.types.CBufRet.f32 %887, 1
  %891 = fadd fast float %889, %890
  %892 = call float @dx.op.unary.f32(i32 7, float %891)  ; Saturate(value)
  %893 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %894 = extractvalue %dx.types.CBufRet.f32 %893, 1
  %895 = extractvalue %dx.types.CBufRet.f32 %893, 0
  %896 = fsub fast float -0.000000e+00, %895
  %897 = call float @dx.op.dot2.f32(i32 54, float %586, float %587, float %894, float %896)  ; Dot2(ax,ay,bx,by)
  %898 = call float @dx.op.dot2.f32(i32 54, float %586, float %587, float %895, float %894)  ; Dot2(ax,ay,bx,by)
  %899 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %900 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %901 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %899, %dx.types.Handle %900, float %897, float %898, float %588, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %902 = extractvalue %dx.types.ResRet.f32 %901, 0
  %903 = extractvalue %dx.types.ResRet.f32 %901, 1
  %904 = extractvalue %dx.types.ResRet.f32 %901, 2
  %905 = extractvalue %dx.types.CBufRet.f32 %887, 2
  %906 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %899, %dx.types.Handle %900, float %897, float %898, float %588, float undef, i32 undef, i32 undef, i32 undef, float %905)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %907 = extractvalue %dx.types.ResRet.f32 %906, 0
  %908 = extractvalue %dx.types.ResRet.f32 %906, 1
  %909 = extractvalue %dx.types.ResRet.f32 %906, 2
  %910 = fsub fast float %902, %907
  %911 = fsub fast float %903, %908
  %912 = fsub fast float %904, %909
  %913 = fmul fast float %910, %892
  %914 = fmul fast float %911, %892
  %915 = fmul fast float %912, %892
  %916 = fadd fast float %913, %907
  %917 = fadd fast float %914, %908
  %918 = fadd fast float %915, %909
  %919 = fmul fast float %916, %880
  %920 = fmul fast float %917, %881
  %921 = fmul fast float %918, %882
  br label %922

; <label>:922                                     ; preds = %886, %878
  %923 = phi float [ %919, %886 ], [ %880, %878 ]
  %924 = phi float [ %920, %886 ], [ %881, %878 ]
  %925 = phi float [ %921, %886 ], [ %882, %878 ]
  %926 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %927 = extractvalue %dx.types.CBufRet.f32 %926, 0
  %928 = extractvalue %dx.types.CBufRet.f32 %926, 1
  %929 = extractvalue %dx.types.CBufRet.f32 %926, 2
  %930 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %931 = extractvalue %dx.types.CBufRet.f32 %930, 1
  %932 = fmul fast float %931, %927
  %933 = fmul fast float %931, %928
  %934 = fmul fast float %931, %929
  %935 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %936 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %937 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %935, %dx.types.Handle %936, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %938 = extractvalue %dx.types.ResRet.f32 %937, 0
  %939 = extractvalue %dx.types.ResRet.f32 %937, 1
  %940 = extractvalue %dx.types.ResRet.f32 %937, 2
  %941 = fmul fast float %932, %938
  %942 = fmul fast float %933, %939
  %943 = fmul fast float %934, %940
  %944 = fadd fast float %941, %923
  %945 = fadd fast float %942, %924
  %946 = fadd fast float %943, %925
  %947 = fmul fast float %944, 0x3FD20DD740000000
  %948 = fmul fast float %945, 0x3FD20DD740000000
  %949 = fmul fast float %946, 0x3FD20DD740000000
  %950 = call float @dx.op.dot4.f32(i32 56, float %947, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %951 = call float @dx.op.dot4.f32(i32 56, float %948, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %952 = call float @dx.op.dot4.f32(i32 56, float %949, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %953 = call float @dx.op.binary.f32(i32 35, float %950, float 0.000000e+00)  ; FMax(a,b)
  %954 = call float @dx.op.binary.f32(i32 35, float %951, float 0.000000e+00)  ; FMax(a,b)
  %955 = call float @dx.op.binary.f32(i32 35, float %952, float 0.000000e+00)  ; FMax(a,b)
  br label %988

; <label>:956                                     ; preds = %874
  %957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %958 = extractvalue %dx.types.CBufRet.f32 %957, 0
  %959 = extractvalue %dx.types.CBufRet.f32 %957, 1
  %960 = extractvalue %dx.types.CBufRet.f32 %957, 2
  %961 = extractvalue %dx.types.CBufRet.f32 %957, 3
  %962 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %963 = extractvalue %dx.types.CBufRet.f32 %962, 0
  %964 = extractvalue %dx.types.CBufRet.f32 %962, 1
  %965 = extractvalue %dx.types.CBufRet.f32 %962, 2
  %966 = extractvalue %dx.types.CBufRet.f32 %962, 3
  %967 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %968 = extractvalue %dx.types.CBufRet.f32 %967, 0
  %969 = extractvalue %dx.types.CBufRet.f32 %967, 1
  %970 = extractvalue %dx.types.CBufRet.f32 %967, 2
  %971 = extractvalue %dx.types.CBufRet.f32 %967, 3
  %972 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %973 = extractvalue %dx.types.CBufRet.f32 %972, 0
  %974 = extractvalue %dx.types.CBufRet.f32 %972, 1
  %975 = extractvalue %dx.types.CBufRet.f32 %972, 2
  %976 = call float @dx.op.dot4.f32(i32 56, float %958, float %959, float %960, float %961, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %977 = call float @dx.op.dot4.f32(i32 56, float %963, float %964, float %965, float %966, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %978 = call float @dx.op.dot4.f32(i32 56, float %968, float %969, float %970, float %971, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %979 = call float @dx.op.binary.f32(i32 35, float %976, float 0.000000e+00)  ; FMax(a,b)
  %980 = call float @dx.op.binary.f32(i32 35, float %977, float 0.000000e+00)  ; FMax(a,b)
  %981 = call float @dx.op.binary.f32(i32 35, float %978, float 0.000000e+00)  ; FMax(a,b)
  %982 = fmul fast float %973, 0x3FD45F3060000000
  %983 = fmul fast float %982, %979
  %984 = fmul fast float %974, 0x3FD45F3060000000
  %985 = fmul fast float %984, %980
  %986 = fmul fast float %975, 0x3FD45F3060000000
  %987 = fmul fast float %986, %981
  br label %988

; <label>:988                                     ; preds = %956, %922
  %989 = phi float [ %953, %922 ], [ %983, %956 ]
  %990 = phi float [ %954, %922 ], [ %985, %956 ]
  %991 = phi float [ %955, %922 ], [ %987, %956 ]
  %992 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %993 = extractvalue %dx.types.CBufRet.i32 %992, 2
  %994 = icmp eq i32 %993, 0
  br i1 %994, label %1037, label %995

; <label>:995                                     ; preds = %988
  br label %996

; <label>:996                                     ; preds = %1030, %995
  %997 = phi i32 [ %1031, %1030 ], [ 0, %995 ]
  %998 = add i32 %997, 41
  %999 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %998)  ; CBufferLoadLegacy(handle,regIndex)
  %1000 = extractvalue %dx.types.CBufRet.f32 %999, 3
  %1001 = extractvalue %dx.types.CBufRet.f32 %999, 0
  %1002 = extractvalue %dx.types.CBufRet.f32 %999, 1
  %1003 = extractvalue %dx.types.CBufRet.f32 %999, 2
  %1004 = fadd fast float %1000, %553
  %1005 = fsub fast float %1004, %1001
  %1006 = fadd fast float %1000, %554
  %1007 = fsub fast float %1006, %1002
  %1008 = fadd fast float %1000, %555
  %1009 = fsub fast float %1008, %1003
  %1010 = call float @dx.op.binary.f32(i32 35, float %1005, float 0.000000e+00)  ; FMax(a,b)
  %1011 = call float @dx.op.binary.f32(i32 35, float %1007, float 0.000000e+00)  ; FMax(a,b)
  %1012 = call float @dx.op.binary.f32(i32 35, float %1009, float 0.000000e+00)  ; FMax(a,b)
  %1013 = fsub fast float %1000, %553
  %1014 = fadd fast float %1013, %1001
  %1015 = fsub fast float %1000, %554
  %1016 = fadd fast float %1015, %1002
  %1017 = fsub fast float %1000, %555
  %1018 = fadd fast float %1017, %1003
  %1019 = call float @dx.op.binary.f32(i32 35, float %1014, float 0.000000e+00)  ; FMax(a,b)
  %1020 = call float @dx.op.binary.f32(i32 35, float %1016, float 0.000000e+00)  ; FMax(a,b)
  %1021 = call float @dx.op.binary.f32(i32 35, float %1018, float 0.000000e+00)  ; FMax(a,b)
  %1022 = call float @dx.op.binary.f32(i32 36, float %1010, float %1019)  ; FMin(a,b)
  %1023 = call float @dx.op.binary.f32(i32 36, float %1011, float %1020)  ; FMin(a,b)
  %1024 = call float @dx.op.binary.f32(i32 36, float %1012, float %1021)  ; FMin(a,b)
  %1025 = call float @dx.op.binary.f32(i32 36, float %1023, float %1024)  ; FMin(a,b)
  %1026 = call float @dx.op.binary.f32(i32 36, float %1022, float %1025)  ; FMin(a,b)
  %1027 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1028 = extractvalue %dx.types.CBufRet.f32 %1027, 0
  %1029 = fcmp fast ogt float %1026, %1028
  br i1 %1029, label %1035, label %1030

; <label>:1030                                    ; preds = %996
  %1031 = add i32 %997, 1
  %1032 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1033 = extractvalue %dx.types.CBufRet.i32 %1032, 2
  %1034 = icmp ult i32 %1031, %1033
  br i1 %1034, label %996, label %1035

; <label>:1035                                    ; preds = %1030, %996
  %1036 = phi i32 [ -1, %1030 ], [ %997, %996 ]
  br label %1037

; <label>:1037                                    ; preds = %1035, %988
  %1038 = phi i32 [ -1, %988 ], [ %1036, %1035 ]
  %1039 = icmp sgt i32 %1038, -1
  br i1 %1039, label %1040, label %1178

; <label>:1040                                    ; preds = %1037
  %1041 = add i32 %1038, 41
  %1042 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1041)  ; CBufferLoadLegacy(handle,regIndex)
  %1043 = extractvalue %dx.types.CBufRet.f32 %1042, 3
  %1044 = fmul fast float %1043, 0x3F947AE140000000
  %1045 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1046 = extractvalue %dx.types.CBufRet.f32 %1045, 0
  %1047 = fdiv fast float 1.000000e+00, %1046
  br label %1048

; <label>:1048                                    ; preds = %1160, %1040
  %1049 = phi float [ 1.000000e+00, %1040 ], [ %1173, %1160 ]
  %1050 = phi float [ 2.000000e+00, %1040 ], [ %1175, %1160 ]
  %1051 = phi i32 [ 0, %1040 ], [ %1176, %1160 ]
  %1052 = icmp ult i32 %1051, 10
  br i1 %1052, label %1053, label %1057

; <label>:1053                                    ; preds = %1048
  %1054 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1055 = extractvalue %dx.types.CBufRet.f32 %1054, 0
  %1056 = fcmp fast olt float %1050, %1055
  br label %1057

; <label>:1057                                    ; preds = %1053, %1048
  %1058 = phi i1 [ false, %1048 ], [ %1056, %1053 ]
  br i1 %1058, label %1059, label %1177

; <label>:1059                                    ; preds = %1057
  %1060 = fadd fast float %1050, %555
  %1061 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %1062 = extractvalue %dx.types.CBufRet.f32 %1061, 0
  %1063 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1064 = extractvalue %dx.types.CBufRet.i32 %1063, 2
  %1065 = icmp ult i32 %1038, %1064
  br i1 %1065, label %1066, label %1160

; <label>:1066                                    ; preds = %1059
  br label %1067

; <label>:1067                                    ; preds = %1154, %1066
  %1068 = phi i32 [ %1155, %1154 ], [ %1038, %1066 ]
  %1069 = add i32 %1068, 47
  %1070 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1069)  ; CBufferLoadLegacy(handle,regIndex)
  %1071 = extractvalue %dx.types.CBufRet.f32 %1070, 0
  %1072 = extractvalue %dx.types.CBufRet.f32 %1070, 1
  %1073 = extractvalue %dx.types.CBufRet.f32 %1070, 2
  %1074 = extractvalue %dx.types.CBufRet.f32 %1070, 3
  %1075 = fmul fast float %1074, %553
  %1076 = fmul fast float %1074, %554
  %1077 = fmul fast float %1074, %1060
  %1078 = fadd fast float %1075, %1071
  %1079 = fadd fast float %1076, %1072
  %1080 = fadd fast float %1077, %1073
  %1081 = call float @dx.op.unary.f32(i32 22, float %1078)  ; Frc(value)
  %1082 = call float @dx.op.unary.f32(i32 22, float %1079)  ; Frc(value)
  %1083 = call float @dx.op.unary.f32(i32 22, float %1080)  ; Frc(value)
  %1084 = call float @dx.op.unary.f32(i32 22, float %1081)  ; Frc(value)
  %1085 = call float @dx.op.unary.f32(i32 22, float %1082)  ; Frc(value)
  %1086 = call float @dx.op.unary.f32(i32 22, float %1083)  ; Frc(value)
  %1087 = call float @dx.op.unary.f32(i32 7, float %1084)  ; Saturate(value)
  %1088 = call float @dx.op.unary.f32(i32 7, float %1085)  ; Saturate(value)
  %1089 = call float @dx.op.unary.f32(i32 7, float %1086)  ; Saturate(value)
  %1090 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %1091 = extractvalue %dx.types.CBufRet.i32 %1090, 2
  %1092 = uitofp i32 %1091 to float
  %1093 = fmul fast float %1092, %1087
  %1094 = fmul fast float %1092, %1088
  %1095 = fmul fast float %1092, %1089
  %1096 = mul i32 %1091, %1068
  %1097 = sitofp i32 %1096 to float
  %1098 = fadd fast float %1097, %1095
  %1099 = fptosi float %1093 to i32
  %1100 = fptosi float %1094 to i32
  %1101 = fptosi float %1098 to i32
  %1102 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %1103 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1102, i32 0, i32 %1099, i32 %1100, i32 %1101, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1104 = extractvalue %dx.types.ResRet.i32 %1103, 0
  %1105 = icmp eq i32 %1104, -1
  br i1 %1105, label %1154, label %1106

; <label>:1106                                    ; preds = %1067
  %1107 = fmul fast float %1092, %1084
  %1108 = fmul fast float %1092, %1085
  %1109 = fmul fast float %1092, %1086
  %1110 = call float @dx.op.unary.f32(i32 22, float %1107)  ; Frc(value)
  %1111 = call float @dx.op.unary.f32(i32 22, float %1108)  ; Frc(value)
  %1112 = call float @dx.op.unary.f32(i32 22, float %1109)  ; Frc(value)
  %1113 = shl i32 %1104, 3
  %1114 = and i32 %1113, 1016
  %1115 = lshr i32 %1104, 4
  %1116 = and i32 %1115, 1016
  %1117 = lshr i32 %1104, 11
  %1118 = and i32 %1117, 8184
  %1119 = uitofp i32 %1114 to float
  %1120 = uitofp i32 %1116 to float
  %1121 = uitofp i32 %1118 to float
  %1122 = fmul fast float %1110, 7.000000e+00
  %1123 = fmul fast float %1111, 7.000000e+00
  %1124 = fmul fast float %1112, 7.000000e+00
  %1125 = fadd fast float %1119, 5.000000e-01
  %1126 = fadd fast float %1125, %1122
  %1127 = fadd fast float %1120, 5.000000e-01
  %1128 = fadd fast float %1127, %1123
  %1129 = fadd fast float %1121, 5.000000e-01
  %1130 = fadd fast float %1129, %1124
  %1131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %1132 = extractvalue %dx.types.CBufRet.f32 %1131, 0
  %1133 = extractvalue %dx.types.CBufRet.f32 %1131, 1
  %1134 = extractvalue %dx.types.CBufRet.f32 %1131, 2
  %1135 = fmul fast float %1132, %1126
  %1136 = fmul fast float %1128, %1133
  %1137 = fmul fast float %1130, %1134
  %1138 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1139 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1140 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1138, %dx.types.Handle %1139, float %1135, float %1136, float %1137, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1141 = extractvalue %dx.types.ResRet.f32 %1140, 0
  %1142 = fcmp fast olt float %1141, 1.000000e+00
  br i1 %1142, label %1143, label %1154

; <label>:1143                                    ; preds = %1106
  %1144 = add i32 %1068, 41
  %1145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 %1144)  ; CBufferLoadLegacy(handle,regIndex)
  %1146 = extractvalue %dx.types.CBufRet.f32 %1145, 3
  %1147 = fmul fast float %1146, 8.000000e+00
  %1148 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1149 = extractvalue %dx.types.CBufRet.f32 %1148, 0
  %1150 = fmul fast float %1147, %1149
  %1151 = fmul fast float %1141, 2.000000e+00
  %1152 = fadd fast float %1151, -1.000000e+00
  %1153 = fmul fast float %1150, %1152
  br label %1160

; <label>:1154                                    ; preds = %1106, %1067
  %1155 = add i32 %1068, 1
  %1156 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %1157 = extractvalue %dx.types.CBufRet.i32 %1156, 2
  %1158 = icmp ult i32 %1155, %1157
  br i1 %1158, label %1067, label %1159

; <label>:1159                                    ; preds = %1154
  br label %1160

; <label>:1160                                    ; preds = %1159, %1143, %1059
  %1161 = phi float [ %1153, %1143 ], [ %1062, %1059 ], [ %1062, %1159 ]
  %1162 = bitcast float %1050 to i32
  %1163 = sub nsw i32 2129859010, %1162
  %1164 = bitcast i32 %1163 to float
  %1165 = fmul fast float %1161, %1164
  %1166 = call float @dx.op.unary.f32(i32 7, float %1165)  ; Saturate(value)
  %1167 = fadd fast float %1161, %1050
  %1168 = fmul fast float %1167, %1047
  %1169 = fmul fast float %1168, %1168
  %1170 = fmul fast float %1169, 0x3FE3333340000000
  %1171 = call float @dx.op.unary.f32(i32 7, float %1170)  ; Saturate(value)
  %1172 = call float @dx.op.binary.f32(i32 35, float %1166, float %1171)  ; FMax(a,b)
  %1173 = call float @dx.op.binary.f32(i32 36, float %1049, float %1172)  ; FMin(a,b)
  %1174 = call float @dx.op.binary.f32(i32 35, float %1161, float %1044)  ; FMax(a,b)
  %1175 = fadd fast float %1174, %1050
  %1176 = add i32 %1051, 1
  br label %1048, !llvm.loop !55

; <label>:1177                                    ; preds = %1057
  br label %1178

; <label>:1178                                    ; preds = %1177, %1037
  %1179 = phi float [ 1.000000e+00, %1037 ], [ %1049, %1177 ]
  %1180 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %1181 = fcmp fast ogt float %1180, 0.000000e+00
  br i1 %1181, label %1182, label %1201

; <label>:1182                                    ; preds = %1178
  %1183 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1184 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1185 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1183, %dx.types.Handle %1184, float %871, float %872, float %873, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1186 = extractvalue %dx.types.ResRet.f32 %1185, 0
  %1187 = extractvalue %dx.types.ResRet.f32 %1185, 1
  %1188 = extractvalue %dx.types.ResRet.f32 %1185, 2
  %1189 = fmul fast float %1186, 2.000000e+00
  %1190 = fmul fast float %1187, 2.000000e+00
  %1191 = fmul fast float %1188, 2.000000e+00
  %1192 = fadd fast float %1189, -1.000000e+00
  %1193 = fadd fast float %1190, -1.000000e+00
  %1194 = fadd fast float %1191, -1.000000e+00
  %1195 = fmul fast float %1192, %1192
  %1196 = fmul fast float %1193, %1193
  %1197 = fadd fast float %1195, %1196
  %1198 = fmul fast float %1194, %1194
  %1199 = fadd fast float %1197, %1198
  %1200 = call float @dx.op.unary.f32(i32 24, float %1199)  ; Sqrt(value)
  br label %1201

; <label>:1201                                    ; preds = %1182, %1178
  %1202 = phi float [ %1200, %1182 ], [ %1179, %1178 ]
  %1203 = fmul fast float %797, %1202
  %1204 = fmul fast float %1203, %989
  %1205 = fmul fast float %1203, %990
  %1206 = fmul fast float %1203, %991
  %1207 = fadd fast float %1204, %790
  %1208 = fadd fast float %1205, %791
  %1209 = fadd fast float %1206, %792
  br label %1210

; <label>:1210                                    ; preds = %1201, %870
  %1211 = phi float [ %1207, %1201 ], [ %790, %870 ]
  %1212 = phi float [ %1208, %1201 ], [ %791, %870 ]
  %1213 = phi float [ %1209, %1201 ], [ %792, %870 ]
  %1214 = extractvalue %dx.types.CBufRet.f32 %796, 2
  %1215 = fcmp fast ogt float %1214, 0.000000e+00
  br i1 %1215, label %1216, label %1281

; <label>:1216                                    ; preds = %1210
  %1217 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1219 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1217, %dx.types.Handle %1218, float %871, float %872, float %873, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1220 = extractvalue %dx.types.ResRet.f32 %1219, 0
  %1221 = extractvalue %dx.types.ResRet.f32 %1219, 1
  %1222 = extractvalue %dx.types.ResRet.f32 %1219, 2
  %1223 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1224 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1223, %dx.types.Handle %1218, float %871, float %872, float %873, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1225 = extractvalue %dx.types.ResRet.f32 %1224, 0
  %1226 = extractvalue %dx.types.ResRet.f32 %1224, 1
  %1227 = extractvalue %dx.types.ResRet.f32 %1224, 2
  %1228 = fmul fast float %1225, 2.000000e+00
  %1229 = fmul fast float %1226, 2.000000e+00
  %1230 = fmul fast float %1227, 2.000000e+00
  %1231 = fadd fast float %1228, -1.000000e+00
  %1232 = fadd fast float %1229, -1.000000e+00
  %1233 = fadd fast float %1230, -1.000000e+00
  %1234 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1235 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1234, %dx.types.Handle %1218, float %871, float %872, float %873, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1236 = extractvalue %dx.types.ResRet.f32 %1235, 0
  %1237 = extractvalue %dx.types.ResRet.f32 %1235, 1
  %1238 = extractvalue %dx.types.ResRet.f32 %1235, 2
  %1239 = fmul fast float %1236, 2.000000e+00
  %1240 = fmul fast float %1237, 2.000000e+00
  %1241 = fmul fast float %1238, 2.000000e+00
  %1242 = fadd fast float %1239, -1.000000e+00
  %1243 = fadd fast float %1240, -1.000000e+00
  %1244 = fadd fast float %1241, -1.000000e+00
  %1245 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1246 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1245, %dx.types.Handle %1218, float %871, float %872, float %873, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1247 = extractvalue %dx.types.ResRet.f32 %1246, 0
  %1248 = extractvalue %dx.types.ResRet.f32 %1246, 1
  %1249 = extractvalue %dx.types.ResRet.f32 %1246, 2
  %1250 = fmul fast float %1247, 2.000000e+00
  %1251 = fmul fast float %1248, 2.000000e+00
  %1252 = fmul fast float %1249, 2.000000e+00
  %1253 = fadd fast float %1250, -1.000000e+00
  %1254 = fadd fast float %1251, -1.000000e+00
  %1255 = fadd fast float %1252, -1.000000e+00
  %1256 = fmul fast float %1220, 0x3FFBB67B80000000
  %1257 = fmul fast float %1256, %1231
  %1258 = fmul fast float %1256, %1232
  %1259 = fmul fast float %1256, %1233
  %1260 = fmul fast float %1221, 0x3FFBB67B80000000
  %1261 = fmul fast float %1260, %1242
  %1262 = fmul fast float %1260, %1243
  %1263 = fmul fast float %1260, %1244
  %1264 = fmul fast float %1222, 0x3FFBB67B80000000
  %1265 = fmul fast float %1264, %1253
  %1266 = fmul fast float %1264, %1254
  %1267 = fmul fast float %1264, %1255
  %1268 = fmul fast float %1214, 0x3FD45F3060000000
  %1269 = call float @dx.op.dot4.f32(i32 56, float %1220, float %1257, float %1258, float %1259, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1270 = call float @dx.op.dot4.f32(i32 56, float %1221, float %1261, float %1262, float %1263, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1271 = call float @dx.op.dot4.f32(i32 56, float %1222, float %1265, float %1266, float %1267, float 1.000000e+00, float %793, float %794, float %795)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1272 = call float @dx.op.binary.f32(i32 35, float %1269, float 0.000000e+00)  ; FMax(a,b)
  %1273 = call float @dx.op.binary.f32(i32 35, float %1270, float 0.000000e+00)  ; FMax(a,b)
  %1274 = call float @dx.op.binary.f32(i32 35, float %1271, float 0.000000e+00)  ; FMax(a,b)
  %1275 = fmul fast float %1272, %1268
  %1276 = fmul fast float %1273, %1268
  %1277 = fmul fast float %1274, %1268
  %1278 = fadd fast float %1275, %1211
  %1279 = fadd fast float %1276, %1212
  %1280 = fadd fast float %1277, %1213
  br label %1281

; <label>:1281                                    ; preds = %1216, %1210
  %1282 = phi float [ %1278, %1216 ], [ %1211, %1210 ]
  %1283 = phi float [ %1279, %1216 ], [ %1212, %1210 ]
  %1284 = phi float [ %1280, %1216 ], [ %1213, %1210 ]
  %1285 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1286 = extractvalue %dx.types.CBufRet.i32 %1285, 0
  %1287 = extractvalue %dx.types.CBufRet.i32 %1285, 1
  %1288 = mul i32 %1286, %42
  %1289 = mul i32 %1287, %43
  %1290 = fmul fast float %498, %55
  %1291 = fadd fast float %1290, %56
  %1292 = call float @dx.op.unary.f32(i32 23, float %1291)  ; Log(value)
  %1293 = fmul fast float %1292, %57
  %1294 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1293)  ; FMax(a,b)
  %1295 = fptoui float %1294 to i32
  %1296 = add nsw i32 %51, -1
  %1297 = call i32 @dx.op.binary.i32(i32 40, i32 %1295, i32 %1296)  ; UMin(a,b)
  %1298 = and i32 %53, 31
  %1299 = lshr i32 %1288, %1298
  %1300 = lshr i32 %1289, %1298
  %1301 = mul i32 %1297, %50
  %1302 = add i32 %1301, %1300
  %1303 = mul i32 %1302, %49
  %1304 = add i32 %1303, %1299
  %1305 = shl i32 %1304, 1
  %1306 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1307 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1306, i32 %1305, i32 undef)  ; BufferLoad(srv,index,wot)
  %1308 = extractvalue %dx.types.ResRet.i32 %1307, 0
  %1309 = call i32 @dx.op.binary.i32(i32 40, i32 %1308, i32 %46)  ; UMin(a,b)
  %1310 = or i32 %1305, 1
  %1311 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1306, i32 %1310, i32 undef)  ; BufferLoad(srv,index,wot)
  %1312 = extractvalue %dx.types.ResRet.i32 %1311, 0
  %1313 = add i32 %42, 1
  %1314 = add i32 %43, 1
  %1315 = add i32 %44, 1
  %1316 = uitofp i32 %1313 to float
  %1317 = uitofp i32 %1314 to float
  %1318 = fadd fast float %475, %1316
  %1319 = fadd fast float %476, %1317
  %1320 = fdiv fast float %1318, %481
  %1321 = fdiv fast float %1319, %482
  %1322 = fmul fast float %1320, 2.000000e+00
  %1323 = fmul fast float %1321, 2.000000e+00
  %1324 = fadd fast float %1322, -1.000000e+00
  %1325 = fadd fast float %1323, -1.000000e+00
  %1326 = fsub fast float -0.000000e+00, %1325
  %1327 = uitofp i32 %1315 to float
  %1328 = fadd fast float %477, %1327
  %1329 = fdiv fast float %1328, %492
  %1330 = call float @dx.op.unary.f32(i32 21, float %1329)  ; Exp(value)
  %1331 = fsub fast float %1330, %495
  %1332 = fdiv fast float %1331, %497
  br i1 %501, label %1339, label %1333, !dx.controlflow.hints !51

; <label>:1333                                    ; preds = %1281
  %1334 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1335 = extractvalue %dx.types.CBufRet.f32 %1334, 2
  %1336 = fmul fast float %1335, %1332
  %1337 = extractvalue %dx.types.CBufRet.f32 %499, 2
  %1338 = fadd fast float %1336, %1337
  br label %1346

; <label>:1339                                    ; preds = %1281
  %1340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1341 = extractvalue %dx.types.CBufRet.f32 %1340, 3
  %1342 = fadd fast float %1341, %1332
  %1343 = extractvalue %dx.types.CBufRet.f32 %1340, 2
  %1344 = fmul fast float %1342, %1343
  %1345 = fdiv fast float 1.000000e+00, %1344
  br label %1346

; <label>:1346                                    ; preds = %1339, %1333
  %1347 = phi float [ %1338, %1333 ], [ %1345, %1339 ]
  %1348 = fmul fast float %518, %1324
  %1349 = call float @dx.op.tertiary.f32(i32 46, float %1326, float %523, float %1348)  ; FMad(a,b,c)
  %1350 = call float @dx.op.tertiary.f32(i32 46, float %1347, float %528, float %1349)  ; FMad(a,b,c)
  %1351 = fadd fast float %1350, %533
  %1352 = fmul fast float %519, %1324
  %1353 = call float @dx.op.tertiary.f32(i32 46, float %1326, float %524, float %1352)  ; FMad(a,b,c)
  %1354 = call float @dx.op.tertiary.f32(i32 46, float %1347, float %529, float %1353)  ; FMad(a,b,c)
  %1355 = fadd fast float %1354, %534
  %1356 = fmul fast float %520, %1324
  %1357 = call float @dx.op.tertiary.f32(i32 46, float %1326, float %525, float %1356)  ; FMad(a,b,c)
  %1358 = call float @dx.op.tertiary.f32(i32 46, float %1347, float %530, float %1357)  ; FMad(a,b,c)
  %1359 = fadd fast float %1358, %535
  %1360 = fmul fast float %521, %1324
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %1326, float %526, float %1360)  ; FMad(a,b,c)
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %1347, float %531, float %1361)  ; FMad(a,b,c)
  %1363 = fadd fast float %1362, %536
  %1364 = fdiv fast float %1351, %1363
  %1365 = fdiv fast float %1355, %1363
  %1366 = fdiv fast float %1359, %1363
  %1367 = fsub fast float %553, %1364
  %1368 = fsub fast float %554, %1365
  %1369 = fsub fast float %555, %1366
  %1370 = fmul fast float %1367, %1367
  %1371 = fmul fast float %1368, %1368
  %1372 = fadd fast float %1371, %1370
  %1373 = fmul fast float %1369, %1369
  %1374 = fadd fast float %1372, %1373
  %1375 = call float @dx.op.unary.f32(i32 24, float %1374)  ; Sqrt(value)
  %1376 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %1377 = fmul fast float %1376, %1375
  %1378 = call float @dx.op.binary.f32(i32 35, float %1377, float 1.000000e+00)  ; FMax(a,b)
  %1379 = fmul fast float %1378, %1378
  %1380 = icmp eq i32 %1309, 0
  br i1 %1380, label %1790, label %1381

; <label>:1381                                    ; preds = %1346
  br label %1382

; <label>:1382                                    ; preds = %1783, %1381
  %1383 = phi float [ %1784, %1783 ], [ %1282, %1381 ]
  %1384 = phi float [ %1785, %1783 ], [ %1283, %1381 ]
  %1385 = phi float [ %1786, %1783 ], [ %1284, %1381 ]
  %1386 = phi i32 [ %1787, %1783 ], [ 0, %1381 ]
  %1387 = add i32 %1386, %1312
  %1388 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1389 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1388, i32 %1387, i32 undef)  ; BufferLoad(srv,index,wot)
  %1390 = extractvalue %dx.types.ResRet.i32 %1389, 0
  %1391 = mul i32 %1390, 6
  %1392 = add i32 %1391, 4
  %1393 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1394 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1392, i32 undef)  ; BufferLoad(srv,index,wot)
  %1395 = extractvalue %dx.types.ResRet.f32 %1394, 0
  %1396 = extractvalue %dx.types.ResRet.f32 %1394, 1
  %1397 = extractvalue %dx.types.ResRet.f32 %1394, 2
  %1398 = add i32 %1391, 3
  %1399 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1398, i32 undef)  ; BufferLoad(srv,index,wot)
  %1400 = extractvalue %dx.types.ResRet.f32 %1399, 3
  %1401 = add i32 %1391, 2
  %1402 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1401, i32 undef)  ; BufferLoad(srv,index,wot)
  %1403 = extractvalue %dx.types.ResRet.f32 %1402, 0
  %1404 = extractvalue %dx.types.ResRet.f32 %1402, 1
  %1405 = extractvalue %dx.types.ResRet.f32 %1402, 2
  %1406 = or i32 %1391, 1
  %1407 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1406, i32 undef)  ; BufferLoad(srv,index,wot)
  %1408 = extractvalue %dx.types.ResRet.f32 %1407, 0
  %1409 = extractvalue %dx.types.ResRet.f32 %1407, 1
  %1410 = extractvalue %dx.types.ResRet.f32 %1407, 2
  %1411 = extractvalue %dx.types.ResRet.f32 %1407, 3
  %1412 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1391, i32 undef)  ; BufferLoad(srv,index,wot)
  %1413 = extractvalue %dx.types.ResRet.f32 %1412, 3
  %1414 = bitcast float %1400 to i32
  %1415 = lshr i32 %1414, 16
  %1416 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1415)  ; LegacyF16ToF32(value)
  %1417 = fcmp fast ogt float %1416, 0.000000e+00
  br i1 %1417, label %1418, label %1783

; <label>:1418                                    ; preds = %1382
  %1419 = extractvalue %dx.types.ResRet.f32 %1412, 2
  %1420 = extractvalue %dx.types.ResRet.f32 %1412, 1
  %1421 = extractvalue %dx.types.ResRet.f32 %1412, 0
  %1422 = extractvalue %dx.types.ResRet.f32 %1402, 3
  %1423 = extractvalue %dx.types.ResRet.f32 %1399, 2
  %1424 = extractvalue %dx.types.ResRet.f32 %1399, 0
  %1425 = add i32 %1391, 5
  %1426 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1393, i32 %1425, i32 undef)  ; BufferLoad(srv,index,wot)
  %1427 = extractvalue %dx.types.ResRet.f32 %1426, 3
  %1428 = bitcast float %1422 to i32
  %1429 = lshr i32 %1428, 16
  %1430 = and i32 %1429, 3
  %1431 = bitcast float %1424 to i32
  %1432 = and i32 %1431, 65535
  %1433 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1432)  ; LegacyF16ToF32(value)
  %1434 = lshr i32 %1431, 16
  %1435 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1434)  ; LegacyF16ToF32(value)
  %1436 = bitcast float %1423 to i32
  %1437 = and i32 %1436, 65535
  %1438 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1437)  ; LegacyF16ToF32(value)
  %1439 = fsub fast float -0.000000e+00, %1438
  %1440 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1414)  ; LegacyF16ToF32(value)
  %1441 = fsub fast float -0.000000e+00, %1440
  %1442 = fcmp fast oeq float %1411, 0.000000e+00
  %1443 = icmp eq i32 %1430, 2
  %1444 = icmp eq i32 %1430, 3
  %1445 = bitcast float %1427 to i32
  %1446 = and i32 %1445, 65535
  %1447 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1446)  ; LegacyF16ToF32(value)
  %1448 = lshr i32 %1445, 16
  %1449 = and i32 %1448, 1023
  %1450 = uitofp i32 %1449 to float
  %1451 = fmul fast float %1450, 9.765625e-04
  %1452 = fsub fast float %1421, %553
  %1453 = fsub fast float %1420, %554
  %1454 = fsub fast float %1419, %555
  %1455 = call float @dx.op.dot3.f32(i32 55, float %1452, float %1453, float %1454, float %1452, float %1453, float %1454)  ; Dot3(ax,ay,az,bx,by,bz)
  %1456 = call float @dx.op.unary.f32(i32 25, float %1455)  ; Rsqrt(value)
  %1457 = fmul fast float %1456, %1452
  %1458 = fmul fast float %1456, %1453
  %1459 = fmul fast float %1456, %1454
  br i1 %1442, label %1460, label %1467

; <label>:1460                                    ; preds = %1418
  %1461 = fmul fast float %1413, %1413
  %1462 = fmul fast float %1461, %1455
  %1463 = fmul fast float %1462, %1462
  %1464 = fsub fast float 1.000000e+00, %1463
  %1465 = call float @dx.op.unary.f32(i32 7, float %1464)  ; Saturate(value)
  %1466 = fmul fast float %1465, %1465
  br label %1477

; <label>:1467                                    ; preds = %1418
  %1468 = fmul fast float %1452, %1413
  %1469 = fmul fast float %1453, %1413
  %1470 = fmul fast float %1454, %1413
  %1471 = call float @dx.op.dot3.f32(i32 55, float %1468, float %1469, float %1470, float %1468, float %1469, float %1470)  ; Dot3(ax,ay,az,bx,by,bz)
  %1472 = call float @dx.op.unary.f32(i32 7, float %1471)  ; Saturate(value)
  %1473 = fsub fast float 1.000000e+00, %1472
  %1474 = call float @dx.op.unary.f32(i32 23, float %1473)  ; Log(value)
  %1475 = fmul fast float %1474, %1411
  %1476 = call float @dx.op.unary.f32(i32 21, float %1475)  ; Exp(value)
  br label %1477

; <label>:1477                                    ; preds = %1467, %1460
  %1478 = phi float [ %1466, %1460 ], [ %1476, %1467 ]
  br i1 %1443, label %1479, label %1486

; <label>:1479                                    ; preds = %1477
  %1480 = call float @dx.op.dot3.f32(i32 55, float %1457, float %1458, float %1459, float %1403, float %1404, float %1405)  ; Dot3(ax,ay,az,bx,by,bz)
  %1481 = fsub fast float %1480, %1433
  %1482 = fmul fast float %1481, %1435
  %1483 = call float @dx.op.unary.f32(i32 7, float %1482)  ; Saturate(value)
  %1484 = fmul fast float %1483, %1483
  %1485 = fmul fast float %1484, %1478
  br label %1486

; <label>:1486                                    ; preds = %1479, %1477
  %1487 = phi float [ %1485, %1479 ], [ %1478, %1477 ]
  br i1 %1444, label %1488, label %1492

; <label>:1488                                    ; preds = %1486
  %1489 = call float @dx.op.dot3.f32(i32 55, float %1403, float %1404, float %1405, float %1457, float %1458, float %1459)  ; Dot3(ax,ay,az,bx,by,bz)
  %1490 = fcmp fast olt float %1489, 0.000000e+00
  %1491 = select i1 %1490, float 0.000000e+00, float %1487
  br label %1492

; <label>:1492                                    ; preds = %1488, %1486
  %1493 = phi float [ %1491, %1488 ], [ %1487, %1486 ]
  br i1 %1444, label %1494, label %1726

; <label>:1494                                    ; preds = %1492
  %1495 = fmul fast float %1405, %1396
  %1496 = fmul fast float %1404, %1397
  %1497 = fsub fast float %1495, %1496
  %1498 = fmul fast float %1403, %1397
  %1499 = fmul fast float %1405, %1395
  %1500 = fsub fast float %1498, %1499
  %1501 = fmul fast float %1404, %1395
  %1502 = fmul fast float %1403, %1396
  %1503 = fsub fast float %1501, %1502
  %1504 = fcmp fast ogt float %1451, 0x3FA1EB8520000000
  br i1 %1504, label %1505, label %1600

; <label>:1505                                    ; preds = %1494
  %1506 = fmul fast float %1452, %1497
  %1507 = call float @dx.op.tertiary.f32(i32 46, float %1500, float %1453, float %1506)  ; FMad(a,b,c)
  %1508 = call float @dx.op.tertiary.f32(i32 46, float %1503, float %1454, float %1507)  ; FMad(a,b,c)
  %1509 = fmul fast float %1452, %1395
  %1510 = call float @dx.op.tertiary.f32(i32 46, float %1396, float %1453, float %1509)  ; FMad(a,b,c)
  %1511 = call float @dx.op.tertiary.f32(i32 46, float %1397, float %1454, float %1510)  ; FMad(a,b,c)
  %1512 = fmul fast float %1452, %1403
  %1513 = call float @dx.op.tertiary.f32(i32 46, float %1404, float %1453, float %1512)  ; FMad(a,b,c)
  %1514 = call float @dx.op.tertiary.f32(i32 46, float %1405, float %1454, float %1513)  ; FMad(a,b,c)
  %1515 = fmul fast float %1451, %1451
  %1516 = fsub fast float 1.000000e+00, %1515
  %1517 = call float @dx.op.unary.f32(i32 24, float %1516)  ; Sqrt(value)
  %1518 = fmul fast float %1451, %1447
  %1519 = call float @dx.op.binary.f32(i32 36, float %1514, float %1518)  ; FMin(a,b)
  %1520 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1518)  ; FMax(a,b)
  %1521 = fdiv fast float %1519, %1520
  %1522 = fmul fast float %1517, %1447
  %1523 = fmul fast float %1522, %1521
  %1524 = fcmp fast ogt float %1508, 0.000000e+00
  %1525 = fcmp fast ogt float %1511, 0.000000e+00
  %1526 = fcmp fast olt float %1508, 0.000000e+00
  %1527 = fcmp fast olt float %1511, 0.000000e+00
  %1528 = zext i1 %1524 to i32
  %1529 = zext i1 %1525 to i32
  %1530 = zext i1 %1526 to i32
  %1531 = zext i1 %1527 to i32
  %1532 = sub nsw i32 %1528, %1530
  %1533 = sub nsw i32 %1529, %1531
  %1534 = sitofp i32 %1532 to float
  %1535 = sitofp i32 %1533 to float
  %1536 = fadd fast float %1523, %1438
  %1537 = fadd fast float %1523, %1440
  %1538 = call float @dx.op.unary.f32(i32 6, float %1508)  ; FAbs(value)
  %1539 = call float @dx.op.unary.f32(i32 6, float %1511)  ; FAbs(value)
  %1540 = call float @dx.op.binary.f32(i32 35, float %1538, float %1536)  ; FMax(a,b)
  %1541 = call float @dx.op.binary.f32(i32 35, float %1539, float %1537)  ; FMax(a,b)
  %1542 = fsub fast float %1439, %1523
  %1543 = fadd fast float %1542, %1540
  %1544 = fmul fast float %1543, %1534
  %1545 = fsub fast float %1441, %1523
  %1546 = fadd fast float %1545, %1541
  %1547 = fmul fast float %1546, %1535
  %1548 = fsub fast float %1514, %1519
  %1549 = call float @dx.op.binary.f32(i32 35, float %1548, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1550 = call float @dx.op.unary.f32(i32 6, float %1544)  ; FAbs(value)
  %1551 = call float @dx.op.unary.f32(i32 6, float %1547)  ; FAbs(value)
  %1552 = fdiv fast float %1550, %1549
  %1553 = fdiv fast float %1551, %1549
  %1554 = fmul fast float %1552, %1519
  %1555 = fmul fast float %1553, %1519
  %1556 = fsub fast float %1554, %1523
  %1557 = fsub fast float %1555, %1523
  %1558 = fsub fast float -0.000000e+00, %1534
  %1559 = fsub fast float -0.000000e+00, %1535
  %1560 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1558)  ; FMax(a,b)
  %1561 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1559)  ; FMax(a,b)
  %1562 = fmul fast float %1556, %1560
  %1563 = fmul fast float %1557, %1561
  %1564 = fsub fast float %1562, %1438
  %1565 = fsub fast float %1563, %1440
  %1566 = call float @dx.op.binary.f32(i32 35, float %1564, float %1439)  ; FMax(a,b)
  %1567 = call float @dx.op.binary.f32(i32 35, float %1565, float %1441)  ; FMax(a,b)
  %1568 = call float @dx.op.binary.f32(i32 36, float %1566, float %1438)  ; FMin(a,b)
  %1569 = call float @dx.op.binary.f32(i32 36, float %1567, float %1440)  ; FMin(a,b)
  %1570 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1534)  ; FMax(a,b)
  %1571 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1535)  ; FMax(a,b)
  %1572 = fmul fast float %1570, %1556
  %1573 = fmul fast float %1571, %1557
  %1574 = fsub fast float %1438, %1572
  %1575 = fsub fast float %1440, %1573
  %1576 = call float @dx.op.binary.f32(i32 35, float %1574, float %1439)  ; FMax(a,b)
  %1577 = call float @dx.op.binary.f32(i32 35, float %1575, float %1441)  ; FMax(a,b)
  %1578 = call float @dx.op.binary.f32(i32 36, float %1576, float %1438)  ; FMin(a,b)
  %1579 = call float @dx.op.binary.f32(i32 36, float %1577, float %1440)  ; FMin(a,b)
  %1580 = fadd fast float %1578, %1568
  %1581 = fadd fast float %1579, %1569
  %1582 = fmul fast float %1580, 5.000000e-01
  %1583 = fmul fast float %1581, 5.000000e-01
  %1584 = fsub fast float %1578, %1568
  %1585 = fsub fast float %1579, %1569
  %1586 = fmul fast float %1584, 5.000000e-01
  %1587 = fmul fast float %1585, 5.000000e-01
  %1588 = fmul fast float %1582, %1497
  %1589 = fmul fast float %1582, %1500
  %1590 = fmul fast float %1582, %1503
  %1591 = fsub fast float %1452, %1588
  %1592 = fsub fast float %1453, %1589
  %1593 = fsub fast float %1454, %1590
  %1594 = fmul fast float %1583, %1395
  %1595 = fmul fast float %1583, %1396
  %1596 = fmul fast float %1583, %1397
  %1597 = fsub fast float %1591, %1594
  %1598 = fsub fast float %1592, %1595
  %1599 = fsub fast float %1593, %1596
  br label %1600

; <label>:1600                                    ; preds = %1505, %1494
  %1601 = phi float [ %1597, %1505 ], [ %1452, %1494 ]
  %1602 = phi float [ %1598, %1505 ], [ %1453, %1494 ]
  %1603 = phi float [ %1599, %1505 ], [ %1454, %1494 ]
  %1604 = phi float [ %1586, %1505 ], [ %1438, %1494 ]
  %1605 = phi float [ %1587, %1505 ], [ %1440, %1494 ]
  %1606 = fcmp fast oeq float %1604, 0.000000e+00
  %1607 = fcmp fast oeq float %1605, 0.000000e+00
  %1608 = or i1 %1606, %1607
  br i1 %1608, label %1756, label %1609

; <label>:1609                                    ; preds = %1600
  %1610 = call float @dx.op.dot3.f32(i32 55, float %1497, float %1500, float %1503, float %1601, float %1602, float %1603)  ; Dot3(ax,ay,az,bx,by,bz)
  %1611 = call float @dx.op.dot3.f32(i32 55, float %1395, float %1396, float %1397, float %1601, float %1602, float %1603)  ; Dot3(ax,ay,az,bx,by,bz)
  %1612 = call float @dx.op.dot3.f32(i32 55, float %1403, float %1404, float %1405, float %1601, float %1602, float %1603)  ; Dot3(ax,ay,az,bx,by,bz)
  %1613 = fsub fast float %1610, %1604
  %1614 = fadd fast float %1610, %1604
  %1615 = fsub fast float %1611, %1605
  %1616 = fadd fast float %1611, %1605
  %1617 = fmul fast float %1612, %1612
  %1618 = call float @dx.op.dot2.f32(i32 54, float %1613, float %1615, float %1613, float %1615)  ; Dot2(ax,ay,bx,by)
  %1619 = fadd fast float %1618, %1617
  %1620 = call float @dx.op.unary.f32(i32 25, float %1619)  ; Rsqrt(value)
  %1621 = fmul fast float %1620, %1613
  %1622 = fmul fast float %1620, %1615
  %1623 = fmul fast float %1620, %1612
  %1624 = call float @dx.op.dot2.f32(i32 54, float %1614, float %1615, float %1614, float %1615)  ; Dot2(ax,ay,bx,by)
  %1625 = fadd fast float %1624, %1617
  %1626 = call float @dx.op.unary.f32(i32 25, float %1625)  ; Rsqrt(value)
  %1627 = fmul fast float %1626, %1614
  %1628 = fmul fast float %1626, %1615
  %1629 = fmul fast float %1626, %1612
  %1630 = call float @dx.op.dot2.f32(i32 54, float %1614, float %1616, float %1614, float %1616)  ; Dot2(ax,ay,bx,by)
  %1631 = fadd fast float %1630, %1617
  %1632 = call float @dx.op.unary.f32(i32 25, float %1631)  ; Rsqrt(value)
  %1633 = fmul fast float %1632, %1614
  %1634 = fmul fast float %1632, %1616
  %1635 = fmul fast float %1632, %1612
  %1636 = call float @dx.op.dot2.f32(i32 54, float %1613, float %1616, float %1613, float %1616)  ; Dot2(ax,ay,bx,by)
  %1637 = fadd fast float %1636, %1617
  %1638 = call float @dx.op.unary.f32(i32 25, float %1637)  ; Rsqrt(value)
  %1639 = fmul fast float %1638, %1613
  %1640 = fmul fast float %1638, %1616
  %1641 = fmul fast float %1638, %1612
  %1642 = call float @dx.op.dot3.f32(i32 55, float %1621, float %1622, float %1623, float %1627, float %1628, float %1629)  ; Dot3(ax,ay,az,bx,by,bz)
  %1643 = call float @dx.op.dot3.f32(i32 55, float %1627, float %1628, float %1629, float %1633, float %1634, float %1635)  ; Dot3(ax,ay,az,bx,by,bz)
  %1644 = call float @dx.op.dot3.f32(i32 55, float %1633, float %1634, float %1635, float %1639, float %1640, float %1641)  ; Dot3(ax,ay,az,bx,by,bz)
  %1645 = call float @dx.op.dot3.f32(i32 55, float %1639, float %1640, float %1641, float %1621, float %1622, float %1623)  ; Dot3(ax,ay,az,bx,by,bz)
  %1646 = fmul fast float %1642, 0x3FC6666660000000
  %1647 = fsub fast float 0x3FF921FF20000000, %1646
  %1648 = fadd fast float %1642, 1.000000e+00
  %1649 = call float @dx.op.unary.f32(i32 25, float %1648)  ; Rsqrt(value)
  %1650 = fmul fast float %1643, 0x3FC6666660000000
  %1651 = fsub fast float 0x3FF921FF20000000, %1650
  %1652 = fadd fast float %1643, 1.000000e+00
  %1653 = call float @dx.op.unary.f32(i32 25, float %1652)  ; Rsqrt(value)
  %1654 = fmul fast float %1653, %1651
  %1655 = fmul fast float %1644, 0x3FC6666660000000
  %1656 = fsub fast float 0x3FF921FF20000000, %1655
  %1657 = fadd fast float %1644, 1.000000e+00
  %1658 = call float @dx.op.unary.f32(i32 25, float %1657)  ; Rsqrt(value)
  %1659 = fmul fast float %1645, 0x3FC6666660000000
  %1660 = fsub fast float 0x3FF921FF20000000, %1659
  %1661 = fadd fast float %1645, 1.000000e+00
  %1662 = call float @dx.op.unary.f32(i32 25, float %1661)  ; Rsqrt(value)
  %1663 = fmul fast float %1662, %1660
  %1664 = fmul fast float %1647, %1649
  %1665 = fsub fast float -0.000000e+00, %1664
  %1666 = fmul fast float %1621, %1665
  %1667 = fmul fast float %1622, %1665
  %1668 = fmul fast float %1623, %1665
  %1669 = fmul fast float %1654, %1633
  %1670 = fmul fast float %1654, %1634
  %1671 = fmul fast float %1654, %1635
  %1672 = fadd fast float %1669, %1666
  %1673 = fadd fast float %1670, %1667
  %1674 = fadd fast float %1671, %1668
  %1675 = fmul fast float %1674, %1628
  %1676 = fmul fast float %1673, %1629
  %1677 = fsub fast float %1675, %1676
  %1678 = fmul fast float %1672, %1629
  %1679 = fmul fast float %1674, %1627
  %1680 = fsub fast float %1678, %1679
  %1681 = fmul fast float %1673, %1627
  %1682 = fmul fast float %1672, %1628
  %1683 = fsub fast float %1681, %1682
  %1684 = fmul fast float %1663, %1621
  %1685 = fmul fast float %1663, %1622
  %1686 = fmul fast float %1663, %1623
  %1687 = fmul fast float %1656, %1658
  %1688 = fsub fast float -0.000000e+00, %1687
  %1689 = fmul fast float %1633, %1688
  %1690 = fmul fast float %1634, %1688
  %1691 = fmul fast float %1635, %1688
  %1692 = fadd fast float %1684, %1689
  %1693 = fadd fast float %1685, %1690
  %1694 = fadd fast float %1686, %1691
  %1695 = fmul fast float %1694, %1640
  %1696 = fmul fast float %1693, %1641
  %1697 = fsub fast float %1695, %1696
  %1698 = fmul fast float %1692, %1641
  %1699 = fmul fast float %1694, %1639
  %1700 = fsub fast float %1698, %1699
  %1701 = fmul fast float %1693, %1639
  %1702 = fmul fast float %1692, %1640
  %1703 = fsub fast float %1701, %1702
  %1704 = fadd fast float %1697, %1677
  %1705 = fadd fast float %1700, %1680
  %1706 = fadd fast float %1703, %1683
  %1707 = fmul fast float %1704, %1497
  %1708 = fmul fast float %1704, %1500
  %1709 = fmul fast float %1704, %1503
  %1710 = fmul fast float %1705, %1395
  %1711 = fmul fast float %1705, %1396
  %1712 = fmul fast float %1705, %1397
  %1713 = fadd fast float %1707, %1710
  %1714 = fadd fast float %1708, %1711
  %1715 = fadd fast float %1709, %1712
  %1716 = fmul fast float %1706, %1403
  %1717 = fmul fast float %1706, %1404
  %1718 = fmul fast float %1706, %1405
  %1719 = fadd fast float %1713, %1716
  %1720 = fadd fast float %1714, %1717
  %1721 = fadd fast float %1715, %1718
  %1722 = call float @dx.op.dot3.f32(i32 55, float %1719, float %1720, float %1721, float %1719, float %1720, float %1721)  ; Dot3(ax,ay,az,bx,by,bz)
  %1723 = call float @dx.op.unary.f32(i32 25, float %1722)  ; Rsqrt(value)
  %1724 = fmul fast float %1722, 5.000000e-01
  %1725 = fmul fast float %1724, %1723
  br label %1756

; <label>:1726                                    ; preds = %1492
  %1727 = fmul fast float %1440, 5.000000e-01
  %1728 = fmul fast float %1727, %1395
  %1729 = fmul fast float %1727, %1396
  %1730 = fmul fast float %1727, %1397
  %1731 = fsub fast float %1452, %1728
  %1732 = fsub fast float %1453, %1729
  %1733 = fsub fast float %1454, %1730
  %1734 = fadd fast float %1728, %1452
  %1735 = fadd fast float %1729, %1453
  %1736 = fadd fast float %1730, %1454
  %1737 = fcmp fast ogt float %1440, 0.000000e+00
  %1738 = call float @dx.op.dot3.f32(i32 55, float %1731, float %1732, float %1733, float %1731, float %1732, float %1733)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1737, label %1739, label %1750, !dx.controlflow.hints !57

; <label>:1739                                    ; preds = %1726
  %1740 = call float @dx.op.dot3.f32(i32 55, float %1734, float %1735, float %1736, float %1734, float %1735, float %1736)  ; Dot3(ax,ay,az,bx,by,bz)
  %1741 = call float @dx.op.unary.f32(i32 25, float %1738)  ; Rsqrt(value)
  %1742 = call float @dx.op.unary.f32(i32 25, float %1740)  ; Rsqrt(value)
  %1743 = fmul fast float %1742, %1741
  %1744 = call float @dx.op.dot3.f32(i32 55, float %1731, float %1732, float %1733, float %1734, float %1735, float %1736)  ; Dot3(ax,ay,az,bx,by,bz)
  %1745 = fmul fast float %1744, 5.000000e-01
  %1746 = fadd fast float %1745, %1379
  %1747 = fmul fast float %1746, %1743
  %1748 = fadd fast float %1747, 5.000000e-01
  %1749 = fdiv fast float %1743, %1748
  br label %1753

; <label>:1750                                    ; preds = %1726
  %1751 = fadd fast float %1738, %1379
  %1752 = fdiv fast float 1.000000e+00, %1751
  br label %1753

; <label>:1753                                    ; preds = %1750, %1739
  %1754 = phi float [ %1749, %1739 ], [ %1752, %1750 ]
  %1755 = select i1 %1442, float %1754, float 1.000000e+00
  br label %1756

; <label>:1756                                    ; preds = %1753, %1609, %1600
  %1757 = phi float [ %1755, %1753 ], [ 0.000000e+00, %1600 ], [ %1725, %1609 ]
  %1758 = fsub fast float -0.000000e+00, %586
  %1759 = fsub fast float -0.000000e+00, %587
  %1760 = fsub fast float -0.000000e+00, %588
  %1761 = call float @dx.op.dot3.f32(i32 55, float %1457, float %1458, float %1459, float %1758, float %1759, float %1760)  ; Dot3(ax,ay,az,bx,by,bz)
  %1762 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1763 = extractvalue %dx.types.CBufRet.f32 %1762, 1
  %1764 = fmul fast float %1763, %1763
  %1765 = fsub fast float 1.000000e+00, %1764
  %1766 = fmul fast float %1761, 2.000000e+00
  %1767 = fadd fast float %1766, %1763
  %1768 = fmul fast float %1767, %1763
  %1769 = fadd fast float %1768, 1.000000e+00
  %1770 = call float @dx.op.unary.f32(i32 24, float %1769)  ; Sqrt(value)
  %1771 = fmul fast float %1770, 0x402921FB60000000
  %1772 = fmul fast float %1771, %1769
  %1773 = fdiv fast float %1765, %1772
  %1774 = fmul fast float %1493, %1416
  %1775 = fmul fast float %1774, %1757
  %1776 = fmul fast float %1775, %1773
  %1777 = fmul fast float %1776, %1408
  %1778 = fmul fast float %1776, %1409
  %1779 = fmul fast float %1776, %1410
  %1780 = fadd fast float %1777, %1383
  %1781 = fadd fast float %1778, %1384
  %1782 = fadd fast float %1779, %1385
  br label %1783

; <label>:1783                                    ; preds = %1756, %1382
  %1784 = phi float [ %1780, %1756 ], [ %1383, %1382 ]
  %1785 = phi float [ %1781, %1756 ], [ %1384, %1382 ]
  %1786 = phi float [ %1782, %1756 ], [ %1385, %1382 ]
  %1787 = add nuw i32 %1386, 1
  %1788 = icmp eq i32 %1787, %1309
  br i1 %1788, label %1789, label %1382, !llvm.loop !58

; <label>:1789                                    ; preds = %1783
  br label %1790

; <label>:1790                                    ; preds = %1789, %1346
  %1791 = phi float [ %1282, %1346 ], [ %1784, %1789 ]
  %1792 = phi float [ %1283, %1346 ], [ %1785, %1789 ]
  %1793 = phi float [ %1284, %1346 ], [ %1786, %1789 ]
  %1794 = add nuw nsw i32 %421, 1
  %1795 = icmp ult i32 %1794, %416
  br i1 %1795, label %417, label %1796

; <label>:1796                                    ; preds = %1790
  %1797 = uitofp i32 %416 to float
  %1798 = fdiv fast float %1791, %1797
  %1799 = fdiv fast float %1792, %1797
  %1800 = fdiv fast float %1793, %1797
  %1801 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1802 = extractvalue %dx.types.CBufRet.f32 %1801, 2
  %1803 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1804 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1803, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1805 = extractvalue %dx.types.ResRet.f32 %1804, 0
  %1806 = extractvalue %dx.types.ResRet.f32 %1804, 1
  %1807 = extractvalue %dx.types.ResRet.f32 %1804, 2
  %1808 = fmul fast float %1805, %1802
  %1809 = fmul fast float %1806, %1802
  %1810 = fmul fast float %1807, %1802
  %1811 = fadd fast float %1808, %1798
  %1812 = fadd fast float %1809, %1799
  %1813 = fadd fast float %1810, %1800
  %1814 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1815 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1814, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1816 = extractvalue %dx.types.ResRet.f32 %1815, 0
  %1817 = extractvalue %dx.types.ResRet.f32 %1815, 1
  %1818 = extractvalue %dx.types.ResRet.f32 %1815, 2
  %1819 = extractvalue %dx.types.ResRet.f32 %1815, 3
  %1820 = call float @dx.op.dot3.f32(i32 55, float %1816, float %1817, float %1818, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1821 = fadd fast float %1819, %1820
  %1822 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1823 = extractvalue %dx.types.CBufRet.i32 %1822, 0
  %1824 = icmp eq i32 %1823, 0
  br i1 %1824, label %1831, label %1825, !dx.controlflow.hints !59

; <label>:1825                                    ; preds = %1796
  %1826 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1827 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1826, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1828 = extractvalue %dx.types.ResRet.f32 %1827, 0
  %1829 = extractvalue %dx.types.ResRet.f32 %1827, 1
  %1830 = extractvalue %dx.types.ResRet.f32 %1827, 2
  br label %1831

; <label>:1831                                    ; preds = %1825, %1796
  %1832 = phi float [ %1828, %1825 ], [ 0.000000e+00, %1796 ]
  %1833 = phi float [ %1829, %1825 ], [ 0.000000e+00, %1796 ]
  %1834 = phi float [ %1830, %1825 ], [ 0.000000e+00, %1796 ]
  %1835 = extractvalue %dx.types.CBufRet.f32 %1801, 1
  %1836 = fmul fast float %1816, %1811
  %1837 = fmul fast float %1817, %1812
  %1838 = fmul fast float %1818, %1813
  %1839 = fadd fast float %1832, %1836
  %1840 = fadd fast float %1833, %1837
  %1841 = fadd fast float %1834, %1838
  %1842 = fmul fast float %1835, %1839
  %1843 = fmul fast float %1835, %1840
  %1844 = fmul fast float %1835, %1841
  %1845 = fcmp fast ogt float %402, 0.000000e+00
  br i1 %1845, label %1846, label %1872, !dx.controlflow.hints !60

; <label>:1846                                    ; preds = %1831
  %1847 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1848 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1849 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1847, %dx.types.Handle %1848, float %383, float %384, float %379, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1850 = extractvalue %dx.types.ResRet.f32 %1849, 0
  %1851 = extractvalue %dx.types.ResRet.f32 %1849, 1
  %1852 = extractvalue %dx.types.ResRet.f32 %1849, 2
  %1853 = extractvalue %dx.types.ResRet.f32 %1849, 3
  %1854 = extractvalue %dx.types.CBufRet.f32 %796, 1
  %1855 = fmul fast float %1835, %1854
  %1856 = fmul fast float %1855, %1850
  %1857 = fmul fast float %1855, %1851
  %1858 = fmul fast float %1855, %1852
  %1859 = fmul fast float %1855, %1853
  %1860 = fsub fast float %1856, %1842
  %1861 = fsub fast float %1857, %1843
  %1862 = fsub fast float %1858, %1844
  %1863 = fsub fast float %1859, %1821
  %1864 = fmul fast float %1860, %402
  %1865 = fmul fast float %1861, %402
  %1866 = fmul fast float %1862, %402
  %1867 = fmul fast float %1863, %402
  %1868 = fadd fast float %1864, %1842
  %1869 = fadd fast float %1865, %1843
  %1870 = fadd fast float %1866, %1844
  %1871 = fadd fast float %1867, %1821
  br label %1872

; <label>:1872                                    ; preds = %1846, %1831
  %1873 = phi float [ %1868, %1846 ], [ %1842, %1831 ]
  %1874 = phi float [ %1869, %1846 ], [ %1843, %1831 ]
  %1875 = phi float [ %1870, %1846 ], [ %1844, %1831 ]
  %1876 = phi float [ %1871, %1846 ], [ %1821, %1831 ]
  %1877 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1878 = extractvalue %dx.types.CBufRet.i32 %1877, 0
  %1879 = extractvalue %dx.types.CBufRet.i32 %1877, 1
  %1880 = extractvalue %dx.types.CBufRet.i32 %1877, 2
  %1881 = icmp slt i32 %42, %1878
  %1882 = icmp slt i32 %43, %1879
  %1883 = icmp slt i32 %44, %1880
  %1884 = and i1 %1881, %1882
  %1885 = and i1 %1883, %1884
  br i1 %1885, label %1886, label %1900

; <label>:1886                                    ; preds = %1872
  %1887 = bitcast float %1873 to i32
  %1888 = bitcast float %1874 to i32
  %1889 = bitcast float %1875 to i32
  %1890 = bitcast float %1876 to i32
  %1891 = icmp ult i32 %1887, 2139095040
  %1892 = icmp ult i32 %1888, 2139095040
  %1893 = icmp ult i32 %1889, 2139095040
  %1894 = icmp ult i32 %1890, 2139095040
  %1895 = select i1 %1891, float %1873, float 0.000000e+00
  %1896 = select i1 %1892, float %1874, float 0.000000e+00
  %1897 = select i1 %1893, float %1875, float 0.000000e+00
  %1898 = select i1 %1894, float %1876, float 0.000000e+00
  %1899 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1899, i32 %42, i32 %43, i32 %44, float %1895, float %1896, float %1897, float %1898, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1900

; <label>:1900                                    ; preds = %1886, %1872, %208
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!47}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !30, !32, !38}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !9}
!16 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !9}
!17 = !{i32 9, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !9}
!18 = !{i32 10, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 10, i32 1, i32 10, i32 0, !7}
!19 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !7}
!20 = !{i32 12, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 5, i32 0, !9}
!21 = !{i32 13, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !9}
!22 = !{i32 14, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !7}
!23 = !{i32 15, %"class.Texture2D<float>"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!24 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!25 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!26 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!27 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!28 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!29 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!30 = !{!31}
!31 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!32 = !{!33, !34, !35, !36, !37}
!33 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!34 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!35 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!36 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!37 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!38 = !{!39, !40, !41, !42, !43, !44, !45, !46}
!39 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!40 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!41 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!42 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!43 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!44 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!45 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!46 = !{i32 7, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!47 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !48}
!48 = !{i32 4, !49, i32 5, !50}
!49 = !{i32 4, i32 4, i32 4}
!50 = !{i32 0}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 2}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !56}
!56 = !{!"llvm.loop.unroll.disable"}
!57 = distinct !{!57, !"dx.controlflow.hints", i32 1}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !"dx.controlflow.hints", i32 1}
