;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c842676a58a0e04facf05b17ece03024
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S2             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S3             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s4     1
; LightFunctionSampler              sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; ConservativeDepthTexture          texture     f32          2d     T16            t16     1
; VBufferA                          texture     f32          3d     T17            t17     1
; VBufferB                          texture     f32          3d     T18            t18     1
; LocalShadowedLightScattering      texture     f32          3d     T19            t19     1
; LightFunctionTexture              texture     f32          2d     T20            t20     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %40 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %41 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %42 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.i32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.i32 %42, 2
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 1
  %48 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %49 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.i32 %49, 0
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 0
  %53 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %54 = extractvalue %dx.types.CBufRet.f32 %51, 2
  %55 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %56 = extractvalue %dx.types.CBufRet.f32 %55, 0
  %57 = extractvalue %dx.types.CBufRet.f32 %55, 1
  %58 = extractvalue %dx.types.CBufRet.f32 %55, 2
  %59 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %60 = extractvalue %dx.types.CBufRet.f32 %59, 0
  %61 = extractvalue %dx.types.CBufRet.f32 %59, 1
  %62 = extractvalue %dx.types.CBufRet.f32 %59, 2
  %63 = extractvalue %dx.types.CBufRet.f32 %59, 3
  %64 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.i32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.i32 %64, 1
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = extractvalue %dx.types.CBufRet.f32 %67, 3
  %72 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %73 = extractvalue %dx.types.CBufRet.f32 %72, 0
  %74 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.i32 %74, 1
  %76 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.f32 %76, 0
  %78 = extractvalue %dx.types.CBufRet.f32 %76, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %76, 2
  %80 = extractvalue %dx.types.CBufRet.f32 %76, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %94 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %95 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %96 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.i32 %96, 3
  %98 = icmp eq i32 %97, 0
  %99 = uitofp i32 %39 to float
  %100 = uitofp i32 %40 to float
  %101 = uitofp i32 %41 to float
  br i1 %98, label %208, label %102

; <label>:102                                     ; preds = %0
  %103 = fadd fast float %99, 5.000000e-01
  %104 = fadd fast float %100, 5.000000e-01
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %108 = fdiv fast float %103, %106
  %109 = fdiv fast float %104, %107
  %110 = fmul fast float %108, 2.000000e+00
  %111 = fmul fast float %109, 2.000000e+00
  %112 = fadd fast float %110, -1.000000e+00
  %113 = fadd fast float %111, -1.000000e+00
  %114 = fsub fast float -0.000000e+00, %113
  %115 = fadd fast float %101, -1.000000e+00
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %118 = fdiv fast float %115, %117
  %119 = call float @dx.op.unary.f32(i32 21, float %118)  ; Exp(value)
  %120 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %121 = fsub fast float %119, %120
  %122 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %123 = fdiv fast float %121, %122
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 3
  %126 = fcmp fast ult float %125, 1.000000e+00
  br i1 %126, label %133, label %127, !dx.controlflow.hints !49

; <label>:127                                     ; preds = %102
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %130 = fmul fast float %129, %123
  %131 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %132 = fadd fast float %130, %131
  br label %140

; <label>:133                                     ; preds = %102
  %134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %135 = extractvalue %dx.types.CBufRet.f32 %134, 3
  %136 = fadd fast float %135, %123
  %137 = extractvalue %dx.types.CBufRet.f32 %134, 2
  %138 = fmul fast float %136, %137
  %139 = fdiv fast float 1.000000e+00, %138
  br label %140

; <label>:140                                     ; preds = %133, %127
  %141 = phi float [ %132, %127 ], [ %139, %133 ]
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 0
  %144 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %145 = extractvalue %dx.types.CBufRet.f32 %142, 2
  %146 = extractvalue %dx.types.CBufRet.f32 %142, 3
  %147 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %148 = extractvalue %dx.types.CBufRet.f32 %147, 0
  %149 = extractvalue %dx.types.CBufRet.f32 %147, 1
  %150 = extractvalue %dx.types.CBufRet.f32 %147, 2
  %151 = extractvalue %dx.types.CBufRet.f32 %147, 3
  %152 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %153 = extractvalue %dx.types.CBufRet.f32 %152, 0
  %154 = extractvalue %dx.types.CBufRet.f32 %152, 1
  %155 = extractvalue %dx.types.CBufRet.f32 %152, 2
  %156 = extractvalue %dx.types.CBufRet.f32 %152, 3
  %157 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %158 = extractvalue %dx.types.CBufRet.f32 %157, 0
  %159 = extractvalue %dx.types.CBufRet.f32 %157, 1
  %160 = extractvalue %dx.types.CBufRet.f32 %157, 2
  %161 = extractvalue %dx.types.CBufRet.f32 %157, 3
  %162 = fmul fast float %143, %112
  %163 = call float @dx.op.tertiary.f32(i32 46, float %114, float %148, float %162)  ; FMad(a,b,c)
  %164 = call float @dx.op.tertiary.f32(i32 46, float %141, float %153, float %163)  ; FMad(a,b,c)
  %165 = fadd fast float %164, %158
  %166 = fmul fast float %144, %112
  %167 = call float @dx.op.tertiary.f32(i32 46, float %114, float %149, float %166)  ; FMad(a,b,c)
  %168 = call float @dx.op.tertiary.f32(i32 46, float %141, float %154, float %167)  ; FMad(a,b,c)
  %169 = fadd fast float %168, %159
  %170 = fmul fast float %145, %112
  %171 = call float @dx.op.tertiary.f32(i32 46, float %114, float %150, float %170)  ; FMad(a,b,c)
  %172 = call float @dx.op.tertiary.f32(i32 46, float %141, float %155, float %171)  ; FMad(a,b,c)
  %173 = fadd fast float %172, %160
  %174 = fmul fast float %146, %112
  %175 = call float @dx.op.tertiary.f32(i32 46, float %114, float %151, float %174)  ; FMad(a,b,c)
  %176 = call float @dx.op.tertiary.f32(i32 46, float %141, float %156, float %175)  ; FMad(a,b,c)
  %177 = fadd fast float %176, %161
  %178 = fdiv fast float %165, %177
  %179 = fdiv fast float %169, %177
  %180 = fdiv fast float %173, %177
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 3
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = fmul fast float %182, %178
  %194 = call float @dx.op.tertiary.f32(i32 46, float %179, float %185, float %193)  ; FMad(a,b,c)
  %195 = call float @dx.op.tertiary.f32(i32 46, float %180, float %188, float %194)  ; FMad(a,b,c)
  %196 = fadd fast float %195, %191
  %197 = fmul fast float %183, %178
  %198 = call float @dx.op.tertiary.f32(i32 46, float %179, float %186, float %197)  ; FMad(a,b,c)
  %199 = call float @dx.op.tertiary.f32(i32 46, float %180, float %189, float %198)  ; FMad(a,b,c)
  %200 = fadd fast float %199, %192
  %201 = fdiv fast float %196, %200
  %202 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %203 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %202, i32 0, i32 %39, i32 %40, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %204 = extractvalue %dx.types.ResRet.f32 %203, 0
  %205 = fcmp fast ogt float %204, %201
  br i1 %205, label %206, label %208

; <label>:206                                     ; preds = %140
  %207 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %207, i32 %39, i32 %40, i32 %41, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1907

; <label>:208                                     ; preds = %140, %0
  %209 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.i32 %209, 0
  %211 = mul i32 %39, 1664525
  %212 = mul i32 %40, 1664525
  %213 = mul i32 %41, 1664525
  %214 = mul i32 %210, 1664525
  %215 = add i32 %211, 1013904223
  %216 = add i32 %212, 1013904223
  %217 = add i32 %213, 1013904223
  %218 = add i32 %214, 1013904223
  %219 = mul i32 %218, %216
  %220 = add i32 %215, %219
  %221 = mul i32 %220, %217
  %222 = add i32 %221, %216
  %223 = mul i32 %222, %220
  %224 = add i32 %223, %217
  %225 = mul i32 %224, %222
  %226 = add i32 %225, %218
  %227 = lshr i32 %220, 16
  %228 = lshr i32 %222, 16
  %229 = lshr i32 %224, 16
  %230 = lshr i32 %226, 16
  %231 = xor i32 %227, %220
  %232 = xor i32 %228, %222
  %233 = xor i32 %229, %224
  %234 = xor i32 %230, %226
  %235 = mul i32 %234, %232
  %236 = add i32 %235, %231
  %237 = mul i32 %236, %233
  %238 = add i32 %237, %232
  %239 = mul i32 %238, %236
  %240 = add i32 %239, %233
  %241 = uitofp i32 %236 to float
  %242 = uitofp i32 %238 to float
  %243 = uitofp i32 %240 to float
  %244 = fmul fast float %241, 0x3E00000000000000
  %245 = fmul fast float %242, 0x3E00000000000000
  %246 = fmul fast float %243, 0x3E00000000000000
  %247 = fadd fast float %244, -1.000000e+00
  %248 = fadd fast float %245, -1.000000e+00
  %249 = fadd fast float %246, -1.000000e+00
  %250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %251 = extractvalue %dx.types.CBufRet.f32 %250, 0
  %252 = extractvalue %dx.types.CBufRet.f32 %250, 1
  %253 = extractvalue %dx.types.CBufRet.f32 %250, 2
  %254 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %255 = extractvalue %dx.types.CBufRet.f32 %254, 3
  %256 = fmul fast float %247, %255
  %257 = fmul fast float %248, %255
  %258 = fmul fast float %249, %255
  %259 = fadd fast float %256, %251
  %260 = fadd fast float %257, %252
  %261 = fadd fast float %258, %253
  %262 = fadd fast float %259, %99
  %263 = fadd fast float %260, %100
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = fdiv fast float %262, %265
  %268 = fdiv fast float %263, %266
  %269 = fmul fast float %267, 2.000000e+00
  %270 = fmul fast float %268, 2.000000e+00
  %271 = fadd fast float %269, -1.000000e+00
  %272 = fadd fast float %270, -1.000000e+00
  %273 = fsub fast float -0.000000e+00, %272
  %274 = fadd fast float %261, %101
  %275 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %276 = extractvalue %dx.types.CBufRet.f32 %275, 2
  %277 = fdiv fast float %274, %276
  %278 = call float @dx.op.unary.f32(i32 21, float %277)  ; Exp(value)
  %279 = extractvalue %dx.types.CBufRet.f32 %275, 1
  %280 = fsub fast float %278, %279
  %281 = extractvalue %dx.types.CBufRet.f32 %275, 0
  %282 = fdiv fast float %280, %281
  %283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %284 = extractvalue %dx.types.CBufRet.f32 %283, 3
  %285 = fcmp fast ult float %284, 1.000000e+00
  br i1 %285, label %292, label %286, !dx.controlflow.hints !49

; <label>:286                                     ; preds = %208
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %289 = fmul fast float %288, %282
  %290 = extractvalue %dx.types.CBufRet.f32 %283, 2
  %291 = fadd fast float %289, %290
  br label %299

; <label>:292                                     ; preds = %208
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 3
  %295 = fadd fast float %294, %282
  %296 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %297 = fmul fast float %295, %296
  %298 = fdiv fast float 1.000000e+00, %297
  br label %299

; <label>:299                                     ; preds = %292, %286
  %300 = phi float [ %291, %286 ], [ %298, %292 ]
  %301 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %302 = extractvalue %dx.types.CBufRet.f32 %301, 0
  %303 = extractvalue %dx.types.CBufRet.f32 %301, 1
  %304 = extractvalue %dx.types.CBufRet.f32 %301, 2
  %305 = extractvalue %dx.types.CBufRet.f32 %301, 3
  %306 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %307 = extractvalue %dx.types.CBufRet.f32 %306, 0
  %308 = extractvalue %dx.types.CBufRet.f32 %306, 1
  %309 = extractvalue %dx.types.CBufRet.f32 %306, 2
  %310 = extractvalue %dx.types.CBufRet.f32 %306, 3
  %311 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %312 = extractvalue %dx.types.CBufRet.f32 %311, 0
  %313 = extractvalue %dx.types.CBufRet.f32 %311, 1
  %314 = extractvalue %dx.types.CBufRet.f32 %311, 2
  %315 = extractvalue %dx.types.CBufRet.f32 %311, 3
  %316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %317 = extractvalue %dx.types.CBufRet.f32 %316, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %316, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %316, 2
  %320 = extractvalue %dx.types.CBufRet.f32 %316, 3
  %321 = fmul fast float %302, %271
  %322 = call float @dx.op.tertiary.f32(i32 46, float %273, float %307, float %321)  ; FMad(a,b,c)
  %323 = call float @dx.op.tertiary.f32(i32 46, float %300, float %312, float %322)  ; FMad(a,b,c)
  %324 = fadd fast float %323, %317
  %325 = fmul fast float %303, %271
  %326 = call float @dx.op.tertiary.f32(i32 46, float %273, float %308, float %325)  ; FMad(a,b,c)
  %327 = call float @dx.op.tertiary.f32(i32 46, float %300, float %313, float %326)  ; FMad(a,b,c)
  %328 = fadd fast float %327, %318
  %329 = fmul fast float %304, %271
  %330 = call float @dx.op.tertiary.f32(i32 46, float %273, float %309, float %329)  ; FMad(a,b,c)
  %331 = call float @dx.op.tertiary.f32(i32 46, float %300, float %314, float %330)  ; FMad(a,b,c)
  %332 = fadd fast float %331, %319
  %333 = fmul fast float %305, %271
  %334 = call float @dx.op.tertiary.f32(i32 46, float %273, float %310, float %333)  ; FMad(a,b,c)
  %335 = call float @dx.op.tertiary.f32(i32 46, float %300, float %315, float %334)  ; FMad(a,b,c)
  %336 = fadd fast float %335, %320
  %337 = fdiv fast float %324, %336
  %338 = fdiv fast float %328, %336
  %339 = fdiv fast float %332, %336
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %345 = extractvalue %dx.types.CBufRet.f32 %344, 0
  %346 = extractvalue %dx.types.CBufRet.f32 %344, 1
  %347 = extractvalue %dx.types.CBufRet.f32 %344, 2
  %348 = fmul fast float %341, 2.097152e+06
  %349 = fmul fast float %342, 2.097152e+06
  %350 = fmul fast float %343, 2.097152e+06
  %351 = fadd fast float %348, %337
  %352 = fsub fast float %351, %345
  %353 = fadd fast float %349, %338
  %354 = fsub fast float %353, %346
  %355 = fadd fast float %350, %339
  %356 = fsub fast float %355, %347
  %357 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.f32 %357, 0
  %359 = extractvalue %dx.types.CBufRet.f32 %357, 1
  %360 = extractvalue %dx.types.CBufRet.f32 %357, 2
  %361 = fsub fast float %337, %358
  %362 = fsub fast float %338, %359
  %363 = fsub fast float %339, %360
  %364 = fmul fast float %361, %361
  %365 = fmul fast float %362, %362
  %366 = fadd fast float %364, %365
  %367 = fmul fast float %363, %363
  %368 = fadd fast float %366, %367
  %369 = call float @dx.op.unary.f32(i32 24, float %368)  ; Sqrt(value)
  %370 = fdiv fast float %361, %369
  %371 = fdiv fast float %362, %369
  %372 = fdiv fast float %363, %369
  %373 = icmp eq i32 %44, 0
  br i1 %373, label %374, label %376, !dx.controlflow.hints !50

; <label>:374                                     ; preds = %299
  %375 = extractvalue %dx.types.CBufRet.f32 %254, 1
  br label %1022

; <label>:376                                     ; preds = %299
  %377 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %378 = extractvalue %dx.types.CBufRet.f32 %377, 2
  %379 = fcmp fast ogt float %378, 0.000000e+00
  br i1 %379, label %380, label %955

; <label>:380                                     ; preds = %376
  %381 = icmp eq i32 %75, 0
  br i1 %381, label %417, label %382, !dx.controlflow.hints !51

; <label>:382                                     ; preds = %380
  %383 = fmul fast float %337, %77
  %384 = call float @dx.op.tertiary.f32(i32 46, float %338, float %82, float %383)  ; FMad(a,b,c)
  %385 = call float @dx.op.tertiary.f32(i32 46, float %339, float %87, float %384)  ; FMad(a,b,c)
  %386 = fadd fast float %385, %92
  %387 = fmul fast float %337, %78
  %388 = call float @dx.op.tertiary.f32(i32 46, float %338, float %83, float %387)  ; FMad(a,b,c)
  %389 = call float @dx.op.tertiary.f32(i32 46, float %339, float %88, float %388)  ; FMad(a,b,c)
  %390 = fadd fast float %389, %93
  %391 = fmul fast float %337, %80
  %392 = call float @dx.op.tertiary.f32(i32 46, float %338, float %85, float %391)  ; FMad(a,b,c)
  %393 = call float @dx.op.tertiary.f32(i32 46, float %339, float %90, float %392)  ; FMad(a,b,c)
  %394 = fadd fast float %393, %95
  %395 = fdiv fast float %386, %394
  %396 = fdiv fast float %390, %394
  %397 = fcmp fast ole float %395, 1.000000e+00
  %398 = fcmp fast ole float %396, 1.000000e+00
  %399 = fcmp fast oge float %395, 0.000000e+00
  %400 = fcmp fast oge float %396, 0.000000e+00
  %401 = and i1 %399, %397
  %402 = and i1 %400, %398
  %403 = and i1 %401, %402
  br i1 %403, label %404, label %417

; <label>:404                                     ; preds = %382
  %405 = fmul fast float %337, %79
  %406 = call float @dx.op.tertiary.f32(i32 46, float %338, float %84, float %405)  ; FMad(a,b,c)
  %407 = call float @dx.op.tertiary.f32(i32 46, float %339, float %89, float %406)  ; FMad(a,b,c)
  %408 = fadd fast float %407, %94
  %409 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %410 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %411 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %409, %dx.types.Handle %410, float %395, float %396, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %412 = extractvalue %dx.types.ResRet.f32 %411, 0
  %413 = fcmp fast olt float %408, %412
  %414 = fcmp fast ogt float %412, 0x3FEFAE1480000000
  %415 = or i1 %413, %414
  %416 = uitofp i1 %415 to float
  br label %417

; <label>:417                                     ; preds = %404, %382, %380
  %418 = phi float [ %416, %404 ], [ 1.000000e+00, %382 ], [ 1.000000e+00, %380 ]
  %419 = icmp eq i32 %65, 0
  br i1 %419, label %499, label %420

; <label>:420                                     ; preds = %417
  %421 = fcmp fast oge float %282, %68
  %422 = fcmp fast oge float %282, %69
  %423 = fcmp fast oge float %282, %70
  %424 = fcmp fast oge float %282, %71
  %425 = zext i1 %421 to i32
  %426 = zext i1 %422 to i32
  %427 = zext i1 %423 to i32
  %428 = zext i1 %424 to i32
  %429 = add nuw nsw i32 %425, %426
  %430 = add nuw nsw i32 %429, %427
  %431 = add nuw nsw i32 %430, %428
  %432 = icmp ult i32 %431, %65
  br i1 %432, label %433, label %499

; <label>:433                                     ; preds = %420
  %434 = shl nuw nsw i32 %431, 2
  %435 = add nuw nsw i32 %434, 9
  %436 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %435)  ; CBufferLoadLegacy(handle,regIndex)
  %437 = extractvalue %dx.types.CBufRet.f32 %436, 0
  %438 = extractvalue %dx.types.CBufRet.f32 %436, 1
  %439 = extractvalue %dx.types.CBufRet.f32 %436, 3
  %440 = add nuw nsw i32 %434, 10
  %441 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %440)  ; CBufferLoadLegacy(handle,regIndex)
  %442 = extractvalue %dx.types.CBufRet.f32 %441, 0
  %443 = extractvalue %dx.types.CBufRet.f32 %441, 1
  %444 = extractvalue %dx.types.CBufRet.f32 %441, 3
  %445 = add nuw nsw i32 %434, 11
  %446 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %445)  ; CBufferLoadLegacy(handle,regIndex)
  %447 = extractvalue %dx.types.CBufRet.f32 %446, 0
  %448 = extractvalue %dx.types.CBufRet.f32 %446, 1
  %449 = extractvalue %dx.types.CBufRet.f32 %446, 3
  %450 = add nuw nsw i32 %434, 12
  %451 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %450)  ; CBufferLoadLegacy(handle,regIndex)
  %452 = extractvalue %dx.types.CBufRet.f32 %451, 0
  %453 = extractvalue %dx.types.CBufRet.f32 %451, 1
  %454 = extractvalue %dx.types.CBufRet.f32 %451, 3
  %455 = fmul fast float %437, %337
  %456 = call float @dx.op.tertiary.f32(i32 46, float %338, float %442, float %455)  ; FMad(a,b,c)
  %457 = call float @dx.op.tertiary.f32(i32 46, float %339, float %447, float %456)  ; FMad(a,b,c)
  %458 = fadd fast float %457, %452
  %459 = fmul fast float %438, %337
  %460 = call float @dx.op.tertiary.f32(i32 46, float %338, float %443, float %459)  ; FMad(a,b,c)
  %461 = call float @dx.op.tertiary.f32(i32 46, float %339, float %448, float %460)  ; FMad(a,b,c)
  %462 = fadd fast float %461, %453
  %463 = fmul fast float %439, %337
  %464 = call float @dx.op.tertiary.f32(i32 46, float %338, float %444, float %463)  ; FMad(a,b,c)
  %465 = call float @dx.op.tertiary.f32(i32 46, float %339, float %449, float %464)  ; FMad(a,b,c)
  %466 = fadd fast float %465, %454
  %467 = fdiv fast float %458, %466
  %468 = fdiv fast float %462, %466
  %469 = add nuw nsw i32 %431, 25
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %469)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %473 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %474 = extractvalue %dx.types.CBufRet.f32 %470, 3
  %475 = fcmp fast ole float %467, %473
  %476 = fcmp fast ole float %468, %474
  %477 = fcmp fast oge float %467, %471
  %478 = fcmp fast oge float %468, %472
  %479 = and i1 %477, %475
  %480 = and i1 %478, %476
  %481 = and i1 %479, %480
  br i1 %481, label %482, label %499

; <label>:482                                     ; preds = %433
  %483 = extractvalue %dx.types.CBufRet.f32 %451, 2
  %484 = extractvalue %dx.types.CBufRet.f32 %446, 2
  %485 = extractvalue %dx.types.CBufRet.f32 %441, 2
  %486 = extractvalue %dx.types.CBufRet.f32 %436, 2
  %487 = fmul fast float %486, %337
  %488 = call float @dx.op.tertiary.f32(i32 46, float %338, float %485, float %487)  ; FMad(a,b,c)
  %489 = call float @dx.op.tertiary.f32(i32 46, float %339, float %484, float %488)  ; FMad(a,b,c)
  %490 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %492 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %490, %dx.types.Handle %491, float %467, float %468, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %493 = extractvalue %dx.types.ResRet.f32 %492, 0
  %494 = fsub fast float 1.000000e+00, %483
  %495 = fsub fast float %494, %489
  %496 = fsub fast float %493, %73
  %497 = fcmp fast olt float %495, %496
  %498 = uitofp i1 %497 to float
  br label %499

; <label>:499                                     ; preds = %482, %433, %420, %417
  %500 = phi float [ %498, %482 ], [ 1.000000e+00, %433 ], [ 1.000000e+00, %420 ], [ 1.000000e+00, %417 ]
  %501 = fmul fast float %500, %418
  %502 = fsub fast float %337, %345
  %503 = fsub fast float %338, %346
  %504 = fsub fast float %339, %347
  %505 = mul i32 %66, 336
  %506 = add i32 %505, 128
  %507 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %508 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %506, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %509 = add i32 %505, 144
  %510 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %509, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %511 = add i32 %505, 160
  %512 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %511, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %513 = add i32 %505, 176
  %514 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %513, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %515 = add i32 %505, 256
  %516 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %515, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %517 = extractvalue %dx.types.ResRet.i32 %516, 0
  %518 = extractvalue %dx.types.ResRet.i32 %516, 1
  %519 = extractvalue %dx.types.ResRet.i32 %516, 2
  %520 = bitcast i32 %517 to float
  %521 = bitcast i32 %518 to float
  %522 = bitcast i32 %519 to float
  %523 = add i32 %505, 268
  %524 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %523, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %525 = extractvalue %dx.types.ResRet.i32 %524, 0
  %526 = add i32 %505, 272
  %527 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %526, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %528 = add i32 %505, 288
  %529 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %528, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %530 = icmp eq i32 %525, 0
  %531 = fadd fast float %520, %341
  %532 = fadd fast float %521, %342
  %533 = fadd fast float %522, %343
  %534 = fmul fast float %531, 2.097152e+06
  %535 = fmul fast float %532, 2.097152e+06
  %536 = fmul fast float %533, 2.097152e+06
  %537 = fadd fast float %534, %502
  %538 = fadd fast float %535, %503
  %539 = fadd fast float %536, %504
  br i1 %530, label %540, label %780

; <label>:540                                     ; preds = %499
  %541 = extractvalue %dx.types.ResRet.i32 %529, 2
  %542 = bitcast i32 %541 to float
  %543 = extractvalue %dx.types.ResRet.i32 %529, 1
  %544 = bitcast i32 %543 to float
  %545 = extractvalue %dx.types.ResRet.i32 %529, 0
  %546 = bitcast i32 %545 to float
  %547 = add i32 %505, 320
  %548 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %547, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %549 = extractvalue %dx.types.ResRet.i32 %548, 0
  %550 = add i32 %505, 316
  %551 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %550, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %552 = extractvalue %dx.types.ResRet.i32 %551, 0
  %553 = add i32 %505, 300
  %554 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %553, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %555 = extractvalue %dx.types.ResRet.i32 %554, 0
  %556 = bitcast i32 %555 to float
  %557 = fadd fast float %537, %546
  %558 = fadd fast float %538, %544
  %559 = fadd fast float %539, %542
  %560 = fmul fast float %557, %557
  %561 = fmul fast float %558, %558
  %562 = fadd fast float %560, %561
  %563 = fmul fast float %559, %559
  %564 = fadd fast float %562, %563
  %565 = call float @dx.op.unary.f32(i32 24, float %564)  ; Sqrt(value)
  %566 = call float @dx.op.unary.f32(i32 23, float %565)  ; Log(value)
  %567 = fadd fast float %566, %556
  %568 = call float @dx.op.unary.f32(i32 27, float %567)  ; Round_ni(value)
  %569 = fptosi float %568 to i32
  %570 = sub nsw i32 %569, %552
  %571 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %570)  ; IMax(a,b)
  %572 = icmp slt i32 %571, %549
  br i1 %572, label %573, label %952

; <label>:573                                     ; preds = %540
  %574 = add nsw i32 %571, %66
  %575 = mul i32 %574, 336
  %576 = add i32 %575, 128
  %577 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %576, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %578 = extractvalue %dx.types.ResRet.i32 %577, 0
  %579 = extractvalue %dx.types.ResRet.i32 %577, 1
  %580 = extractvalue %dx.types.ResRet.i32 %577, 2
  %581 = bitcast i32 %578 to float
  %582 = bitcast i32 %579 to float
  %583 = bitcast i32 %580 to float
  %584 = add i32 %575, 144
  %585 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %584, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %586 = extractvalue %dx.types.ResRet.i32 %585, 0
  %587 = extractvalue %dx.types.ResRet.i32 %585, 1
  %588 = extractvalue %dx.types.ResRet.i32 %585, 2
  %589 = bitcast i32 %586 to float
  %590 = bitcast i32 %587 to float
  %591 = bitcast i32 %588 to float
  %592 = add i32 %575, 160
  %593 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %592, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %594 = extractvalue %dx.types.ResRet.i32 %593, 0
  %595 = extractvalue %dx.types.ResRet.i32 %593, 1
  %596 = extractvalue %dx.types.ResRet.i32 %593, 2
  %597 = bitcast i32 %594 to float
  %598 = bitcast i32 %595 to float
  %599 = bitcast i32 %596 to float
  %600 = add i32 %575, 176
  %601 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %600, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %602 = extractvalue %dx.types.ResRet.i32 %601, 0
  %603 = extractvalue %dx.types.ResRet.i32 %601, 1
  %604 = extractvalue %dx.types.ResRet.i32 %601, 2
  %605 = bitcast i32 %602 to float
  %606 = bitcast i32 %603 to float
  %607 = bitcast i32 %604 to float
  %608 = add i32 %575, 256
  %609 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %608, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %610 = extractvalue %dx.types.ResRet.i32 %609, 0
  %611 = extractvalue %dx.types.ResRet.i32 %609, 1
  %612 = extractvalue %dx.types.ResRet.i32 %609, 2
  %613 = bitcast i32 %610 to float
  %614 = bitcast i32 %611 to float
  %615 = bitcast i32 %612 to float
  %616 = add i32 %575, 272
  %617 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %616, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %618 = extractvalue %dx.types.ResRet.i32 %617, 0
  %619 = extractvalue %dx.types.ResRet.i32 %617, 1
  %620 = extractvalue %dx.types.ResRet.i32 %617, 2
  %621 = bitcast i32 %618 to float
  %622 = bitcast i32 %619 to float
  %623 = bitcast i32 %620 to float
  %624 = fadd fast float %613, %341
  %625 = fadd fast float %614, %342
  %626 = fadd fast float %615, %343
  %627 = fmul fast float %624, 2.097152e+06
  %628 = fmul fast float %625, 2.097152e+06
  %629 = fmul fast float %626, 2.097152e+06
  %630 = fadd fast float %627, %502
  %631 = fadd fast float %630, %621
  %632 = fadd fast float %628, %503
  %633 = fadd fast float %632, %622
  %634 = fadd fast float %629, %504
  %635 = fadd fast float %634, %623
  %636 = fmul fast float %631, %581
  %637 = call float @dx.op.tertiary.f32(i32 46, float %633, float %589, float %636)  ; FMad(a,b,c)
  %638 = call float @dx.op.tertiary.f32(i32 46, float %635, float %597, float %637)  ; FMad(a,b,c)
  %639 = fadd fast float %638, %605
  %640 = fmul fast float %631, %582
  %641 = call float @dx.op.tertiary.f32(i32 46, float %633, float %590, float %640)  ; FMad(a,b,c)
  %642 = call float @dx.op.tertiary.f32(i32 46, float %635, float %598, float %641)  ; FMad(a,b,c)
  %643 = fadd fast float %642, %606
  %644 = fmul fast float %631, %583
  %645 = call float @dx.op.tertiary.f32(i32 46, float %633, float %591, float %644)  ; FMad(a,b,c)
  %646 = call float @dx.op.tertiary.f32(i32 46, float %635, float %599, float %645)  ; FMad(a,b,c)
  %647 = fadd fast float %646, %607
  %648 = fmul fast float %639, 1.280000e+02
  %649 = fmul fast float %643, 1.280000e+02
  %650 = fptoui float %648 to i32
  %651 = fptoui float %649 to i32
  %652 = icmp ult i32 %574, 8192
  br i1 %652, label %659, label %653

; <label>:653                                     ; preds = %573
  %654 = mul i32 %574, 21845
  %655 = shl i32 %651, 7
  %656 = add i32 %654, -178946048
  %657 = add i32 %656, %650
  %658 = add i32 %657, %655
  br label %659

; <label>:659                                     ; preds = %653, %573
  %660 = phi i32 [ %658, %653 ], [ %574, %573 ]
  %661 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %662 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %661, i32 %660, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %663 = extractvalue %dx.types.ResRet.i32 %662, 0
  %664 = lshr i32 %663, 20
  %665 = and i32 %664, 63
  %666 = and i32 %663, 134217728
  %667 = icmp eq i32 %666, 0
  br i1 %667, label %774, label %668

; <label>:668                                     ; preds = %659
  %669 = icmp eq i32 %665, 0
  %670 = zext i1 %669 to i32
  %671 = add i32 %665, %574
  %672 = fmul fast float %639, 1.638400e+04
  %673 = fmul fast float %643, 1.638400e+04
  %674 = fptoui float %672 to i32
  %675 = fptoui float %673 to i32
  br i1 %669, label %751, label %676

; <label>:676                                     ; preds = %668
  %677 = add i32 %575, 304
  %678 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %677, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %679 = extractvalue %dx.types.ResRet.i32 %678, 0
  %680 = extractvalue %dx.types.ResRet.i32 %678, 1
  %681 = mul i32 %671, 336
  %682 = add i32 %681, 304
  %683 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %682, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %684 = extractvalue %dx.types.ResRet.i32 %683, 0
  %685 = extractvalue %dx.types.ResRet.i32 %683, 1
  %686 = shl i32 %679, 5
  %687 = shl i32 %680, 5
  %688 = shl i32 %684, 5
  %689 = shl i32 %685, 5
  %690 = sub i32 %650, %686
  %691 = sub i32 %651, %687
  %692 = and i32 %664, 31
  %693 = shl i32 %688, %692
  %694 = shl i32 %689, %692
  %695 = add i32 %690, %693
  %696 = add i32 %691, %694
  %697 = lshr i32 %695, %692
  %698 = lshr i32 %696, %692
  %699 = shl i32 %697, 7
  %700 = shl i32 %698, 7
  %701 = or i32 %699, 127
  %702 = or i32 %700, 127
  %703 = add i32 %575, 112
  %704 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %703, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %705 = extractvalue %dx.types.ResRet.i32 %704, 2
  %706 = bitcast i32 %705 to float
  %707 = add i32 %681, 112
  %708 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %707, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %709 = extractvalue %dx.types.ResRet.i32 %708, 2
  %710 = bitcast i32 %709 to float
  %711 = sitofp i32 %679 to float
  %712 = sitofp i32 %680 to float
  %713 = sitofp i32 %684 to float
  %714 = sitofp i32 %685 to float
  %715 = shl i32 1, %692
  %716 = uitofp i32 %715 to float
  %717 = fdiv fast float 1.000000e+00, %716
  %718 = fmul fast float %717, %711
  %719 = fmul fast float %717, %712
  %720 = fsub fast float %713, %718
  %721 = fsub fast float %714, %719
  %722 = fmul fast float %720, 2.500000e-01
  %723 = fmul fast float %721, 2.500000e-01
  %724 = fmul fast float %717, %706
  %725 = fsub fast float %710, %724
  %726 = fmul fast float %717, %639
  %727 = fmul fast float %717, %643
  %728 = fadd fast float %722, %726
  %729 = fadd fast float %723, %727
  %730 = fmul fast float %728, 1.638400e+04
  %731 = fmul fast float %729, 1.638400e+04
  %732 = fptoui float %730 to i32
  %733 = fptoui float %731 to i32
  %734 = call i32 @dx.op.binary.i32(i32 39, i32 %732, i32 %699)  ; UMax(a,b)
  %735 = call i32 @dx.op.binary.i32(i32 39, i32 %733, i32 %700)  ; UMax(a,b)
  %736 = call i32 @dx.op.binary.i32(i32 40, i32 %734, i32 %701)  ; UMin(a,b)
  %737 = call i32 @dx.op.binary.i32(i32 40, i32 %735, i32 %702)  ; UMin(a,b)
  %738 = icmp ult i32 %671, 8192
  br i1 %738, label %744, label %739

; <label>:739                                     ; preds = %676
  %740 = mul i32 %671, 21845
  %741 = add i32 %740, -178946048
  %742 = add i32 %741, %697
  %743 = add i32 %742, %700
  br label %744

; <label>:744                                     ; preds = %739, %676
  %745 = phi i32 [ %743, %739 ], [ %671, %676 ]
  %746 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %661, i32 %745, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %747 = extractvalue %dx.types.ResRet.i32 %746, 0
  %748 = and i32 %747, 200278016
  %749 = icmp eq i32 %748, 134217728
  %750 = zext i1 %749 to i32
  br label %751

; <label>:751                                     ; preds = %744, %668
  %752 = phi i32 [ %736, %744 ], [ %674, %668 ]
  %753 = phi i32 [ %737, %744 ], [ %675, %668 ]
  %754 = phi i32 [ %750, %744 ], [ %670, %668 ]
  %755 = phi i32 [ %747, %744 ], [ %663, %668 ]
  %756 = phi float [ %717, %744 ], [ 1.000000e+00, %668 ]
  %757 = phi float [ %725, %744 ], [ 0.000000e+00, %668 ]
  %758 = icmp eq i32 %754, 0
  br i1 %758, label %774, label %759

; <label>:759                                     ; preds = %751
  %760 = shl i32 %755, 7
  %761 = and i32 %760, 130944
  %762 = lshr i32 %755, 3
  %763 = and i32 %762, 130944
  %764 = and i32 %752, 127
  %765 = and i32 %753, 127
  %766 = or i32 %761, %764
  %767 = or i32 %763, %765
  %768 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %769 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %768, i32 0, i32 %766, i32 %767, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %770 = extractvalue %dx.types.ResRet.i32 %769, 0
  %771 = bitcast i32 %770 to float
  %772 = fsub fast float %771, %757
  %773 = fdiv fast float %772, %756
  br label %774

; <label>:774                                     ; preds = %759, %751, %659
  %775 = phi float [ %773, %759 ], [ 0.000000e+00, %751 ], [ 0.000000e+00, %659 ]
  %776 = phi i1 [ true, %759 ], [ false, %751 ], [ false, %659 ]
  %777 = fcmp fast ogt float %775, %647
  %778 = and i1 %776, %777
  %779 = select i1 %778, float 0.000000e+00, float 1.000000e+00
  br label %952

; <label>:780                                     ; preds = %499
  %781 = extractvalue %dx.types.ResRet.i32 %514, 3
  %782 = extractvalue %dx.types.ResRet.i32 %514, 2
  %783 = extractvalue %dx.types.ResRet.i32 %514, 1
  %784 = extractvalue %dx.types.ResRet.i32 %514, 0
  %785 = extractvalue %dx.types.ResRet.i32 %512, 3
  %786 = extractvalue %dx.types.ResRet.i32 %512, 2
  %787 = extractvalue %dx.types.ResRet.i32 %512, 1
  %788 = extractvalue %dx.types.ResRet.i32 %512, 0
  %789 = extractvalue %dx.types.ResRet.i32 %510, 3
  %790 = extractvalue %dx.types.ResRet.i32 %510, 2
  %791 = extractvalue %dx.types.ResRet.i32 %510, 1
  %792 = extractvalue %dx.types.ResRet.i32 %510, 0
  %793 = extractvalue %dx.types.ResRet.i32 %508, 3
  %794 = extractvalue %dx.types.ResRet.i32 %508, 2
  %795 = extractvalue %dx.types.ResRet.i32 %508, 1
  %796 = extractvalue %dx.types.ResRet.i32 %508, 0
  %797 = extractvalue %dx.types.ResRet.i32 %527, 2
  %798 = bitcast i32 %797 to float
  %799 = extractvalue %dx.types.ResRet.i32 %527, 1
  %800 = bitcast i32 %799 to float
  %801 = extractvalue %dx.types.ResRet.i32 %527, 0
  %802 = bitcast i32 %801 to float
  %803 = fadd fast float %537, %802
  %804 = fadd fast float %538, %800
  %805 = fadd fast float %539, %798
  %806 = icmp eq i32 %525, 2
  br i1 %806, label %853, label %807

; <label>:807                                     ; preds = %780
  %808 = call float @dx.op.unary.f32(i32 6, float %803)  ; FAbs(value)
  %809 = call float @dx.op.unary.f32(i32 6, float %804)  ; FAbs(value)
  %810 = fcmp fast ult float %808, %809
  %811 = call float @dx.op.unary.f32(i32 6, float %805)  ; FAbs(value)
  %812 = fcmp fast ult float %808, %811
  %813 = or i1 %810, %812
  br i1 %813, label %817, label %814

; <label>:814                                     ; preds = %807
  %815 = fcmp ule float %803, 0.000000e+00
  %816 = zext i1 %815 to i32
  br label %825

; <label>:817                                     ; preds = %807
  %818 = fcmp fast ogt float %809, %811
  br i1 %818, label %819, label %822

; <label>:819                                     ; preds = %817
  %820 = fcmp fast ogt float %804, 0.000000e+00
  %821 = select i1 %820, i32 2, i32 3
  br label %825

; <label>:822                                     ; preds = %817
  %823 = fcmp fast ogt float %805, 0.000000e+00
  %824 = select i1 %823, i32 4, i32 5
  br label %825

; <label>:825                                     ; preds = %822, %819, %814
  %826 = phi i32 [ %816, %814 ], [ %821, %819 ], [ %824, %822 ]
  %827 = add i32 %826, %66
  %828 = mul i32 %827, 336
  %829 = add i32 %828, 128
  %830 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %829, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %831 = extractvalue %dx.types.ResRet.i32 %830, 0
  %832 = extractvalue %dx.types.ResRet.i32 %830, 1
  %833 = extractvalue %dx.types.ResRet.i32 %830, 2
  %834 = extractvalue %dx.types.ResRet.i32 %830, 3
  %835 = add i32 %828, 144
  %836 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %835, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %837 = extractvalue %dx.types.ResRet.i32 %836, 0
  %838 = extractvalue %dx.types.ResRet.i32 %836, 1
  %839 = extractvalue %dx.types.ResRet.i32 %836, 2
  %840 = extractvalue %dx.types.ResRet.i32 %836, 3
  %841 = add i32 %828, 160
  %842 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %841, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %843 = extractvalue %dx.types.ResRet.i32 %842, 0
  %844 = extractvalue %dx.types.ResRet.i32 %842, 1
  %845 = extractvalue %dx.types.ResRet.i32 %842, 2
  %846 = extractvalue %dx.types.ResRet.i32 %842, 3
  %847 = add i32 %828, 176
  %848 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %507, i32 %847, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %849 = extractvalue %dx.types.ResRet.i32 %848, 0
  %850 = extractvalue %dx.types.ResRet.i32 %848, 1
  %851 = extractvalue %dx.types.ResRet.i32 %848, 2
  %852 = extractvalue %dx.types.ResRet.i32 %848, 3
  br label %853

; <label>:853                                     ; preds = %825, %780
  %854 = phi i32 [ %831, %825 ], [ %796, %780 ]
  %855 = phi i32 [ %832, %825 ], [ %795, %780 ]
  %856 = phi i32 [ %833, %825 ], [ %794, %780 ]
  %857 = phi i32 [ %834, %825 ], [ %793, %780 ]
  %858 = phi i32 [ %837, %825 ], [ %792, %780 ]
  %859 = phi i32 [ %838, %825 ], [ %791, %780 ]
  %860 = phi i32 [ %839, %825 ], [ %790, %780 ]
  %861 = phi i32 [ %840, %825 ], [ %789, %780 ]
  %862 = phi i32 [ %843, %825 ], [ %788, %780 ]
  %863 = phi i32 [ %844, %825 ], [ %787, %780 ]
  %864 = phi i32 [ %845, %825 ], [ %786, %780 ]
  %865 = phi i32 [ %846, %825 ], [ %785, %780 ]
  %866 = phi i32 [ %849, %825 ], [ %784, %780 ]
  %867 = phi i32 [ %850, %825 ], [ %783, %780 ]
  %868 = phi i32 [ %851, %825 ], [ %782, %780 ]
  %869 = phi i32 [ %852, %825 ], [ %781, %780 ]
  %870 = phi i32 [ %827, %825 ], [ %66, %780 ]
  %871 = bitcast i32 %869 to float
  %872 = bitcast i32 %868 to float
  %873 = bitcast i32 %867 to float
  %874 = bitcast i32 %866 to float
  %875 = bitcast i32 %865 to float
  %876 = bitcast i32 %864 to float
  %877 = bitcast i32 %863 to float
  %878 = bitcast i32 %862 to float
  %879 = bitcast i32 %861 to float
  %880 = bitcast i32 %860 to float
  %881 = bitcast i32 %859 to float
  %882 = bitcast i32 %858 to float
  %883 = bitcast i32 %857 to float
  %884 = bitcast i32 %856 to float
  %885 = bitcast i32 %855 to float
  %886 = bitcast i32 %854 to float
  %887 = fmul fast float %886, %803
  %888 = call float @dx.op.tertiary.f32(i32 46, float %804, float %882, float %887)  ; FMad(a,b,c)
  %889 = call float @dx.op.tertiary.f32(i32 46, float %805, float %878, float %888)  ; FMad(a,b,c)
  %890 = fadd fast float %889, %874
  %891 = fmul fast float %885, %803
  %892 = call float @dx.op.tertiary.f32(i32 46, float %804, float %881, float %891)  ; FMad(a,b,c)
  %893 = call float @dx.op.tertiary.f32(i32 46, float %805, float %877, float %892)  ; FMad(a,b,c)
  %894 = fadd fast float %893, %873
  %895 = fmul fast float %884, %803
  %896 = call float @dx.op.tertiary.f32(i32 46, float %804, float %880, float %895)  ; FMad(a,b,c)
  %897 = call float @dx.op.tertiary.f32(i32 46, float %805, float %876, float %896)  ; FMad(a,b,c)
  %898 = fadd fast float %897, %872
  %899 = fmul fast float %883, %803
  %900 = call float @dx.op.tertiary.f32(i32 46, float %804, float %879, float %899)  ; FMad(a,b,c)
  %901 = call float @dx.op.tertiary.f32(i32 46, float %805, float %875, float %900)  ; FMad(a,b,c)
  %902 = fadd fast float %901, %871
  %903 = fdiv fast float %890, %902
  %904 = fdiv fast float %894, %902
  %905 = fdiv fast float %898, %902
  %906 = icmp ult i32 %870, 8192
  br i1 %906, label %917, label %907

; <label>:907                                     ; preds = %853
  %908 = fmul fast float %904, 1.280000e+02
  %909 = fptoui float %908 to i32
  %910 = fmul fast float %903, 1.280000e+02
  %911 = fptoui float %910 to i32
  %912 = mul i32 %870, 21845
  %913 = shl i32 %909, 7
  %914 = add i32 %912, -178946048
  %915 = add i32 %914, %911
  %916 = add i32 %915, %913
  br label %917

; <label>:917                                     ; preds = %907, %853
  %918 = phi i32 [ %916, %907 ], [ %870, %853 ]
  %919 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %920 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %919, i32 %918, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %921 = extractvalue %dx.types.ResRet.i32 %920, 0
  %922 = lshr i32 %921, 20
  %923 = and i32 %921, 134217728
  %924 = icmp eq i32 %923, 0
  %925 = and i32 %922, 31
  %926 = lshr i32 16384, %925
  %927 = uitofp i32 %926 to float
  %928 = select i1 %906, float 1.280000e+02, float %927
  br i1 %924, label %946, label %929

; <label>:929                                     ; preds = %917
  %930 = lshr i32 %921, 3
  %931 = and i32 %930, 130944
  %932 = fmul fast float %928, %904
  %933 = fptoui float %932 to i32
  %934 = and i32 %933, 127
  %935 = or i32 %934, %931
  %936 = shl i32 %921, 7
  %937 = and i32 %936, 130944
  %938 = fmul fast float %928, %903
  %939 = fptoui float %938 to i32
  %940 = and i32 %939, 127
  %941 = or i32 %940, %937
  %942 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %943 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %942, i32 0, i32 %941, i32 %935, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %944 = extractvalue %dx.types.ResRet.i32 %943, 0
  %945 = bitcast i32 %944 to float
  br label %946

; <label>:946                                     ; preds = %929, %917
  %947 = phi float [ %945, %929 ], [ 0.000000e+00, %917 ]
  %948 = phi i1 [ true, %929 ], [ false, %917 ]
  %949 = fcmp fast ogt float %947, %905
  %950 = and i1 %948, %949
  %951 = select i1 %950, float 0.000000e+00, float 1.000000e+00
  br label %952

; <label>:952                                     ; preds = %946, %774, %540
  %953 = phi float [ 1.000000e+00, %540 ], [ %779, %774 ], [ %951, %946 ]
  %954 = fmul fast float %501, %953
  br label %955

; <label>:955                                     ; preds = %952, %376
  %956 = phi float [ %954, %952 ], [ 1.000000e+00, %376 ]
  %957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %958 = extractvalue %dx.types.CBufRet.f32 %957, 0
  %959 = extractvalue %dx.types.CBufRet.f32 %957, 1
  %960 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %961 = extractvalue %dx.types.CBufRet.f32 %960, 0
  %962 = extractvalue %dx.types.CBufRet.f32 %960, 1
  %963 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %964 = extractvalue %dx.types.CBufRet.f32 %963, 0
  %965 = extractvalue %dx.types.CBufRet.f32 %963, 1
  %966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %967 = extractvalue %dx.types.CBufRet.f32 %966, 0
  %968 = extractvalue %dx.types.CBufRet.f32 %966, 1
  %969 = fmul fast float %958, %337
  %970 = call float @dx.op.tertiary.f32(i32 46, float %338, float %961, float %969)  ; FMad(a,b,c)
  %971 = call float @dx.op.tertiary.f32(i32 46, float %339, float %964, float %970)  ; FMad(a,b,c)
  %972 = fadd fast float %971, %967
  %973 = fmul fast float %959, %337
  %974 = call float @dx.op.tertiary.f32(i32 46, float %338, float %962, float %973)  ; FMad(a,b,c)
  %975 = call float @dx.op.tertiary.f32(i32 46, float %339, float %965, float %974)  ; FMad(a,b,c)
  %976 = fadd fast float %975, %968
  %977 = fmul fast float %972, 5.000000e-01
  %978 = fmul fast float %976, 5.000000e-01
  %979 = fadd fast float %977, 5.000000e-01
  %980 = fsub fast float 5.000000e-01, %978
  %981 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %982 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %983 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %981, %dx.types.Handle %982, float %979, float %980, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %984 = extractvalue %dx.types.ResRet.f32 %983, 0
  %985 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %986 = extractvalue %dx.types.CBufRet.f32 %985, 2
  %987 = fcmp fast ogt float %986, 0.000000e+00
  br i1 %987, label %988, label %997

; <label>:988                                     ; preds = %955
  %989 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %990 = extractvalue %dx.types.CBufRet.f32 %989, 0
  %991 = extractvalue %dx.types.CBufRet.f32 %989, 1
  %992 = extractvalue %dx.types.CBufRet.f32 %989, 2
  %993 = call float @dx.op.dot3.f32(i32 55, float %60, float %61, float %62, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %994 = fmul fast float %990, %993
  %995 = fmul fast float %991, %993
  %996 = fmul fast float %992, %993
  br label %997

; <label>:997                                     ; preds = %988, %955
  %998 = phi float [ %994, %988 ], [ %60, %955 ]
  %999 = phi float [ %995, %988 ], [ %61, %955 ]
  %1000 = phi float [ %996, %988 ], [ %62, %955 ]
  %1001 = fsub fast float -0.000000e+00, %370
  %1002 = fsub fast float -0.000000e+00, %371
  %1003 = fsub fast float -0.000000e+00, %372
  %1004 = call float @dx.op.dot3.f32(i32 55, float %56, float %57, float %58, float %1001, float %1002, float %1003)  ; Dot3(ax,ay,az,bx,by,bz)
  %1005 = extractvalue %dx.types.CBufRet.f32 %254, 1
  %1006 = fmul fast float %1005, %1005
  %1007 = fsub fast float 1.000000e+00, %1006
  %1008 = fmul fast float %1004, 2.000000e+00
  %1009 = fadd fast float %1008, %1005
  %1010 = fmul fast float %1009, %1005
  %1011 = fadd fast float %1010, 1.000000e+00
  %1012 = call float @dx.op.unary.f32(i32 24, float %1011)  ; Sqrt(value)
  %1013 = fmul fast float %1012, 0x402921FB60000000
  %1014 = fmul fast float %1013, %1011
  %1015 = fdiv fast float %1007, %1014
  %1016 = fmul fast float %956, %63
  %1017 = fmul fast float %1016, %984
  %1018 = fmul fast float %1017, %1015
  %1019 = fmul fast float %1018, %998
  %1020 = fmul fast float %1018, %999
  %1021 = fmul fast float %1018, %1000
  br label %1022

; <label>:1022                                    ; preds = %997, %374
  %1023 = phi float [ %375, %374 ], [ %1005, %997 ]
  %1024 = phi float [ 0.000000e+00, %374 ], [ %1019, %997 ]
  %1025 = phi float [ 0.000000e+00, %374 ], [ %1020, %997 ]
  %1026 = phi float [ 0.000000e+00, %374 ], [ %1021, %997 ]
  %1027 = fmul fast float %1023, %371
  %1028 = fmul fast float %1023, %372
  %1029 = fmul fast float %1023, %370
  %1030 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1031 = extractvalue %dx.types.CBufRet.f32 %1030, 3
  %1032 = fcmp fast ogt float %1031, 0.000000e+00
  %1033 = extractvalue %dx.types.CBufRet.f32 %1030, 2
  %1034 = fcmp fast ogt float %1033, 0.000000e+00
  %1035 = or i1 %1032, %1034
  br i1 %1035, label %1036, label %1104

; <label>:1036                                    ; preds = %1022
  %1037 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1038 = extractvalue %dx.types.CBufRet.f32 %1037, 0
  %1039 = extractvalue %dx.types.CBufRet.f32 %1037, 1
  %1040 = extractvalue %dx.types.CBufRet.f32 %1037, 2
  %1041 = fmul fast float %1038, %352
  %1042 = fmul fast float %1039, %354
  %1043 = fmul fast float %1040, %356
  %1044 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1045 = extractvalue %dx.types.CBufRet.f32 %1044, 0
  %1046 = extractvalue %dx.types.CBufRet.f32 %1044, 1
  %1047 = extractvalue %dx.types.CBufRet.f32 %1044, 2
  %1048 = fadd fast float %1041, %1045
  %1049 = fadd fast float %1042, %1046
  %1050 = fadd fast float %1043, %1047
  %1051 = call float @dx.op.binary.f32(i32 35, float %1048, float 0.000000e+00)  ; FMax(a,b)
  %1052 = call float @dx.op.binary.f32(i32 35, float %1049, float 0.000000e+00)  ; FMax(a,b)
  %1053 = call float @dx.op.binary.f32(i32 35, float %1050, float 0.000000e+00)  ; FMax(a,b)
  %1054 = call float @dx.op.binary.f32(i32 36, float %1051, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1055 = call float @dx.op.binary.f32(i32 36, float %1052, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1056 = call float @dx.op.binary.f32(i32 36, float %1053, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1057 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1058 = extractvalue %dx.types.CBufRet.f32 %1057, 0
  %1059 = extractvalue %dx.types.CBufRet.f32 %1057, 1
  %1060 = extractvalue %dx.types.CBufRet.f32 %1057, 2
  %1061 = fmul fast float %1058, %1054
  %1062 = fmul fast float %1059, %1055
  %1063 = fmul fast float %1060, %1056
  %1064 = fptosi float %1061 to i32
  %1065 = fptosi float %1062 to i32
  %1066 = fptosi float %1063 to i32
  %1067 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1068 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1067, i32 0, i32 %1064, i32 %1065, i32 %1066, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1069 = extractvalue %dx.types.ResRet.i32 %1068, 0
  %1070 = extractvalue %dx.types.ResRet.i32 %1068, 1
  %1071 = extractvalue %dx.types.ResRet.i32 %1068, 2
  %1072 = extractvalue %dx.types.ResRet.i32 %1068, 3
  %1073 = uitofp i32 %1069 to float
  %1074 = uitofp i32 %1070 to float
  %1075 = uitofp i32 %1071 to float
  %1076 = uitofp i32 %1072 to float
  %1077 = extractvalue %dx.types.CBufRet.f32 %1057, 3
  %1078 = fadd fast float %1077, 1.000000e+00
  %1079 = fmul fast float %1078, %1073
  %1080 = fmul fast float %1078, %1074
  %1081 = fmul fast float %1078, %1075
  %1082 = fdiv fast float %1061, %1076
  %1083 = fdiv fast float %1062, %1076
  %1084 = fdiv fast float %1063, %1076
  %1085 = call float @dx.op.unary.f32(i32 22, float %1082)  ; Frc(value)
  %1086 = call float @dx.op.unary.f32(i32 22, float %1083)  ; Frc(value)
  %1087 = call float @dx.op.unary.f32(i32 22, float %1084)  ; Frc(value)
  %1088 = fmul fast float %1077, %1085
  %1089 = fmul fast float %1077, %1086
  %1090 = fmul fast float %1077, %1087
  %1091 = fadd fast float %1079, 5.000000e-01
  %1092 = fadd fast float %1091, %1088
  %1093 = fadd fast float %1080, 5.000000e-01
  %1094 = fadd fast float %1093, %1089
  %1095 = fadd fast float %1081, 5.000000e-01
  %1096 = fadd fast float %1095, %1090
  %1097 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1098 = extractvalue %dx.types.CBufRet.f32 %1097, 0
  %1099 = extractvalue %dx.types.CBufRet.f32 %1097, 1
  %1100 = extractvalue %dx.types.CBufRet.f32 %1097, 2
  %1101 = fmul fast float %1092, %1098
  %1102 = fmul fast float %1094, %1099
  %1103 = fmul fast float %1096, %1100
  br label %1104

; <label>:1104                                    ; preds = %1036, %1022
  %1105 = phi float [ %1101, %1036 ], [ 0.000000e+00, %1022 ]
  %1106 = phi float [ %1102, %1036 ], [ 0.000000e+00, %1022 ]
  %1107 = phi float [ %1103, %1036 ], [ 0.000000e+00, %1022 ]
  br i1 %1032, label %1108, label %1256

; <label>:1108                                    ; preds = %1104
  %1109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1110 = extractvalue %dx.types.CBufRet.f32 %1109, 3
  %1111 = fcmp fast ogt float %1110, 0.000000e+00
  br i1 %1111, label %1112, label %1190

; <label>:1112                                    ; preds = %1108
  %1113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1114 = extractvalue %dx.types.CBufRet.f32 %1113, 0
  %1115 = extractvalue %dx.types.CBufRet.f32 %1113, 1
  %1116 = extractvalue %dx.types.CBufRet.f32 %1113, 2
  %1117 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1118 = extractvalue %dx.types.CBufRet.f32 %1117, 2
  %1119 = fcmp fast ogt float %1118, 0.000000e+00
  br i1 %1119, label %1120, label %1156, !dx.controlflow.hints !52

; <label>:1120                                    ; preds = %1112
  %1121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1122 = extractvalue %dx.types.CBufRet.f32 %1121, 0
  %1123 = fmul fast float %1122, %369
  %1124 = extractvalue %dx.types.CBufRet.f32 %1121, 1
  %1125 = fadd fast float %1123, %1124
  %1126 = call float @dx.op.unary.f32(i32 7, float %1125)  ; Saturate(value)
  %1127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1128 = extractvalue %dx.types.CBufRet.f32 %1127, 1
  %1129 = extractvalue %dx.types.CBufRet.f32 %1127, 0
  %1130 = fsub fast float -0.000000e+00, %1129
  %1131 = call float @dx.op.dot2.f32(i32 54, float %370, float %371, float %1128, float %1130)  ; Dot2(ax,ay,bx,by)
  %1132 = call float @dx.op.dot2.f32(i32 54, float %370, float %371, float %1129, float %1128)  ; Dot2(ax,ay,bx,by)
  %1133 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1134 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1135 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1133, %dx.types.Handle %1134, float %1131, float %1132, float %372, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1136 = extractvalue %dx.types.ResRet.f32 %1135, 0
  %1137 = extractvalue %dx.types.ResRet.f32 %1135, 1
  %1138 = extractvalue %dx.types.ResRet.f32 %1135, 2
  %1139 = extractvalue %dx.types.CBufRet.f32 %1121, 2
  %1140 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1133, %dx.types.Handle %1134, float %1131, float %1132, float %372, float undef, i32 undef, i32 undef, i32 undef, float %1139)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1141 = extractvalue %dx.types.ResRet.f32 %1140, 0
  %1142 = extractvalue %dx.types.ResRet.f32 %1140, 1
  %1143 = extractvalue %dx.types.ResRet.f32 %1140, 2
  %1144 = fsub fast float %1136, %1141
  %1145 = fsub fast float %1137, %1142
  %1146 = fsub fast float %1138, %1143
  %1147 = fmul fast float %1144, %1126
  %1148 = fmul fast float %1145, %1126
  %1149 = fmul fast float %1146, %1126
  %1150 = fadd fast float %1147, %1141
  %1151 = fadd fast float %1148, %1142
  %1152 = fadd fast float %1149, %1143
  %1153 = fmul fast float %1150, %1114
  %1154 = fmul fast float %1151, %1115
  %1155 = fmul fast float %1152, %1116
  br label %1156

; <label>:1156                                    ; preds = %1120, %1112
  %1157 = phi float [ %1153, %1120 ], [ %1114, %1112 ]
  %1158 = phi float [ %1154, %1120 ], [ %1115, %1112 ]
  %1159 = phi float [ %1155, %1120 ], [ %1116, %1112 ]
  %1160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1161 = extractvalue %dx.types.CBufRet.f32 %1160, 0
  %1162 = extractvalue %dx.types.CBufRet.f32 %1160, 1
  %1163 = extractvalue %dx.types.CBufRet.f32 %1160, 2
  %1164 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1165 = extractvalue %dx.types.CBufRet.f32 %1164, 1
  %1166 = fmul fast float %1165, %1161
  %1167 = fmul fast float %1165, %1162
  %1168 = fmul fast float %1165, %1163
  %1169 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1170 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1171 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1169, %dx.types.Handle %1170, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1172 = extractvalue %dx.types.ResRet.f32 %1171, 0
  %1173 = extractvalue %dx.types.ResRet.f32 %1171, 1
  %1174 = extractvalue %dx.types.ResRet.f32 %1171, 2
  %1175 = fmul fast float %1166, %1172
  %1176 = fmul fast float %1167, %1173
  %1177 = fmul fast float %1168, %1174
  %1178 = fadd fast float %1175, %1157
  %1179 = fadd fast float %1176, %1158
  %1180 = fadd fast float %1177, %1159
  %1181 = fmul fast float %1178, 0x3FD20DD740000000
  %1182 = fmul fast float %1179, 0x3FD20DD740000000
  %1183 = fmul fast float %1180, 0x3FD20DD740000000
  %1184 = call float @dx.op.dot4.f32(i32 56, float %1181, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1185 = call float @dx.op.dot4.f32(i32 56, float %1182, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1186 = call float @dx.op.dot4.f32(i32 56, float %1183, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1187 = call float @dx.op.binary.f32(i32 35, float %1184, float 0.000000e+00)  ; FMax(a,b)
  %1188 = call float @dx.op.binary.f32(i32 35, float %1185, float 0.000000e+00)  ; FMax(a,b)
  %1189 = call float @dx.op.binary.f32(i32 35, float %1186, float 0.000000e+00)  ; FMax(a,b)
  br label %1222

; <label>:1190                                    ; preds = %1108
  %1191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1192 = extractvalue %dx.types.CBufRet.f32 %1191, 0
  %1193 = extractvalue %dx.types.CBufRet.f32 %1191, 1
  %1194 = extractvalue %dx.types.CBufRet.f32 %1191, 2
  %1195 = extractvalue %dx.types.CBufRet.f32 %1191, 3
  %1196 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1197 = extractvalue %dx.types.CBufRet.f32 %1196, 0
  %1198 = extractvalue %dx.types.CBufRet.f32 %1196, 1
  %1199 = extractvalue %dx.types.CBufRet.f32 %1196, 2
  %1200 = extractvalue %dx.types.CBufRet.f32 %1196, 3
  %1201 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1202 = extractvalue %dx.types.CBufRet.f32 %1201, 0
  %1203 = extractvalue %dx.types.CBufRet.f32 %1201, 1
  %1204 = extractvalue %dx.types.CBufRet.f32 %1201, 2
  %1205 = extractvalue %dx.types.CBufRet.f32 %1201, 3
  %1206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1207 = extractvalue %dx.types.CBufRet.f32 %1206, 0
  %1208 = extractvalue %dx.types.CBufRet.f32 %1206, 1
  %1209 = extractvalue %dx.types.CBufRet.f32 %1206, 2
  %1210 = call float @dx.op.dot4.f32(i32 56, float %1192, float %1193, float %1194, float %1195, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1211 = call float @dx.op.dot4.f32(i32 56, float %1197, float %1198, float %1199, float %1200, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1212 = call float @dx.op.dot4.f32(i32 56, float %1202, float %1203, float %1204, float %1205, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1213 = call float @dx.op.binary.f32(i32 35, float %1210, float 0.000000e+00)  ; FMax(a,b)
  %1214 = call float @dx.op.binary.f32(i32 35, float %1211, float 0.000000e+00)  ; FMax(a,b)
  %1215 = call float @dx.op.binary.f32(i32 35, float %1212, float 0.000000e+00)  ; FMax(a,b)
  %1216 = fmul fast float %1207, 0x3FD45F3060000000
  %1217 = fmul fast float %1216, %1213
  %1218 = fmul fast float %1208, 0x3FD45F3060000000
  %1219 = fmul fast float %1218, %1214
  %1220 = fmul fast float %1209, 0x3FD45F3060000000
  %1221 = fmul fast float %1220, %1215
  br label %1222

; <label>:1222                                    ; preds = %1190, %1156
  %1223 = phi float [ %1187, %1156 ], [ %1217, %1190 ]
  %1224 = phi float [ %1188, %1156 ], [ %1219, %1190 ]
  %1225 = phi float [ %1189, %1156 ], [ %1221, %1190 ]
  %1226 = extractvalue %dx.types.CBufRet.f32 %254, 0
  %1227 = fcmp fast ogt float %1226, 0.000000e+00
  br i1 %1227, label %1228, label %1247

; <label>:1228                                    ; preds = %1222
  %1229 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1230 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1231 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1229, %dx.types.Handle %1230, float %1105, float %1106, float %1107, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1232 = extractvalue %dx.types.ResRet.f32 %1231, 0
  %1233 = extractvalue %dx.types.ResRet.f32 %1231, 1
  %1234 = extractvalue %dx.types.ResRet.f32 %1231, 2
  %1235 = fmul fast float %1232, 2.000000e+00
  %1236 = fmul fast float %1233, 2.000000e+00
  %1237 = fmul fast float %1234, 2.000000e+00
  %1238 = fadd fast float %1235, -1.000000e+00
  %1239 = fadd fast float %1236, -1.000000e+00
  %1240 = fadd fast float %1237, -1.000000e+00
  %1241 = fmul fast float %1238, %1238
  %1242 = fmul fast float %1239, %1239
  %1243 = fadd fast float %1241, %1242
  %1244 = fmul fast float %1240, %1240
  %1245 = fadd fast float %1243, %1244
  %1246 = call float @dx.op.unary.f32(i32 24, float %1245)  ; Sqrt(value)
  br label %1247

; <label>:1247                                    ; preds = %1228, %1222
  %1248 = phi float [ %1246, %1228 ], [ 1.000000e+00, %1222 ]
  %1249 = fmul fast float %1031, %1248
  %1250 = fmul fast float %1249, %1223
  %1251 = fmul fast float %1249, %1224
  %1252 = fmul fast float %1249, %1225
  %1253 = fadd fast float %1250, %1024
  %1254 = fadd fast float %1251, %1025
  %1255 = fadd fast float %1252, %1026
  br label %1256

; <label>:1256                                    ; preds = %1247, %1104
  %1257 = phi float [ %1253, %1247 ], [ %1024, %1104 ]
  %1258 = phi float [ %1254, %1247 ], [ %1025, %1104 ]
  %1259 = phi float [ %1255, %1247 ], [ %1026, %1104 ]
  %1260 = extractvalue %dx.types.CBufRet.f32 %1030, 2
  %1261 = fcmp fast ogt float %1260, 0.000000e+00
  br i1 %1261, label %1262, label %1327

; <label>:1262                                    ; preds = %1256
  %1263 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1264 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1265 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1263, %dx.types.Handle %1264, float %1105, float %1106, float %1107, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1266 = extractvalue %dx.types.ResRet.f32 %1265, 0
  %1267 = extractvalue %dx.types.ResRet.f32 %1265, 1
  %1268 = extractvalue %dx.types.ResRet.f32 %1265, 2
  %1269 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1270 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1269, %dx.types.Handle %1264, float %1105, float %1106, float %1107, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1271 = extractvalue %dx.types.ResRet.f32 %1270, 0
  %1272 = extractvalue %dx.types.ResRet.f32 %1270, 1
  %1273 = extractvalue %dx.types.ResRet.f32 %1270, 2
  %1274 = fmul fast float %1271, 2.000000e+00
  %1275 = fmul fast float %1272, 2.000000e+00
  %1276 = fmul fast float %1273, 2.000000e+00
  %1277 = fadd fast float %1274, -1.000000e+00
  %1278 = fadd fast float %1275, -1.000000e+00
  %1279 = fadd fast float %1276, -1.000000e+00
  %1280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1281 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1280, %dx.types.Handle %1264, float %1105, float %1106, float %1107, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1282 = extractvalue %dx.types.ResRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.ResRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.ResRet.f32 %1281, 2
  %1285 = fmul fast float %1282, 2.000000e+00
  %1286 = fmul fast float %1283, 2.000000e+00
  %1287 = fmul fast float %1284, 2.000000e+00
  %1288 = fadd fast float %1285, -1.000000e+00
  %1289 = fadd fast float %1286, -1.000000e+00
  %1290 = fadd fast float %1287, -1.000000e+00
  %1291 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1292 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1291, %dx.types.Handle %1264, float %1105, float %1106, float %1107, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1293 = extractvalue %dx.types.ResRet.f32 %1292, 0
  %1294 = extractvalue %dx.types.ResRet.f32 %1292, 1
  %1295 = extractvalue %dx.types.ResRet.f32 %1292, 2
  %1296 = fmul fast float %1293, 2.000000e+00
  %1297 = fmul fast float %1294, 2.000000e+00
  %1298 = fmul fast float %1295, 2.000000e+00
  %1299 = fadd fast float %1296, -1.000000e+00
  %1300 = fadd fast float %1297, -1.000000e+00
  %1301 = fadd fast float %1298, -1.000000e+00
  %1302 = fmul fast float %1266, 0x3FFBB67B80000000
  %1303 = fmul fast float %1302, %1277
  %1304 = fmul fast float %1302, %1278
  %1305 = fmul fast float %1302, %1279
  %1306 = fmul fast float %1267, 0x3FFBB67B80000000
  %1307 = fmul fast float %1306, %1288
  %1308 = fmul fast float %1306, %1289
  %1309 = fmul fast float %1306, %1290
  %1310 = fmul fast float %1268, 0x3FFBB67B80000000
  %1311 = fmul fast float %1310, %1299
  %1312 = fmul fast float %1310, %1300
  %1313 = fmul fast float %1310, %1301
  %1314 = fmul fast float %1260, 0x3FD45F3060000000
  %1315 = call float @dx.op.dot4.f32(i32 56, float %1266, float %1303, float %1304, float %1305, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1316 = call float @dx.op.dot4.f32(i32 56, float %1267, float %1307, float %1308, float %1309, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1317 = call float @dx.op.dot4.f32(i32 56, float %1268, float %1311, float %1312, float %1313, float 1.000000e+00, float %1027, float %1028, float %1029)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1318 = call float @dx.op.binary.f32(i32 35, float %1315, float 0.000000e+00)  ; FMax(a,b)
  %1319 = call float @dx.op.binary.f32(i32 35, float %1316, float 0.000000e+00)  ; FMax(a,b)
  %1320 = call float @dx.op.binary.f32(i32 35, float %1317, float 0.000000e+00)  ; FMax(a,b)
  %1321 = fmul fast float %1318, %1314
  %1322 = fmul fast float %1319, %1314
  %1323 = fmul fast float %1320, %1314
  %1324 = fadd fast float %1321, %1257
  %1325 = fadd fast float %1322, %1258
  %1326 = fadd fast float %1323, %1259
  br label %1327

; <label>:1327                                    ; preds = %1262, %1256
  %1328 = phi float [ %1324, %1262 ], [ %1257, %1256 ]
  %1329 = phi float [ %1325, %1262 ], [ %1258, %1256 ]
  %1330 = phi float [ %1326, %1262 ], [ %1259, %1256 ]
  %1331 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1332 = extractvalue %dx.types.CBufRet.i32 %1331, 0
  %1333 = extractvalue %dx.types.CBufRet.i32 %1331, 1
  %1334 = mul i32 %1332, %39
  %1335 = mul i32 %1333, %40
  %1336 = fmul fast float %282, %52
  %1337 = fadd fast float %1336, %53
  %1338 = call float @dx.op.unary.f32(i32 23, float %1337)  ; Log(value)
  %1339 = fmul fast float %1338, %54
  %1340 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1339)  ; FMax(a,b)
  %1341 = fptoui float %1340 to i32
  %1342 = add nsw i32 %48, -1
  %1343 = call i32 @dx.op.binary.i32(i32 40, i32 %1341, i32 %1342)  ; UMin(a,b)
  %1344 = and i32 %50, 31
  %1345 = lshr i32 %1334, %1344
  %1346 = lshr i32 %1335, %1344
  %1347 = mul i32 %1343, %47
  %1348 = add i32 %1347, %1346
  %1349 = mul i32 %1348, %46
  %1350 = add i32 %1349, %1345
  %1351 = shl i32 %1350, 1
  %1352 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1353 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1352, i32 %1351, i32 undef)  ; BufferLoad(srv,index,wot)
  %1354 = extractvalue %dx.types.ResRet.i32 %1353, 0
  %1355 = call i32 @dx.op.binary.i32(i32 40, i32 %1354, i32 %43)  ; UMin(a,b)
  %1356 = or i32 %1351, 1
  %1357 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1352, i32 %1356, i32 undef)  ; BufferLoad(srv,index,wot)
  %1358 = extractvalue %dx.types.ResRet.i32 %1357, 0
  %1359 = add i32 %39, 1
  %1360 = add i32 %40, 1
  %1361 = add i32 %41, 1
  %1362 = uitofp i32 %1359 to float
  %1363 = uitofp i32 %1360 to float
  %1364 = fadd fast float %259, %1362
  %1365 = fadd fast float %260, %1363
  %1366 = fdiv fast float %1364, %265
  %1367 = fdiv fast float %1365, %266
  %1368 = fmul fast float %1366, 2.000000e+00
  %1369 = fmul fast float %1367, 2.000000e+00
  %1370 = fadd fast float %1368, -1.000000e+00
  %1371 = fadd fast float %1369, -1.000000e+00
  %1372 = fsub fast float -0.000000e+00, %1371
  %1373 = uitofp i32 %1361 to float
  %1374 = fadd fast float %261, %1373
  %1375 = fdiv fast float %1374, %276
  %1376 = call float @dx.op.unary.f32(i32 21, float %1375)  ; Exp(value)
  %1377 = fsub fast float %1376, %279
  %1378 = fdiv fast float %1377, %281
  br i1 %285, label %1385, label %1379, !dx.controlflow.hints !49

; <label>:1379                                    ; preds = %1327
  %1380 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1381 = extractvalue %dx.types.CBufRet.f32 %1380, 2
  %1382 = fmul fast float %1381, %1378
  %1383 = extractvalue %dx.types.CBufRet.f32 %283, 2
  %1384 = fadd fast float %1382, %1383
  br label %1392

; <label>:1385                                    ; preds = %1327
  %1386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1387 = extractvalue %dx.types.CBufRet.f32 %1386, 3
  %1388 = fadd fast float %1387, %1378
  %1389 = extractvalue %dx.types.CBufRet.f32 %1386, 2
  %1390 = fmul fast float %1388, %1389
  %1391 = fdiv fast float 1.000000e+00, %1390
  br label %1392

; <label>:1392                                    ; preds = %1385, %1379
  %1393 = phi float [ %1384, %1379 ], [ %1391, %1385 ]
  %1394 = fmul fast float %302, %1370
  %1395 = call float @dx.op.tertiary.f32(i32 46, float %1372, float %307, float %1394)  ; FMad(a,b,c)
  %1396 = call float @dx.op.tertiary.f32(i32 46, float %1393, float %312, float %1395)  ; FMad(a,b,c)
  %1397 = fadd fast float %1396, %317
  %1398 = fmul fast float %303, %1370
  %1399 = call float @dx.op.tertiary.f32(i32 46, float %1372, float %308, float %1398)  ; FMad(a,b,c)
  %1400 = call float @dx.op.tertiary.f32(i32 46, float %1393, float %313, float %1399)  ; FMad(a,b,c)
  %1401 = fadd fast float %1400, %318
  %1402 = fmul fast float %304, %1370
  %1403 = call float @dx.op.tertiary.f32(i32 46, float %1372, float %309, float %1402)  ; FMad(a,b,c)
  %1404 = call float @dx.op.tertiary.f32(i32 46, float %1393, float %314, float %1403)  ; FMad(a,b,c)
  %1405 = fadd fast float %1404, %319
  %1406 = fmul fast float %305, %1370
  %1407 = call float @dx.op.tertiary.f32(i32 46, float %1372, float %310, float %1406)  ; FMad(a,b,c)
  %1408 = call float @dx.op.tertiary.f32(i32 46, float %1393, float %315, float %1407)  ; FMad(a,b,c)
  %1409 = fadd fast float %1408, %320
  %1410 = fdiv fast float %1397, %1409
  %1411 = fdiv fast float %1401, %1409
  %1412 = fdiv fast float %1405, %1409
  %1413 = fsub fast float %337, %1410
  %1414 = fsub fast float %338, %1411
  %1415 = fsub fast float %339, %1412
  %1416 = fmul fast float %1413, %1413
  %1417 = fmul fast float %1414, %1414
  %1418 = fadd fast float %1417, %1416
  %1419 = fmul fast float %1415, %1415
  %1420 = fadd fast float %1418, %1419
  %1421 = call float @dx.op.unary.f32(i32 24, float %1420)  ; Sqrt(value)
  %1422 = extractvalue %dx.types.CBufRet.f32 %254, 2
  %1423 = fmul fast float %1422, %1421
  %1424 = call float @dx.op.binary.f32(i32 35, float %1423, float 1.000000e+00)  ; FMax(a,b)
  %1425 = fmul fast float %1424, %1424
  %1426 = icmp eq i32 %1355, 0
  br i1 %1426, label %1836, label %1427

; <label>:1427                                    ; preds = %1392
  br label %1428

; <label>:1428                                    ; preds = %1829, %1427
  %1429 = phi float [ %1830, %1829 ], [ %1328, %1427 ]
  %1430 = phi float [ %1831, %1829 ], [ %1329, %1427 ]
  %1431 = phi float [ %1832, %1829 ], [ %1330, %1427 ]
  %1432 = phi i32 [ %1833, %1829 ], [ 0, %1427 ]
  %1433 = add i32 %1432, %1358
  %1434 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1435 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1434, i32 %1433, i32 undef)  ; BufferLoad(srv,index,wot)
  %1436 = extractvalue %dx.types.ResRet.i32 %1435, 0
  %1437 = mul i32 %1436, 6
  %1438 = add i32 %1437, 4
  %1439 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1440 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1438, i32 undef)  ; BufferLoad(srv,index,wot)
  %1441 = extractvalue %dx.types.ResRet.f32 %1440, 0
  %1442 = extractvalue %dx.types.ResRet.f32 %1440, 1
  %1443 = extractvalue %dx.types.ResRet.f32 %1440, 2
  %1444 = add i32 %1437, 3
  %1445 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1444, i32 undef)  ; BufferLoad(srv,index,wot)
  %1446 = extractvalue %dx.types.ResRet.f32 %1445, 3
  %1447 = add i32 %1437, 2
  %1448 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1447, i32 undef)  ; BufferLoad(srv,index,wot)
  %1449 = extractvalue %dx.types.ResRet.f32 %1448, 0
  %1450 = extractvalue %dx.types.ResRet.f32 %1448, 1
  %1451 = extractvalue %dx.types.ResRet.f32 %1448, 2
  %1452 = or i32 %1437, 1
  %1453 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1452, i32 undef)  ; BufferLoad(srv,index,wot)
  %1454 = extractvalue %dx.types.ResRet.f32 %1453, 0
  %1455 = extractvalue %dx.types.ResRet.f32 %1453, 1
  %1456 = extractvalue %dx.types.ResRet.f32 %1453, 2
  %1457 = extractvalue %dx.types.ResRet.f32 %1453, 3
  %1458 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1437, i32 undef)  ; BufferLoad(srv,index,wot)
  %1459 = extractvalue %dx.types.ResRet.f32 %1458, 3
  %1460 = bitcast float %1446 to i32
  %1461 = lshr i32 %1460, 16
  %1462 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1461)  ; LegacyF16ToF32(value)
  %1463 = fcmp fast ogt float %1462, 0.000000e+00
  br i1 %1463, label %1464, label %1829

; <label>:1464                                    ; preds = %1428
  %1465 = extractvalue %dx.types.ResRet.f32 %1458, 2
  %1466 = extractvalue %dx.types.ResRet.f32 %1458, 1
  %1467 = extractvalue %dx.types.ResRet.f32 %1458, 0
  %1468 = extractvalue %dx.types.ResRet.f32 %1448, 3
  %1469 = extractvalue %dx.types.ResRet.f32 %1445, 2
  %1470 = extractvalue %dx.types.ResRet.f32 %1445, 0
  %1471 = add i32 %1437, 5
  %1472 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1439, i32 %1471, i32 undef)  ; BufferLoad(srv,index,wot)
  %1473 = extractvalue %dx.types.ResRet.f32 %1472, 3
  %1474 = bitcast float %1468 to i32
  %1475 = lshr i32 %1474, 16
  %1476 = and i32 %1475, 3
  %1477 = bitcast float %1470 to i32
  %1478 = and i32 %1477, 65535
  %1479 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1478)  ; LegacyF16ToF32(value)
  %1480 = lshr i32 %1477, 16
  %1481 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1480)  ; LegacyF16ToF32(value)
  %1482 = bitcast float %1469 to i32
  %1483 = and i32 %1482, 65535
  %1484 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1483)  ; LegacyF16ToF32(value)
  %1485 = fsub fast float -0.000000e+00, %1484
  %1486 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1460)  ; LegacyF16ToF32(value)
  %1487 = fsub fast float -0.000000e+00, %1486
  %1488 = fcmp fast oeq float %1457, 0.000000e+00
  %1489 = icmp eq i32 %1476, 2
  %1490 = icmp eq i32 %1476, 3
  %1491 = bitcast float %1473 to i32
  %1492 = and i32 %1491, 65535
  %1493 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1492)  ; LegacyF16ToF32(value)
  %1494 = lshr i32 %1491, 16
  %1495 = and i32 %1494, 1023
  %1496 = uitofp i32 %1495 to float
  %1497 = fmul fast float %1496, 9.765625e-04
  %1498 = fsub fast float %1467, %337
  %1499 = fsub fast float %1466, %338
  %1500 = fsub fast float %1465, %339
  %1501 = call float @dx.op.dot3.f32(i32 55, float %1498, float %1499, float %1500, float %1498, float %1499, float %1500)  ; Dot3(ax,ay,az,bx,by,bz)
  %1502 = call float @dx.op.unary.f32(i32 25, float %1501)  ; Rsqrt(value)
  %1503 = fmul fast float %1502, %1498
  %1504 = fmul fast float %1502, %1499
  %1505 = fmul fast float %1502, %1500
  br i1 %1488, label %1506, label %1513

; <label>:1506                                    ; preds = %1464
  %1507 = fmul fast float %1459, %1459
  %1508 = fmul fast float %1507, %1501
  %1509 = fmul fast float %1508, %1508
  %1510 = fsub fast float 1.000000e+00, %1509
  %1511 = call float @dx.op.unary.f32(i32 7, float %1510)  ; Saturate(value)
  %1512 = fmul fast float %1511, %1511
  br label %1523

; <label>:1513                                    ; preds = %1464
  %1514 = fmul fast float %1498, %1459
  %1515 = fmul fast float %1499, %1459
  %1516 = fmul fast float %1500, %1459
  %1517 = call float @dx.op.dot3.f32(i32 55, float %1514, float %1515, float %1516, float %1514, float %1515, float %1516)  ; Dot3(ax,ay,az,bx,by,bz)
  %1518 = call float @dx.op.unary.f32(i32 7, float %1517)  ; Saturate(value)
  %1519 = fsub fast float 1.000000e+00, %1518
  %1520 = call float @dx.op.unary.f32(i32 23, float %1519)  ; Log(value)
  %1521 = fmul fast float %1520, %1457
  %1522 = call float @dx.op.unary.f32(i32 21, float %1521)  ; Exp(value)
  br label %1523

; <label>:1523                                    ; preds = %1513, %1506
  %1524 = phi float [ %1512, %1506 ], [ %1522, %1513 ]
  br i1 %1489, label %1525, label %1532

; <label>:1525                                    ; preds = %1523
  %1526 = call float @dx.op.dot3.f32(i32 55, float %1503, float %1504, float %1505, float %1449, float %1450, float %1451)  ; Dot3(ax,ay,az,bx,by,bz)
  %1527 = fsub fast float %1526, %1479
  %1528 = fmul fast float %1527, %1481
  %1529 = call float @dx.op.unary.f32(i32 7, float %1528)  ; Saturate(value)
  %1530 = fmul fast float %1529, %1529
  %1531 = fmul fast float %1530, %1524
  br label %1532

; <label>:1532                                    ; preds = %1525, %1523
  %1533 = phi float [ %1531, %1525 ], [ %1524, %1523 ]
  br i1 %1490, label %1534, label %1538

; <label>:1534                                    ; preds = %1532
  %1535 = call float @dx.op.dot3.f32(i32 55, float %1449, float %1450, float %1451, float %1503, float %1504, float %1505)  ; Dot3(ax,ay,az,bx,by,bz)
  %1536 = fcmp fast olt float %1535, 0.000000e+00
  %1537 = select i1 %1536, float 0.000000e+00, float %1533
  br label %1538

; <label>:1538                                    ; preds = %1534, %1532
  %1539 = phi float [ %1537, %1534 ], [ %1533, %1532 ]
  br i1 %1490, label %1540, label %1772

; <label>:1540                                    ; preds = %1538
  %1541 = fmul fast float %1451, %1442
  %1542 = fmul fast float %1450, %1443
  %1543 = fsub fast float %1541, %1542
  %1544 = fmul fast float %1449, %1443
  %1545 = fmul fast float %1451, %1441
  %1546 = fsub fast float %1544, %1545
  %1547 = fmul fast float %1450, %1441
  %1548 = fmul fast float %1449, %1442
  %1549 = fsub fast float %1547, %1548
  %1550 = fcmp fast ogt float %1497, 0x3FA1EB8520000000
  br i1 %1550, label %1551, label %1646

; <label>:1551                                    ; preds = %1540
  %1552 = fmul fast float %1498, %1543
  %1553 = call float @dx.op.tertiary.f32(i32 46, float %1546, float %1499, float %1552)  ; FMad(a,b,c)
  %1554 = call float @dx.op.tertiary.f32(i32 46, float %1549, float %1500, float %1553)  ; FMad(a,b,c)
  %1555 = fmul fast float %1498, %1441
  %1556 = call float @dx.op.tertiary.f32(i32 46, float %1442, float %1499, float %1555)  ; FMad(a,b,c)
  %1557 = call float @dx.op.tertiary.f32(i32 46, float %1443, float %1500, float %1556)  ; FMad(a,b,c)
  %1558 = fmul fast float %1498, %1449
  %1559 = call float @dx.op.tertiary.f32(i32 46, float %1450, float %1499, float %1558)  ; FMad(a,b,c)
  %1560 = call float @dx.op.tertiary.f32(i32 46, float %1451, float %1500, float %1559)  ; FMad(a,b,c)
  %1561 = fmul fast float %1497, %1497
  %1562 = fsub fast float 1.000000e+00, %1561
  %1563 = call float @dx.op.unary.f32(i32 24, float %1562)  ; Sqrt(value)
  %1564 = fmul fast float %1497, %1493
  %1565 = call float @dx.op.binary.f32(i32 36, float %1560, float %1564)  ; FMin(a,b)
  %1566 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1564)  ; FMax(a,b)
  %1567 = fdiv fast float %1565, %1566
  %1568 = fmul fast float %1563, %1493
  %1569 = fmul fast float %1568, %1567
  %1570 = fcmp fast ogt float %1554, 0.000000e+00
  %1571 = fcmp fast ogt float %1557, 0.000000e+00
  %1572 = fcmp fast olt float %1554, 0.000000e+00
  %1573 = fcmp fast olt float %1557, 0.000000e+00
  %1574 = zext i1 %1570 to i32
  %1575 = zext i1 %1571 to i32
  %1576 = zext i1 %1572 to i32
  %1577 = zext i1 %1573 to i32
  %1578 = sub nsw i32 %1574, %1576
  %1579 = sub nsw i32 %1575, %1577
  %1580 = sitofp i32 %1578 to float
  %1581 = sitofp i32 %1579 to float
  %1582 = fadd fast float %1569, %1484
  %1583 = fadd fast float %1569, %1486
  %1584 = call float @dx.op.unary.f32(i32 6, float %1554)  ; FAbs(value)
  %1585 = call float @dx.op.unary.f32(i32 6, float %1557)  ; FAbs(value)
  %1586 = call float @dx.op.binary.f32(i32 35, float %1584, float %1582)  ; FMax(a,b)
  %1587 = call float @dx.op.binary.f32(i32 35, float %1585, float %1583)  ; FMax(a,b)
  %1588 = fsub fast float %1485, %1569
  %1589 = fadd fast float %1588, %1586
  %1590 = fmul fast float %1589, %1580
  %1591 = fsub fast float %1487, %1569
  %1592 = fadd fast float %1591, %1587
  %1593 = fmul fast float %1592, %1581
  %1594 = fsub fast float %1560, %1565
  %1595 = call float @dx.op.binary.f32(i32 35, float %1594, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1596 = call float @dx.op.unary.f32(i32 6, float %1590)  ; FAbs(value)
  %1597 = call float @dx.op.unary.f32(i32 6, float %1593)  ; FAbs(value)
  %1598 = fdiv fast float %1596, %1595
  %1599 = fdiv fast float %1597, %1595
  %1600 = fmul fast float %1598, %1565
  %1601 = fmul fast float %1599, %1565
  %1602 = fsub fast float %1600, %1569
  %1603 = fsub fast float %1601, %1569
  %1604 = fsub fast float -0.000000e+00, %1580
  %1605 = fsub fast float -0.000000e+00, %1581
  %1606 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1604)  ; FMax(a,b)
  %1607 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1605)  ; FMax(a,b)
  %1608 = fmul fast float %1602, %1606
  %1609 = fmul fast float %1603, %1607
  %1610 = fsub fast float %1608, %1484
  %1611 = fsub fast float %1609, %1486
  %1612 = call float @dx.op.binary.f32(i32 35, float %1610, float %1485)  ; FMax(a,b)
  %1613 = call float @dx.op.binary.f32(i32 35, float %1611, float %1487)  ; FMax(a,b)
  %1614 = call float @dx.op.binary.f32(i32 36, float %1612, float %1484)  ; FMin(a,b)
  %1615 = call float @dx.op.binary.f32(i32 36, float %1613, float %1486)  ; FMin(a,b)
  %1616 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1580)  ; FMax(a,b)
  %1617 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1581)  ; FMax(a,b)
  %1618 = fmul fast float %1616, %1602
  %1619 = fmul fast float %1617, %1603
  %1620 = fsub fast float %1484, %1618
  %1621 = fsub fast float %1486, %1619
  %1622 = call float @dx.op.binary.f32(i32 35, float %1620, float %1485)  ; FMax(a,b)
  %1623 = call float @dx.op.binary.f32(i32 35, float %1621, float %1487)  ; FMax(a,b)
  %1624 = call float @dx.op.binary.f32(i32 36, float %1622, float %1484)  ; FMin(a,b)
  %1625 = call float @dx.op.binary.f32(i32 36, float %1623, float %1486)  ; FMin(a,b)
  %1626 = fadd fast float %1624, %1614
  %1627 = fadd fast float %1625, %1615
  %1628 = fmul fast float %1626, 5.000000e-01
  %1629 = fmul fast float %1627, 5.000000e-01
  %1630 = fsub fast float %1624, %1614
  %1631 = fsub fast float %1625, %1615
  %1632 = fmul fast float %1630, 5.000000e-01
  %1633 = fmul fast float %1631, 5.000000e-01
  %1634 = fmul fast float %1628, %1543
  %1635 = fmul fast float %1628, %1546
  %1636 = fmul fast float %1628, %1549
  %1637 = fsub fast float %1498, %1634
  %1638 = fsub fast float %1499, %1635
  %1639 = fsub fast float %1500, %1636
  %1640 = fmul fast float %1629, %1441
  %1641 = fmul fast float %1629, %1442
  %1642 = fmul fast float %1629, %1443
  %1643 = fsub fast float %1637, %1640
  %1644 = fsub fast float %1638, %1641
  %1645 = fsub fast float %1639, %1642
  br label %1646

; <label>:1646                                    ; preds = %1551, %1540
  %1647 = phi float [ %1643, %1551 ], [ %1498, %1540 ]
  %1648 = phi float [ %1644, %1551 ], [ %1499, %1540 ]
  %1649 = phi float [ %1645, %1551 ], [ %1500, %1540 ]
  %1650 = phi float [ %1632, %1551 ], [ %1484, %1540 ]
  %1651 = phi float [ %1633, %1551 ], [ %1486, %1540 ]
  %1652 = fcmp fast oeq float %1650, 0.000000e+00
  %1653 = fcmp fast oeq float %1651, 0.000000e+00
  %1654 = or i1 %1652, %1653
  br i1 %1654, label %1802, label %1655

; <label>:1655                                    ; preds = %1646
  %1656 = call float @dx.op.dot3.f32(i32 55, float %1543, float %1546, float %1549, float %1647, float %1648, float %1649)  ; Dot3(ax,ay,az,bx,by,bz)
  %1657 = call float @dx.op.dot3.f32(i32 55, float %1441, float %1442, float %1443, float %1647, float %1648, float %1649)  ; Dot3(ax,ay,az,bx,by,bz)
  %1658 = call float @dx.op.dot3.f32(i32 55, float %1449, float %1450, float %1451, float %1647, float %1648, float %1649)  ; Dot3(ax,ay,az,bx,by,bz)
  %1659 = fsub fast float %1656, %1650
  %1660 = fadd fast float %1656, %1650
  %1661 = fsub fast float %1657, %1651
  %1662 = fadd fast float %1657, %1651
  %1663 = fmul fast float %1658, %1658
  %1664 = call float @dx.op.dot2.f32(i32 54, float %1659, float %1661, float %1659, float %1661)  ; Dot2(ax,ay,bx,by)
  %1665 = fadd fast float %1664, %1663
  %1666 = call float @dx.op.unary.f32(i32 25, float %1665)  ; Rsqrt(value)
  %1667 = fmul fast float %1666, %1659
  %1668 = fmul fast float %1666, %1661
  %1669 = fmul fast float %1666, %1658
  %1670 = call float @dx.op.dot2.f32(i32 54, float %1660, float %1661, float %1660, float %1661)  ; Dot2(ax,ay,bx,by)
  %1671 = fadd fast float %1670, %1663
  %1672 = call float @dx.op.unary.f32(i32 25, float %1671)  ; Rsqrt(value)
  %1673 = fmul fast float %1672, %1660
  %1674 = fmul fast float %1672, %1661
  %1675 = fmul fast float %1672, %1658
  %1676 = call float @dx.op.dot2.f32(i32 54, float %1660, float %1662, float %1660, float %1662)  ; Dot2(ax,ay,bx,by)
  %1677 = fadd fast float %1676, %1663
  %1678 = call float @dx.op.unary.f32(i32 25, float %1677)  ; Rsqrt(value)
  %1679 = fmul fast float %1678, %1660
  %1680 = fmul fast float %1678, %1662
  %1681 = fmul fast float %1678, %1658
  %1682 = call float @dx.op.dot2.f32(i32 54, float %1659, float %1662, float %1659, float %1662)  ; Dot2(ax,ay,bx,by)
  %1683 = fadd fast float %1682, %1663
  %1684 = call float @dx.op.unary.f32(i32 25, float %1683)  ; Rsqrt(value)
  %1685 = fmul fast float %1684, %1659
  %1686 = fmul fast float %1684, %1662
  %1687 = fmul fast float %1684, %1658
  %1688 = call float @dx.op.dot3.f32(i32 55, float %1667, float %1668, float %1669, float %1673, float %1674, float %1675)  ; Dot3(ax,ay,az,bx,by,bz)
  %1689 = call float @dx.op.dot3.f32(i32 55, float %1673, float %1674, float %1675, float %1679, float %1680, float %1681)  ; Dot3(ax,ay,az,bx,by,bz)
  %1690 = call float @dx.op.dot3.f32(i32 55, float %1679, float %1680, float %1681, float %1685, float %1686, float %1687)  ; Dot3(ax,ay,az,bx,by,bz)
  %1691 = call float @dx.op.dot3.f32(i32 55, float %1685, float %1686, float %1687, float %1667, float %1668, float %1669)  ; Dot3(ax,ay,az,bx,by,bz)
  %1692 = fmul fast float %1688, 0x3FC6666660000000
  %1693 = fsub fast float 0x3FF921FF20000000, %1692
  %1694 = fadd fast float %1688, 1.000000e+00
  %1695 = call float @dx.op.unary.f32(i32 25, float %1694)  ; Rsqrt(value)
  %1696 = fmul fast float %1689, 0x3FC6666660000000
  %1697 = fsub fast float 0x3FF921FF20000000, %1696
  %1698 = fadd fast float %1689, 1.000000e+00
  %1699 = call float @dx.op.unary.f32(i32 25, float %1698)  ; Rsqrt(value)
  %1700 = fmul fast float %1699, %1697
  %1701 = fmul fast float %1690, 0x3FC6666660000000
  %1702 = fsub fast float 0x3FF921FF20000000, %1701
  %1703 = fadd fast float %1690, 1.000000e+00
  %1704 = call float @dx.op.unary.f32(i32 25, float %1703)  ; Rsqrt(value)
  %1705 = fmul fast float %1691, 0x3FC6666660000000
  %1706 = fsub fast float 0x3FF921FF20000000, %1705
  %1707 = fadd fast float %1691, 1.000000e+00
  %1708 = call float @dx.op.unary.f32(i32 25, float %1707)  ; Rsqrt(value)
  %1709 = fmul fast float %1708, %1706
  %1710 = fmul fast float %1693, %1695
  %1711 = fsub fast float -0.000000e+00, %1710
  %1712 = fmul fast float %1667, %1711
  %1713 = fmul fast float %1668, %1711
  %1714 = fmul fast float %1669, %1711
  %1715 = fmul fast float %1700, %1679
  %1716 = fmul fast float %1700, %1680
  %1717 = fmul fast float %1700, %1681
  %1718 = fadd fast float %1715, %1712
  %1719 = fadd fast float %1716, %1713
  %1720 = fadd fast float %1717, %1714
  %1721 = fmul fast float %1720, %1674
  %1722 = fmul fast float %1719, %1675
  %1723 = fsub fast float %1721, %1722
  %1724 = fmul fast float %1718, %1675
  %1725 = fmul fast float %1720, %1673
  %1726 = fsub fast float %1724, %1725
  %1727 = fmul fast float %1719, %1673
  %1728 = fmul fast float %1718, %1674
  %1729 = fsub fast float %1727, %1728
  %1730 = fmul fast float %1709, %1667
  %1731 = fmul fast float %1709, %1668
  %1732 = fmul fast float %1709, %1669
  %1733 = fmul fast float %1702, %1704
  %1734 = fsub fast float -0.000000e+00, %1733
  %1735 = fmul fast float %1679, %1734
  %1736 = fmul fast float %1680, %1734
  %1737 = fmul fast float %1681, %1734
  %1738 = fadd fast float %1730, %1735
  %1739 = fadd fast float %1731, %1736
  %1740 = fadd fast float %1732, %1737
  %1741 = fmul fast float %1740, %1686
  %1742 = fmul fast float %1739, %1687
  %1743 = fsub fast float %1741, %1742
  %1744 = fmul fast float %1738, %1687
  %1745 = fmul fast float %1740, %1685
  %1746 = fsub fast float %1744, %1745
  %1747 = fmul fast float %1739, %1685
  %1748 = fmul fast float %1738, %1686
  %1749 = fsub fast float %1747, %1748
  %1750 = fadd fast float %1743, %1723
  %1751 = fadd fast float %1746, %1726
  %1752 = fadd fast float %1749, %1729
  %1753 = fmul fast float %1750, %1543
  %1754 = fmul fast float %1750, %1546
  %1755 = fmul fast float %1750, %1549
  %1756 = fmul fast float %1751, %1441
  %1757 = fmul fast float %1751, %1442
  %1758 = fmul fast float %1751, %1443
  %1759 = fadd fast float %1753, %1756
  %1760 = fadd fast float %1754, %1757
  %1761 = fadd fast float %1755, %1758
  %1762 = fmul fast float %1752, %1449
  %1763 = fmul fast float %1752, %1450
  %1764 = fmul fast float %1752, %1451
  %1765 = fadd fast float %1759, %1762
  %1766 = fadd fast float %1760, %1763
  %1767 = fadd fast float %1761, %1764
  %1768 = call float @dx.op.dot3.f32(i32 55, float %1765, float %1766, float %1767, float %1765, float %1766, float %1767)  ; Dot3(ax,ay,az,bx,by,bz)
  %1769 = call float @dx.op.unary.f32(i32 25, float %1768)  ; Rsqrt(value)
  %1770 = fmul fast float %1768, 5.000000e-01
  %1771 = fmul fast float %1770, %1769
  br label %1802

; <label>:1772                                    ; preds = %1538
  %1773 = fmul fast float %1486, 5.000000e-01
  %1774 = fmul fast float %1773, %1441
  %1775 = fmul fast float %1773, %1442
  %1776 = fmul fast float %1773, %1443
  %1777 = fsub fast float %1498, %1774
  %1778 = fsub fast float %1499, %1775
  %1779 = fsub fast float %1500, %1776
  %1780 = fadd fast float %1774, %1498
  %1781 = fadd fast float %1775, %1499
  %1782 = fadd fast float %1776, %1500
  %1783 = fcmp fast ogt float %1486, 0.000000e+00
  %1784 = call float @dx.op.dot3.f32(i32 55, float %1777, float %1778, float %1779, float %1777, float %1778, float %1779)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1783, label %1785, label %1796, !dx.controlflow.hints !53

; <label>:1785                                    ; preds = %1772
  %1786 = call float @dx.op.dot3.f32(i32 55, float %1780, float %1781, float %1782, float %1780, float %1781, float %1782)  ; Dot3(ax,ay,az,bx,by,bz)
  %1787 = call float @dx.op.unary.f32(i32 25, float %1784)  ; Rsqrt(value)
  %1788 = call float @dx.op.unary.f32(i32 25, float %1786)  ; Rsqrt(value)
  %1789 = fmul fast float %1788, %1787
  %1790 = call float @dx.op.dot3.f32(i32 55, float %1777, float %1778, float %1779, float %1780, float %1781, float %1782)  ; Dot3(ax,ay,az,bx,by,bz)
  %1791 = fmul fast float %1790, 5.000000e-01
  %1792 = fadd fast float %1791, %1425
  %1793 = fmul fast float %1792, %1789
  %1794 = fadd fast float %1793, 5.000000e-01
  %1795 = fdiv fast float %1789, %1794
  br label %1799

; <label>:1796                                    ; preds = %1772
  %1797 = fadd fast float %1784, %1425
  %1798 = fdiv fast float 1.000000e+00, %1797
  br label %1799

; <label>:1799                                    ; preds = %1796, %1785
  %1800 = phi float [ %1795, %1785 ], [ %1798, %1796 ]
  %1801 = select i1 %1488, float %1800, float 1.000000e+00
  br label %1802

; <label>:1802                                    ; preds = %1799, %1655, %1646
  %1803 = phi float [ %1801, %1799 ], [ 0.000000e+00, %1646 ], [ %1771, %1655 ]
  %1804 = fsub fast float -0.000000e+00, %370
  %1805 = fsub fast float -0.000000e+00, %371
  %1806 = fsub fast float -0.000000e+00, %372
  %1807 = call float @dx.op.dot3.f32(i32 55, float %1503, float %1504, float %1505, float %1804, float %1805, float %1806)  ; Dot3(ax,ay,az,bx,by,bz)
  %1808 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1809 = extractvalue %dx.types.CBufRet.f32 %1808, 1
  %1810 = fmul fast float %1809, %1809
  %1811 = fsub fast float 1.000000e+00, %1810
  %1812 = fmul fast float %1807, 2.000000e+00
  %1813 = fadd fast float %1812, %1809
  %1814 = fmul fast float %1813, %1809
  %1815 = fadd fast float %1814, 1.000000e+00
  %1816 = call float @dx.op.unary.f32(i32 24, float %1815)  ; Sqrt(value)
  %1817 = fmul fast float %1816, 0x402921FB60000000
  %1818 = fmul fast float %1817, %1815
  %1819 = fdiv fast float %1811, %1818
  %1820 = fmul fast float %1539, %1462
  %1821 = fmul fast float %1820, %1803
  %1822 = fmul fast float %1821, %1819
  %1823 = fmul fast float %1822, %1454
  %1824 = fmul fast float %1822, %1455
  %1825 = fmul fast float %1822, %1456
  %1826 = fadd fast float %1823, %1429
  %1827 = fadd fast float %1824, %1430
  %1828 = fadd fast float %1825, %1431
  br label %1829

; <label>:1829                                    ; preds = %1802, %1428
  %1830 = phi float [ %1826, %1802 ], [ %1429, %1428 ]
  %1831 = phi float [ %1827, %1802 ], [ %1430, %1428 ]
  %1832 = phi float [ %1828, %1802 ], [ %1431, %1428 ]
  %1833 = add nuw i32 %1432, 1
  %1834 = icmp eq i32 %1833, %1355
  br i1 %1834, label %1835, label %1428, !llvm.loop !54

; <label>:1835                                    ; preds = %1829
  br label %1836

; <label>:1836                                    ; preds = %1835, %1392
  %1837 = phi float [ %1328, %1392 ], [ %1830, %1835 ]
  %1838 = phi float [ %1329, %1392 ], [ %1831, %1835 ]
  %1839 = phi float [ %1330, %1392 ], [ %1832, %1835 ]
  %1840 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1841 = extractvalue %dx.types.CBufRet.f32 %1840, 2
  %1842 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1843 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1842, i32 0, i32 %39, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1844 = extractvalue %dx.types.ResRet.f32 %1843, 0
  %1845 = extractvalue %dx.types.ResRet.f32 %1843, 1
  %1846 = extractvalue %dx.types.ResRet.f32 %1843, 2
  %1847 = fmul fast float %1844, %1841
  %1848 = fmul fast float %1845, %1841
  %1849 = fmul fast float %1846, %1841
  %1850 = fadd fast float %1847, %1837
  %1851 = fadd fast float %1848, %1838
  %1852 = fadd fast float %1849, %1839
  %1853 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1854 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1853, i32 0, i32 %39, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1855 = extractvalue %dx.types.ResRet.f32 %1854, 0
  %1856 = extractvalue %dx.types.ResRet.f32 %1854, 1
  %1857 = extractvalue %dx.types.ResRet.f32 %1854, 2
  %1858 = extractvalue %dx.types.ResRet.f32 %1854, 3
  %1859 = call float @dx.op.dot3.f32(i32 55, float %1855, float %1856, float %1857, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1860 = fadd fast float %1858, %1859
  %1861 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %38, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1862 = extractvalue %dx.types.CBufRet.i32 %1861, 0
  %1863 = icmp eq i32 %1862, 0
  br i1 %1863, label %1870, label %1864, !dx.controlflow.hints !56

; <label>:1864                                    ; preds = %1836
  %1865 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1866 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1865, i32 0, i32 %39, i32 %40, i32 %41, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1867 = extractvalue %dx.types.ResRet.f32 %1866, 0
  %1868 = extractvalue %dx.types.ResRet.f32 %1866, 1
  %1869 = extractvalue %dx.types.ResRet.f32 %1866, 2
  br label %1870

; <label>:1870                                    ; preds = %1864, %1836
  %1871 = phi float [ %1867, %1864 ], [ 0.000000e+00, %1836 ]
  %1872 = phi float [ %1868, %1864 ], [ 0.000000e+00, %1836 ]
  %1873 = phi float [ %1869, %1864 ], [ 0.000000e+00, %1836 ]
  %1874 = extractvalue %dx.types.CBufRet.f32 %1840, 1
  %1875 = fmul fast float %1855, %1850
  %1876 = fmul fast float %1856, %1851
  %1877 = fmul fast float %1857, %1852
  %1878 = fadd fast float %1871, %1875
  %1879 = fadd fast float %1872, %1876
  %1880 = fadd fast float %1873, %1877
  %1881 = fmul fast float %1874, %1878
  %1882 = fmul fast float %1874, %1879
  %1883 = fmul fast float %1874, %1880
  %1884 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1885 = extractvalue %dx.types.CBufRet.i32 %1884, 0
  %1886 = extractvalue %dx.types.CBufRet.i32 %1884, 1
  %1887 = extractvalue %dx.types.CBufRet.i32 %1884, 2
  %1888 = icmp slt i32 %39, %1885
  %1889 = icmp slt i32 %40, %1886
  %1890 = icmp slt i32 %41, %1887
  %1891 = and i1 %1888, %1889
  %1892 = and i1 %1890, %1891
  br i1 %1892, label %1893, label %1907

; <label>:1893                                    ; preds = %1870
  %1894 = bitcast float %1881 to i32
  %1895 = bitcast float %1882 to i32
  %1896 = bitcast float %1883 to i32
  %1897 = bitcast float %1860 to i32
  %1898 = icmp ult i32 %1894, 2139095040
  %1899 = icmp ult i32 %1895, 2139095040
  %1900 = icmp ult i32 %1896, 2139095040
  %1901 = icmp ult i32 %1897, 2139095040
  %1902 = select i1 %1898, float %1881, float 0.000000e+00
  %1903 = select i1 %1899, float %1882, float 0.000000e+00
  %1904 = select i1 %1900, float %1883, float 0.000000e+00
  %1905 = select i1 %1901, float %1860, float 0.000000e+00
  %1906 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1906, i32 %39, i32 %40, i32 %41, float %1902, float %1903, float %1904, float %1905, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1907

; <label>:1907                                    ; preds = %1893, %1870, %206
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!45}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !30, !32, !38}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{!31}
!31 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!32 = !{!33, !34, !35, !36, !37}
!33 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!34 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!35 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!36 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!37 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!38 = !{!39, !40, !41, !42, !43, !44}
!39 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!40 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!41 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!42 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!43 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!44 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!45 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !46}
!46 = !{i32 0, i64 16, i32 4, !47, i32 5, !48}
!47 = !{i32 4, i32 4, i32 4}
!48 = !{i32 0}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 2}
!50 = distinct !{!50, !"dx.controlflow.hints", i32 1}
!51 = distinct !{!51, !"dx.controlflow.hints", i32 1}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !55}
!55 = !{!"llvm.loop.unroll.disable"}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
