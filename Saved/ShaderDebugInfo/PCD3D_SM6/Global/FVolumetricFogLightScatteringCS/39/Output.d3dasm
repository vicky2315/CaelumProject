;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: aede4654bac11e1b1aa1f5d24bcc0206
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_FogStruct
; {
;
;   struct UniformBufferConstants_FogStruct
;   {
;
;       float4 FogStruct_ExponentialFogParameters;    ; Offset:    0
;       float4 FogStruct_ExponentialFogParameters2;   ; Offset:   16
;       float4 FogStruct_ExponentialFogColorParameter;; Offset:   32
;       float4 FogStruct_ExponentialFogParameters3;   ; Offset:   48
;       float4 FogStruct_SkyAtmosphereAmbientContributionColorScale;; Offset:   64
;       float4 FogStruct_InscatteringLightDirection;  ; Offset:   80
;       float4 FogStruct_DirectionalInscatteringColor;; Offset:   96
;       float2 FogStruct_SinCosInscatteringColorCubemapRotation;; Offset:  112
;       float PrePadding_FogStruct_120;               ; Offset:  120
;       float PrePadding_FogStruct_124;               ; Offset:  124
;       float3 FogStruct_FogInscatteringTextureParameters;; Offset:  128
;       float FogStruct_ApplyVolumetricFog;           ; Offset:  140
;       float FogStruct_VolumetricFogStartDistance;   ; Offset:  144
;       float FogStruct_VolumetricFogNearFadeInDistanceInv;; Offset:  148
;       uint BindlessResource_FogStruct_FogInscatteringColorCubemap;; Offset:  152
;       uint PrePadding_FogStruct_156;                ; Offset:  156
;       uint BindlessSampler_FogStruct_FogInscatteringColorSampler;; Offset:  160
;       uint PrePadding_FogStruct_164;                ; Offset:  164
;       uint BindlessResource_FogStruct_IntegratedLightScattering;; Offset:  168
;       uint PrePadding_FogStruct_172;                ; Offset:  172
;       uint BindlessSampler_FogStruct_IntegratedLightScatteringSampler;; Offset:  176
;   
;   } UniformBufferConstants_FogStruct;               ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_FogStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; View_DistantSkyLightLutTextureSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S2             s2     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S3             s3     1
; FogStruct_FogInscatteringColorSampler   sampler      NA          NA      S4             s4     1
; LightScatteringHistorySampler     sampler      NA          NA      S5             s5     1
; LightFunctionSampler              sampler      NA          NA      S6             s6     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T5             t5     1
; View_DistantSkyLightLutTexture    texture     f32          2d      T6             t6     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T7             t7     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T8             t8     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T9             t9     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d     T10            t10     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d     T11            t11     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf     T12            t12     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf     T13            t13     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf     T14            t14     1
; FogStruct_FogInscatteringColorCubemap   texture     f32        cube     T15            t15     1
; ConservativeDepthTexture          texture     f32          2d     T16            t16     1
; PrevConservativeDepthTexture      texture     f32          2d     T17            t17     1
; VBufferA                          texture     f32          3d     T18            t18     1
; VBufferB                          texture     f32          3d     T19            t19     1
; LightScatteringHistory            texture     f32          3d     T20            t20     1
; LocalShadowedLightScattering      texture     f32          3d     T21            t21     1
; LightFunctionTexture              texture     f32          2d     T22            t22     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.TextureCube<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_FogStruct = type { <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 22, i32 22, i32 0, i8 0 }, i32 22, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 21, i32 21, i32 0, i8 0 }, i32 21, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 20, i32 20, i32 0, i8 0 }, i32 20, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 19, i32 19, i32 0, i8 0 }, i32 19, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 3 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %33 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %34 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %35 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %36 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %37 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %32, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %38 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %33, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %39 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %34, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %35, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %36, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %42 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %43 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %44 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %45 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.i32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.i32 %45, 2
  %48 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.i32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.i32 %48, 1
  %51 = extractvalue %dx.types.CBufRet.i32 %48, 2
  %52 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.i32 %52, 0
  %54 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.f32 %54, 0
  %56 = extractvalue %dx.types.CBufRet.f32 %54, 1
  %57 = extractvalue %dx.types.CBufRet.f32 %54, 2
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = extractvalue %dx.types.CBufRet.f32 %58, 2
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 0
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 1
  %65 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %66 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %67 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.i32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.i32 %67, 1
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = extractvalue %dx.types.CBufRet.f32 %70, 3
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %39, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 1
  %79 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.f32 %79, 0
  %81 = extractvalue %dx.types.CBufRet.f32 %79, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %79, 2
  %83 = extractvalue %dx.types.CBufRet.f32 %79, 3
  %84 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %85 = extractvalue %dx.types.CBufRet.f32 %84, 0
  %86 = extractvalue %dx.types.CBufRet.f32 %84, 1
  %87 = extractvalue %dx.types.CBufRet.f32 %84, 2
  %88 = extractvalue %dx.types.CBufRet.f32 %84, 3
  %89 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.f32 %89, 0
  %91 = extractvalue %dx.types.CBufRet.f32 %89, 1
  %92 = extractvalue %dx.types.CBufRet.f32 %89, 2
  %93 = extractvalue %dx.types.CBufRet.f32 %89, 3
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %99 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %100 = extractvalue %dx.types.CBufRet.i32 %99, 3
  %101 = icmp eq i32 %100, 0
  %102 = uitofp i32 %42 to float
  %103 = uitofp i32 %43 to float
  %104 = fadd fast float %102, 5.000000e-01
  %105 = fadd fast float %103, 5.000000e-01
  %106 = uitofp i32 %44 to float
  br i1 %101, label %258, label %107

; <label>:107                                     ; preds = %0
  %108 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %109 = extractvalue %dx.types.CBufRet.f32 %108, 0
  %110 = extractvalue %dx.types.CBufRet.f32 %108, 1
  %111 = fdiv fast float %104, %109
  %112 = fdiv fast float %105, %110
  %113 = fmul fast float %111, 2.000000e+00
  %114 = fmul fast float %112, 2.000000e+00
  %115 = fadd fast float %113, -1.000000e+00
  %116 = fadd fast float %114, -1.000000e+00
  %117 = fsub fast float -0.000000e+00, %116
  %118 = fadd fast float %106, -1.000000e+00
  %119 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %120 = extractvalue %dx.types.CBufRet.f32 %119, 2
  %121 = fdiv fast float %118, %120
  %122 = call float @dx.op.unary.f32(i32 21, float %121)  ; Exp(value)
  %123 = extractvalue %dx.types.CBufRet.f32 %119, 1
  %124 = fsub fast float %122, %123
  %125 = extractvalue %dx.types.CBufRet.f32 %119, 0
  %126 = fdiv fast float %124, %125
  %127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.f32 %127, 3
  %129 = fcmp fast ult float %128, 1.000000e+00
  br i1 %129, label %136, label %130, !dx.controlflow.hints !52

; <label>:130                                     ; preds = %107
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %133 = fmul fast float %132, %126
  %134 = extractvalue %dx.types.CBufRet.f32 %127, 2
  %135 = fadd fast float %133, %134
  br label %143

; <label>:136                                     ; preds = %107
  %137 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %138 = extractvalue %dx.types.CBufRet.f32 %137, 3
  %139 = fadd fast float %138, %126
  %140 = extractvalue %dx.types.CBufRet.f32 %137, 2
  %141 = fmul fast float %139, %140
  %142 = fdiv fast float 1.000000e+00, %141
  br label %143

; <label>:143                                     ; preds = %136, %130
  %144 = phi float [ %135, %130 ], [ %142, %136 ]
  %145 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %146 = extractvalue %dx.types.CBufRet.f32 %145, 0
  %147 = extractvalue %dx.types.CBufRet.f32 %145, 1
  %148 = extractvalue %dx.types.CBufRet.f32 %145, 2
  %149 = extractvalue %dx.types.CBufRet.f32 %145, 3
  %150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %151 = extractvalue %dx.types.CBufRet.f32 %150, 0
  %152 = extractvalue %dx.types.CBufRet.f32 %150, 1
  %153 = extractvalue %dx.types.CBufRet.f32 %150, 2
  %154 = extractvalue %dx.types.CBufRet.f32 %150, 3
  %155 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %156 = extractvalue %dx.types.CBufRet.f32 %155, 0
  %157 = extractvalue %dx.types.CBufRet.f32 %155, 1
  %158 = extractvalue %dx.types.CBufRet.f32 %155, 2
  %159 = extractvalue %dx.types.CBufRet.f32 %155, 3
  %160 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %161 = extractvalue %dx.types.CBufRet.f32 %160, 0
  %162 = extractvalue %dx.types.CBufRet.f32 %160, 1
  %163 = extractvalue %dx.types.CBufRet.f32 %160, 2
  %164 = extractvalue %dx.types.CBufRet.f32 %160, 3
  %165 = fmul fast float %146, %115
  %166 = call float @dx.op.tertiary.f32(i32 46, float %117, float %151, float %165)  ; FMad(a,b,c)
  %167 = call float @dx.op.tertiary.f32(i32 46, float %144, float %156, float %166)  ; FMad(a,b,c)
  %168 = fadd fast float %167, %161
  %169 = fmul fast float %147, %115
  %170 = call float @dx.op.tertiary.f32(i32 46, float %117, float %152, float %169)  ; FMad(a,b,c)
  %171 = call float @dx.op.tertiary.f32(i32 46, float %144, float %157, float %170)  ; FMad(a,b,c)
  %172 = fadd fast float %171, %162
  %173 = fmul fast float %148, %115
  %174 = call float @dx.op.tertiary.f32(i32 46, float %117, float %153, float %173)  ; FMad(a,b,c)
  %175 = call float @dx.op.tertiary.f32(i32 46, float %144, float %158, float %174)  ; FMad(a,b,c)
  %176 = fadd fast float %175, %163
  %177 = fmul fast float %149, %115
  %178 = call float @dx.op.tertiary.f32(i32 46, float %117, float %154, float %177)  ; FMad(a,b,c)
  %179 = call float @dx.op.tertiary.f32(i32 46, float %144, float %159, float %178)  ; FMad(a,b,c)
  %180 = fadd fast float %179, %164
  %181 = fdiv fast float %168, %180
  %182 = fdiv fast float %172, %180
  %183 = fdiv fast float %176, %180
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = extractvalue %dx.types.CBufRet.f32 %190, 3
  %193 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %194 = extractvalue %dx.types.CBufRet.f32 %193, 2
  %195 = extractvalue %dx.types.CBufRet.f32 %193, 3
  %196 = fmul fast float %185, %181
  %197 = call float @dx.op.tertiary.f32(i32 46, float %182, float %188, float %196)  ; FMad(a,b,c)
  %198 = call float @dx.op.tertiary.f32(i32 46, float %183, float %191, float %197)  ; FMad(a,b,c)
  %199 = fadd fast float %198, %194
  %200 = fmul fast float %186, %181
  %201 = call float @dx.op.tertiary.f32(i32 46, float %182, float %189, float %200)  ; FMad(a,b,c)
  %202 = call float @dx.op.tertiary.f32(i32 46, float %183, float %192, float %201)  ; FMad(a,b,c)
  %203 = fadd fast float %202, %195
  %204 = fdiv fast float %199, %203
  %205 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %206 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %205, i32 0, i32 %42, i32 %43, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %207 = extractvalue %dx.types.ResRet.f32 %206, 0
  %208 = fcmp fast ogt float %207, %204
  br i1 %208, label %209, label %211

; <label>:209                                     ; preds = %143
  %210 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %210, i32 %42, i32 %43, i32 %44, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2104

; <label>:211                                     ; preds = %143
  %212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %213 = extractvalue %dx.types.CBufRet.f32 %212, 0
  %214 = extractvalue %dx.types.CBufRet.f32 %212, 1
  %215 = extractvalue %dx.types.CBufRet.f32 %212, 3
  %216 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %217 = extractvalue %dx.types.CBufRet.f32 %216, 0
  %218 = extractvalue %dx.types.CBufRet.f32 %216, 1
  %219 = extractvalue %dx.types.CBufRet.f32 %216, 3
  %220 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %221 = extractvalue %dx.types.CBufRet.f32 %220, 0
  %222 = extractvalue %dx.types.CBufRet.f32 %220, 1
  %223 = extractvalue %dx.types.CBufRet.f32 %220, 3
  %224 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %225 = extractvalue %dx.types.CBufRet.f32 %224, 0
  %226 = extractvalue %dx.types.CBufRet.f32 %224, 1
  %227 = extractvalue %dx.types.CBufRet.f32 %224, 3
  %228 = fmul fast float %213, %181
  %229 = call float @dx.op.tertiary.f32(i32 46, float %182, float %217, float %228)  ; FMad(a,b,c)
  %230 = call float @dx.op.tertiary.f32(i32 46, float %183, float %221, float %229)  ; FMad(a,b,c)
  %231 = fadd fast float %230, %225
  %232 = fmul fast float %214, %181
  %233 = call float @dx.op.tertiary.f32(i32 46, float %182, float %218, float %232)  ; FMad(a,b,c)
  %234 = call float @dx.op.tertiary.f32(i32 46, float %183, float %222, float %233)  ; FMad(a,b,c)
  %235 = fadd fast float %234, %226
  %236 = fmul fast float %215, %181
  %237 = call float @dx.op.tertiary.f32(i32 46, float %182, float %219, float %236)  ; FMad(a,b,c)
  %238 = call float @dx.op.tertiary.f32(i32 46, float %183, float %223, float %237)  ; FMad(a,b,c)
  %239 = fadd fast float %238, %227
  %240 = fdiv fast float %231, %239
  %241 = fdiv fast float %235, %239
  %242 = fmul fast float %240, 5.000000e-01
  %243 = fmul fast float %241, 5.000000e-01
  %244 = fadd fast float %242, 5.000000e-01
  %245 = fsub fast float 5.000000e-01, %243
  %246 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %247 = extractvalue %dx.types.CBufRet.f32 %246, 0
  %248 = extractvalue %dx.types.CBufRet.f32 %246, 1
  %249 = fmul fast float %247, %244
  %250 = fmul fast float %248, %245
  %251 = fptoui float %249 to i32
  %252 = fptoui float %250 to i32
  %253 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %254 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %253, i32 0, i32 %251, i32 %252, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %255 = extractvalue %dx.types.ResRet.f32 %254, 0
  %256 = fcmp fast ogt float %255, %204
  br i1 %256, label %257, label %258

; <label>:257                                     ; preds = %211
  br label %258

; <label>:258                                     ; preds = %257, %211, %0
  %259 = phi i32 [ 1, %257 ], [ 0, %211 ], [ 0, %0 ]
  %260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %261 = extractvalue %dx.types.CBufRet.f32 %260, 0
  %262 = extractvalue %dx.types.CBufRet.f32 %260, 1
  %263 = extractvalue %dx.types.CBufRet.f32 %260, 3
  %264 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %265 = extractvalue %dx.types.CBufRet.f32 %264, 0
  %266 = extractvalue %dx.types.CBufRet.f32 %264, 1
  %267 = extractvalue %dx.types.CBufRet.f32 %264, 3
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 3
  %272 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %273 = extractvalue %dx.types.CBufRet.f32 %272, 0
  %274 = extractvalue %dx.types.CBufRet.f32 %272, 1
  %275 = extractvalue %dx.types.CBufRet.f32 %272, 3
  %276 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %277 = extractvalue %dx.types.CBufRet.f32 %276, 0
  %278 = extractvalue %dx.types.CBufRet.f32 %276, 1
  %279 = fdiv fast float %104, %277
  %280 = fdiv fast float %105, %278
  %281 = fmul fast float %279, 2.000000e+00
  %282 = fmul fast float %280, 2.000000e+00
  %283 = fadd fast float %281, -1.000000e+00
  %284 = fadd fast float %282, -1.000000e+00
  %285 = fsub fast float -0.000000e+00, %284
  %286 = fadd fast float %106, 5.000000e-01
  %287 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %288 = extractvalue %dx.types.CBufRet.f32 %287, 2
  %289 = fdiv fast float %286, %288
  %290 = call float @dx.op.unary.f32(i32 21, float %289)  ; Exp(value)
  %291 = extractvalue %dx.types.CBufRet.f32 %287, 1
  %292 = fsub fast float %290, %291
  %293 = extractvalue %dx.types.CBufRet.f32 %287, 0
  %294 = fdiv fast float %292, %293
  %295 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %296 = extractvalue %dx.types.CBufRet.f32 %295, 3
  %297 = fcmp fast ult float %296, 1.000000e+00
  br i1 %297, label %304, label %298, !dx.controlflow.hints !52

; <label>:298                                     ; preds = %258
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %301 = fmul fast float %300, %294
  %302 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %303 = fadd fast float %301, %302
  br label %311

; <label>:304                                     ; preds = %258
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 3
  %307 = fadd fast float %306, %294
  %308 = extractvalue %dx.types.CBufRet.f32 %305, 2
  %309 = fmul fast float %307, %308
  %310 = fdiv fast float 1.000000e+00, %309
  br label %311

; <label>:311                                     ; preds = %304, %298
  %312 = phi float [ %303, %298 ], [ %310, %304 ]
  %313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %314 = extractvalue %dx.types.CBufRet.f32 %313, 0
  %315 = extractvalue %dx.types.CBufRet.f32 %313, 1
  %316 = extractvalue %dx.types.CBufRet.f32 %313, 2
  %317 = extractvalue %dx.types.CBufRet.f32 %313, 3
  %318 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %319 = extractvalue %dx.types.CBufRet.f32 %318, 0
  %320 = extractvalue %dx.types.CBufRet.f32 %318, 1
  %321 = extractvalue %dx.types.CBufRet.f32 %318, 2
  %322 = extractvalue %dx.types.CBufRet.f32 %318, 3
  %323 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %324 = extractvalue %dx.types.CBufRet.f32 %323, 0
  %325 = extractvalue %dx.types.CBufRet.f32 %323, 1
  %326 = extractvalue %dx.types.CBufRet.f32 %323, 2
  %327 = extractvalue %dx.types.CBufRet.f32 %323, 3
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 0
  %330 = extractvalue %dx.types.CBufRet.f32 %328, 1
  %331 = extractvalue %dx.types.CBufRet.f32 %328, 2
  %332 = extractvalue %dx.types.CBufRet.f32 %328, 3
  %333 = fmul fast float %314, %283
  %334 = call float @dx.op.tertiary.f32(i32 46, float %285, float %319, float %333)  ; FMad(a,b,c)
  %335 = call float @dx.op.tertiary.f32(i32 46, float %312, float %324, float %334)  ; FMad(a,b,c)
  %336 = fadd fast float %335, %329
  %337 = fmul fast float %315, %283
  %338 = call float @dx.op.tertiary.f32(i32 46, float %285, float %320, float %337)  ; FMad(a,b,c)
  %339 = call float @dx.op.tertiary.f32(i32 46, float %312, float %325, float %338)  ; FMad(a,b,c)
  %340 = fadd fast float %339, %330
  %341 = fmul fast float %316, %283
  %342 = call float @dx.op.tertiary.f32(i32 46, float %285, float %321, float %341)  ; FMad(a,b,c)
  %343 = call float @dx.op.tertiary.f32(i32 46, float %312, float %326, float %342)  ; FMad(a,b,c)
  %344 = fadd fast float %343, %331
  %345 = fmul fast float %317, %283
  %346 = call float @dx.op.tertiary.f32(i32 46, float %285, float %322, float %345)  ; FMad(a,b,c)
  %347 = call float @dx.op.tertiary.f32(i32 46, float %312, float %327, float %346)  ; FMad(a,b,c)
  %348 = fadd fast float %347, %332
  %349 = fdiv fast float %336, %348
  %350 = fdiv fast float %340, %348
  %351 = fdiv fast float %344, %348
  %352 = fmul fast float %349, %261
  %353 = call float @dx.op.tertiary.f32(i32 46, float %350, float %265, float %352)  ; FMad(a,b,c)
  %354 = call float @dx.op.tertiary.f32(i32 46, float %351, float %269, float %353)  ; FMad(a,b,c)
  %355 = fadd fast float %354, %273
  %356 = fmul fast float %349, %262
  %357 = call float @dx.op.tertiary.f32(i32 46, float %350, float %266, float %356)  ; FMad(a,b,c)
  %358 = call float @dx.op.tertiary.f32(i32 46, float %351, float %270, float %357)  ; FMad(a,b,c)
  %359 = fadd fast float %358, %274
  %360 = fmul fast float %349, %263
  %361 = call float @dx.op.tertiary.f32(i32 46, float %350, float %267, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %351, float %271, float %361)  ; FMad(a,b,c)
  %363 = fadd fast float %362, %275
  %364 = fdiv fast float %355, %363
  %365 = fdiv fast float %359, %363
  %366 = fmul fast float %364, 5.000000e-01
  %367 = fmul fast float %365, 5.000000e-01
  %368 = fadd fast float %366, 5.000000e-01
  %369 = fsub fast float 5.000000e-01, %367
  %370 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %371 = extractvalue %dx.types.CBufRet.f32 %370, 0
  %372 = fmul fast float %371, %363
  %373 = extractvalue %dx.types.CBufRet.f32 %370, 1
  %374 = fadd fast float %372, %373
  %375 = call float @dx.op.unary.f32(i32 23, float %374)  ; Log(value)
  %376 = extractvalue %dx.types.CBufRet.f32 %370, 2
  %377 = fmul fast float %376, %375
  %378 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %379 = extractvalue %dx.types.CBufRet.f32 %378, 2
  %380 = fmul fast float %377, %379
  %381 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %382 = extractvalue %dx.types.CBufRet.f32 %381, 2
  %383 = extractvalue %dx.types.CBufRet.f32 %381, 3
  %384 = fmul fast float %382, %368
  %385 = fmul fast float %383, %369
  %386 = fcmp fast olt float %384, 0.000000e+00
  %387 = fcmp fast olt float %385, 0.000000e+00
  %388 = fcmp fast olt float %380, 0.000000e+00
  %389 = or i1 %386, %387
  %390 = or i1 %388, %389
  br i1 %390, label %401, label %391

; <label>:391                                     ; preds = %311
  %392 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %393 = extractvalue %dx.types.CBufRet.f32 %392, 0
  %394 = fcmp fast ogt float %384, 1.000000e+00
  %395 = fcmp fast ogt float %385, 1.000000e+00
  %396 = fcmp fast ogt float %380, 1.000000e+00
  %397 = or i1 %394, %395
  %398 = or i1 %396, %397
  %399 = icmp ne i32 %259, 0
  %400 = or i1 %399, %398
  br i1 %400, label %401, label %402

; <label>:401                                     ; preds = %391, %311
  br label %402

; <label>:402                                     ; preds = %401, %391
  %403 = phi float [ 0.000000e+00, %401 ], [ %393, %391 ]
  %404 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %40, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %405 = extractvalue %dx.types.CBufRet.i32 %404, 0
  %406 = mul i32 %42, 1664525
  %407 = mul i32 %43, 1664525
  %408 = mul i32 %44, 1664525
  %409 = mul i32 %405, 1664525
  %410 = add i32 %406, 1013904223
  %411 = add i32 %407, 1013904223
  %412 = add i32 %408, 1013904223
  %413 = add i32 %409, 1013904223
  %414 = mul i32 %413, %411
  %415 = add i32 %410, %414
  %416 = mul i32 %415, %412
  %417 = add i32 %416, %411
  %418 = mul i32 %417, %415
  %419 = add i32 %418, %412
  %420 = mul i32 %419, %417
  %421 = add i32 %420, %413
  %422 = lshr i32 %415, 16
  %423 = lshr i32 %417, 16
  %424 = lshr i32 %419, 16
  %425 = lshr i32 %421, 16
  %426 = xor i32 %422, %415
  %427 = xor i32 %423, %417
  %428 = xor i32 %424, %419
  %429 = xor i32 %425, %421
  %430 = mul i32 %429, %427
  %431 = add i32 %430, %426
  %432 = mul i32 %431, %428
  %433 = add i32 %432, %427
  %434 = mul i32 %433, %431
  %435 = add i32 %434, %428
  %436 = uitofp i32 %431 to float
  %437 = uitofp i32 %433 to float
  %438 = uitofp i32 %435 to float
  %439 = fmul fast float %436, 0x3E00000000000000
  %440 = fmul fast float %437, 0x3E00000000000000
  %441 = fmul fast float %438, 0x3E00000000000000
  %442 = fadd fast float %439, -1.000000e+00
  %443 = fadd fast float %440, -1.000000e+00
  %444 = fadd fast float %441, -1.000000e+00
  %445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 12)  ; CBufferLoadLegacy(handle,regIndex)
  %446 = extractvalue %dx.types.CBufRet.f32 %445, 0
  %447 = extractvalue %dx.types.CBufRet.f32 %445, 1
  %448 = extractvalue %dx.types.CBufRet.f32 %445, 2
  %449 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %450 = extractvalue %dx.types.CBufRet.f32 %449, 3
  %451 = fmul fast float %442, %450
  %452 = fmul fast float %443, %450
  %453 = fmul fast float %444, %450
  %454 = fadd fast float %451, %446
  %455 = fadd fast float %452, %447
  %456 = fadd fast float %453, %448
  %457 = fadd fast float %454, %102
  %458 = fadd fast float %455, %103
  %459 = fdiv fast float %457, %277
  %460 = fdiv fast float %458, %278
  %461 = fmul fast float %459, 2.000000e+00
  %462 = fmul fast float %460, 2.000000e+00
  %463 = fadd fast float %461, -1.000000e+00
  %464 = fadd fast float %462, -1.000000e+00
  %465 = fsub fast float -0.000000e+00, %464
  %466 = fadd fast float %456, %106
  %467 = fdiv fast float %466, %288
  %468 = call float @dx.op.unary.f32(i32 21, float %467)  ; Exp(value)
  %469 = fsub fast float %468, %291
  %470 = fdiv fast float %469, %293
  br i1 %297, label %477, label %471, !dx.controlflow.hints !52

; <label>:471                                     ; preds = %402
  %472 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %473 = extractvalue %dx.types.CBufRet.f32 %472, 2
  %474 = fmul fast float %473, %470
  %475 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %476 = fadd fast float %474, %475
  br label %484

; <label>:477                                     ; preds = %402
  %478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %479 = extractvalue %dx.types.CBufRet.f32 %478, 3
  %480 = fadd fast float %479, %470
  %481 = extractvalue %dx.types.CBufRet.f32 %478, 2
  %482 = fmul fast float %480, %481
  %483 = fdiv fast float 1.000000e+00, %482
  br label %484

; <label>:484                                     ; preds = %477, %471
  %485 = phi float [ %476, %471 ], [ %483, %477 ]
  %486 = fmul fast float %314, %463
  %487 = call float @dx.op.tertiary.f32(i32 46, float %465, float %319, float %486)  ; FMad(a,b,c)
  %488 = call float @dx.op.tertiary.f32(i32 46, float %485, float %324, float %487)  ; FMad(a,b,c)
  %489 = fadd fast float %488, %329
  %490 = fmul fast float %315, %463
  %491 = call float @dx.op.tertiary.f32(i32 46, float %465, float %320, float %490)  ; FMad(a,b,c)
  %492 = call float @dx.op.tertiary.f32(i32 46, float %485, float %325, float %491)  ; FMad(a,b,c)
  %493 = fadd fast float %492, %330
  %494 = fmul fast float %316, %463
  %495 = call float @dx.op.tertiary.f32(i32 46, float %465, float %321, float %494)  ; FMad(a,b,c)
  %496 = call float @dx.op.tertiary.f32(i32 46, float %485, float %326, float %495)  ; FMad(a,b,c)
  %497 = fadd fast float %496, %331
  %498 = fmul fast float %317, %463
  %499 = call float @dx.op.tertiary.f32(i32 46, float %465, float %322, float %498)  ; FMad(a,b,c)
  %500 = call float @dx.op.tertiary.f32(i32 46, float %485, float %327, float %499)  ; FMad(a,b,c)
  %501 = fadd fast float %500, %332
  %502 = fdiv fast float %489, %501
  %503 = fdiv fast float %493, %501
  %504 = fdiv fast float %497, %501
  %505 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %506 = extractvalue %dx.types.CBufRet.f32 %505, 0
  %507 = extractvalue %dx.types.CBufRet.f32 %505, 1
  %508 = extractvalue %dx.types.CBufRet.f32 %505, 2
  %509 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %510 = extractvalue %dx.types.CBufRet.f32 %509, 0
  %511 = extractvalue %dx.types.CBufRet.f32 %509, 1
  %512 = extractvalue %dx.types.CBufRet.f32 %509, 2
  %513 = fmul fast float %506, 2.097152e+06
  %514 = fmul fast float %507, 2.097152e+06
  %515 = fmul fast float %508, 2.097152e+06
  %516 = fadd fast float %513, %502
  %517 = fsub fast float %516, %510
  %518 = fadd fast float %514, %503
  %519 = fsub fast float %518, %511
  %520 = fadd fast float %515, %504
  %521 = fsub fast float %520, %512
  %522 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %523 = extractvalue %dx.types.CBufRet.f32 %522, 0
  %524 = extractvalue %dx.types.CBufRet.f32 %522, 1
  %525 = extractvalue %dx.types.CBufRet.f32 %522, 2
  %526 = fsub fast float %502, %523
  %527 = fsub fast float %503, %524
  %528 = fsub fast float %504, %525
  %529 = fmul fast float %526, %526
  %530 = fmul fast float %527, %527
  %531 = fadd fast float %529, %530
  %532 = fmul fast float %528, %528
  %533 = fadd fast float %531, %532
  %534 = call float @dx.op.unary.f32(i32 24, float %533)  ; Sqrt(value)
  %535 = fdiv fast float %526, %534
  %536 = fdiv fast float %527, %534
  %537 = fdiv fast float %528, %534
  %538 = icmp eq i32 %47, 0
  br i1 %538, label %539, label %541, !dx.controlflow.hints !53

; <label>:539                                     ; preds = %484
  %540 = extractvalue %dx.types.CBufRet.f32 %449, 1
  br label %1187

; <label>:541                                     ; preds = %484
  %542 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %543 = extractvalue %dx.types.CBufRet.f32 %542, 2
  %544 = fcmp fast ogt float %543, 0.000000e+00
  br i1 %544, label %545, label %1120

; <label>:545                                     ; preds = %541
  %546 = icmp eq i32 %78, 0
  br i1 %546, label %582, label %547, !dx.controlflow.hints !54

; <label>:547                                     ; preds = %545
  %548 = fmul fast float %502, %80
  %549 = call float @dx.op.tertiary.f32(i32 46, float %503, float %85, float %548)  ; FMad(a,b,c)
  %550 = call float @dx.op.tertiary.f32(i32 46, float %504, float %90, float %549)  ; FMad(a,b,c)
  %551 = fadd fast float %550, %95
  %552 = fmul fast float %502, %81
  %553 = call float @dx.op.tertiary.f32(i32 46, float %503, float %86, float %552)  ; FMad(a,b,c)
  %554 = call float @dx.op.tertiary.f32(i32 46, float %504, float %91, float %553)  ; FMad(a,b,c)
  %555 = fadd fast float %554, %96
  %556 = fmul fast float %502, %83
  %557 = call float @dx.op.tertiary.f32(i32 46, float %503, float %88, float %556)  ; FMad(a,b,c)
  %558 = call float @dx.op.tertiary.f32(i32 46, float %504, float %93, float %557)  ; FMad(a,b,c)
  %559 = fadd fast float %558, %98
  %560 = fdiv fast float %551, %559
  %561 = fdiv fast float %555, %559
  %562 = fcmp fast ole float %560, 1.000000e+00
  %563 = fcmp fast ole float %561, 1.000000e+00
  %564 = fcmp fast oge float %560, 0.000000e+00
  %565 = fcmp fast oge float %561, 0.000000e+00
  %566 = and i1 %564, %562
  %567 = and i1 %565, %563
  %568 = and i1 %566, %567
  br i1 %568, label %569, label %582

; <label>:569                                     ; preds = %547
  %570 = fmul fast float %502, %82
  %571 = call float @dx.op.tertiary.f32(i32 46, float %503, float %87, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %504, float %92, float %571)  ; FMad(a,b,c)
  %573 = fadd fast float %572, %97
  %574 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %575 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %576 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %574, %dx.types.Handle %575, float %560, float %561, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %577 = extractvalue %dx.types.ResRet.f32 %576, 0
  %578 = fcmp fast olt float %573, %577
  %579 = fcmp fast ogt float %577, 0x3FEFAE1480000000
  %580 = or i1 %578, %579
  %581 = uitofp i1 %580 to float
  br label %582

; <label>:582                                     ; preds = %569, %547, %545
  %583 = phi float [ %581, %569 ], [ 1.000000e+00, %547 ], [ 1.000000e+00, %545 ]
  %584 = icmp eq i32 %68, 0
  br i1 %584, label %664, label %585

; <label>:585                                     ; preds = %582
  %586 = fcmp fast oge float %470, %71
  %587 = fcmp fast oge float %470, %72
  %588 = fcmp fast oge float %470, %73
  %589 = fcmp fast oge float %470, %74
  %590 = zext i1 %586 to i32
  %591 = zext i1 %587 to i32
  %592 = zext i1 %588 to i32
  %593 = zext i1 %589 to i32
  %594 = add nuw nsw i32 %590, %591
  %595 = add nuw nsw i32 %594, %592
  %596 = add nuw nsw i32 %595, %593
  %597 = icmp ult i32 %596, %68
  br i1 %597, label %598, label %664

; <label>:598                                     ; preds = %585
  %599 = shl nuw nsw i32 %596, 2
  %600 = add nuw nsw i32 %599, 9
  %601 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %600)  ; CBufferLoadLegacy(handle,regIndex)
  %602 = extractvalue %dx.types.CBufRet.f32 %601, 0
  %603 = extractvalue %dx.types.CBufRet.f32 %601, 1
  %604 = extractvalue %dx.types.CBufRet.f32 %601, 3
  %605 = add nuw nsw i32 %599, 10
  %606 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %605)  ; CBufferLoadLegacy(handle,regIndex)
  %607 = extractvalue %dx.types.CBufRet.f32 %606, 0
  %608 = extractvalue %dx.types.CBufRet.f32 %606, 1
  %609 = extractvalue %dx.types.CBufRet.f32 %606, 3
  %610 = add nuw nsw i32 %599, 11
  %611 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %610)  ; CBufferLoadLegacy(handle,regIndex)
  %612 = extractvalue %dx.types.CBufRet.f32 %611, 0
  %613 = extractvalue %dx.types.CBufRet.f32 %611, 1
  %614 = extractvalue %dx.types.CBufRet.f32 %611, 3
  %615 = add nuw nsw i32 %599, 12
  %616 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %615)  ; CBufferLoadLegacy(handle,regIndex)
  %617 = extractvalue %dx.types.CBufRet.f32 %616, 0
  %618 = extractvalue %dx.types.CBufRet.f32 %616, 1
  %619 = extractvalue %dx.types.CBufRet.f32 %616, 3
  %620 = fmul fast float %602, %502
  %621 = call float @dx.op.tertiary.f32(i32 46, float %503, float %607, float %620)  ; FMad(a,b,c)
  %622 = call float @dx.op.tertiary.f32(i32 46, float %504, float %612, float %621)  ; FMad(a,b,c)
  %623 = fadd fast float %622, %617
  %624 = fmul fast float %603, %502
  %625 = call float @dx.op.tertiary.f32(i32 46, float %503, float %608, float %624)  ; FMad(a,b,c)
  %626 = call float @dx.op.tertiary.f32(i32 46, float %504, float %613, float %625)  ; FMad(a,b,c)
  %627 = fadd fast float %626, %618
  %628 = fmul fast float %604, %502
  %629 = call float @dx.op.tertiary.f32(i32 46, float %503, float %609, float %628)  ; FMad(a,b,c)
  %630 = call float @dx.op.tertiary.f32(i32 46, float %504, float %614, float %629)  ; FMad(a,b,c)
  %631 = fadd fast float %630, %619
  %632 = fdiv fast float %623, %631
  %633 = fdiv fast float %627, %631
  %634 = add nuw nsw i32 %596, 25
  %635 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %39, i32 %634)  ; CBufferLoadLegacy(handle,regIndex)
  %636 = extractvalue %dx.types.CBufRet.f32 %635, 0
  %637 = extractvalue %dx.types.CBufRet.f32 %635, 1
  %638 = extractvalue %dx.types.CBufRet.f32 %635, 2
  %639 = extractvalue %dx.types.CBufRet.f32 %635, 3
  %640 = fcmp fast ole float %632, %638
  %641 = fcmp fast ole float %633, %639
  %642 = fcmp fast oge float %632, %636
  %643 = fcmp fast oge float %633, %637
  %644 = and i1 %642, %640
  %645 = and i1 %643, %641
  %646 = and i1 %644, %645
  br i1 %646, label %647, label %664

; <label>:647                                     ; preds = %598
  %648 = extractvalue %dx.types.CBufRet.f32 %616, 2
  %649 = extractvalue %dx.types.CBufRet.f32 %611, 2
  %650 = extractvalue %dx.types.CBufRet.f32 %606, 2
  %651 = extractvalue %dx.types.CBufRet.f32 %601, 2
  %652 = fmul fast float %651, %502
  %653 = call float @dx.op.tertiary.f32(i32 46, float %503, float %650, float %652)  ; FMad(a,b,c)
  %654 = call float @dx.op.tertiary.f32(i32 46, float %504, float %649, float %653)  ; FMad(a,b,c)
  %655 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %656 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %657 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %655, %dx.types.Handle %656, float %632, float %633, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %658 = extractvalue %dx.types.ResRet.f32 %657, 0
  %659 = fsub fast float 1.000000e+00, %648
  %660 = fsub fast float %659, %654
  %661 = fsub fast float %658, %76
  %662 = fcmp fast olt float %660, %661
  %663 = uitofp i1 %662 to float
  br label %664

; <label>:664                                     ; preds = %647, %598, %585, %582
  %665 = phi float [ %663, %647 ], [ 1.000000e+00, %598 ], [ 1.000000e+00, %585 ], [ 1.000000e+00, %582 ]
  %666 = fmul fast float %665, %583
  %667 = fsub fast float %502, %510
  %668 = fsub fast float %503, %511
  %669 = fsub fast float %504, %512
  %670 = mul i32 %69, 336
  %671 = add i32 %670, 128
  %672 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %673 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %671, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %674 = add i32 %670, 144
  %675 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %674, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %676 = add i32 %670, 160
  %677 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %676, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %678 = add i32 %670, 176
  %679 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %678, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %680 = add i32 %670, 256
  %681 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %680, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %682 = extractvalue %dx.types.ResRet.i32 %681, 0
  %683 = extractvalue %dx.types.ResRet.i32 %681, 1
  %684 = extractvalue %dx.types.ResRet.i32 %681, 2
  %685 = bitcast i32 %682 to float
  %686 = bitcast i32 %683 to float
  %687 = bitcast i32 %684 to float
  %688 = add i32 %670, 268
  %689 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %688, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %690 = extractvalue %dx.types.ResRet.i32 %689, 0
  %691 = add i32 %670, 272
  %692 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %691, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %693 = add i32 %670, 288
  %694 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %693, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %695 = icmp eq i32 %690, 0
  %696 = fadd fast float %685, %506
  %697 = fadd fast float %686, %507
  %698 = fadd fast float %687, %508
  %699 = fmul fast float %696, 2.097152e+06
  %700 = fmul fast float %697, 2.097152e+06
  %701 = fmul fast float %698, 2.097152e+06
  %702 = fadd fast float %699, %667
  %703 = fadd fast float %700, %668
  %704 = fadd fast float %701, %669
  br i1 %695, label %705, label %945

; <label>:705                                     ; preds = %664
  %706 = extractvalue %dx.types.ResRet.i32 %694, 2
  %707 = bitcast i32 %706 to float
  %708 = extractvalue %dx.types.ResRet.i32 %694, 1
  %709 = bitcast i32 %708 to float
  %710 = extractvalue %dx.types.ResRet.i32 %694, 0
  %711 = bitcast i32 %710 to float
  %712 = add i32 %670, 320
  %713 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %712, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %714 = extractvalue %dx.types.ResRet.i32 %713, 0
  %715 = add i32 %670, 316
  %716 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %715, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %717 = extractvalue %dx.types.ResRet.i32 %716, 0
  %718 = add i32 %670, 300
  %719 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %718, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %720 = extractvalue %dx.types.ResRet.i32 %719, 0
  %721 = bitcast i32 %720 to float
  %722 = fadd fast float %702, %711
  %723 = fadd fast float %703, %709
  %724 = fadd fast float %704, %707
  %725 = fmul fast float %722, %722
  %726 = fmul fast float %723, %723
  %727 = fadd fast float %725, %726
  %728 = fmul fast float %724, %724
  %729 = fadd fast float %727, %728
  %730 = call float @dx.op.unary.f32(i32 24, float %729)  ; Sqrt(value)
  %731 = call float @dx.op.unary.f32(i32 23, float %730)  ; Log(value)
  %732 = fadd fast float %731, %721
  %733 = call float @dx.op.unary.f32(i32 27, float %732)  ; Round_ni(value)
  %734 = fptosi float %733 to i32
  %735 = sub nsw i32 %734, %717
  %736 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %735)  ; IMax(a,b)
  %737 = icmp slt i32 %736, %714
  br i1 %737, label %738, label %1117

; <label>:738                                     ; preds = %705
  %739 = add nsw i32 %736, %69
  %740 = mul i32 %739, 336
  %741 = add i32 %740, 128
  %742 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %741, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %743 = extractvalue %dx.types.ResRet.i32 %742, 0
  %744 = extractvalue %dx.types.ResRet.i32 %742, 1
  %745 = extractvalue %dx.types.ResRet.i32 %742, 2
  %746 = bitcast i32 %743 to float
  %747 = bitcast i32 %744 to float
  %748 = bitcast i32 %745 to float
  %749 = add i32 %740, 144
  %750 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %749, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %751 = extractvalue %dx.types.ResRet.i32 %750, 0
  %752 = extractvalue %dx.types.ResRet.i32 %750, 1
  %753 = extractvalue %dx.types.ResRet.i32 %750, 2
  %754 = bitcast i32 %751 to float
  %755 = bitcast i32 %752 to float
  %756 = bitcast i32 %753 to float
  %757 = add i32 %740, 160
  %758 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %757, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %759 = extractvalue %dx.types.ResRet.i32 %758, 0
  %760 = extractvalue %dx.types.ResRet.i32 %758, 1
  %761 = extractvalue %dx.types.ResRet.i32 %758, 2
  %762 = bitcast i32 %759 to float
  %763 = bitcast i32 %760 to float
  %764 = bitcast i32 %761 to float
  %765 = add i32 %740, 176
  %766 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %765, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %767 = extractvalue %dx.types.ResRet.i32 %766, 0
  %768 = extractvalue %dx.types.ResRet.i32 %766, 1
  %769 = extractvalue %dx.types.ResRet.i32 %766, 2
  %770 = bitcast i32 %767 to float
  %771 = bitcast i32 %768 to float
  %772 = bitcast i32 %769 to float
  %773 = add i32 %740, 256
  %774 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %773, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %775 = extractvalue %dx.types.ResRet.i32 %774, 0
  %776 = extractvalue %dx.types.ResRet.i32 %774, 1
  %777 = extractvalue %dx.types.ResRet.i32 %774, 2
  %778 = bitcast i32 %775 to float
  %779 = bitcast i32 %776 to float
  %780 = bitcast i32 %777 to float
  %781 = add i32 %740, 272
  %782 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %781, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %783 = extractvalue %dx.types.ResRet.i32 %782, 0
  %784 = extractvalue %dx.types.ResRet.i32 %782, 1
  %785 = extractvalue %dx.types.ResRet.i32 %782, 2
  %786 = bitcast i32 %783 to float
  %787 = bitcast i32 %784 to float
  %788 = bitcast i32 %785 to float
  %789 = fadd fast float %778, %506
  %790 = fadd fast float %779, %507
  %791 = fadd fast float %780, %508
  %792 = fmul fast float %789, 2.097152e+06
  %793 = fmul fast float %790, 2.097152e+06
  %794 = fmul fast float %791, 2.097152e+06
  %795 = fadd fast float %792, %667
  %796 = fadd fast float %795, %786
  %797 = fadd fast float %793, %668
  %798 = fadd fast float %797, %787
  %799 = fadd fast float %794, %669
  %800 = fadd fast float %799, %788
  %801 = fmul fast float %796, %746
  %802 = call float @dx.op.tertiary.f32(i32 46, float %798, float %754, float %801)  ; FMad(a,b,c)
  %803 = call float @dx.op.tertiary.f32(i32 46, float %800, float %762, float %802)  ; FMad(a,b,c)
  %804 = fadd fast float %803, %770
  %805 = fmul fast float %796, %747
  %806 = call float @dx.op.tertiary.f32(i32 46, float %798, float %755, float %805)  ; FMad(a,b,c)
  %807 = call float @dx.op.tertiary.f32(i32 46, float %800, float %763, float %806)  ; FMad(a,b,c)
  %808 = fadd fast float %807, %771
  %809 = fmul fast float %796, %748
  %810 = call float @dx.op.tertiary.f32(i32 46, float %798, float %756, float %809)  ; FMad(a,b,c)
  %811 = call float @dx.op.tertiary.f32(i32 46, float %800, float %764, float %810)  ; FMad(a,b,c)
  %812 = fadd fast float %811, %772
  %813 = fmul fast float %804, 1.280000e+02
  %814 = fmul fast float %808, 1.280000e+02
  %815 = fptoui float %813 to i32
  %816 = fptoui float %814 to i32
  %817 = icmp ult i32 %739, 8192
  br i1 %817, label %824, label %818

; <label>:818                                     ; preds = %738
  %819 = mul i32 %739, 21845
  %820 = shl i32 %816, 7
  %821 = add i32 %819, -178946048
  %822 = add i32 %821, %815
  %823 = add i32 %822, %820
  br label %824

; <label>:824                                     ; preds = %818, %738
  %825 = phi i32 [ %823, %818 ], [ %739, %738 ]
  %826 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %827 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %826, i32 %825, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %828 = extractvalue %dx.types.ResRet.i32 %827, 0
  %829 = lshr i32 %828, 20
  %830 = and i32 %829, 63
  %831 = and i32 %828, 134217728
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %939, label %833

; <label>:833                                     ; preds = %824
  %834 = icmp eq i32 %830, 0
  %835 = zext i1 %834 to i32
  %836 = add i32 %830, %739
  %837 = fmul fast float %804, 1.638400e+04
  %838 = fmul fast float %808, 1.638400e+04
  %839 = fptoui float %837 to i32
  %840 = fptoui float %838 to i32
  br i1 %834, label %916, label %841

; <label>:841                                     ; preds = %833
  %842 = add i32 %740, 304
  %843 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %842, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %844 = extractvalue %dx.types.ResRet.i32 %843, 0
  %845 = extractvalue %dx.types.ResRet.i32 %843, 1
  %846 = mul i32 %836, 336
  %847 = add i32 %846, 304
  %848 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %847, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %849 = extractvalue %dx.types.ResRet.i32 %848, 0
  %850 = extractvalue %dx.types.ResRet.i32 %848, 1
  %851 = shl i32 %844, 5
  %852 = shl i32 %845, 5
  %853 = shl i32 %849, 5
  %854 = shl i32 %850, 5
  %855 = sub i32 %815, %851
  %856 = sub i32 %816, %852
  %857 = and i32 %829, 31
  %858 = shl i32 %853, %857
  %859 = shl i32 %854, %857
  %860 = add i32 %855, %858
  %861 = add i32 %856, %859
  %862 = lshr i32 %860, %857
  %863 = lshr i32 %861, %857
  %864 = shl i32 %862, 7
  %865 = shl i32 %863, 7
  %866 = or i32 %864, 127
  %867 = or i32 %865, 127
  %868 = add i32 %740, 112
  %869 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %868, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %870 = extractvalue %dx.types.ResRet.i32 %869, 2
  %871 = bitcast i32 %870 to float
  %872 = add i32 %846, 112
  %873 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %872, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %874 = extractvalue %dx.types.ResRet.i32 %873, 2
  %875 = bitcast i32 %874 to float
  %876 = sitofp i32 %844 to float
  %877 = sitofp i32 %845 to float
  %878 = sitofp i32 %849 to float
  %879 = sitofp i32 %850 to float
  %880 = shl i32 1, %857
  %881 = uitofp i32 %880 to float
  %882 = fdiv fast float 1.000000e+00, %881
  %883 = fmul fast float %882, %876
  %884 = fmul fast float %882, %877
  %885 = fsub fast float %878, %883
  %886 = fsub fast float %879, %884
  %887 = fmul fast float %885, 2.500000e-01
  %888 = fmul fast float %886, 2.500000e-01
  %889 = fmul fast float %882, %871
  %890 = fsub fast float %875, %889
  %891 = fmul fast float %882, %804
  %892 = fmul fast float %882, %808
  %893 = fadd fast float %887, %891
  %894 = fadd fast float %888, %892
  %895 = fmul fast float %893, 1.638400e+04
  %896 = fmul fast float %894, 1.638400e+04
  %897 = fptoui float %895 to i32
  %898 = fptoui float %896 to i32
  %899 = call i32 @dx.op.binary.i32(i32 39, i32 %897, i32 %864)  ; UMax(a,b)
  %900 = call i32 @dx.op.binary.i32(i32 39, i32 %898, i32 %865)  ; UMax(a,b)
  %901 = call i32 @dx.op.binary.i32(i32 40, i32 %899, i32 %866)  ; UMin(a,b)
  %902 = call i32 @dx.op.binary.i32(i32 40, i32 %900, i32 %867)  ; UMin(a,b)
  %903 = icmp ult i32 %836, 8192
  br i1 %903, label %909, label %904

; <label>:904                                     ; preds = %841
  %905 = mul i32 %836, 21845
  %906 = add i32 %905, -178946048
  %907 = add i32 %906, %862
  %908 = add i32 %907, %865
  br label %909

; <label>:909                                     ; preds = %904, %841
  %910 = phi i32 [ %908, %904 ], [ %836, %841 ]
  %911 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %826, i32 %910, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %912 = extractvalue %dx.types.ResRet.i32 %911, 0
  %913 = and i32 %912, 200278016
  %914 = icmp eq i32 %913, 134217728
  %915 = zext i1 %914 to i32
  br label %916

; <label>:916                                     ; preds = %909, %833
  %917 = phi i32 [ %901, %909 ], [ %839, %833 ]
  %918 = phi i32 [ %902, %909 ], [ %840, %833 ]
  %919 = phi i32 [ %915, %909 ], [ %835, %833 ]
  %920 = phi i32 [ %912, %909 ], [ %828, %833 ]
  %921 = phi float [ %882, %909 ], [ 1.000000e+00, %833 ]
  %922 = phi float [ %890, %909 ], [ 0.000000e+00, %833 ]
  %923 = icmp eq i32 %919, 0
  br i1 %923, label %939, label %924

; <label>:924                                     ; preds = %916
  %925 = shl i32 %920, 7
  %926 = and i32 %925, 130944
  %927 = lshr i32 %920, 3
  %928 = and i32 %927, 130944
  %929 = and i32 %917, 127
  %930 = and i32 %918, 127
  %931 = or i32 %926, %929
  %932 = or i32 %928, %930
  %933 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %934 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %933, i32 0, i32 %931, i32 %932, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %935 = extractvalue %dx.types.ResRet.i32 %934, 0
  %936 = bitcast i32 %935 to float
  %937 = fsub fast float %936, %922
  %938 = fdiv fast float %937, %921
  br label %939

; <label>:939                                     ; preds = %924, %916, %824
  %940 = phi float [ %938, %924 ], [ 0.000000e+00, %916 ], [ 0.000000e+00, %824 ]
  %941 = phi i1 [ true, %924 ], [ false, %916 ], [ false, %824 ]
  %942 = fcmp fast ogt float %940, %812
  %943 = and i1 %941, %942
  %944 = select i1 %943, float 0.000000e+00, float 1.000000e+00
  br label %1117

; <label>:945                                     ; preds = %664
  %946 = extractvalue %dx.types.ResRet.i32 %679, 3
  %947 = extractvalue %dx.types.ResRet.i32 %679, 2
  %948 = extractvalue %dx.types.ResRet.i32 %679, 1
  %949 = extractvalue %dx.types.ResRet.i32 %679, 0
  %950 = extractvalue %dx.types.ResRet.i32 %677, 3
  %951 = extractvalue %dx.types.ResRet.i32 %677, 2
  %952 = extractvalue %dx.types.ResRet.i32 %677, 1
  %953 = extractvalue %dx.types.ResRet.i32 %677, 0
  %954 = extractvalue %dx.types.ResRet.i32 %675, 3
  %955 = extractvalue %dx.types.ResRet.i32 %675, 2
  %956 = extractvalue %dx.types.ResRet.i32 %675, 1
  %957 = extractvalue %dx.types.ResRet.i32 %675, 0
  %958 = extractvalue %dx.types.ResRet.i32 %673, 3
  %959 = extractvalue %dx.types.ResRet.i32 %673, 2
  %960 = extractvalue %dx.types.ResRet.i32 %673, 1
  %961 = extractvalue %dx.types.ResRet.i32 %673, 0
  %962 = extractvalue %dx.types.ResRet.i32 %692, 2
  %963 = bitcast i32 %962 to float
  %964 = extractvalue %dx.types.ResRet.i32 %692, 1
  %965 = bitcast i32 %964 to float
  %966 = extractvalue %dx.types.ResRet.i32 %692, 0
  %967 = bitcast i32 %966 to float
  %968 = fadd fast float %702, %967
  %969 = fadd fast float %703, %965
  %970 = fadd fast float %704, %963
  %971 = icmp eq i32 %690, 2
  br i1 %971, label %1018, label %972

; <label>:972                                     ; preds = %945
  %973 = call float @dx.op.unary.f32(i32 6, float %968)  ; FAbs(value)
  %974 = call float @dx.op.unary.f32(i32 6, float %969)  ; FAbs(value)
  %975 = fcmp fast ult float %973, %974
  %976 = call float @dx.op.unary.f32(i32 6, float %970)  ; FAbs(value)
  %977 = fcmp fast ult float %973, %976
  %978 = or i1 %975, %977
  br i1 %978, label %982, label %979

; <label>:979                                     ; preds = %972
  %980 = fcmp ule float %968, 0.000000e+00
  %981 = zext i1 %980 to i32
  br label %990

; <label>:982                                     ; preds = %972
  %983 = fcmp fast ogt float %974, %976
  br i1 %983, label %984, label %987

; <label>:984                                     ; preds = %982
  %985 = fcmp fast ogt float %969, 0.000000e+00
  %986 = select i1 %985, i32 2, i32 3
  br label %990

; <label>:987                                     ; preds = %982
  %988 = fcmp fast ogt float %970, 0.000000e+00
  %989 = select i1 %988, i32 4, i32 5
  br label %990

; <label>:990                                     ; preds = %987, %984, %979
  %991 = phi i32 [ %981, %979 ], [ %986, %984 ], [ %989, %987 ]
  %992 = add i32 %991, %69
  %993 = mul i32 %992, 336
  %994 = add i32 %993, 128
  %995 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %994, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %996 = extractvalue %dx.types.ResRet.i32 %995, 0
  %997 = extractvalue %dx.types.ResRet.i32 %995, 1
  %998 = extractvalue %dx.types.ResRet.i32 %995, 2
  %999 = extractvalue %dx.types.ResRet.i32 %995, 3
  %1000 = add i32 %993, 144
  %1001 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %1000, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1002 = extractvalue %dx.types.ResRet.i32 %1001, 0
  %1003 = extractvalue %dx.types.ResRet.i32 %1001, 1
  %1004 = extractvalue %dx.types.ResRet.i32 %1001, 2
  %1005 = extractvalue %dx.types.ResRet.i32 %1001, 3
  %1006 = add i32 %993, 160
  %1007 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %1006, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1008 = extractvalue %dx.types.ResRet.i32 %1007, 0
  %1009 = extractvalue %dx.types.ResRet.i32 %1007, 1
  %1010 = extractvalue %dx.types.ResRet.i32 %1007, 2
  %1011 = extractvalue %dx.types.ResRet.i32 %1007, 3
  %1012 = add i32 %993, 176
  %1013 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %672, i32 %1012, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1014 = extractvalue %dx.types.ResRet.i32 %1013, 0
  %1015 = extractvalue %dx.types.ResRet.i32 %1013, 1
  %1016 = extractvalue %dx.types.ResRet.i32 %1013, 2
  %1017 = extractvalue %dx.types.ResRet.i32 %1013, 3
  br label %1018

; <label>:1018                                    ; preds = %990, %945
  %1019 = phi i32 [ %996, %990 ], [ %961, %945 ]
  %1020 = phi i32 [ %997, %990 ], [ %960, %945 ]
  %1021 = phi i32 [ %998, %990 ], [ %959, %945 ]
  %1022 = phi i32 [ %999, %990 ], [ %958, %945 ]
  %1023 = phi i32 [ %1002, %990 ], [ %957, %945 ]
  %1024 = phi i32 [ %1003, %990 ], [ %956, %945 ]
  %1025 = phi i32 [ %1004, %990 ], [ %955, %945 ]
  %1026 = phi i32 [ %1005, %990 ], [ %954, %945 ]
  %1027 = phi i32 [ %1008, %990 ], [ %953, %945 ]
  %1028 = phi i32 [ %1009, %990 ], [ %952, %945 ]
  %1029 = phi i32 [ %1010, %990 ], [ %951, %945 ]
  %1030 = phi i32 [ %1011, %990 ], [ %950, %945 ]
  %1031 = phi i32 [ %1014, %990 ], [ %949, %945 ]
  %1032 = phi i32 [ %1015, %990 ], [ %948, %945 ]
  %1033 = phi i32 [ %1016, %990 ], [ %947, %945 ]
  %1034 = phi i32 [ %1017, %990 ], [ %946, %945 ]
  %1035 = phi i32 [ %992, %990 ], [ %69, %945 ]
  %1036 = bitcast i32 %1034 to float
  %1037 = bitcast i32 %1033 to float
  %1038 = bitcast i32 %1032 to float
  %1039 = bitcast i32 %1031 to float
  %1040 = bitcast i32 %1030 to float
  %1041 = bitcast i32 %1029 to float
  %1042 = bitcast i32 %1028 to float
  %1043 = bitcast i32 %1027 to float
  %1044 = bitcast i32 %1026 to float
  %1045 = bitcast i32 %1025 to float
  %1046 = bitcast i32 %1024 to float
  %1047 = bitcast i32 %1023 to float
  %1048 = bitcast i32 %1022 to float
  %1049 = bitcast i32 %1021 to float
  %1050 = bitcast i32 %1020 to float
  %1051 = bitcast i32 %1019 to float
  %1052 = fmul fast float %1051, %968
  %1053 = call float @dx.op.tertiary.f32(i32 46, float %969, float %1047, float %1052)  ; FMad(a,b,c)
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %970, float %1043, float %1053)  ; FMad(a,b,c)
  %1055 = fadd fast float %1054, %1039
  %1056 = fmul fast float %1050, %968
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %969, float %1046, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %970, float %1042, float %1057)  ; FMad(a,b,c)
  %1059 = fadd fast float %1058, %1038
  %1060 = fmul fast float %1049, %968
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %969, float %1045, float %1060)  ; FMad(a,b,c)
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %970, float %1041, float %1061)  ; FMad(a,b,c)
  %1063 = fadd fast float %1062, %1037
  %1064 = fmul fast float %1048, %968
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %969, float %1044, float %1064)  ; FMad(a,b,c)
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %970, float %1040, float %1065)  ; FMad(a,b,c)
  %1067 = fadd fast float %1066, %1036
  %1068 = fdiv fast float %1055, %1067
  %1069 = fdiv fast float %1059, %1067
  %1070 = fdiv fast float %1063, %1067
  %1071 = icmp ult i32 %1035, 8192
  br i1 %1071, label %1082, label %1072

; <label>:1072                                    ; preds = %1018
  %1073 = fmul fast float %1069, 1.280000e+02
  %1074 = fptoui float %1073 to i32
  %1075 = fmul fast float %1068, 1.280000e+02
  %1076 = fptoui float %1075 to i32
  %1077 = mul i32 %1035, 21845
  %1078 = shl i32 %1074, 7
  %1079 = add i32 %1077, -178946048
  %1080 = add i32 %1079, %1076
  %1081 = add i32 %1080, %1078
  br label %1082

; <label>:1082                                    ; preds = %1072, %1018
  %1083 = phi i32 [ %1081, %1072 ], [ %1035, %1018 ]
  %1084 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1085 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1084, i32 %1083, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1086 = extractvalue %dx.types.ResRet.i32 %1085, 0
  %1087 = lshr i32 %1086, 20
  %1088 = and i32 %1086, 134217728
  %1089 = icmp eq i32 %1088, 0
  %1090 = and i32 %1087, 31
  %1091 = lshr i32 16384, %1090
  %1092 = uitofp i32 %1091 to float
  %1093 = select i1 %1071, float 1.280000e+02, float %1092
  br i1 %1089, label %1111, label %1094

; <label>:1094                                    ; preds = %1082
  %1095 = lshr i32 %1086, 3
  %1096 = and i32 %1095, 130944
  %1097 = fmul fast float %1093, %1069
  %1098 = fptoui float %1097 to i32
  %1099 = and i32 %1098, 127
  %1100 = or i32 %1099, %1096
  %1101 = shl i32 %1086, 7
  %1102 = and i32 %1101, 130944
  %1103 = fmul fast float %1093, %1068
  %1104 = fptoui float %1103 to i32
  %1105 = and i32 %1104, 127
  %1106 = or i32 %1105, %1102
  %1107 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1108 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1107, i32 0, i32 %1106, i32 %1100, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1109 = extractvalue %dx.types.ResRet.i32 %1108, 0
  %1110 = bitcast i32 %1109 to float
  br label %1111

; <label>:1111                                    ; preds = %1094, %1082
  %1112 = phi float [ %1110, %1094 ], [ 0.000000e+00, %1082 ]
  %1113 = phi i1 [ true, %1094 ], [ false, %1082 ]
  %1114 = fcmp fast ogt float %1112, %1070
  %1115 = and i1 %1113, %1114
  %1116 = select i1 %1115, float 0.000000e+00, float 1.000000e+00
  br label %1117

; <label>:1117                                    ; preds = %1111, %939, %705
  %1118 = phi float [ 1.000000e+00, %705 ], [ %944, %939 ], [ %1116, %1111 ]
  %1119 = fmul fast float %666, %1118
  br label %1120

; <label>:1120                                    ; preds = %1117, %541
  %1121 = phi float [ %1119, %1117 ], [ 1.000000e+00, %541 ]
  %1122 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %1123 = extractvalue %dx.types.CBufRet.f32 %1122, 0
  %1124 = extractvalue %dx.types.CBufRet.f32 %1122, 1
  %1125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %1126 = extractvalue %dx.types.CBufRet.f32 %1125, 0
  %1127 = extractvalue %dx.types.CBufRet.f32 %1125, 1
  %1128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1129 = extractvalue %dx.types.CBufRet.f32 %1128, 0
  %1130 = extractvalue %dx.types.CBufRet.f32 %1128, 1
  %1131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %1132 = extractvalue %dx.types.CBufRet.f32 %1131, 0
  %1133 = extractvalue %dx.types.CBufRet.f32 %1131, 1
  %1134 = fmul fast float %1123, %502
  %1135 = call float @dx.op.tertiary.f32(i32 46, float %503, float %1126, float %1134)  ; FMad(a,b,c)
  %1136 = call float @dx.op.tertiary.f32(i32 46, float %504, float %1129, float %1135)  ; FMad(a,b,c)
  %1137 = fadd fast float %1136, %1132
  %1138 = fmul fast float %1124, %502
  %1139 = call float @dx.op.tertiary.f32(i32 46, float %503, float %1127, float %1138)  ; FMad(a,b,c)
  %1140 = call float @dx.op.tertiary.f32(i32 46, float %504, float %1130, float %1139)  ; FMad(a,b,c)
  %1141 = fadd fast float %1140, %1133
  %1142 = fmul fast float %1137, 5.000000e-01
  %1143 = fmul fast float %1141, 5.000000e-01
  %1144 = fadd fast float %1142, 5.000000e-01
  %1145 = fsub fast float 5.000000e-01, %1143
  %1146 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1147 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1148 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1146, %dx.types.Handle %1147, float %1144, float %1145, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1149 = extractvalue %dx.types.ResRet.f32 %1148, 0
  %1150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1151 = extractvalue %dx.types.CBufRet.f32 %1150, 2
  %1152 = fcmp fast ogt float %1151, 0.000000e+00
  br i1 %1152, label %1153, label %1162

; <label>:1153                                    ; preds = %1120
  %1154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %37, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1155 = extractvalue %dx.types.CBufRet.f32 %1154, 0
  %1156 = extractvalue %dx.types.CBufRet.f32 %1154, 1
  %1157 = extractvalue %dx.types.CBufRet.f32 %1154, 2
  %1158 = call float @dx.op.dot3.f32(i32 55, float %63, float %64, float %65, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1159 = fmul fast float %1155, %1158
  %1160 = fmul fast float %1156, %1158
  %1161 = fmul fast float %1157, %1158
  br label %1162

; <label>:1162                                    ; preds = %1153, %1120
  %1163 = phi float [ %1159, %1153 ], [ %63, %1120 ]
  %1164 = phi float [ %1160, %1153 ], [ %64, %1120 ]
  %1165 = phi float [ %1161, %1153 ], [ %65, %1120 ]
  %1166 = fsub fast float -0.000000e+00, %535
  %1167 = fsub fast float -0.000000e+00, %536
  %1168 = fsub fast float -0.000000e+00, %537
  %1169 = call float @dx.op.dot3.f32(i32 55, float %59, float %60, float %61, float %1166, float %1167, float %1168)  ; Dot3(ax,ay,az,bx,by,bz)
  %1170 = extractvalue %dx.types.CBufRet.f32 %449, 1
  %1171 = fmul fast float %1170, %1170
  %1172 = fsub fast float 1.000000e+00, %1171
  %1173 = fmul fast float %1169, 2.000000e+00
  %1174 = fadd fast float %1173, %1170
  %1175 = fmul fast float %1174, %1170
  %1176 = fadd fast float %1175, 1.000000e+00
  %1177 = call float @dx.op.unary.f32(i32 24, float %1176)  ; Sqrt(value)
  %1178 = fmul fast float %1177, 0x402921FB60000000
  %1179 = fmul fast float %1178, %1176
  %1180 = fdiv fast float %1172, %1179
  %1181 = fmul fast float %1121, %66
  %1182 = fmul fast float %1181, %1149
  %1183 = fmul fast float %1182, %1180
  %1184 = fmul fast float %1183, %1163
  %1185 = fmul fast float %1183, %1164
  %1186 = fmul fast float %1183, %1165
  br label %1187

; <label>:1187                                    ; preds = %1162, %539
  %1188 = phi float [ %540, %539 ], [ %1170, %1162 ]
  %1189 = phi float [ 0.000000e+00, %539 ], [ %1184, %1162 ]
  %1190 = phi float [ 0.000000e+00, %539 ], [ %1185, %1162 ]
  %1191 = phi float [ 0.000000e+00, %539 ], [ %1186, %1162 ]
  %1192 = fmul fast float %1188, %536
  %1193 = fmul fast float %1188, %537
  %1194 = fmul fast float %1188, %535
  %1195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %1196 = extractvalue %dx.types.CBufRet.f32 %1195, 3
  %1197 = fcmp fast ogt float %1196, 0.000000e+00
  %1198 = extractvalue %dx.types.CBufRet.f32 %1195, 2
  %1199 = fcmp fast ogt float %1198, 0.000000e+00
  %1200 = or i1 %1197, %1199
  br i1 %1200, label %1201, label %1269

; <label>:1201                                    ; preds = %1187
  %1202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %1203 = extractvalue %dx.types.CBufRet.f32 %1202, 0
  %1204 = extractvalue %dx.types.CBufRet.f32 %1202, 1
  %1205 = extractvalue %dx.types.CBufRet.f32 %1202, 2
  %1206 = fmul fast float %1203, %517
  %1207 = fmul fast float %1204, %519
  %1208 = fmul fast float %1205, %521
  %1209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %1210 = extractvalue %dx.types.CBufRet.f32 %1209, 0
  %1211 = extractvalue %dx.types.CBufRet.f32 %1209, 1
  %1212 = extractvalue %dx.types.CBufRet.f32 %1209, 2
  %1213 = fadd fast float %1206, %1210
  %1214 = fadd fast float %1207, %1211
  %1215 = fadd fast float %1208, %1212
  %1216 = call float @dx.op.binary.f32(i32 35, float %1213, float 0.000000e+00)  ; FMax(a,b)
  %1217 = call float @dx.op.binary.f32(i32 35, float %1214, float 0.000000e+00)  ; FMax(a,b)
  %1218 = call float @dx.op.binary.f32(i32 35, float %1215, float 0.000000e+00)  ; FMax(a,b)
  %1219 = call float @dx.op.binary.f32(i32 36, float %1216, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1220 = call float @dx.op.binary.f32(i32 36, float %1217, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1221 = call float @dx.op.binary.f32(i32 36, float %1218, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1222 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %1223 = extractvalue %dx.types.CBufRet.f32 %1222, 0
  %1224 = extractvalue %dx.types.CBufRet.f32 %1222, 1
  %1225 = extractvalue %dx.types.CBufRet.f32 %1222, 2
  %1226 = fmul fast float %1223, %1219
  %1227 = fmul fast float %1224, %1220
  %1228 = fmul fast float %1225, %1221
  %1229 = fptosi float %1226 to i32
  %1230 = fptosi float %1227 to i32
  %1231 = fptosi float %1228 to i32
  %1232 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %1233 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1232, i32 0, i32 %1229, i32 %1230, i32 %1231, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1234 = extractvalue %dx.types.ResRet.i32 %1233, 0
  %1235 = extractvalue %dx.types.ResRet.i32 %1233, 1
  %1236 = extractvalue %dx.types.ResRet.i32 %1233, 2
  %1237 = extractvalue %dx.types.ResRet.i32 %1233, 3
  %1238 = uitofp i32 %1234 to float
  %1239 = uitofp i32 %1235 to float
  %1240 = uitofp i32 %1236 to float
  %1241 = uitofp i32 %1237 to float
  %1242 = extractvalue %dx.types.CBufRet.f32 %1222, 3
  %1243 = fadd fast float %1242, 1.000000e+00
  %1244 = fmul fast float %1243, %1238
  %1245 = fmul fast float %1243, %1239
  %1246 = fmul fast float %1243, %1240
  %1247 = fdiv fast float %1226, %1241
  %1248 = fdiv fast float %1227, %1241
  %1249 = fdiv fast float %1228, %1241
  %1250 = call float @dx.op.unary.f32(i32 22, float %1247)  ; Frc(value)
  %1251 = call float @dx.op.unary.f32(i32 22, float %1248)  ; Frc(value)
  %1252 = call float @dx.op.unary.f32(i32 22, float %1249)  ; Frc(value)
  %1253 = fmul fast float %1242, %1250
  %1254 = fmul fast float %1242, %1251
  %1255 = fmul fast float %1242, %1252
  %1256 = fadd fast float %1244, 5.000000e-01
  %1257 = fadd fast float %1256, %1253
  %1258 = fadd fast float %1245, 5.000000e-01
  %1259 = fadd fast float %1258, %1254
  %1260 = fadd fast float %1246, 5.000000e-01
  %1261 = fadd fast float %1260, %1255
  %1262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %1263 = extractvalue %dx.types.CBufRet.f32 %1262, 0
  %1264 = extractvalue %dx.types.CBufRet.f32 %1262, 1
  %1265 = extractvalue %dx.types.CBufRet.f32 %1262, 2
  %1266 = fmul fast float %1257, %1263
  %1267 = fmul fast float %1259, %1264
  %1268 = fmul fast float %1261, %1265
  br label %1269

; <label>:1269                                    ; preds = %1201, %1187
  %1270 = phi float [ %1266, %1201 ], [ 0.000000e+00, %1187 ]
  %1271 = phi float [ %1267, %1201 ], [ 0.000000e+00, %1187 ]
  %1272 = phi float [ %1268, %1201 ], [ 0.000000e+00, %1187 ]
  br i1 %1197, label %1273, label %1421

; <label>:1273                                    ; preds = %1269
  %1274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %1275 = extractvalue %dx.types.CBufRet.f32 %1274, 3
  %1276 = fcmp fast ogt float %1275, 0.000000e+00
  br i1 %1276, label %1277, label %1355

; <label>:1277                                    ; preds = %1273
  %1278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1279 = extractvalue %dx.types.CBufRet.f32 %1278, 0
  %1280 = extractvalue %dx.types.CBufRet.f32 %1278, 1
  %1281 = extractvalue %dx.types.CBufRet.f32 %1278, 2
  %1282 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1283 = extractvalue %dx.types.CBufRet.f32 %1282, 2
  %1284 = fcmp fast ogt float %1283, 0.000000e+00
  br i1 %1284, label %1285, label %1321, !dx.controlflow.hints !55

; <label>:1285                                    ; preds = %1277
  %1286 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1287 = extractvalue %dx.types.CBufRet.f32 %1286, 0
  %1288 = fmul fast float %1287, %534
  %1289 = extractvalue %dx.types.CBufRet.f32 %1286, 1
  %1290 = fadd fast float %1288, %1289
  %1291 = call float @dx.op.unary.f32(i32 7, float %1290)  ; Saturate(value)
  %1292 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1293 = extractvalue %dx.types.CBufRet.f32 %1292, 1
  %1294 = extractvalue %dx.types.CBufRet.f32 %1292, 0
  %1295 = fsub fast float -0.000000e+00, %1294
  %1296 = call float @dx.op.dot2.f32(i32 54, float %535, float %536, float %1293, float %1295)  ; Dot2(ax,ay,bx,by)
  %1297 = call float @dx.op.dot2.f32(i32 54, float %535, float %536, float %1294, float %1293)  ; Dot2(ax,ay,bx,by)
  %1298 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 5, i32 1033 })  ; AnnotateHandle(res,props)  resource: TextureCube<4xF32>
  %1299 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1300 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1298, %dx.types.Handle %1299, float %1296, float %1297, float %537, float undef, i32 undef, i32 undef, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1301 = extractvalue %dx.types.ResRet.f32 %1300, 0
  %1302 = extractvalue %dx.types.ResRet.f32 %1300, 1
  %1303 = extractvalue %dx.types.ResRet.f32 %1300, 2
  %1304 = extractvalue %dx.types.CBufRet.f32 %1286, 2
  %1305 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1298, %dx.types.Handle %1299, float %1296, float %1297, float %537, float undef, i32 undef, i32 undef, i32 undef, float %1304)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1306 = extractvalue %dx.types.ResRet.f32 %1305, 0
  %1307 = extractvalue %dx.types.ResRet.f32 %1305, 1
  %1308 = extractvalue %dx.types.ResRet.f32 %1305, 2
  %1309 = fsub fast float %1301, %1306
  %1310 = fsub fast float %1302, %1307
  %1311 = fsub fast float %1303, %1308
  %1312 = fmul fast float %1309, %1291
  %1313 = fmul fast float %1310, %1291
  %1314 = fmul fast float %1311, %1291
  %1315 = fadd fast float %1312, %1306
  %1316 = fadd fast float %1313, %1307
  %1317 = fadd fast float %1314, %1308
  %1318 = fmul fast float %1315, %1279
  %1319 = fmul fast float %1316, %1280
  %1320 = fmul fast float %1317, %1281
  br label %1321

; <label>:1321                                    ; preds = %1285, %1277
  %1322 = phi float [ %1318, %1285 ], [ %1279, %1277 ]
  %1323 = phi float [ %1319, %1285 ], [ %1280, %1277 ]
  %1324 = phi float [ %1320, %1285 ], [ %1281, %1277 ]
  %1325 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %38, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1326 = extractvalue %dx.types.CBufRet.f32 %1325, 0
  %1327 = extractvalue %dx.types.CBufRet.f32 %1325, 1
  %1328 = extractvalue %dx.types.CBufRet.f32 %1325, 2
  %1329 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %1330 = extractvalue %dx.types.CBufRet.f32 %1329, 1
  %1331 = fmul fast float %1330, %1326
  %1332 = fmul fast float %1330, %1327
  %1333 = fmul fast float %1330, %1328
  %1334 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1335 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1336 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1334, %dx.types.Handle %1335, float 5.000000e-01, float 5.000000e-01, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1337 = extractvalue %dx.types.ResRet.f32 %1336, 0
  %1338 = extractvalue %dx.types.ResRet.f32 %1336, 1
  %1339 = extractvalue %dx.types.ResRet.f32 %1336, 2
  %1340 = fmul fast float %1331, %1337
  %1341 = fmul fast float %1332, %1338
  %1342 = fmul fast float %1333, %1339
  %1343 = fadd fast float %1340, %1322
  %1344 = fadd fast float %1341, %1323
  %1345 = fadd fast float %1342, %1324
  %1346 = fmul fast float %1343, 0x3FD20DD740000000
  %1347 = fmul fast float %1344, 0x3FD20DD740000000
  %1348 = fmul fast float %1345, 0x3FD20DD740000000
  %1349 = call float @dx.op.dot4.f32(i32 56, float %1346, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1350 = call float @dx.op.dot4.f32(i32 56, float %1347, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1351 = call float @dx.op.dot4.f32(i32 56, float %1348, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1352 = call float @dx.op.binary.f32(i32 35, float %1349, float 0.000000e+00)  ; FMax(a,b)
  %1353 = call float @dx.op.binary.f32(i32 35, float %1350, float 0.000000e+00)  ; FMax(a,b)
  %1354 = call float @dx.op.binary.f32(i32 35, float %1351, float 0.000000e+00)  ; FMax(a,b)
  br label %1387

; <label>:1355                                    ; preds = %1273
  %1356 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1357 = extractvalue %dx.types.CBufRet.f32 %1356, 0
  %1358 = extractvalue %dx.types.CBufRet.f32 %1356, 1
  %1359 = extractvalue %dx.types.CBufRet.f32 %1356, 2
  %1360 = extractvalue %dx.types.CBufRet.f32 %1356, 3
  %1361 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %1362 = extractvalue %dx.types.CBufRet.f32 %1361, 0
  %1363 = extractvalue %dx.types.CBufRet.f32 %1361, 1
  %1364 = extractvalue %dx.types.CBufRet.f32 %1361, 2
  %1365 = extractvalue %dx.types.CBufRet.f32 %1361, 3
  %1366 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %1367 = extractvalue %dx.types.CBufRet.f32 %1366, 0
  %1368 = extractvalue %dx.types.CBufRet.f32 %1366, 1
  %1369 = extractvalue %dx.types.CBufRet.f32 %1366, 2
  %1370 = extractvalue %dx.types.CBufRet.f32 %1366, 3
  %1371 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %1372 = extractvalue %dx.types.CBufRet.f32 %1371, 0
  %1373 = extractvalue %dx.types.CBufRet.f32 %1371, 1
  %1374 = extractvalue %dx.types.CBufRet.f32 %1371, 2
  %1375 = call float @dx.op.dot4.f32(i32 56, float %1357, float %1358, float %1359, float %1360, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1376 = call float @dx.op.dot4.f32(i32 56, float %1362, float %1363, float %1364, float %1365, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1377 = call float @dx.op.dot4.f32(i32 56, float %1367, float %1368, float %1369, float %1370, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1378 = call float @dx.op.binary.f32(i32 35, float %1375, float 0.000000e+00)  ; FMax(a,b)
  %1379 = call float @dx.op.binary.f32(i32 35, float %1376, float 0.000000e+00)  ; FMax(a,b)
  %1380 = call float @dx.op.binary.f32(i32 35, float %1377, float 0.000000e+00)  ; FMax(a,b)
  %1381 = fmul fast float %1372, 0x3FD45F3060000000
  %1382 = fmul fast float %1381, %1378
  %1383 = fmul fast float %1373, 0x3FD45F3060000000
  %1384 = fmul fast float %1383, %1379
  %1385 = fmul fast float %1374, 0x3FD45F3060000000
  %1386 = fmul fast float %1385, %1380
  br label %1387

; <label>:1387                                    ; preds = %1355, %1321
  %1388 = phi float [ %1352, %1321 ], [ %1382, %1355 ]
  %1389 = phi float [ %1353, %1321 ], [ %1384, %1355 ]
  %1390 = phi float [ %1354, %1321 ], [ %1386, %1355 ]
  %1391 = extractvalue %dx.types.CBufRet.f32 %449, 0
  %1392 = fcmp fast ogt float %1391, 0.000000e+00
  br i1 %1392, label %1393, label %1412

; <label>:1393                                    ; preds = %1387
  %1394 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1395 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1396 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1394, %dx.types.Handle %1395, float %1270, float %1271, float %1272, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1397 = extractvalue %dx.types.ResRet.f32 %1396, 0
  %1398 = extractvalue %dx.types.ResRet.f32 %1396, 1
  %1399 = extractvalue %dx.types.ResRet.f32 %1396, 2
  %1400 = fmul fast float %1397, 2.000000e+00
  %1401 = fmul fast float %1398, 2.000000e+00
  %1402 = fmul fast float %1399, 2.000000e+00
  %1403 = fadd fast float %1400, -1.000000e+00
  %1404 = fadd fast float %1401, -1.000000e+00
  %1405 = fadd fast float %1402, -1.000000e+00
  %1406 = fmul fast float %1403, %1403
  %1407 = fmul fast float %1404, %1404
  %1408 = fadd fast float %1406, %1407
  %1409 = fmul fast float %1405, %1405
  %1410 = fadd fast float %1408, %1409
  %1411 = call float @dx.op.unary.f32(i32 24, float %1410)  ; Sqrt(value)
  br label %1412

; <label>:1412                                    ; preds = %1393, %1387
  %1413 = phi float [ %1411, %1393 ], [ 1.000000e+00, %1387 ]
  %1414 = fmul fast float %1196, %1413
  %1415 = fmul fast float %1414, %1388
  %1416 = fmul fast float %1414, %1389
  %1417 = fmul fast float %1414, %1390
  %1418 = fadd fast float %1415, %1189
  %1419 = fadd fast float %1416, %1190
  %1420 = fadd fast float %1417, %1191
  br label %1421

; <label>:1421                                    ; preds = %1412, %1269
  %1422 = phi float [ %1418, %1412 ], [ %1189, %1269 ]
  %1423 = phi float [ %1419, %1412 ], [ %1190, %1269 ]
  %1424 = phi float [ %1420, %1412 ], [ %1191, %1269 ]
  %1425 = extractvalue %dx.types.CBufRet.f32 %1195, 2
  %1426 = fcmp fast ogt float %1425, 0.000000e+00
  br i1 %1426, label %1427, label %1492

; <label>:1427                                    ; preds = %1421
  %1428 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1429 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1430 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1428, %dx.types.Handle %1429, float %1270, float %1271, float %1272, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1431 = extractvalue %dx.types.ResRet.f32 %1430, 0
  %1432 = extractvalue %dx.types.ResRet.f32 %1430, 1
  %1433 = extractvalue %dx.types.ResRet.f32 %1430, 2
  %1434 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1435 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1434, %dx.types.Handle %1429, float %1270, float %1271, float %1272, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1436 = extractvalue %dx.types.ResRet.f32 %1435, 0
  %1437 = extractvalue %dx.types.ResRet.f32 %1435, 1
  %1438 = extractvalue %dx.types.ResRet.f32 %1435, 2
  %1439 = fmul fast float %1436, 2.000000e+00
  %1440 = fmul fast float %1437, 2.000000e+00
  %1441 = fmul fast float %1438, 2.000000e+00
  %1442 = fadd fast float %1439, -1.000000e+00
  %1443 = fadd fast float %1440, -1.000000e+00
  %1444 = fadd fast float %1441, -1.000000e+00
  %1445 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1446 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1445, %dx.types.Handle %1429, float %1270, float %1271, float %1272, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1447 = extractvalue %dx.types.ResRet.f32 %1446, 0
  %1448 = extractvalue %dx.types.ResRet.f32 %1446, 1
  %1449 = extractvalue %dx.types.ResRet.f32 %1446, 2
  %1450 = fmul fast float %1447, 2.000000e+00
  %1451 = fmul fast float %1448, 2.000000e+00
  %1452 = fmul fast float %1449, 2.000000e+00
  %1453 = fadd fast float %1450, -1.000000e+00
  %1454 = fadd fast float %1451, -1.000000e+00
  %1455 = fadd fast float %1452, -1.000000e+00
  %1456 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1457 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1456, %dx.types.Handle %1429, float %1270, float %1271, float %1272, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1458 = extractvalue %dx.types.ResRet.f32 %1457, 0
  %1459 = extractvalue %dx.types.ResRet.f32 %1457, 1
  %1460 = extractvalue %dx.types.ResRet.f32 %1457, 2
  %1461 = fmul fast float %1458, 2.000000e+00
  %1462 = fmul fast float %1459, 2.000000e+00
  %1463 = fmul fast float %1460, 2.000000e+00
  %1464 = fadd fast float %1461, -1.000000e+00
  %1465 = fadd fast float %1462, -1.000000e+00
  %1466 = fadd fast float %1463, -1.000000e+00
  %1467 = fmul fast float %1431, 0x3FFBB67B80000000
  %1468 = fmul fast float %1467, %1442
  %1469 = fmul fast float %1467, %1443
  %1470 = fmul fast float %1467, %1444
  %1471 = fmul fast float %1432, 0x3FFBB67B80000000
  %1472 = fmul fast float %1471, %1453
  %1473 = fmul fast float %1471, %1454
  %1474 = fmul fast float %1471, %1455
  %1475 = fmul fast float %1433, 0x3FFBB67B80000000
  %1476 = fmul fast float %1475, %1464
  %1477 = fmul fast float %1475, %1465
  %1478 = fmul fast float %1475, %1466
  %1479 = fmul fast float %1425, 0x3FD45F3060000000
  %1480 = call float @dx.op.dot4.f32(i32 56, float %1431, float %1468, float %1469, float %1470, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1481 = call float @dx.op.dot4.f32(i32 56, float %1432, float %1472, float %1473, float %1474, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1482 = call float @dx.op.dot4.f32(i32 56, float %1433, float %1476, float %1477, float %1478, float 1.000000e+00, float %1192, float %1193, float %1194)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1483 = call float @dx.op.binary.f32(i32 35, float %1480, float 0.000000e+00)  ; FMax(a,b)
  %1484 = call float @dx.op.binary.f32(i32 35, float %1481, float 0.000000e+00)  ; FMax(a,b)
  %1485 = call float @dx.op.binary.f32(i32 35, float %1482, float 0.000000e+00)  ; FMax(a,b)
  %1486 = fmul fast float %1483, %1479
  %1487 = fmul fast float %1484, %1479
  %1488 = fmul fast float %1485, %1479
  %1489 = fadd fast float %1486, %1422
  %1490 = fadd fast float %1487, %1423
  %1491 = fadd fast float %1488, %1424
  br label %1492

; <label>:1492                                    ; preds = %1427, %1421
  %1493 = phi float [ %1489, %1427 ], [ %1422, %1421 ]
  %1494 = phi float [ %1490, %1427 ], [ %1423, %1421 ]
  %1495 = phi float [ %1491, %1427 ], [ %1424, %1421 ]
  %1496 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1497 = extractvalue %dx.types.CBufRet.i32 %1496, 0
  %1498 = extractvalue %dx.types.CBufRet.i32 %1496, 1
  %1499 = mul i32 %1497, %42
  %1500 = mul i32 %1498, %43
  %1501 = fmul fast float %470, %55
  %1502 = fadd fast float %1501, %56
  %1503 = call float @dx.op.unary.f32(i32 23, float %1502)  ; Log(value)
  %1504 = fmul fast float %1503, %57
  %1505 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1504)  ; FMax(a,b)
  %1506 = fptoui float %1505 to i32
  %1507 = add nsw i32 %51, -1
  %1508 = call i32 @dx.op.binary.i32(i32 40, i32 %1506, i32 %1507)  ; UMin(a,b)
  %1509 = and i32 %53, 31
  %1510 = lshr i32 %1499, %1509
  %1511 = lshr i32 %1500, %1509
  %1512 = mul i32 %1508, %50
  %1513 = add i32 %1512, %1511
  %1514 = mul i32 %1513, %49
  %1515 = add i32 %1514, %1510
  %1516 = shl i32 %1515, 1
  %1517 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1518 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1517, i32 %1516, i32 undef)  ; BufferLoad(srv,index,wot)
  %1519 = extractvalue %dx.types.ResRet.i32 %1518, 0
  %1520 = call i32 @dx.op.binary.i32(i32 40, i32 %1519, i32 %46)  ; UMin(a,b)
  %1521 = or i32 %1516, 1
  %1522 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1517, i32 %1521, i32 undef)  ; BufferLoad(srv,index,wot)
  %1523 = extractvalue %dx.types.ResRet.i32 %1522, 0
  %1524 = add i32 %42, 1
  %1525 = add i32 %43, 1
  %1526 = add i32 %44, 1
  %1527 = uitofp i32 %1524 to float
  %1528 = uitofp i32 %1525 to float
  %1529 = fadd fast float %454, %1527
  %1530 = fadd fast float %455, %1528
  %1531 = fdiv fast float %1529, %277
  %1532 = fdiv fast float %1530, %278
  %1533 = fmul fast float %1531, 2.000000e+00
  %1534 = fmul fast float %1532, 2.000000e+00
  %1535 = fadd fast float %1533, -1.000000e+00
  %1536 = fadd fast float %1534, -1.000000e+00
  %1537 = fsub fast float -0.000000e+00, %1536
  %1538 = uitofp i32 %1526 to float
  %1539 = fadd fast float %456, %1538
  %1540 = fdiv fast float %1539, %288
  %1541 = call float @dx.op.unary.f32(i32 21, float %1540)  ; Exp(value)
  %1542 = fsub fast float %1541, %291
  %1543 = fdiv fast float %1542, %293
  br i1 %297, label %1550, label %1544, !dx.controlflow.hints !52

; <label>:1544                                    ; preds = %1492
  %1545 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1546 = extractvalue %dx.types.CBufRet.f32 %1545, 2
  %1547 = fmul fast float %1546, %1543
  %1548 = extractvalue %dx.types.CBufRet.f32 %295, 2
  %1549 = fadd fast float %1547, %1548
  br label %1557

; <label>:1550                                    ; preds = %1492
  %1551 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1552 = extractvalue %dx.types.CBufRet.f32 %1551, 3
  %1553 = fadd fast float %1552, %1543
  %1554 = extractvalue %dx.types.CBufRet.f32 %1551, 2
  %1555 = fmul fast float %1553, %1554
  %1556 = fdiv fast float 1.000000e+00, %1555
  br label %1557

; <label>:1557                                    ; preds = %1550, %1544
  %1558 = phi float [ %1549, %1544 ], [ %1556, %1550 ]
  %1559 = fmul fast float %314, %1535
  %1560 = call float @dx.op.tertiary.f32(i32 46, float %1537, float %319, float %1559)  ; FMad(a,b,c)
  %1561 = call float @dx.op.tertiary.f32(i32 46, float %1558, float %324, float %1560)  ; FMad(a,b,c)
  %1562 = fadd fast float %1561, %329
  %1563 = fmul fast float %315, %1535
  %1564 = call float @dx.op.tertiary.f32(i32 46, float %1537, float %320, float %1563)  ; FMad(a,b,c)
  %1565 = call float @dx.op.tertiary.f32(i32 46, float %1558, float %325, float %1564)  ; FMad(a,b,c)
  %1566 = fadd fast float %1565, %330
  %1567 = fmul fast float %316, %1535
  %1568 = call float @dx.op.tertiary.f32(i32 46, float %1537, float %321, float %1567)  ; FMad(a,b,c)
  %1569 = call float @dx.op.tertiary.f32(i32 46, float %1558, float %326, float %1568)  ; FMad(a,b,c)
  %1570 = fadd fast float %1569, %331
  %1571 = fmul fast float %317, %1535
  %1572 = call float @dx.op.tertiary.f32(i32 46, float %1537, float %322, float %1571)  ; FMad(a,b,c)
  %1573 = call float @dx.op.tertiary.f32(i32 46, float %1558, float %327, float %1572)  ; FMad(a,b,c)
  %1574 = fadd fast float %1573, %332
  %1575 = fdiv fast float %1562, %1574
  %1576 = fdiv fast float %1566, %1574
  %1577 = fdiv fast float %1570, %1574
  %1578 = fsub fast float %502, %1575
  %1579 = fsub fast float %503, %1576
  %1580 = fsub fast float %504, %1577
  %1581 = fmul fast float %1578, %1578
  %1582 = fmul fast float %1579, %1579
  %1583 = fadd fast float %1582, %1581
  %1584 = fmul fast float %1580, %1580
  %1585 = fadd fast float %1583, %1584
  %1586 = call float @dx.op.unary.f32(i32 24, float %1585)  ; Sqrt(value)
  %1587 = extractvalue %dx.types.CBufRet.f32 %449, 2
  %1588 = fmul fast float %1587, %1586
  %1589 = call float @dx.op.binary.f32(i32 35, float %1588, float 1.000000e+00)  ; FMax(a,b)
  %1590 = fmul fast float %1589, %1589
  %1591 = icmp eq i32 %1520, 0
  br i1 %1591, label %2001, label %1592

; <label>:1592                                    ; preds = %1557
  br label %1593

; <label>:1593                                    ; preds = %1994, %1592
  %1594 = phi float [ %1995, %1994 ], [ %1493, %1592 ]
  %1595 = phi float [ %1996, %1994 ], [ %1494, %1592 ]
  %1596 = phi float [ %1997, %1994 ], [ %1495, %1592 ]
  %1597 = phi i32 [ %1998, %1994 ], [ 0, %1592 ]
  %1598 = add i32 %1597, %1523
  %1599 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1600 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1599, i32 %1598, i32 undef)  ; BufferLoad(srv,index,wot)
  %1601 = extractvalue %dx.types.ResRet.i32 %1600, 0
  %1602 = mul i32 %1601, 6
  %1603 = add i32 %1602, 4
  %1604 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1605 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1603, i32 undef)  ; BufferLoad(srv,index,wot)
  %1606 = extractvalue %dx.types.ResRet.f32 %1605, 0
  %1607 = extractvalue %dx.types.ResRet.f32 %1605, 1
  %1608 = extractvalue %dx.types.ResRet.f32 %1605, 2
  %1609 = add i32 %1602, 3
  %1610 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1609, i32 undef)  ; BufferLoad(srv,index,wot)
  %1611 = extractvalue %dx.types.ResRet.f32 %1610, 3
  %1612 = add i32 %1602, 2
  %1613 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1612, i32 undef)  ; BufferLoad(srv,index,wot)
  %1614 = extractvalue %dx.types.ResRet.f32 %1613, 0
  %1615 = extractvalue %dx.types.ResRet.f32 %1613, 1
  %1616 = extractvalue %dx.types.ResRet.f32 %1613, 2
  %1617 = or i32 %1602, 1
  %1618 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1617, i32 undef)  ; BufferLoad(srv,index,wot)
  %1619 = extractvalue %dx.types.ResRet.f32 %1618, 0
  %1620 = extractvalue %dx.types.ResRet.f32 %1618, 1
  %1621 = extractvalue %dx.types.ResRet.f32 %1618, 2
  %1622 = extractvalue %dx.types.ResRet.f32 %1618, 3
  %1623 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1602, i32 undef)  ; BufferLoad(srv,index,wot)
  %1624 = extractvalue %dx.types.ResRet.f32 %1623, 3
  %1625 = bitcast float %1611 to i32
  %1626 = lshr i32 %1625, 16
  %1627 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1626)  ; LegacyF16ToF32(value)
  %1628 = fcmp fast ogt float %1627, 0.000000e+00
  br i1 %1628, label %1629, label %1994

; <label>:1629                                    ; preds = %1593
  %1630 = extractvalue %dx.types.ResRet.f32 %1623, 2
  %1631 = extractvalue %dx.types.ResRet.f32 %1623, 1
  %1632 = extractvalue %dx.types.ResRet.f32 %1623, 0
  %1633 = extractvalue %dx.types.ResRet.f32 %1613, 3
  %1634 = extractvalue %dx.types.ResRet.f32 %1610, 2
  %1635 = extractvalue %dx.types.ResRet.f32 %1610, 0
  %1636 = add i32 %1602, 5
  %1637 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1604, i32 %1636, i32 undef)  ; BufferLoad(srv,index,wot)
  %1638 = extractvalue %dx.types.ResRet.f32 %1637, 3
  %1639 = bitcast float %1633 to i32
  %1640 = lshr i32 %1639, 16
  %1641 = and i32 %1640, 3
  %1642 = bitcast float %1635 to i32
  %1643 = and i32 %1642, 65535
  %1644 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1643)  ; LegacyF16ToF32(value)
  %1645 = lshr i32 %1642, 16
  %1646 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1645)  ; LegacyF16ToF32(value)
  %1647 = bitcast float %1634 to i32
  %1648 = and i32 %1647, 65535
  %1649 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1648)  ; LegacyF16ToF32(value)
  %1650 = fsub fast float -0.000000e+00, %1649
  %1651 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1625)  ; LegacyF16ToF32(value)
  %1652 = fsub fast float -0.000000e+00, %1651
  %1653 = fcmp fast oeq float %1622, 0.000000e+00
  %1654 = icmp eq i32 %1641, 2
  %1655 = icmp eq i32 %1641, 3
  %1656 = bitcast float %1638 to i32
  %1657 = and i32 %1656, 65535
  %1658 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1657)  ; LegacyF16ToF32(value)
  %1659 = lshr i32 %1656, 16
  %1660 = and i32 %1659, 1023
  %1661 = uitofp i32 %1660 to float
  %1662 = fmul fast float %1661, 9.765625e-04
  %1663 = fsub fast float %1632, %502
  %1664 = fsub fast float %1631, %503
  %1665 = fsub fast float %1630, %504
  %1666 = call float @dx.op.dot3.f32(i32 55, float %1663, float %1664, float %1665, float %1663, float %1664, float %1665)  ; Dot3(ax,ay,az,bx,by,bz)
  %1667 = call float @dx.op.unary.f32(i32 25, float %1666)  ; Rsqrt(value)
  %1668 = fmul fast float %1667, %1663
  %1669 = fmul fast float %1667, %1664
  %1670 = fmul fast float %1667, %1665
  br i1 %1653, label %1671, label %1678

; <label>:1671                                    ; preds = %1629
  %1672 = fmul fast float %1624, %1624
  %1673 = fmul fast float %1672, %1666
  %1674 = fmul fast float %1673, %1673
  %1675 = fsub fast float 1.000000e+00, %1674
  %1676 = call float @dx.op.unary.f32(i32 7, float %1675)  ; Saturate(value)
  %1677 = fmul fast float %1676, %1676
  br label %1688

; <label>:1678                                    ; preds = %1629
  %1679 = fmul fast float %1663, %1624
  %1680 = fmul fast float %1664, %1624
  %1681 = fmul fast float %1665, %1624
  %1682 = call float @dx.op.dot3.f32(i32 55, float %1679, float %1680, float %1681, float %1679, float %1680, float %1681)  ; Dot3(ax,ay,az,bx,by,bz)
  %1683 = call float @dx.op.unary.f32(i32 7, float %1682)  ; Saturate(value)
  %1684 = fsub fast float 1.000000e+00, %1683
  %1685 = call float @dx.op.unary.f32(i32 23, float %1684)  ; Log(value)
  %1686 = fmul fast float %1685, %1622
  %1687 = call float @dx.op.unary.f32(i32 21, float %1686)  ; Exp(value)
  br label %1688

; <label>:1688                                    ; preds = %1678, %1671
  %1689 = phi float [ %1677, %1671 ], [ %1687, %1678 ]
  br i1 %1654, label %1690, label %1697

; <label>:1690                                    ; preds = %1688
  %1691 = call float @dx.op.dot3.f32(i32 55, float %1668, float %1669, float %1670, float %1614, float %1615, float %1616)  ; Dot3(ax,ay,az,bx,by,bz)
  %1692 = fsub fast float %1691, %1644
  %1693 = fmul fast float %1692, %1646
  %1694 = call float @dx.op.unary.f32(i32 7, float %1693)  ; Saturate(value)
  %1695 = fmul fast float %1694, %1694
  %1696 = fmul fast float %1695, %1689
  br label %1697

; <label>:1697                                    ; preds = %1690, %1688
  %1698 = phi float [ %1696, %1690 ], [ %1689, %1688 ]
  br i1 %1655, label %1699, label %1703

; <label>:1699                                    ; preds = %1697
  %1700 = call float @dx.op.dot3.f32(i32 55, float %1614, float %1615, float %1616, float %1668, float %1669, float %1670)  ; Dot3(ax,ay,az,bx,by,bz)
  %1701 = fcmp fast olt float %1700, 0.000000e+00
  %1702 = select i1 %1701, float 0.000000e+00, float %1698
  br label %1703

; <label>:1703                                    ; preds = %1699, %1697
  %1704 = phi float [ %1702, %1699 ], [ %1698, %1697 ]
  br i1 %1655, label %1705, label %1937

; <label>:1705                                    ; preds = %1703
  %1706 = fmul fast float %1616, %1607
  %1707 = fmul fast float %1615, %1608
  %1708 = fsub fast float %1706, %1707
  %1709 = fmul fast float %1614, %1608
  %1710 = fmul fast float %1616, %1606
  %1711 = fsub fast float %1709, %1710
  %1712 = fmul fast float %1615, %1606
  %1713 = fmul fast float %1614, %1607
  %1714 = fsub fast float %1712, %1713
  %1715 = fcmp fast ogt float %1662, 0x3FA1EB8520000000
  br i1 %1715, label %1716, label %1811

; <label>:1716                                    ; preds = %1705
  %1717 = fmul fast float %1663, %1708
  %1718 = call float @dx.op.tertiary.f32(i32 46, float %1711, float %1664, float %1717)  ; FMad(a,b,c)
  %1719 = call float @dx.op.tertiary.f32(i32 46, float %1714, float %1665, float %1718)  ; FMad(a,b,c)
  %1720 = fmul fast float %1663, %1606
  %1721 = call float @dx.op.tertiary.f32(i32 46, float %1607, float %1664, float %1720)  ; FMad(a,b,c)
  %1722 = call float @dx.op.tertiary.f32(i32 46, float %1608, float %1665, float %1721)  ; FMad(a,b,c)
  %1723 = fmul fast float %1663, %1614
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1615, float %1664, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.tertiary.f32(i32 46, float %1616, float %1665, float %1724)  ; FMad(a,b,c)
  %1726 = fmul fast float %1662, %1662
  %1727 = fsub fast float 1.000000e+00, %1726
  %1728 = call float @dx.op.unary.f32(i32 24, float %1727)  ; Sqrt(value)
  %1729 = fmul fast float %1662, %1658
  %1730 = call float @dx.op.binary.f32(i32 36, float %1725, float %1729)  ; FMin(a,b)
  %1731 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1729)  ; FMax(a,b)
  %1732 = fdiv fast float %1730, %1731
  %1733 = fmul fast float %1728, %1658
  %1734 = fmul fast float %1733, %1732
  %1735 = fcmp fast ogt float %1719, 0.000000e+00
  %1736 = fcmp fast ogt float %1722, 0.000000e+00
  %1737 = fcmp fast olt float %1719, 0.000000e+00
  %1738 = fcmp fast olt float %1722, 0.000000e+00
  %1739 = zext i1 %1735 to i32
  %1740 = zext i1 %1736 to i32
  %1741 = zext i1 %1737 to i32
  %1742 = zext i1 %1738 to i32
  %1743 = sub nsw i32 %1739, %1741
  %1744 = sub nsw i32 %1740, %1742
  %1745 = sitofp i32 %1743 to float
  %1746 = sitofp i32 %1744 to float
  %1747 = fadd fast float %1734, %1649
  %1748 = fadd fast float %1734, %1651
  %1749 = call float @dx.op.unary.f32(i32 6, float %1719)  ; FAbs(value)
  %1750 = call float @dx.op.unary.f32(i32 6, float %1722)  ; FAbs(value)
  %1751 = call float @dx.op.binary.f32(i32 35, float %1749, float %1747)  ; FMax(a,b)
  %1752 = call float @dx.op.binary.f32(i32 35, float %1750, float %1748)  ; FMax(a,b)
  %1753 = fsub fast float %1650, %1734
  %1754 = fadd fast float %1753, %1751
  %1755 = fmul fast float %1754, %1745
  %1756 = fsub fast float %1652, %1734
  %1757 = fadd fast float %1756, %1752
  %1758 = fmul fast float %1757, %1746
  %1759 = fsub fast float %1725, %1730
  %1760 = call float @dx.op.binary.f32(i32 35, float %1759, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1761 = call float @dx.op.unary.f32(i32 6, float %1755)  ; FAbs(value)
  %1762 = call float @dx.op.unary.f32(i32 6, float %1758)  ; FAbs(value)
  %1763 = fdiv fast float %1761, %1760
  %1764 = fdiv fast float %1762, %1760
  %1765 = fmul fast float %1763, %1730
  %1766 = fmul fast float %1764, %1730
  %1767 = fsub fast float %1765, %1734
  %1768 = fsub fast float %1766, %1734
  %1769 = fsub fast float -0.000000e+00, %1745
  %1770 = fsub fast float -0.000000e+00, %1746
  %1771 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1769)  ; FMax(a,b)
  %1772 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1770)  ; FMax(a,b)
  %1773 = fmul fast float %1767, %1771
  %1774 = fmul fast float %1768, %1772
  %1775 = fsub fast float %1773, %1649
  %1776 = fsub fast float %1774, %1651
  %1777 = call float @dx.op.binary.f32(i32 35, float %1775, float %1650)  ; FMax(a,b)
  %1778 = call float @dx.op.binary.f32(i32 35, float %1776, float %1652)  ; FMax(a,b)
  %1779 = call float @dx.op.binary.f32(i32 36, float %1777, float %1649)  ; FMin(a,b)
  %1780 = call float @dx.op.binary.f32(i32 36, float %1778, float %1651)  ; FMin(a,b)
  %1781 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1745)  ; FMax(a,b)
  %1782 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1746)  ; FMax(a,b)
  %1783 = fmul fast float %1781, %1767
  %1784 = fmul fast float %1782, %1768
  %1785 = fsub fast float %1649, %1783
  %1786 = fsub fast float %1651, %1784
  %1787 = call float @dx.op.binary.f32(i32 35, float %1785, float %1650)  ; FMax(a,b)
  %1788 = call float @dx.op.binary.f32(i32 35, float %1786, float %1652)  ; FMax(a,b)
  %1789 = call float @dx.op.binary.f32(i32 36, float %1787, float %1649)  ; FMin(a,b)
  %1790 = call float @dx.op.binary.f32(i32 36, float %1788, float %1651)  ; FMin(a,b)
  %1791 = fadd fast float %1789, %1779
  %1792 = fadd fast float %1790, %1780
  %1793 = fmul fast float %1791, 5.000000e-01
  %1794 = fmul fast float %1792, 5.000000e-01
  %1795 = fsub fast float %1789, %1779
  %1796 = fsub fast float %1790, %1780
  %1797 = fmul fast float %1795, 5.000000e-01
  %1798 = fmul fast float %1796, 5.000000e-01
  %1799 = fmul fast float %1793, %1708
  %1800 = fmul fast float %1793, %1711
  %1801 = fmul fast float %1793, %1714
  %1802 = fsub fast float %1663, %1799
  %1803 = fsub fast float %1664, %1800
  %1804 = fsub fast float %1665, %1801
  %1805 = fmul fast float %1794, %1606
  %1806 = fmul fast float %1794, %1607
  %1807 = fmul fast float %1794, %1608
  %1808 = fsub fast float %1802, %1805
  %1809 = fsub fast float %1803, %1806
  %1810 = fsub fast float %1804, %1807
  br label %1811

; <label>:1811                                    ; preds = %1716, %1705
  %1812 = phi float [ %1808, %1716 ], [ %1663, %1705 ]
  %1813 = phi float [ %1809, %1716 ], [ %1664, %1705 ]
  %1814 = phi float [ %1810, %1716 ], [ %1665, %1705 ]
  %1815 = phi float [ %1797, %1716 ], [ %1649, %1705 ]
  %1816 = phi float [ %1798, %1716 ], [ %1651, %1705 ]
  %1817 = fcmp fast oeq float %1815, 0.000000e+00
  %1818 = fcmp fast oeq float %1816, 0.000000e+00
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %1967, label %1820

; <label>:1820                                    ; preds = %1811
  %1821 = call float @dx.op.dot3.f32(i32 55, float %1708, float %1711, float %1714, float %1812, float %1813, float %1814)  ; Dot3(ax,ay,az,bx,by,bz)
  %1822 = call float @dx.op.dot3.f32(i32 55, float %1606, float %1607, float %1608, float %1812, float %1813, float %1814)  ; Dot3(ax,ay,az,bx,by,bz)
  %1823 = call float @dx.op.dot3.f32(i32 55, float %1614, float %1615, float %1616, float %1812, float %1813, float %1814)  ; Dot3(ax,ay,az,bx,by,bz)
  %1824 = fsub fast float %1821, %1815
  %1825 = fadd fast float %1821, %1815
  %1826 = fsub fast float %1822, %1816
  %1827 = fadd fast float %1822, %1816
  %1828 = fmul fast float %1823, %1823
  %1829 = call float @dx.op.dot2.f32(i32 54, float %1824, float %1826, float %1824, float %1826)  ; Dot2(ax,ay,bx,by)
  %1830 = fadd fast float %1829, %1828
  %1831 = call float @dx.op.unary.f32(i32 25, float %1830)  ; Rsqrt(value)
  %1832 = fmul fast float %1831, %1824
  %1833 = fmul fast float %1831, %1826
  %1834 = fmul fast float %1831, %1823
  %1835 = call float @dx.op.dot2.f32(i32 54, float %1825, float %1826, float %1825, float %1826)  ; Dot2(ax,ay,bx,by)
  %1836 = fadd fast float %1835, %1828
  %1837 = call float @dx.op.unary.f32(i32 25, float %1836)  ; Rsqrt(value)
  %1838 = fmul fast float %1837, %1825
  %1839 = fmul fast float %1837, %1826
  %1840 = fmul fast float %1837, %1823
  %1841 = call float @dx.op.dot2.f32(i32 54, float %1825, float %1827, float %1825, float %1827)  ; Dot2(ax,ay,bx,by)
  %1842 = fadd fast float %1841, %1828
  %1843 = call float @dx.op.unary.f32(i32 25, float %1842)  ; Rsqrt(value)
  %1844 = fmul fast float %1843, %1825
  %1845 = fmul fast float %1843, %1827
  %1846 = fmul fast float %1843, %1823
  %1847 = call float @dx.op.dot2.f32(i32 54, float %1824, float %1827, float %1824, float %1827)  ; Dot2(ax,ay,bx,by)
  %1848 = fadd fast float %1847, %1828
  %1849 = call float @dx.op.unary.f32(i32 25, float %1848)  ; Rsqrt(value)
  %1850 = fmul fast float %1849, %1824
  %1851 = fmul fast float %1849, %1827
  %1852 = fmul fast float %1849, %1823
  %1853 = call float @dx.op.dot3.f32(i32 55, float %1832, float %1833, float %1834, float %1838, float %1839, float %1840)  ; Dot3(ax,ay,az,bx,by,bz)
  %1854 = call float @dx.op.dot3.f32(i32 55, float %1838, float %1839, float %1840, float %1844, float %1845, float %1846)  ; Dot3(ax,ay,az,bx,by,bz)
  %1855 = call float @dx.op.dot3.f32(i32 55, float %1844, float %1845, float %1846, float %1850, float %1851, float %1852)  ; Dot3(ax,ay,az,bx,by,bz)
  %1856 = call float @dx.op.dot3.f32(i32 55, float %1850, float %1851, float %1852, float %1832, float %1833, float %1834)  ; Dot3(ax,ay,az,bx,by,bz)
  %1857 = fmul fast float %1853, 0x3FC6666660000000
  %1858 = fsub fast float 0x3FF921FF20000000, %1857
  %1859 = fadd fast float %1853, 1.000000e+00
  %1860 = call float @dx.op.unary.f32(i32 25, float %1859)  ; Rsqrt(value)
  %1861 = fmul fast float %1854, 0x3FC6666660000000
  %1862 = fsub fast float 0x3FF921FF20000000, %1861
  %1863 = fadd fast float %1854, 1.000000e+00
  %1864 = call float @dx.op.unary.f32(i32 25, float %1863)  ; Rsqrt(value)
  %1865 = fmul fast float %1864, %1862
  %1866 = fmul fast float %1855, 0x3FC6666660000000
  %1867 = fsub fast float 0x3FF921FF20000000, %1866
  %1868 = fadd fast float %1855, 1.000000e+00
  %1869 = call float @dx.op.unary.f32(i32 25, float %1868)  ; Rsqrt(value)
  %1870 = fmul fast float %1856, 0x3FC6666660000000
  %1871 = fsub fast float 0x3FF921FF20000000, %1870
  %1872 = fadd fast float %1856, 1.000000e+00
  %1873 = call float @dx.op.unary.f32(i32 25, float %1872)  ; Rsqrt(value)
  %1874 = fmul fast float %1873, %1871
  %1875 = fmul fast float %1858, %1860
  %1876 = fsub fast float -0.000000e+00, %1875
  %1877 = fmul fast float %1832, %1876
  %1878 = fmul fast float %1833, %1876
  %1879 = fmul fast float %1834, %1876
  %1880 = fmul fast float %1865, %1844
  %1881 = fmul fast float %1865, %1845
  %1882 = fmul fast float %1865, %1846
  %1883 = fadd fast float %1880, %1877
  %1884 = fadd fast float %1881, %1878
  %1885 = fadd fast float %1882, %1879
  %1886 = fmul fast float %1885, %1839
  %1887 = fmul fast float %1884, %1840
  %1888 = fsub fast float %1886, %1887
  %1889 = fmul fast float %1883, %1840
  %1890 = fmul fast float %1885, %1838
  %1891 = fsub fast float %1889, %1890
  %1892 = fmul fast float %1884, %1838
  %1893 = fmul fast float %1883, %1839
  %1894 = fsub fast float %1892, %1893
  %1895 = fmul fast float %1874, %1832
  %1896 = fmul fast float %1874, %1833
  %1897 = fmul fast float %1874, %1834
  %1898 = fmul fast float %1867, %1869
  %1899 = fsub fast float -0.000000e+00, %1898
  %1900 = fmul fast float %1844, %1899
  %1901 = fmul fast float %1845, %1899
  %1902 = fmul fast float %1846, %1899
  %1903 = fadd fast float %1895, %1900
  %1904 = fadd fast float %1896, %1901
  %1905 = fadd fast float %1897, %1902
  %1906 = fmul fast float %1905, %1851
  %1907 = fmul fast float %1904, %1852
  %1908 = fsub fast float %1906, %1907
  %1909 = fmul fast float %1903, %1852
  %1910 = fmul fast float %1905, %1850
  %1911 = fsub fast float %1909, %1910
  %1912 = fmul fast float %1904, %1850
  %1913 = fmul fast float %1903, %1851
  %1914 = fsub fast float %1912, %1913
  %1915 = fadd fast float %1908, %1888
  %1916 = fadd fast float %1911, %1891
  %1917 = fadd fast float %1914, %1894
  %1918 = fmul fast float %1915, %1708
  %1919 = fmul fast float %1915, %1711
  %1920 = fmul fast float %1915, %1714
  %1921 = fmul fast float %1916, %1606
  %1922 = fmul fast float %1916, %1607
  %1923 = fmul fast float %1916, %1608
  %1924 = fadd fast float %1918, %1921
  %1925 = fadd fast float %1919, %1922
  %1926 = fadd fast float %1920, %1923
  %1927 = fmul fast float %1917, %1614
  %1928 = fmul fast float %1917, %1615
  %1929 = fmul fast float %1917, %1616
  %1930 = fadd fast float %1924, %1927
  %1931 = fadd fast float %1925, %1928
  %1932 = fadd fast float %1926, %1929
  %1933 = call float @dx.op.dot3.f32(i32 55, float %1930, float %1931, float %1932, float %1930, float %1931, float %1932)  ; Dot3(ax,ay,az,bx,by,bz)
  %1934 = call float @dx.op.unary.f32(i32 25, float %1933)  ; Rsqrt(value)
  %1935 = fmul fast float %1933, 5.000000e-01
  %1936 = fmul fast float %1935, %1934
  br label %1967

; <label>:1937                                    ; preds = %1703
  %1938 = fmul fast float %1651, 5.000000e-01
  %1939 = fmul fast float %1938, %1606
  %1940 = fmul fast float %1938, %1607
  %1941 = fmul fast float %1938, %1608
  %1942 = fsub fast float %1663, %1939
  %1943 = fsub fast float %1664, %1940
  %1944 = fsub fast float %1665, %1941
  %1945 = fadd fast float %1939, %1663
  %1946 = fadd fast float %1940, %1664
  %1947 = fadd fast float %1941, %1665
  %1948 = fcmp fast ogt float %1651, 0.000000e+00
  %1949 = call float @dx.op.dot3.f32(i32 55, float %1942, float %1943, float %1944, float %1942, float %1943, float %1944)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1948, label %1950, label %1961, !dx.controlflow.hints !56

; <label>:1950                                    ; preds = %1937
  %1951 = call float @dx.op.dot3.f32(i32 55, float %1945, float %1946, float %1947, float %1945, float %1946, float %1947)  ; Dot3(ax,ay,az,bx,by,bz)
  %1952 = call float @dx.op.unary.f32(i32 25, float %1949)  ; Rsqrt(value)
  %1953 = call float @dx.op.unary.f32(i32 25, float %1951)  ; Rsqrt(value)
  %1954 = fmul fast float %1953, %1952
  %1955 = call float @dx.op.dot3.f32(i32 55, float %1942, float %1943, float %1944, float %1945, float %1946, float %1947)  ; Dot3(ax,ay,az,bx,by,bz)
  %1956 = fmul fast float %1955, 5.000000e-01
  %1957 = fadd fast float %1956, %1590
  %1958 = fmul fast float %1957, %1954
  %1959 = fadd fast float %1958, 5.000000e-01
  %1960 = fdiv fast float %1954, %1959
  br label %1964

; <label>:1961                                    ; preds = %1937
  %1962 = fadd fast float %1949, %1590
  %1963 = fdiv fast float 1.000000e+00, %1962
  br label %1964

; <label>:1964                                    ; preds = %1961, %1950
  %1965 = phi float [ %1960, %1950 ], [ %1963, %1961 ]
  %1966 = select i1 %1653, float %1965, float 1.000000e+00
  br label %1967

; <label>:1967                                    ; preds = %1964, %1820, %1811
  %1968 = phi float [ %1966, %1964 ], [ 0.000000e+00, %1811 ], [ %1936, %1820 ]
  %1969 = fsub fast float -0.000000e+00, %535
  %1970 = fsub fast float -0.000000e+00, %536
  %1971 = fsub fast float -0.000000e+00, %537
  %1972 = call float @dx.op.dot3.f32(i32 55, float %1668, float %1669, float %1670, float %1969, float %1970, float %1971)  ; Dot3(ax,ay,az,bx,by,bz)
  %1973 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %41, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1974 = extractvalue %dx.types.CBufRet.f32 %1973, 1
  %1975 = fmul fast float %1974, %1974
  %1976 = fsub fast float 1.000000e+00, %1975
  %1977 = fmul fast float %1972, 2.000000e+00
  %1978 = fadd fast float %1977, %1974
  %1979 = fmul fast float %1978, %1974
  %1980 = fadd fast float %1979, 1.000000e+00
  %1981 = call float @dx.op.unary.f32(i32 24, float %1980)  ; Sqrt(value)
  %1982 = fmul fast float %1981, 0x402921FB60000000
  %1983 = fmul fast float %1982, %1980
  %1984 = fdiv fast float %1976, %1983
  %1985 = fmul fast float %1704, %1627
  %1986 = fmul fast float %1985, %1968
  %1987 = fmul fast float %1986, %1984
  %1988 = fmul fast float %1987, %1619
  %1989 = fmul fast float %1987, %1620
  %1990 = fmul fast float %1987, %1621
  %1991 = fadd fast float %1988, %1594
  %1992 = fadd fast float %1989, %1595
  %1993 = fadd fast float %1990, %1596
  br label %1994

; <label>:1994                                    ; preds = %1967, %1593
  %1995 = phi float [ %1991, %1967 ], [ %1594, %1593 ]
  %1996 = phi float [ %1992, %1967 ], [ %1595, %1593 ]
  %1997 = phi float [ %1993, %1967 ], [ %1596, %1593 ]
  %1998 = add nuw i32 %1597, 1
  %1999 = icmp eq i32 %1998, %1520
  br i1 %1999, label %2000, label %1593, !llvm.loop !57

; <label>:2000                                    ; preds = %1994
  br label %2001

; <label>:2001                                    ; preds = %2000, %1557
  %2002 = phi float [ %1493, %1557 ], [ %1995, %2000 ]
  %2003 = phi float [ %1494, %1557 ], [ %1996, %2000 ]
  %2004 = phi float [ %1495, %1557 ], [ %1997, %2000 ]
  %2005 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2006 = extractvalue %dx.types.CBufRet.f32 %2005, 2
  %2007 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2008 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2007, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2009 = extractvalue %dx.types.ResRet.f32 %2008, 0
  %2010 = extractvalue %dx.types.ResRet.f32 %2008, 1
  %2011 = extractvalue %dx.types.ResRet.f32 %2008, 2
  %2012 = fmul fast float %2009, %2006
  %2013 = fmul fast float %2010, %2006
  %2014 = fmul fast float %2011, %2006
  %2015 = fadd fast float %2012, %2002
  %2016 = fadd fast float %2013, %2003
  %2017 = fadd fast float %2014, %2004
  %2018 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2019 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2018, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2020 = extractvalue %dx.types.ResRet.f32 %2019, 0
  %2021 = extractvalue %dx.types.ResRet.f32 %2019, 1
  %2022 = extractvalue %dx.types.ResRet.f32 %2019, 2
  %2023 = extractvalue %dx.types.ResRet.f32 %2019, 3
  %2024 = call float @dx.op.dot3.f32(i32 55, float %2020, float %2021, float %2022, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2025 = fadd fast float %2023, %2024
  %2026 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %41, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %2027 = extractvalue %dx.types.CBufRet.i32 %2026, 0
  %2028 = icmp eq i32 %2027, 0
  br i1 %2028, label %2035, label %2029, !dx.controlflow.hints !59

; <label>:2029                                    ; preds = %2001
  %2030 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2031 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2030, i32 0, i32 %42, i32 %43, i32 %44, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2032 = extractvalue %dx.types.ResRet.f32 %2031, 0
  %2033 = extractvalue %dx.types.ResRet.f32 %2031, 1
  %2034 = extractvalue %dx.types.ResRet.f32 %2031, 2
  br label %2035

; <label>:2035                                    ; preds = %2029, %2001
  %2036 = phi float [ %2032, %2029 ], [ 0.000000e+00, %2001 ]
  %2037 = phi float [ %2033, %2029 ], [ 0.000000e+00, %2001 ]
  %2038 = phi float [ %2034, %2029 ], [ 0.000000e+00, %2001 ]
  %2039 = extractvalue %dx.types.CBufRet.f32 %2005, 1
  %2040 = fmul fast float %2020, %2015
  %2041 = fmul fast float %2021, %2016
  %2042 = fmul fast float %2022, %2017
  %2043 = fadd fast float %2036, %2040
  %2044 = fadd fast float %2037, %2041
  %2045 = fadd fast float %2038, %2042
  %2046 = fmul fast float %2039, %2043
  %2047 = fmul fast float %2039, %2044
  %2048 = fmul fast float %2039, %2045
  %2049 = fcmp fast ogt float %403, 0.000000e+00
  br i1 %2049, label %2050, label %2076, !dx.controlflow.hints !60

; <label>:2050                                    ; preds = %2035
  %2051 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %2052 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %2053 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %2051, %dx.types.Handle %2052, float %384, float %385, float %380, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %2054 = extractvalue %dx.types.ResRet.f32 %2053, 0
  %2055 = extractvalue %dx.types.ResRet.f32 %2053, 1
  %2056 = extractvalue %dx.types.ResRet.f32 %2053, 2
  %2057 = extractvalue %dx.types.ResRet.f32 %2053, 3
  %2058 = extractvalue %dx.types.CBufRet.f32 %1195, 1
  %2059 = fmul fast float %2039, %2058
  %2060 = fmul fast float %2059, %2054
  %2061 = fmul fast float %2059, %2055
  %2062 = fmul fast float %2059, %2056
  %2063 = fmul fast float %2059, %2057
  %2064 = fsub fast float %2060, %2046
  %2065 = fsub fast float %2061, %2047
  %2066 = fsub fast float %2062, %2048
  %2067 = fsub fast float %2063, %2025
  %2068 = fmul fast float %2064, %403
  %2069 = fmul fast float %2065, %403
  %2070 = fmul fast float %2066, %403
  %2071 = fmul fast float %2067, %403
  %2072 = fadd fast float %2068, %2046
  %2073 = fadd fast float %2069, %2047
  %2074 = fadd fast float %2070, %2048
  %2075 = fadd fast float %2071, %2025
  br label %2076

; <label>:2076                                    ; preds = %2050, %2035
  %2077 = phi float [ %2072, %2050 ], [ %2046, %2035 ]
  %2078 = phi float [ %2073, %2050 ], [ %2047, %2035 ]
  %2079 = phi float [ %2074, %2050 ], [ %2048, %2035 ]
  %2080 = phi float [ %2075, %2050 ], [ %2025, %2035 ]
  %2081 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %37, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2082 = extractvalue %dx.types.CBufRet.i32 %2081, 0
  %2083 = extractvalue %dx.types.CBufRet.i32 %2081, 1
  %2084 = extractvalue %dx.types.CBufRet.i32 %2081, 2
  %2085 = icmp slt i32 %42, %2082
  %2086 = icmp slt i32 %43, %2083
  %2087 = icmp slt i32 %44, %2084
  %2088 = and i1 %2085, %2086
  %2089 = and i1 %2087, %2088
  br i1 %2089, label %2090, label %2104

; <label>:2090                                    ; preds = %2076
  %2091 = bitcast float %2077 to i32
  %2092 = bitcast float %2078 to i32
  %2093 = bitcast float %2079 to i32
  %2094 = bitcast float %2080 to i32
  %2095 = icmp ult i32 %2091, 2139095040
  %2096 = icmp ult i32 %2092, 2139095040
  %2097 = icmp ult i32 %2093, 2139095040
  %2098 = icmp ult i32 %2094, 2139095040
  %2099 = select i1 %2095, float %2077, float 0.000000e+00
  %2100 = select i1 %2096, float %2078, float 0.000000e+00
  %2101 = select i1 %2097, float %2079, float 0.000000e+00
  %2102 = select i1 %2098, float %2080, float 0.000000e+00
  %2103 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2103, i32 %42, i32 %43, i32 %44, float %2099, float %2100, float %2101, float %2102, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2104

; <label>:2104                                    ; preds = %2090, %2076, %209
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!48}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !32, !34, !40}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!16 = !{i32 8, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !17}
!17 = !{i32 1, i32 4}
!18 = !{i32 9, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 7, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !9}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !9}
!21 = !{i32 12, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 10, i32 0, !9}
!22 = !{i32 13, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 10, i32 0, !7}
!23 = !{i32 14, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 14, i32 1, i32 10, i32 0, !7}
!24 = !{i32 15, %"class.TextureCube<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 5, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<float>"* undef, !"", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<float>"* undef, !"", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 4, i32 0, !9}
!28 = !{i32 19, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 19, i32 1, i32 4, i32 0, !9}
!29 = !{i32 20, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 20, i32 1, i32 4, i32 0, !9}
!30 = !{i32 21, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 21, i32 1, i32 4, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{!33}
!33 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!34 = !{!35, !36, !37, !38, !39}
!35 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!36 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!37 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!38 = !{i32 3, %UniformBufferConstants_FogStruct* undef, !"", i32 0, i32 3, i32 1, i32 180, null}
!39 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!40 = !{!41, !42, !43, !44, !45, !46, !47}
!41 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!42 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!43 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!44 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!45 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!46 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!47 = !{i32 6, %struct.SamplerState* undef, !"", i32 0, i32 6, i32 1, i32 0, null}
!48 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !49}
!49 = !{i32 0, i64 16, i32 4, !50, i32 5, !51}
!50 = !{i32 4, i32 4, i32 4}
!51 = !{i32 0}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 2}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
!54 = distinct !{!54, !"dx.controlflow.hints", i32 1}
!55 = distinct !{!55, !"dx.controlflow.hints", i32 1}
!56 = distinct !{!56, !"dx.controlflow.hints", i32 1}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = distinct !{!59, !"dx.controlflow.hints", i32 1}
!60 = distinct !{!60, !"dx.controlflow.hints", i32 1}
