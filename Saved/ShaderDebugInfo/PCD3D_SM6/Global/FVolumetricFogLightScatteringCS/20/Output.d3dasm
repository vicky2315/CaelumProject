;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: b8e6722fad7288a0e8ad8625662923e4
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(4,4,4)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:   64
;       row_major float4x4 UnjitteredPrevTranslatedWorldToClip;; Offset:  128
;       float4 FrameJitterOffsets[16];                ; Offset:  192
;       float HistoryWeight;                          ; Offset:  448
;       uint HistoryMissSuperSampleCount;             ; Offset:  452
;       float AOObjectMaxDistance;                    ; Offset:  592
;       float AOStepScale;                            ; Offset:  596
;       float AOStepExponentScale;                    ; Offset:  600
;       float AOMaxViewDistance;                      ; Offset:  604
;       float AOGlobalMaxOcclusionDistance;           ; Offset:  608
;       float4 GlobalVolumeTranslatedCenterAndExtent[6];; Offset:  656
;       float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset:  752
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset:  848
;       float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset:  944
;       float GlobalDistanceFieldMipFactor;           ; Offset: 1040
;       float GlobalDistanceFieldMipTransition;       ; Offset: 1044
;       uint GlobalDistanceFieldClipmapSizeInPages;   ; Offset: 1048
;       float3 GlobalDistanceFieldInvPageAtlasSize;   ; Offset: 1056
;       float3 GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 1072
;       float GlobalVolumeDimension;                  ; Offset: 1084
;       float GlobalVolumeTexelSize;                  ; Offset: 1088
;       float MaxGlobalDFAOConeDistance;              ; Offset: 1092
;       uint NumGlobalSDFClipmaps;                    ; Offset: 1096
;       float CoveredExpandSurfaceScale;              ; Offset: 1100
;       float NotCoveredExpandSurfaceScale;           ; Offset: 1104
;       float NotCoveredMinStepScale;                 ; Offset: 1108
;       float DitheredTransparencyStepThreshold;      ; Offset: 1112
;       float DitheredTransparencyTraceThreshold;     ; Offset: 1116
;       float4 SkySH[3];                              ; Offset: 1136
;       row_major float4x4 DirectionalLightFunctionTranslatedWorldToShadow;; Offset: 1184
;       float2 PrevConservativeDepthTextureSize;      ; Offset: 1312
;       float2 UseHeightFogColors;                    ; Offset: 1320
;       float2 LightScatteringHistoryPreExposureAndInv;; Offset: 1328
;       float StaticLightingScatteringIntensity;      ; Offset: 1336
;       float SkyLightVolumetricScatteringIntensity;  ; Offset: 1340
;       float SkyLightUseStaticShadowing;             ; Offset: 1344
;       float PhaseG;                                 ; Offset: 1348
;       float InverseSquaredLightDistanceBiasScale;   ; Offset: 1352
;       float LightScatteringSampleJitterMultiplier;  ; Offset: 1356
;       float UseDirectionalLightShadowing;           ; Offset: 1368
;       uint UseConservativeDepthTexture;             ; Offset: 1372
;       uint UseEmissive;                             ; Offset: 1376
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:  1380
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_LumenGIVolumeStruct
; {
;
;   struct UniformBufferConstants_LumenGIVolumeStruct
;   {
;
;       float LumenGIVolumeStruct_ReprojectionRadiusScale;; Offset:    0
;       float LumenGIVolumeStruct_ClipmapWorldExtent; ; Offset:    4
;       float LumenGIVolumeStruct_ClipmapDistributionBase;; Offset:    8
;       float LumenGIVolumeStruct_InvClipmapFadeSize; ; Offset:   12
;       int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;; Offset:   16
;       uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;; Offset:   24
;       uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;; Offset:   28
;       uint LumenGIVolumeStruct_RadianceProbeResolution;; Offset:   32
;       uint LumenGIVolumeStruct_FinalProbeResolution;; Offset:   36
;       uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;; Offset:   40
;       uint LumenGIVolumeStruct_CalculateIrradiance; ; Offset:   44
;       uint LumenGIVolumeStruct_IrradianceProbeResolution;; Offset:   48
;       uint LumenGIVolumeStruct_OcclusionProbeResolution;; Offset:   52
;       uint LumenGIVolumeStruct_NumProbesToTraceBudget;; Offset:   56
;       uint LumenGIVolumeStruct_RadianceCacheStats;  ; Offset:   60
;       uint BindlessResource_LumenGIVolumeStruct_RadianceProbeIndirectionTexture;; Offset:   64
;       uint PrePadding_LumenGIVolumeStruct_68;       ; Offset:   68
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;; Offset:   72
;       uint PrePadding_LumenGIVolumeStruct_76;       ; Offset:   76
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;; Offset:   80
;       uint PrePadding_LumenGIVolumeStruct_84;       ; Offset:   84
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;; Offset:   88
;       uint PrePadding_LumenGIVolumeStruct_92;       ; Offset:   92
;       uint BindlessResource_LumenGIVolumeStruct_RadianceCacheDepthAtlas;; Offset:   96
;       uint PrePadding_LumenGIVolumeStruct_100;      ; Offset:  100
;       uint BindlessResource_LumenGIVolumeStruct_ProbeWorldOffset;; Offset:  104
;       uint PrePadding_LumenGIVolumeStruct_108;      ; Offset:  108
;       float4 LumenGIVolumeStruct_RadianceProbeSettings[6];; Offset:  112
;       float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  208
;       float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  304
;       float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;; Offset:  400
;       float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;; Offset:  408
;       float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;; Offset:  416
;       uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;; Offset:  424
;       uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;; Offset:  428
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;; Offset:  432
;       uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;; Offset:  436
;       float PrePadding_LumenGIVolumeStruct_440;     ; Offset:  440
;       float PrePadding_LumenGIVolumeStruct_444;     ; Offset:  444
;       uint BindlessResource_LumenGIVolumeStruct_Radiance;; Offset:  448
;       uint PrePadding_LumenGIVolumeStruct_452;      ; Offset:  452
;       uint BindlessResource_LumenGIVolumeStruct_Normal;; Offset:  456
;       uint PrePadding_LumenGIVolumeStruct_460;      ; Offset:  460
;       uint BindlessResource_LumenGIVolumeStruct_SceneDepth;; Offset:  464
;       uint PrePadding_LumenGIVolumeStruct_468;      ; Offset:  468
;       uint LumenGIVolumeStruct_Enabled;             ; Offset:  472
;       float LumenGIVolumeStruct_RelativeDepthThreshold;; Offset:  476
;       float LumenGIVolumeStruct_SpecularScale;      ; Offset:  480
;       float LumenGIVolumeStruct_Contrast;           ; Offset:  484
;       float PrePadding_LumenGIVolumeStruct_488;     ; Offset:  488
;       float PrePadding_LumenGIVolumeStruct_492;     ; Offset:  492
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume0;; Offset:  496
;       uint PrePadding_LumenGIVolumeStruct_500;      ; Offset:  500
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolume1;; Offset:  504
;       uint PrePadding_LumenGIVolumeStruct_508;      ; Offset:  508
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;; Offset:  512
;       uint PrePadding_LumenGIVolumeStruct_516;      ; Offset:  516
;       uint BindlessResource_LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;; Offset:  520
;       uint PrePadding_LumenGIVolumeStruct_524;      ; Offset:  524
;       uint BindlessSampler_LumenGIVolumeStruct_TranslucencyGIVolumeSampler;; Offset:  528
;       uint PrePadding_LumenGIVolumeStruct_532;      ; Offset:  532
;       uint PrePadding_LumenGIVolumeStruct_536;      ; Offset:  536
;       uint PrePadding_LumenGIVolumeStruct_540;      ; Offset:  540
;       float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;; Offset:  544
;       uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;; Offset:  556
;       int3 LumenGIVolumeStruct_TranslucencyGIGridSize;; Offset:  560
;   
;   } UniformBufferConstants_LumenGIVolumeStruct;     ; Offset:    0 Size:   572
;
; }
;
; cbuffer UniformBufferConstants_VolumetricFog
; {
;
;   struct UniformBufferConstants_VolumetricFog
;   {
;
;       int3 VolumetricFog_GridSizeInt;               ; Offset:    0
;       int PrePadding_VolumetricFog_12;              ; Offset:   12
;       float3 VolumetricFog_GridSize;                ; Offset:   16
;       float PrePadding_VolumetricFog_28;            ; Offset:   28
;       float3 VolumetricFog_GridZParams;             ; Offset:   32
;       float PrePadding_VolumetricFog_44;            ; Offset:   44
;       float2 VolumetricFog_SVPosToVolumeUV;         ; Offset:   48
;       float VolumetricFog_MaxDistance;              ; Offset:   56
;       float PrePadding_VolumetricFog_60;            ; Offset:   60
;       float3 VolumetricFog_HeightFogInscatteringColor;; Offset:   64
;       float PrePadding_VolumetricFog_76;            ; Offset:   76
;       float3 VolumetricFog_HeightFogDirectionalLightInscatteringColor;; Offset:   80
;       float PrePadding_VolumetricFog_92;            ; Offset:   92
;       int2 VolumetricFog_FogGridToPixelXY;          ; Offset:   96
;   
;   } UniformBufferConstants_VolumetricFog;           ; Offset:    0 Size:   104
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_LumenGIVolumeStruct   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VolumetricFog   cbuffer      NA          NA     CB4            cb4     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S0             s0     1
; ForwardLightData_ShadowmapSampler   sampler      NA          NA      S1             s1     1
; ForwardLightData_StaticShadowmapSampler   sampler      NA          NA      S2             s2     1
; LumenGIVolumeStruct_TranslucencyGIVolumeSampler   sampler      NA          NA      S3             s3     1
; LightScatteringHistorySampler     sampler      NA          NA      S4             s4     1
; LightFunctionSampler              sampler      NA          NA      S5             s5     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T4             t4     1
; ForwardLightData_DirectionalLightShadowmapAtlas   texture     f32          2d      T5             t5     1
; ForwardLightData_DirectionalLightStaticShadowmap   texture     f32          2d      T6             t6     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T7             t7     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T8             t8     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T9             t9     1
; LumenGIVolumeStruct_TranslucencyGIVolume0   texture     f32          3d     T10            t10     1
; LumenGIVolumeStruct_TranslucencyGIVolume1   texture     f32          3d     T11            t11     1
; ConservativeDepthTexture          texture     f32          2d     T12            t12     1
; PrevConservativeDepthTexture      texture     f32          2d     T13            t13     1
; VBufferA                          texture     f32          3d     T14            t14     1
; VBufferB                          texture     f32          3d     T15            t15     1
; LightScatteringHistory            texture     f32          3d     T16            t16     1
; LocalShadowedLightScattering      texture     f32          3d     T17            t17     1
; LightFunctionTexture              texture     f32          2d     T18            t18     1
; RWLightScattering                     UAV     f32          3d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Texture2D<float>" = type { float, %"class.Texture2D<float>::mips_type" }
%"class.Texture2D<float>::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 4> >" = type { <4 x float> }
%hostlayout._RootShaderParameters = type { [4 x <4 x float>], [4 x <4 x float>], [16 x <4 x float>], float, i32, float, float, float, float, float, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, <3 x float>, <3 x float>, float, float, float, i32, float, float, float, float, float, [3 x <4 x float>], [4 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, float, float, float, float, float, float, float, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_LumenGIVolumeStruct = type { float, float, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, i32, <3 x i32> }
%UniformBufferConstants_VolumetricFog = type { <3 x i32>, i32, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <2 x i32> }
%struct.SamplerState = type { i32 }

define void @LightScatteringCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 18, i32 18, i32 0, i8 0 }, i32 18, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 17, i32 17, i32 0, i8 0 }, i32 17, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 16, i32 16, i32 0, i8 0 }, i32 16, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %28 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %29 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %30 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %31 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %32 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %27, %dx.types.ResourceProperties { i32 13, i32 104 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %28, %dx.types.ResourceProperties { i32 13, i32 572 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %34 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %29, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %35 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %30, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %36 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %31, %dx.types.ResourceProperties { i32 13, i32 1380 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %37 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %38 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %39 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %40 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %41 = extractvalue %dx.types.CBufRet.i32 %40, 0
  %42 = extractvalue %dx.types.CBufRet.i32 %40, 2
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 0
  %45 = extractvalue %dx.types.CBufRet.i32 %43, 1
  %46 = extractvalue %dx.types.CBufRet.i32 %43, 2
  %47 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.i32 %47, 0
  %49 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %50 = extractvalue %dx.types.CBufRet.f32 %49, 0
  %51 = extractvalue %dx.types.CBufRet.f32 %49, 1
  %52 = extractvalue %dx.types.CBufRet.f32 %49, 2
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.f32 %57, 0
  %59 = extractvalue %dx.types.CBufRet.f32 %57, 1
  %60 = extractvalue %dx.types.CBufRet.f32 %57, 2
  %61 = extractvalue %dx.types.CBufRet.f32 %57, 3
  %62 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.i32 %62, 0
  %64 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.f32 %64, 0
  %66 = extractvalue %dx.types.CBufRet.f32 %64, 1
  %67 = extractvalue %dx.types.CBufRet.f32 %64, 2
  %68 = extractvalue %dx.types.CBufRet.f32 %64, 3
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %34, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.i32 %71, 1
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %78 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %79 = extractvalue %dx.types.CBufRet.f32 %78, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %78, 1
  %81 = extractvalue %dx.types.CBufRet.f32 %78, 2
  %82 = extractvalue %dx.types.CBufRet.f32 %78, 3
  %83 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %84 = extractvalue %dx.types.CBufRet.f32 %83, 0
  %85 = extractvalue %dx.types.CBufRet.f32 %83, 1
  %86 = extractvalue %dx.types.CBufRet.f32 %83, 2
  %87 = extractvalue %dx.types.CBufRet.f32 %83, 3
  %88 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.f32 %88, 0
  %90 = extractvalue %dx.types.CBufRet.f32 %88, 1
  %91 = extractvalue %dx.types.CBufRet.f32 %88, 2
  %92 = extractvalue %dx.types.CBufRet.f32 %88, 3
  %93 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.i32 %93, 3
  %95 = icmp eq i32 %94, 0
  %96 = uitofp i32 %37 to float
  %97 = uitofp i32 %38 to float
  %98 = fadd fast float %96, 5.000000e-01
  %99 = fadd fast float %97, 5.000000e-01
  %100 = uitofp i32 %39 to float
  br i1 %95, label %252, label %101

; <label>:101                                     ; preds = %0
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = fdiv fast float %98, %103
  %106 = fdiv fast float %99, %104
  %107 = fmul fast float %105, 2.000000e+00
  %108 = fmul fast float %106, 2.000000e+00
  %109 = fadd fast float %107, -1.000000e+00
  %110 = fadd fast float %108, -1.000000e+00
  %111 = fsub fast float -0.000000e+00, %110
  %112 = fadd fast float %100, -1.000000e+00
  %113 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.f32 %113, 2
  %115 = fdiv fast float %112, %114
  %116 = call float @dx.op.unary.f32(i32 21, float %115)  ; Exp(value)
  %117 = extractvalue %dx.types.CBufRet.f32 %113, 1
  %118 = fsub fast float %116, %117
  %119 = extractvalue %dx.types.CBufRet.f32 %113, 0
  %120 = fdiv fast float %118, %119
  %121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %122 = extractvalue %dx.types.CBufRet.f32 %121, 3
  %123 = fcmp fast ult float %122, 1.000000e+00
  br i1 %123, label %130, label %124, !dx.controlflow.hints !46

; <label>:124                                     ; preds = %101
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %127 = fmul fast float %126, %120
  %128 = extractvalue %dx.types.CBufRet.f32 %121, 2
  %129 = fadd fast float %127, %128
  br label %137

; <label>:130                                     ; preds = %101
  %131 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %132 = extractvalue %dx.types.CBufRet.f32 %131, 3
  %133 = fadd fast float %132, %120
  %134 = extractvalue %dx.types.CBufRet.f32 %131, 2
  %135 = fmul fast float %133, %134
  %136 = fdiv fast float 1.000000e+00, %135
  br label %137

; <label>:137                                     ; preds = %130, %124
  %138 = phi float [ %129, %124 ], [ %136, %130 ]
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %143 = extractvalue %dx.types.CBufRet.f32 %139, 3
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %144, 3
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %149, 3
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %159 = fmul fast float %140, %109
  %160 = call float @dx.op.tertiary.f32(i32 46, float %111, float %145, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %138, float %150, float %160)  ; FMad(a,b,c)
  %162 = fadd fast float %161, %155
  %163 = fmul fast float %141, %109
  %164 = call float @dx.op.tertiary.f32(i32 46, float %111, float %146, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %138, float %151, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %156
  %167 = fmul fast float %142, %109
  %168 = call float @dx.op.tertiary.f32(i32 46, float %111, float %147, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %138, float %152, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %157
  %171 = fmul fast float %143, %109
  %172 = call float @dx.op.tertiary.f32(i32 46, float %111, float %148, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %138, float %153, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %158
  %175 = fdiv fast float %162, %174
  %176 = fdiv fast float %166, %174
  %177 = fdiv fast float %170, %174
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 3
  %181 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %182 = extractvalue %dx.types.CBufRet.f32 %181, 2
  %183 = extractvalue %dx.types.CBufRet.f32 %181, 3
  %184 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.f32 %184, 2
  %186 = extractvalue %dx.types.CBufRet.f32 %184, 3
  %187 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %188 = extractvalue %dx.types.CBufRet.f32 %187, 2
  %189 = extractvalue %dx.types.CBufRet.f32 %187, 3
  %190 = fmul fast float %179, %175
  %191 = call float @dx.op.tertiary.f32(i32 46, float %176, float %182, float %190)  ; FMad(a,b,c)
  %192 = call float @dx.op.tertiary.f32(i32 46, float %177, float %185, float %191)  ; FMad(a,b,c)
  %193 = fadd fast float %192, %188
  %194 = fmul fast float %180, %175
  %195 = call float @dx.op.tertiary.f32(i32 46, float %176, float %183, float %194)  ; FMad(a,b,c)
  %196 = call float @dx.op.tertiary.f32(i32 46, float %177, float %186, float %195)  ; FMad(a,b,c)
  %197 = fadd fast float %196, %189
  %198 = fdiv fast float %193, %197
  %199 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %200 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %199, i32 0, i32 %37, i32 %38, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 0
  %202 = fcmp fast ogt float %201, %198
  br i1 %202, label %203, label %205

; <label>:203                                     ; preds = %137
  %204 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %204, i32 %37, i32 %38, i32 %39, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1644

; <label>:205                                     ; preds = %137
  %206 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %207 = extractvalue %dx.types.CBufRet.f32 %206, 0
  %208 = extractvalue %dx.types.CBufRet.f32 %206, 1
  %209 = extractvalue %dx.types.CBufRet.f32 %206, 3
  %210 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %211 = extractvalue %dx.types.CBufRet.f32 %210, 0
  %212 = extractvalue %dx.types.CBufRet.f32 %210, 1
  %213 = extractvalue %dx.types.CBufRet.f32 %210, 3
  %214 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %215 = extractvalue %dx.types.CBufRet.f32 %214, 0
  %216 = extractvalue %dx.types.CBufRet.f32 %214, 1
  %217 = extractvalue %dx.types.CBufRet.f32 %214, 3
  %218 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %219 = extractvalue %dx.types.CBufRet.f32 %218, 0
  %220 = extractvalue %dx.types.CBufRet.f32 %218, 1
  %221 = extractvalue %dx.types.CBufRet.f32 %218, 3
  %222 = fmul fast float %207, %175
  %223 = call float @dx.op.tertiary.f32(i32 46, float %176, float %211, float %222)  ; FMad(a,b,c)
  %224 = call float @dx.op.tertiary.f32(i32 46, float %177, float %215, float %223)  ; FMad(a,b,c)
  %225 = fadd fast float %224, %219
  %226 = fmul fast float %208, %175
  %227 = call float @dx.op.tertiary.f32(i32 46, float %176, float %212, float %226)  ; FMad(a,b,c)
  %228 = call float @dx.op.tertiary.f32(i32 46, float %177, float %216, float %227)  ; FMad(a,b,c)
  %229 = fadd fast float %228, %220
  %230 = fmul fast float %209, %175
  %231 = call float @dx.op.tertiary.f32(i32 46, float %176, float %213, float %230)  ; FMad(a,b,c)
  %232 = call float @dx.op.tertiary.f32(i32 46, float %177, float %217, float %231)  ; FMad(a,b,c)
  %233 = fadd fast float %232, %221
  %234 = fdiv fast float %225, %233
  %235 = fdiv fast float %229, %233
  %236 = fmul fast float %234, 5.000000e-01
  %237 = fmul fast float %235, 5.000000e-01
  %238 = fadd fast float %236, 5.000000e-01
  %239 = fsub fast float 5.000000e-01, %237
  %240 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %241 = extractvalue %dx.types.CBufRet.f32 %240, 0
  %242 = extractvalue %dx.types.CBufRet.f32 %240, 1
  %243 = fmul fast float %241, %238
  %244 = fmul fast float %242, %239
  %245 = fptoui float %243 to i32
  %246 = fptoui float %244 to i32
  %247 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 265 })  ; AnnotateHandle(res,props)  resource: Texture2D<F32>
  %248 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %247, i32 0, i32 %245, i32 %246, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %249 = extractvalue %dx.types.ResRet.f32 %248, 0
  %250 = fcmp fast ogt float %249, %198
  br i1 %250, label %251, label %252

; <label>:251                                     ; preds = %205
  br label %252

; <label>:252                                     ; preds = %251, %205, %0
  %253 = phi i32 [ 1, %251 ], [ 0, %205 ], [ 0, %0 ]
  %254 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %255 = extractvalue %dx.types.CBufRet.f32 %254, 0
  %256 = extractvalue %dx.types.CBufRet.f32 %254, 1
  %257 = extractvalue %dx.types.CBufRet.f32 %254, 3
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 3
  %262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.f32 %262, 0
  %264 = extractvalue %dx.types.CBufRet.f32 %262, 1
  %265 = extractvalue %dx.types.CBufRet.f32 %262, 3
  %266 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %267 = extractvalue %dx.types.CBufRet.f32 %266, 0
  %268 = extractvalue %dx.types.CBufRet.f32 %266, 1
  %269 = extractvalue %dx.types.CBufRet.f32 %266, 3
  %270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %271 = extractvalue %dx.types.CBufRet.f32 %270, 0
  %272 = extractvalue %dx.types.CBufRet.f32 %270, 1
  %273 = fdiv fast float %98, %271
  %274 = fdiv fast float %99, %272
  %275 = fmul fast float %273, 2.000000e+00
  %276 = fmul fast float %274, 2.000000e+00
  %277 = fadd fast float %275, -1.000000e+00
  %278 = fadd fast float %276, -1.000000e+00
  %279 = fsub fast float -0.000000e+00, %278
  %280 = fadd fast float %100, 5.000000e-01
  %281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %282 = extractvalue %dx.types.CBufRet.f32 %281, 2
  %283 = fdiv fast float %280, %282
  %284 = call float @dx.op.unary.f32(i32 21, float %283)  ; Exp(value)
  %285 = extractvalue %dx.types.CBufRet.f32 %281, 1
  %286 = fsub fast float %284, %285
  %287 = extractvalue %dx.types.CBufRet.f32 %281, 0
  %288 = fdiv fast float %286, %287
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 3
  %291 = fcmp fast ult float %290, 1.000000e+00
  br i1 %291, label %298, label %292, !dx.controlflow.hints !46

; <label>:292                                     ; preds = %252
  %293 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %294 = extractvalue %dx.types.CBufRet.f32 %293, 2
  %295 = fmul fast float %294, %288
  %296 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %297 = fadd fast float %295, %296
  br label %305

; <label>:298                                     ; preds = %252
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 3
  %301 = fadd fast float %300, %288
  %302 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %303 = fmul fast float %301, %302
  %304 = fdiv fast float 1.000000e+00, %303
  br label %305

; <label>:305                                     ; preds = %298, %292
  %306 = phi float [ %297, %292 ], [ %304, %298 ]
  %307 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %308 = extractvalue %dx.types.CBufRet.f32 %307, 0
  %309 = extractvalue %dx.types.CBufRet.f32 %307, 1
  %310 = extractvalue %dx.types.CBufRet.f32 %307, 2
  %311 = extractvalue %dx.types.CBufRet.f32 %307, 3
  %312 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %313 = extractvalue %dx.types.CBufRet.f32 %312, 0
  %314 = extractvalue %dx.types.CBufRet.f32 %312, 1
  %315 = extractvalue %dx.types.CBufRet.f32 %312, 2
  %316 = extractvalue %dx.types.CBufRet.f32 %312, 3
  %317 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %318 = extractvalue %dx.types.CBufRet.f32 %317, 0
  %319 = extractvalue %dx.types.CBufRet.f32 %317, 1
  %320 = extractvalue %dx.types.CBufRet.f32 %317, 2
  %321 = extractvalue %dx.types.CBufRet.f32 %317, 3
  %322 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %323 = extractvalue %dx.types.CBufRet.f32 %322, 0
  %324 = extractvalue %dx.types.CBufRet.f32 %322, 1
  %325 = extractvalue %dx.types.CBufRet.f32 %322, 2
  %326 = extractvalue %dx.types.CBufRet.f32 %322, 3
  %327 = fmul fast float %308, %277
  %328 = call float @dx.op.tertiary.f32(i32 46, float %279, float %313, float %327)  ; FMad(a,b,c)
  %329 = call float @dx.op.tertiary.f32(i32 46, float %306, float %318, float %328)  ; FMad(a,b,c)
  %330 = fadd fast float %329, %323
  %331 = fmul fast float %309, %277
  %332 = call float @dx.op.tertiary.f32(i32 46, float %279, float %314, float %331)  ; FMad(a,b,c)
  %333 = call float @dx.op.tertiary.f32(i32 46, float %306, float %319, float %332)  ; FMad(a,b,c)
  %334 = fadd fast float %333, %324
  %335 = fmul fast float %310, %277
  %336 = call float @dx.op.tertiary.f32(i32 46, float %279, float %315, float %335)  ; FMad(a,b,c)
  %337 = call float @dx.op.tertiary.f32(i32 46, float %306, float %320, float %336)  ; FMad(a,b,c)
  %338 = fadd fast float %337, %325
  %339 = fmul fast float %311, %277
  %340 = call float @dx.op.tertiary.f32(i32 46, float %279, float %316, float %339)  ; FMad(a,b,c)
  %341 = call float @dx.op.tertiary.f32(i32 46, float %306, float %321, float %340)  ; FMad(a,b,c)
  %342 = fadd fast float %341, %326
  %343 = fdiv fast float %330, %342
  %344 = fdiv fast float %334, %342
  %345 = fdiv fast float %338, %342
  %346 = fmul fast float %343, %255
  %347 = call float @dx.op.tertiary.f32(i32 46, float %344, float %259, float %346)  ; FMad(a,b,c)
  %348 = call float @dx.op.tertiary.f32(i32 46, float %345, float %263, float %347)  ; FMad(a,b,c)
  %349 = fadd fast float %348, %267
  %350 = fmul fast float %343, %256
  %351 = call float @dx.op.tertiary.f32(i32 46, float %344, float %260, float %350)  ; FMad(a,b,c)
  %352 = call float @dx.op.tertiary.f32(i32 46, float %345, float %264, float %351)  ; FMad(a,b,c)
  %353 = fadd fast float %352, %268
  %354 = fmul fast float %343, %257
  %355 = call float @dx.op.tertiary.f32(i32 46, float %344, float %261, float %354)  ; FMad(a,b,c)
  %356 = call float @dx.op.tertiary.f32(i32 46, float %345, float %265, float %355)  ; FMad(a,b,c)
  %357 = fadd fast float %356, %269
  %358 = fdiv fast float %349, %357
  %359 = fdiv fast float %353, %357
  %360 = fmul fast float %358, 5.000000e-01
  %361 = fmul fast float %359, 5.000000e-01
  %362 = fadd fast float %360, 5.000000e-01
  %363 = fsub fast float 5.000000e-01, %361
  %364 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 230)  ; CBufferLoadLegacy(handle,regIndex)
  %365 = extractvalue %dx.types.CBufRet.f32 %364, 0
  %366 = fmul fast float %365, %357
  %367 = extractvalue %dx.types.CBufRet.f32 %364, 1
  %368 = fadd fast float %366, %367
  %369 = call float @dx.op.unary.f32(i32 23, float %368)  ; Log(value)
  %370 = extractvalue %dx.types.CBufRet.f32 %364, 2
  %371 = fmul fast float %370, %369
  %372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %373 = extractvalue %dx.types.CBufRet.f32 %372, 2
  %374 = fmul fast float %371, %373
  %375 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 231)  ; CBufferLoadLegacy(handle,regIndex)
  %376 = extractvalue %dx.types.CBufRet.f32 %375, 2
  %377 = extractvalue %dx.types.CBufRet.f32 %375, 3
  %378 = fmul fast float %376, %362
  %379 = fmul fast float %377, %363
  %380 = fcmp fast olt float %378, 0.000000e+00
  %381 = fcmp fast olt float %379, 0.000000e+00
  %382 = fcmp fast olt float %374, 0.000000e+00
  %383 = or i1 %380, %381
  %384 = or i1 %382, %383
  br i1 %384, label %395, label %385

; <label>:385                                     ; preds = %305
  %386 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %387 = extractvalue %dx.types.CBufRet.f32 %386, 0
  %388 = fcmp fast ogt float %378, 1.000000e+00
  %389 = fcmp fast ogt float %379, 1.000000e+00
  %390 = fcmp fast ogt float %374, 1.000000e+00
  %391 = or i1 %388, %389
  %392 = or i1 %390, %391
  %393 = icmp ne i32 %253, 0
  %394 = or i1 %393, %392
  br i1 %394, label %395, label %396

; <label>:395                                     ; preds = %385, %305
  br label %396

; <label>:396                                     ; preds = %395, %385
  %397 = phi float [ 0.000000e+00, %395 ], [ %387, %385 ]
  %398 = fcmp fast olt float %397, 0x3F50624DE0000000
  br i1 %398, label %399, label %410

; <label>:399                                     ; preds = %396
  %400 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %401 = extractvalue %dx.types.CBufRet.i32 %400, 0
  %402 = extractvalue %dx.types.CBufRet.i32 %400, 1
  %403 = extractvalue %dx.types.CBufRet.i32 %400, 2
  %404 = icmp slt i32 %37, %401
  %405 = icmp slt i32 %38, %402
  %406 = icmp slt i32 %39, %403
  %407 = and i1 %404, %405
  %408 = and i1 %406, %407
  %409 = select i1 %408, i32 16, i32 1
  br label %410

; <label>:410                                     ; preds = %399, %396
  %411 = phi i32 [ 1, %396 ], [ %409, %399 ]
  br label %412

; <label>:412                                     ; preds = %1534, %410
  %413 = phi float [ 0.000000e+00, %410 ], [ %1535, %1534 ]
  %414 = phi float [ 0.000000e+00, %410 ], [ %1536, %1534 ]
  %415 = phi float [ 0.000000e+00, %410 ], [ %1537, %1534 ]
  %416 = phi i32 [ 0, %410 ], [ %1538, %1534 ]
  %417 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %35, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %418 = extractvalue %dx.types.CBufRet.i32 %417, 0
  %419 = shl i32 %416, 3
  %420 = add i32 %418, %419
  %421 = mul i32 %37, 1664525
  %422 = mul i32 %38, 1664525
  %423 = mul i32 %39, 1664525
  %424 = mul i32 %420, 1664525
  %425 = add i32 %421, 1013904223
  %426 = add i32 %422, 1013904223
  %427 = add i32 %423, 1013904223
  %428 = add i32 %424, 1013904223
  %429 = mul i32 %428, %426
  %430 = add i32 %425, %429
  %431 = mul i32 %430, %427
  %432 = add i32 %431, %426
  %433 = mul i32 %432, %430
  %434 = add i32 %433, %427
  %435 = mul i32 %434, %432
  %436 = add i32 %435, %428
  %437 = lshr i32 %430, 16
  %438 = lshr i32 %432, 16
  %439 = lshr i32 %434, 16
  %440 = lshr i32 %436, 16
  %441 = xor i32 %437, %430
  %442 = xor i32 %438, %432
  %443 = xor i32 %439, %434
  %444 = xor i32 %440, %436
  %445 = mul i32 %444, %442
  %446 = add i32 %445, %441
  %447 = mul i32 %446, %443
  %448 = add i32 %447, %442
  %449 = mul i32 %448, %446
  %450 = add i32 %449, %443
  %451 = uitofp i32 %446 to float
  %452 = uitofp i32 %448 to float
  %453 = uitofp i32 %450 to float
  %454 = fmul fast float %451, 0x3E00000000000000
  %455 = fmul fast float %452, 0x3E00000000000000
  %456 = fmul fast float %453, 0x3E00000000000000
  %457 = fadd fast float %454, -1.000000e+00
  %458 = fadd fast float %455, -1.000000e+00
  %459 = fadd fast float %456, -1.000000e+00
  %460 = add nuw nsw i32 %416, 12
  %461 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 %460)  ; CBufferLoadLegacy(handle,regIndex)
  %462 = extractvalue %dx.types.CBufRet.f32 %461, 0
  %463 = extractvalue %dx.types.CBufRet.f32 %461, 1
  %464 = extractvalue %dx.types.CBufRet.f32 %461, 2
  %465 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %466 = extractvalue %dx.types.CBufRet.f32 %465, 3
  %467 = fmul fast float %457, %466
  %468 = fmul fast float %458, %466
  %469 = fmul fast float %459, %466
  %470 = fadd fast float %467, %462
  %471 = fadd fast float %468, %463
  %472 = fadd fast float %469, %464
  %473 = fadd fast float %470, %96
  %474 = fadd fast float %471, %97
  %475 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %476 = extractvalue %dx.types.CBufRet.f32 %475, 0
  %477 = extractvalue %dx.types.CBufRet.f32 %475, 1
  %478 = fdiv fast float %473, %476
  %479 = fdiv fast float %474, %477
  %480 = fmul fast float %478, 2.000000e+00
  %481 = fmul fast float %479, 2.000000e+00
  %482 = fadd fast float %480, -1.000000e+00
  %483 = fadd fast float %481, -1.000000e+00
  %484 = fsub fast float -0.000000e+00, %483
  %485 = fadd fast float %472, %100
  %486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %487 = extractvalue %dx.types.CBufRet.f32 %486, 2
  %488 = fdiv fast float %485, %487
  %489 = call float @dx.op.unary.f32(i32 21, float %488)  ; Exp(value)
  %490 = extractvalue %dx.types.CBufRet.f32 %486, 1
  %491 = fsub fast float %489, %490
  %492 = extractvalue %dx.types.CBufRet.f32 %486, 0
  %493 = fdiv fast float %491, %492
  %494 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %495 = extractvalue %dx.types.CBufRet.f32 %494, 3
  %496 = fcmp fast ult float %495, 1.000000e+00
  br i1 %496, label %503, label %497, !dx.controlflow.hints !46

; <label>:497                                     ; preds = %412
  %498 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %499 = extractvalue %dx.types.CBufRet.f32 %498, 2
  %500 = fmul fast float %499, %493
  %501 = extractvalue %dx.types.CBufRet.f32 %494, 2
  %502 = fadd fast float %500, %501
  br label %510

; <label>:503                                     ; preds = %412
  %504 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %505 = extractvalue %dx.types.CBufRet.f32 %504, 3
  %506 = fadd fast float %505, %493
  %507 = extractvalue %dx.types.CBufRet.f32 %504, 2
  %508 = fmul fast float %506, %507
  %509 = fdiv fast float 1.000000e+00, %508
  br label %510

; <label>:510                                     ; preds = %503, %497
  %511 = phi float [ %502, %497 ], [ %509, %503 ]
  %512 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %513 = extractvalue %dx.types.CBufRet.f32 %512, 0
  %514 = extractvalue %dx.types.CBufRet.f32 %512, 1
  %515 = extractvalue %dx.types.CBufRet.f32 %512, 2
  %516 = extractvalue %dx.types.CBufRet.f32 %512, 3
  %517 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %518 = extractvalue %dx.types.CBufRet.f32 %517, 0
  %519 = extractvalue %dx.types.CBufRet.f32 %517, 1
  %520 = extractvalue %dx.types.CBufRet.f32 %517, 2
  %521 = extractvalue %dx.types.CBufRet.f32 %517, 3
  %522 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %523 = extractvalue %dx.types.CBufRet.f32 %522, 0
  %524 = extractvalue %dx.types.CBufRet.f32 %522, 1
  %525 = extractvalue %dx.types.CBufRet.f32 %522, 2
  %526 = extractvalue %dx.types.CBufRet.f32 %522, 3
  %527 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %528 = extractvalue %dx.types.CBufRet.f32 %527, 0
  %529 = extractvalue %dx.types.CBufRet.f32 %527, 1
  %530 = extractvalue %dx.types.CBufRet.f32 %527, 2
  %531 = extractvalue %dx.types.CBufRet.f32 %527, 3
  %532 = fmul fast float %513, %482
  %533 = call float @dx.op.tertiary.f32(i32 46, float %484, float %518, float %532)  ; FMad(a,b,c)
  %534 = call float @dx.op.tertiary.f32(i32 46, float %511, float %523, float %533)  ; FMad(a,b,c)
  %535 = fadd fast float %534, %528
  %536 = fmul fast float %514, %482
  %537 = call float @dx.op.tertiary.f32(i32 46, float %484, float %519, float %536)  ; FMad(a,b,c)
  %538 = call float @dx.op.tertiary.f32(i32 46, float %511, float %524, float %537)  ; FMad(a,b,c)
  %539 = fadd fast float %538, %529
  %540 = fmul fast float %515, %482
  %541 = call float @dx.op.tertiary.f32(i32 46, float %484, float %520, float %540)  ; FMad(a,b,c)
  %542 = call float @dx.op.tertiary.f32(i32 46, float %511, float %525, float %541)  ; FMad(a,b,c)
  %543 = fadd fast float %542, %530
  %544 = fmul fast float %516, %482
  %545 = call float @dx.op.tertiary.f32(i32 46, float %484, float %521, float %544)  ; FMad(a,b,c)
  %546 = call float @dx.op.tertiary.f32(i32 46, float %511, float %526, float %545)  ; FMad(a,b,c)
  %547 = fadd fast float %546, %531
  %548 = fdiv fast float %535, %547
  %549 = fdiv fast float %539, %547
  %550 = fdiv fast float %543, %547
  %551 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %552 = extractvalue %dx.types.CBufRet.f32 %551, 0
  %553 = extractvalue %dx.types.CBufRet.f32 %551, 1
  %554 = extractvalue %dx.types.CBufRet.f32 %551, 2
  %555 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %556 = extractvalue %dx.types.CBufRet.f32 %555, 0
  %557 = extractvalue %dx.types.CBufRet.f32 %555, 1
  %558 = extractvalue %dx.types.CBufRet.f32 %555, 2
  %559 = fmul fast float %552, 2.097152e+06
  %560 = fmul fast float %553, 2.097152e+06
  %561 = fmul fast float %554, 2.097152e+06
  %562 = fsub fast float %556, %559
  %563 = fsub fast float %557, %560
  %564 = fsub fast float %558, %561
  %565 = fsub fast float %548, %562
  %566 = fsub fast float %549, %563
  %567 = fsub fast float %550, %564
  %568 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %569 = extractvalue %dx.types.CBufRet.f32 %568, 0
  %570 = extractvalue %dx.types.CBufRet.f32 %568, 1
  %571 = extractvalue %dx.types.CBufRet.f32 %568, 2
  %572 = fsub fast float %548, %569
  %573 = fsub fast float %549, %570
  %574 = fsub fast float %550, %571
  %575 = fmul fast float %572, %572
  %576 = fmul fast float %573, %573
  %577 = fadd fast float %575, %576
  %578 = fmul fast float %574, %574
  %579 = fadd fast float %577, %578
  %580 = call float @dx.op.unary.f32(i32 24, float %579)  ; Sqrt(value)
  %581 = fdiv fast float %572, %580
  %582 = fdiv fast float %573, %580
  %583 = fdiv fast float %574, %580
  %584 = icmp eq i32 %42, 0
  br i1 %584, label %585, label %587, !dx.controlflow.hints !47

; <label>:585                                     ; preds = %510
  %586 = extractvalue %dx.types.CBufRet.f32 %465, 1
  br label %783

; <label>:587                                     ; preds = %510
  %588 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %589 = extractvalue %dx.types.CBufRet.f32 %588, 2
  %590 = fcmp fast ogt float %589, 0.000000e+00
  br i1 %590, label %591, label %713

; <label>:591                                     ; preds = %587
  %592 = icmp eq i32 %72, 0
  br i1 %592, label %628, label %593, !dx.controlflow.hints !48

; <label>:593                                     ; preds = %591
  %594 = fmul fast float %548, %74
  %595 = call float @dx.op.tertiary.f32(i32 46, float %549, float %79, float %594)  ; FMad(a,b,c)
  %596 = call float @dx.op.tertiary.f32(i32 46, float %550, float %84, float %595)  ; FMad(a,b,c)
  %597 = fadd fast float %596, %89
  %598 = fmul fast float %548, %75
  %599 = call float @dx.op.tertiary.f32(i32 46, float %549, float %80, float %598)  ; FMad(a,b,c)
  %600 = call float @dx.op.tertiary.f32(i32 46, float %550, float %85, float %599)  ; FMad(a,b,c)
  %601 = fadd fast float %600, %90
  %602 = fmul fast float %548, %77
  %603 = call float @dx.op.tertiary.f32(i32 46, float %549, float %82, float %602)  ; FMad(a,b,c)
  %604 = call float @dx.op.tertiary.f32(i32 46, float %550, float %87, float %603)  ; FMad(a,b,c)
  %605 = fadd fast float %604, %92
  %606 = fdiv fast float %597, %605
  %607 = fdiv fast float %601, %605
  %608 = fcmp fast ole float %606, 1.000000e+00
  %609 = fcmp fast ole float %607, 1.000000e+00
  %610 = fcmp fast oge float %606, 0.000000e+00
  %611 = fcmp fast oge float %607, 0.000000e+00
  %612 = and i1 %610, %608
  %613 = and i1 %611, %609
  %614 = and i1 %612, %613
  br i1 %614, label %615, label %628

; <label>:615                                     ; preds = %593
  %616 = fmul fast float %548, %76
  %617 = call float @dx.op.tertiary.f32(i32 46, float %549, float %81, float %616)  ; FMad(a,b,c)
  %618 = call float @dx.op.tertiary.f32(i32 46, float %550, float %86, float %617)  ; FMad(a,b,c)
  %619 = fadd fast float %618, %91
  %620 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %621 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %622 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %620, %dx.types.Handle %621, float %606, float %607, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %623 = extractvalue %dx.types.ResRet.f32 %622, 0
  %624 = fcmp fast olt float %619, %623
  %625 = fcmp fast ogt float %623, 0x3FEFAE1480000000
  %626 = or i1 %624, %625
  %627 = uitofp i1 %626 to float
  br label %628

; <label>:628                                     ; preds = %615, %593, %591
  %629 = phi float [ %627, %615 ], [ 1.000000e+00, %593 ], [ 1.000000e+00, %591 ]
  %630 = icmp eq i32 %63, 0
  br i1 %630, label %710, label %631

; <label>:631                                     ; preds = %628
  %632 = fcmp fast oge float %493, %65
  %633 = fcmp fast oge float %493, %66
  %634 = fcmp fast oge float %493, %67
  %635 = fcmp fast oge float %493, %68
  %636 = zext i1 %632 to i32
  %637 = zext i1 %633 to i32
  %638 = zext i1 %634 to i32
  %639 = zext i1 %635 to i32
  %640 = add nuw nsw i32 %636, %637
  %641 = add nuw nsw i32 %640, %638
  %642 = add nuw nsw i32 %641, %639
  %643 = icmp ult i32 %642, %63
  br i1 %643, label %644, label %710

; <label>:644                                     ; preds = %631
  %645 = shl nuw nsw i32 %642, 2
  %646 = add nuw nsw i32 %645, 9
  %647 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %646)  ; CBufferLoadLegacy(handle,regIndex)
  %648 = extractvalue %dx.types.CBufRet.f32 %647, 0
  %649 = extractvalue %dx.types.CBufRet.f32 %647, 1
  %650 = extractvalue %dx.types.CBufRet.f32 %647, 3
  %651 = add nuw nsw i32 %645, 10
  %652 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %651)  ; CBufferLoadLegacy(handle,regIndex)
  %653 = extractvalue %dx.types.CBufRet.f32 %652, 0
  %654 = extractvalue %dx.types.CBufRet.f32 %652, 1
  %655 = extractvalue %dx.types.CBufRet.f32 %652, 3
  %656 = add nuw nsw i32 %645, 11
  %657 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %656)  ; CBufferLoadLegacy(handle,regIndex)
  %658 = extractvalue %dx.types.CBufRet.f32 %657, 0
  %659 = extractvalue %dx.types.CBufRet.f32 %657, 1
  %660 = extractvalue %dx.types.CBufRet.f32 %657, 3
  %661 = add nuw nsw i32 %645, 12
  %662 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %661)  ; CBufferLoadLegacy(handle,regIndex)
  %663 = extractvalue %dx.types.CBufRet.f32 %662, 0
  %664 = extractvalue %dx.types.CBufRet.f32 %662, 1
  %665 = extractvalue %dx.types.CBufRet.f32 %662, 3
  %666 = fmul fast float %648, %548
  %667 = call float @dx.op.tertiary.f32(i32 46, float %549, float %653, float %666)  ; FMad(a,b,c)
  %668 = call float @dx.op.tertiary.f32(i32 46, float %550, float %658, float %667)  ; FMad(a,b,c)
  %669 = fadd fast float %668, %663
  %670 = fmul fast float %649, %548
  %671 = call float @dx.op.tertiary.f32(i32 46, float %549, float %654, float %670)  ; FMad(a,b,c)
  %672 = call float @dx.op.tertiary.f32(i32 46, float %550, float %659, float %671)  ; FMad(a,b,c)
  %673 = fadd fast float %672, %664
  %674 = fmul fast float %650, %548
  %675 = call float @dx.op.tertiary.f32(i32 46, float %549, float %655, float %674)  ; FMad(a,b,c)
  %676 = call float @dx.op.tertiary.f32(i32 46, float %550, float %660, float %675)  ; FMad(a,b,c)
  %677 = fadd fast float %676, %665
  %678 = fdiv fast float %669, %677
  %679 = fdiv fast float %673, %677
  %680 = add nuw nsw i32 %642, 25
  %681 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %34, i32 %680)  ; CBufferLoadLegacy(handle,regIndex)
  %682 = extractvalue %dx.types.CBufRet.f32 %681, 0
  %683 = extractvalue %dx.types.CBufRet.f32 %681, 1
  %684 = extractvalue %dx.types.CBufRet.f32 %681, 2
  %685 = extractvalue %dx.types.CBufRet.f32 %681, 3
  %686 = fcmp fast ole float %678, %684
  %687 = fcmp fast ole float %679, %685
  %688 = fcmp fast oge float %678, %682
  %689 = fcmp fast oge float %679, %683
  %690 = and i1 %688, %686
  %691 = and i1 %689, %687
  %692 = and i1 %690, %691
  br i1 %692, label %693, label %710

; <label>:693                                     ; preds = %644
  %694 = extractvalue %dx.types.CBufRet.f32 %662, 2
  %695 = extractvalue %dx.types.CBufRet.f32 %657, 2
  %696 = extractvalue %dx.types.CBufRet.f32 %652, 2
  %697 = extractvalue %dx.types.CBufRet.f32 %647, 2
  %698 = fmul fast float %697, %548
  %699 = call float @dx.op.tertiary.f32(i32 46, float %549, float %696, float %698)  ; FMad(a,b,c)
  %700 = call float @dx.op.tertiary.f32(i32 46, float %550, float %695, float %699)  ; FMad(a,b,c)
  %701 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %702 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %703 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %701, %dx.types.Handle %702, float %678, float %679, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %704 = extractvalue %dx.types.ResRet.f32 %703, 0
  %705 = fsub fast float 1.000000e+00, %694
  %706 = fsub fast float %705, %700
  %707 = fsub fast float %704, %70
  %708 = fcmp fast olt float %706, %707
  %709 = uitofp i1 %708 to float
  br label %710

; <label>:710                                     ; preds = %693, %644, %631, %628
  %711 = phi float [ %709, %693 ], [ 1.000000e+00, %644 ], [ 1.000000e+00, %631 ], [ 1.000000e+00, %628 ]
  %712 = fmul fast float %711, %629
  br label %713

; <label>:713                                     ; preds = %710, %587
  %714 = phi float [ %712, %710 ], [ 1.000000e+00, %587 ]
  %715 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %716 = extractvalue %dx.types.CBufRet.f32 %715, 0
  %717 = extractvalue %dx.types.CBufRet.f32 %715, 1
  %718 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %719 = extractvalue %dx.types.CBufRet.f32 %718, 0
  %720 = extractvalue %dx.types.CBufRet.f32 %718, 1
  %721 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %722 = extractvalue %dx.types.CBufRet.f32 %721, 0
  %723 = extractvalue %dx.types.CBufRet.f32 %721, 1
  %724 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %725 = extractvalue %dx.types.CBufRet.f32 %724, 0
  %726 = extractvalue %dx.types.CBufRet.f32 %724, 1
  %727 = fmul fast float %716, %548
  %728 = call float @dx.op.tertiary.f32(i32 46, float %549, float %719, float %727)  ; FMad(a,b,c)
  %729 = call float @dx.op.tertiary.f32(i32 46, float %550, float %722, float %728)  ; FMad(a,b,c)
  %730 = fadd fast float %729, %725
  %731 = fmul fast float %717, %548
  %732 = call float @dx.op.tertiary.f32(i32 46, float %549, float %720, float %731)  ; FMad(a,b,c)
  %733 = call float @dx.op.tertiary.f32(i32 46, float %550, float %723, float %732)  ; FMad(a,b,c)
  %734 = fadd fast float %733, %726
  %735 = fmul fast float %730, 5.000000e-01
  %736 = fmul fast float %734, 5.000000e-01
  %737 = fadd fast float %735, 5.000000e-01
  %738 = fsub fast float 5.000000e-01, %736
  %739 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %740 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %741 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %739, %dx.types.Handle %740, float %737, float %738, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %742 = extractvalue %dx.types.ResRet.f32 %741, 0
  %743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %744 = extractvalue %dx.types.CBufRet.f32 %743, 2
  %745 = fcmp fast ogt float %744, 0.000000e+00
  br i1 %745, label %746, label %755

; <label>:746                                     ; preds = %713
  %747 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %32, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %748 = extractvalue %dx.types.CBufRet.f32 %747, 0
  %749 = extractvalue %dx.types.CBufRet.f32 %747, 1
  %750 = extractvalue %dx.types.CBufRet.f32 %747, 2
  %751 = call float @dx.op.dot3.f32(i32 55, float %58, float %59, float %60, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %752 = fmul fast float %748, %751
  %753 = fmul fast float %749, %751
  %754 = fmul fast float %750, %751
  br label %755

; <label>:755                                     ; preds = %746, %713
  %756 = phi float [ %752, %746 ], [ %58, %713 ]
  %757 = phi float [ %753, %746 ], [ %59, %713 ]
  %758 = phi float [ %754, %746 ], [ %60, %713 ]
  %759 = fsub fast float -0.000000e+00, %581
  %760 = fsub fast float -0.000000e+00, %582
  %761 = fsub fast float -0.000000e+00, %583
  %762 = call float @dx.op.dot3.f32(i32 55, float %54, float %55, float %56, float %759, float %760, float %761)  ; Dot3(ax,ay,az,bx,by,bz)
  %763 = extractvalue %dx.types.CBufRet.f32 %465, 1
  %764 = fmul fast float %763, %763
  %765 = fsub fast float 1.000000e+00, %764
  %766 = fmul fast float %762, 2.000000e+00
  %767 = fadd fast float %766, %763
  %768 = fmul fast float %767, %763
  %769 = fadd fast float %768, 1.000000e+00
  %770 = call float @dx.op.unary.f32(i32 24, float %769)  ; Sqrt(value)
  %771 = fmul fast float %770, 0x402921FB60000000
  %772 = fmul fast float %771, %769
  %773 = fdiv fast float %765, %772
  %774 = fmul fast float %714, %61
  %775 = fmul fast float %774, %742
  %776 = fmul fast float %775, %773
  %777 = fmul fast float %776, %756
  %778 = fmul fast float %776, %757
  %779 = fmul fast float %776, %758
  %780 = fadd fast float %777, %413
  %781 = fadd fast float %778, %414
  %782 = fadd fast float %779, %415
  br label %783

; <label>:783                                     ; preds = %755, %585
  %784 = phi float [ %586, %585 ], [ %763, %755 ]
  %785 = phi float [ %413, %585 ], [ %780, %755 ]
  %786 = phi float [ %414, %585 ], [ %781, %755 ]
  %787 = phi float [ %415, %585 ], [ %782, %755 ]
  %788 = fmul fast float %784, %582
  %789 = fmul fast float %784, %583
  %790 = fmul fast float %784, %581
  %791 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %792 = extractvalue %dx.types.CBufRet.f32 %791, 3
  %793 = fcmp fast ogt float %792, 0.000000e+00
  %794 = extractvalue %dx.types.CBufRet.f32 %791, 2
  %795 = fcmp fast ogt float %794, 0.000000e+00
  %796 = or i1 %793, %795
  br i1 %796, label %797, label %865

; <label>:797                                     ; preds = %783
  %798 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 233)  ; CBufferLoadLegacy(handle,regIndex)
  %799 = extractvalue %dx.types.CBufRet.f32 %798, 0
  %800 = extractvalue %dx.types.CBufRet.f32 %798, 1
  %801 = extractvalue %dx.types.CBufRet.f32 %798, 2
  %802 = fmul fast float %799, %565
  %803 = fmul fast float %800, %566
  %804 = fmul fast float %801, %567
  %805 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 234)  ; CBufferLoadLegacy(handle,regIndex)
  %806 = extractvalue %dx.types.CBufRet.f32 %805, 0
  %807 = extractvalue %dx.types.CBufRet.f32 %805, 1
  %808 = extractvalue %dx.types.CBufRet.f32 %805, 2
  %809 = fadd fast float %802, %806
  %810 = fadd fast float %803, %807
  %811 = fadd fast float %804, %808
  %812 = call float @dx.op.binary.f32(i32 35, float %809, float 0.000000e+00)  ; FMax(a,b)
  %813 = call float @dx.op.binary.f32(i32 35, float %810, float 0.000000e+00)  ; FMax(a,b)
  %814 = call float @dx.op.binary.f32(i32 35, float %811, float 0.000000e+00)  ; FMax(a,b)
  %815 = call float @dx.op.binary.f32(i32 36, float %812, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %816 = call float @dx.op.binary.f32(i32 36, float %813, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %817 = call float @dx.op.binary.f32(i32 36, float %814, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %818 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 235)  ; CBufferLoadLegacy(handle,regIndex)
  %819 = extractvalue %dx.types.CBufRet.f32 %818, 0
  %820 = extractvalue %dx.types.CBufRet.f32 %818, 1
  %821 = extractvalue %dx.types.CBufRet.f32 %818, 2
  %822 = fmul fast float %819, %815
  %823 = fmul fast float %820, %816
  %824 = fmul fast float %821, %817
  %825 = fptosi float %822 to i32
  %826 = fptosi float %823 to i32
  %827 = fptosi float %824 to i32
  %828 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 4, i32 1029 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xU32>
  %829 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %828, i32 0, i32 %825, i32 %826, i32 %827, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %830 = extractvalue %dx.types.ResRet.i32 %829, 0
  %831 = extractvalue %dx.types.ResRet.i32 %829, 1
  %832 = extractvalue %dx.types.ResRet.i32 %829, 2
  %833 = extractvalue %dx.types.ResRet.i32 %829, 3
  %834 = uitofp i32 %830 to float
  %835 = uitofp i32 %831 to float
  %836 = uitofp i32 %832 to float
  %837 = uitofp i32 %833 to float
  %838 = extractvalue %dx.types.CBufRet.f32 %818, 3
  %839 = fadd fast float %838, 1.000000e+00
  %840 = fmul fast float %839, %834
  %841 = fmul fast float %839, %835
  %842 = fmul fast float %839, %836
  %843 = fdiv fast float %822, %837
  %844 = fdiv fast float %823, %837
  %845 = fdiv fast float %824, %837
  %846 = call float @dx.op.unary.f32(i32 22, float %843)  ; Frc(value)
  %847 = call float @dx.op.unary.f32(i32 22, float %844)  ; Frc(value)
  %848 = call float @dx.op.unary.f32(i32 22, float %845)  ; Frc(value)
  %849 = fmul fast float %838, %846
  %850 = fmul fast float %838, %847
  %851 = fmul fast float %838, %848
  %852 = fadd fast float %840, 5.000000e-01
  %853 = fadd fast float %852, %849
  %854 = fadd fast float %841, 5.000000e-01
  %855 = fadd fast float %854, %850
  %856 = fadd fast float %842, 5.000000e-01
  %857 = fadd fast float %856, %851
  %858 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 236)  ; CBufferLoadLegacy(handle,regIndex)
  %859 = extractvalue %dx.types.CBufRet.f32 %858, 0
  %860 = extractvalue %dx.types.CBufRet.f32 %858, 1
  %861 = extractvalue %dx.types.CBufRet.f32 %858, 2
  %862 = fmul fast float %853, %859
  %863 = fmul fast float %855, %860
  %864 = fmul fast float %857, %861
  br label %865

; <label>:865                                     ; preds = %797, %783
  %866 = phi float [ %862, %797 ], [ 0.000000e+00, %783 ]
  %867 = phi float [ %863, %797 ], [ 0.000000e+00, %783 ]
  %868 = phi float [ %864, %797 ], [ 0.000000e+00, %783 ]
  %869 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %870 = extractvalue %dx.types.CBufRet.f32 %869, 0
  %871 = extractvalue %dx.types.CBufRet.f32 %869, 1
  %872 = extractvalue %dx.types.CBufRet.f32 %869, 3
  %873 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %874 = extractvalue %dx.types.CBufRet.f32 %873, 0
  %875 = extractvalue %dx.types.CBufRet.f32 %873, 1
  %876 = extractvalue %dx.types.CBufRet.f32 %873, 3
  %877 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %878 = extractvalue %dx.types.CBufRet.f32 %877, 0
  %879 = extractvalue %dx.types.CBufRet.f32 %877, 1
  %880 = extractvalue %dx.types.CBufRet.f32 %877, 3
  %881 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %882 = extractvalue %dx.types.CBufRet.f32 %881, 0
  %883 = extractvalue %dx.types.CBufRet.f32 %881, 1
  %884 = extractvalue %dx.types.CBufRet.f32 %881, 3
  %885 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %886 = extractvalue %dx.types.CBufRet.f32 %885, 0
  %887 = extractvalue %dx.types.CBufRet.f32 %885, 1
  %888 = extractvalue %dx.types.CBufRet.f32 %885, 2
  %889 = fmul fast float %886, 2.097152e+06
  %890 = fmul fast float %887, 2.097152e+06
  %891 = fmul fast float %888, 2.097152e+06
  %892 = fsub fast float %565, %889
  %893 = fsub fast float %566, %890
  %894 = fsub fast float %567, %891
  %895 = fmul fast float %892, %870
  %896 = call float @dx.op.tertiary.f32(i32 46, float %893, float %874, float %895)  ; FMad(a,b,c)
  %897 = call float @dx.op.tertiary.f32(i32 46, float %894, float %878, float %896)  ; FMad(a,b,c)
  %898 = fadd fast float %897, %882
  %899 = fmul fast float %892, %871
  %900 = call float @dx.op.tertiary.f32(i32 46, float %893, float %875, float %899)  ; FMad(a,b,c)
  %901 = call float @dx.op.tertiary.f32(i32 46, float %894, float %879, float %900)  ; FMad(a,b,c)
  %902 = fadd fast float %901, %883
  %903 = fmul fast float %892, %872
  %904 = call float @dx.op.tertiary.f32(i32 46, float %893, float %876, float %903)  ; FMad(a,b,c)
  %905 = call float @dx.op.tertiary.f32(i32 46, float %894, float %880, float %904)  ; FMad(a,b,c)
  %906 = fadd fast float %905, %884
  %907 = fdiv fast float %898, %906
  %908 = fdiv fast float %902, %906
  %909 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %33, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %910 = extractvalue %dx.types.CBufRet.f32 %909, 0
  %911 = fmul fast float %910, %906
  %912 = extractvalue %dx.types.CBufRet.f32 %909, 1
  %913 = fadd fast float %911, %912
  %914 = call float @dx.op.unary.f32(i32 23, float %913)  ; Log(value)
  %915 = extractvalue %dx.types.CBufRet.f32 %909, 2
  %916 = fmul fast float %915, %914
  %917 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %33, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %918 = extractvalue %dx.types.CBufRet.i32 %917, 2
  %919 = sitofp i32 %918 to float
  %920 = fdiv fast float %916, %919
  %921 = fmul fast float %907, 5.000000e-01
  %922 = fmul fast float %908, 5.000000e-01
  %923 = fadd fast float %921, 5.000000e-01
  %924 = fsub fast float 5.000000e-01, %922
  %925 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %926 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %927 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %925, %dx.types.Handle %926, float %923, float %924, float %920, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %928 = extractvalue %dx.types.ResRet.f32 %927, 0
  %929 = extractvalue %dx.types.ResRet.f32 %927, 1
  %930 = extractvalue %dx.types.ResRet.f32 %927, 2
  %931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %932 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %931, %dx.types.Handle %926, float %923, float %924, float %920, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %933 = extractvalue %dx.types.ResRet.f32 %932, 0
  %934 = extractvalue %dx.types.ResRet.f32 %932, 1
  %935 = extractvalue %dx.types.ResRet.f32 %932, 2
  %936 = call float @dx.op.dot3.f32(i32 55, float %928, float %929, float %930, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %937 = fadd fast float %936, 0x3EE4F8B580000000
  %938 = fdiv fast float %928, %937
  %939 = fdiv fast float %929, %937
  %940 = fdiv fast float %930, %937
  %941 = fmul fast float %938, %933
  %942 = fmul fast float %938, %934
  %943 = fmul fast float %938, %935
  %944 = fmul fast float %939, %933
  %945 = fmul fast float %939, %934
  %946 = fmul fast float %939, %935
  %947 = fmul fast float %940, %933
  %948 = fmul fast float %940, %934
  %949 = fmul fast float %940, %935
  %950 = call float @dx.op.dot4.f32(i32 56, float %928, float %941, float %942, float %943, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %951 = call float @dx.op.dot4.f32(i32 56, float %929, float %944, float %945, float %946, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %952 = call float @dx.op.dot4.f32(i32 56, float %930, float %947, float %948, float %949, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %953 = call float @dx.op.binary.f32(i32 35, float %950, float 0.000000e+00)  ; FMax(a,b)
  %954 = call float @dx.op.binary.f32(i32 35, float %951, float 0.000000e+00)  ; FMax(a,b)
  %955 = call float @dx.op.binary.f32(i32 35, float %952, float 0.000000e+00)  ; FMax(a,b)
  %956 = fadd fast float %953, %785
  %957 = fadd fast float %954, %786
  %958 = fadd fast float %955, %787
  %959 = fcmp fast ogt float %794, 0.000000e+00
  br i1 %959, label %960, label %1025

; <label>:960                                     ; preds = %865
  %961 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %962 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %963 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %961, %dx.types.Handle %962, float %866, float %867, float %868, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %964 = extractvalue %dx.types.ResRet.f32 %963, 0
  %965 = extractvalue %dx.types.ResRet.f32 %963, 1
  %966 = extractvalue %dx.types.ResRet.f32 %963, 2
  %967 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %968 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %967, %dx.types.Handle %962, float %866, float %867, float %868, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %969 = extractvalue %dx.types.ResRet.f32 %968, 0
  %970 = extractvalue %dx.types.ResRet.f32 %968, 1
  %971 = extractvalue %dx.types.ResRet.f32 %968, 2
  %972 = fmul fast float %969, 2.000000e+00
  %973 = fmul fast float %970, 2.000000e+00
  %974 = fmul fast float %971, 2.000000e+00
  %975 = fadd fast float %972, -1.000000e+00
  %976 = fadd fast float %973, -1.000000e+00
  %977 = fadd fast float %974, -1.000000e+00
  %978 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %979 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %978, %dx.types.Handle %962, float %866, float %867, float %868, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %980 = extractvalue %dx.types.ResRet.f32 %979, 0
  %981 = extractvalue %dx.types.ResRet.f32 %979, 1
  %982 = extractvalue %dx.types.ResRet.f32 %979, 2
  %983 = fmul fast float %980, 2.000000e+00
  %984 = fmul fast float %981, 2.000000e+00
  %985 = fmul fast float %982, 2.000000e+00
  %986 = fadd fast float %983, -1.000000e+00
  %987 = fadd fast float %984, -1.000000e+00
  %988 = fadd fast float %985, -1.000000e+00
  %989 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %990 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %989, %dx.types.Handle %962, float %866, float %867, float %868, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %991 = extractvalue %dx.types.ResRet.f32 %990, 0
  %992 = extractvalue %dx.types.ResRet.f32 %990, 1
  %993 = extractvalue %dx.types.ResRet.f32 %990, 2
  %994 = fmul fast float %991, 2.000000e+00
  %995 = fmul fast float %992, 2.000000e+00
  %996 = fmul fast float %993, 2.000000e+00
  %997 = fadd fast float %994, -1.000000e+00
  %998 = fadd fast float %995, -1.000000e+00
  %999 = fadd fast float %996, -1.000000e+00
  %1000 = fmul fast float %964, 0x3FFBB67B80000000
  %1001 = fmul fast float %1000, %975
  %1002 = fmul fast float %1000, %976
  %1003 = fmul fast float %1000, %977
  %1004 = fmul fast float %965, 0x3FFBB67B80000000
  %1005 = fmul fast float %1004, %986
  %1006 = fmul fast float %1004, %987
  %1007 = fmul fast float %1004, %988
  %1008 = fmul fast float %966, 0x3FFBB67B80000000
  %1009 = fmul fast float %1008, %997
  %1010 = fmul fast float %1008, %998
  %1011 = fmul fast float %1008, %999
  %1012 = fmul fast float %794, 0x3FD45F3060000000
  %1013 = call float @dx.op.dot4.f32(i32 56, float %964, float %1001, float %1002, float %1003, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1014 = call float @dx.op.dot4.f32(i32 56, float %965, float %1005, float %1006, float %1007, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1015 = call float @dx.op.dot4.f32(i32 56, float %966, float %1009, float %1010, float %1011, float 1.000000e+00, float %788, float %789, float %790)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1016 = call float @dx.op.binary.f32(i32 35, float %1013, float 0.000000e+00)  ; FMax(a,b)
  %1017 = call float @dx.op.binary.f32(i32 35, float %1014, float 0.000000e+00)  ; FMax(a,b)
  %1018 = call float @dx.op.binary.f32(i32 35, float %1015, float 0.000000e+00)  ; FMax(a,b)
  %1019 = fmul fast float %1016, %1012
  %1020 = fmul fast float %1017, %1012
  %1021 = fmul fast float %1018, %1012
  %1022 = fadd fast float %1019, %956
  %1023 = fadd fast float %1020, %957
  %1024 = fadd fast float %1021, %958
  br label %1025

; <label>:1025                                    ; preds = %960, %865
  %1026 = phi float [ %1022, %960 ], [ %956, %865 ]
  %1027 = phi float [ %1023, %960 ], [ %957, %865 ]
  %1028 = phi float [ %1024, %960 ], [ %958, %865 ]
  %1029 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1030 = extractvalue %dx.types.CBufRet.i32 %1029, 0
  %1031 = extractvalue %dx.types.CBufRet.i32 %1029, 1
  %1032 = mul i32 %1030, %37
  %1033 = mul i32 %1031, %38
  %1034 = fmul fast float %493, %50
  %1035 = fadd fast float %1034, %51
  %1036 = call float @dx.op.unary.f32(i32 23, float %1035)  ; Log(value)
  %1037 = fmul fast float %1036, %52
  %1038 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1037)  ; FMax(a,b)
  %1039 = fptoui float %1038 to i32
  %1040 = add nsw i32 %46, -1
  %1041 = call i32 @dx.op.binary.i32(i32 40, i32 %1039, i32 %1040)  ; UMin(a,b)
  %1042 = and i32 %48, 31
  %1043 = lshr i32 %1032, %1042
  %1044 = lshr i32 %1033, %1042
  %1045 = mul i32 %1041, %45
  %1046 = add i32 %1045, %1044
  %1047 = mul i32 %1046, %44
  %1048 = add i32 %1047, %1043
  %1049 = shl i32 %1048, 1
  %1050 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1051 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1050, i32 %1049, i32 undef)  ; BufferLoad(srv,index,wot)
  %1052 = extractvalue %dx.types.ResRet.i32 %1051, 0
  %1053 = call i32 @dx.op.binary.i32(i32 40, i32 %1052, i32 %41)  ; UMin(a,b)
  %1054 = or i32 %1049, 1
  %1055 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1050, i32 %1054, i32 undef)  ; BufferLoad(srv,index,wot)
  %1056 = extractvalue %dx.types.ResRet.i32 %1055, 0
  %1057 = add i32 %37, 1
  %1058 = add i32 %38, 1
  %1059 = add i32 %39, 1
  %1060 = uitofp i32 %1057 to float
  %1061 = uitofp i32 %1058 to float
  %1062 = fadd fast float %470, %1060
  %1063 = fadd fast float %471, %1061
  %1064 = fdiv fast float %1062, %476
  %1065 = fdiv fast float %1063, %477
  %1066 = fmul fast float %1064, 2.000000e+00
  %1067 = fmul fast float %1065, 2.000000e+00
  %1068 = fadd fast float %1066, -1.000000e+00
  %1069 = fadd fast float %1067, -1.000000e+00
  %1070 = fsub fast float -0.000000e+00, %1069
  %1071 = uitofp i32 %1059 to float
  %1072 = fadd fast float %472, %1071
  %1073 = fdiv fast float %1072, %487
  %1074 = call float @dx.op.unary.f32(i32 21, float %1073)  ; Exp(value)
  %1075 = fsub fast float %1074, %490
  %1076 = fdiv fast float %1075, %492
  br i1 %496, label %1083, label %1077, !dx.controlflow.hints !46

; <label>:1077                                    ; preds = %1025
  %1078 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %1079 = extractvalue %dx.types.CBufRet.f32 %1078, 2
  %1080 = fmul fast float %1079, %1076
  %1081 = extractvalue %dx.types.CBufRet.f32 %494, 2
  %1082 = fadd fast float %1080, %1081
  br label %1090

; <label>:1083                                    ; preds = %1025
  %1084 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %1085 = extractvalue %dx.types.CBufRet.f32 %1084, 3
  %1086 = fadd fast float %1085, %1076
  %1087 = extractvalue %dx.types.CBufRet.f32 %1084, 2
  %1088 = fmul fast float %1086, %1087
  %1089 = fdiv fast float 1.000000e+00, %1088
  br label %1090

; <label>:1090                                    ; preds = %1083, %1077
  %1091 = phi float [ %1082, %1077 ], [ %1089, %1083 ]
  %1092 = fmul fast float %513, %1068
  %1093 = call float @dx.op.tertiary.f32(i32 46, float %1070, float %518, float %1092)  ; FMad(a,b,c)
  %1094 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %523, float %1093)  ; FMad(a,b,c)
  %1095 = fadd fast float %1094, %528
  %1096 = fmul fast float %514, %1068
  %1097 = call float @dx.op.tertiary.f32(i32 46, float %1070, float %519, float %1096)  ; FMad(a,b,c)
  %1098 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %524, float %1097)  ; FMad(a,b,c)
  %1099 = fadd fast float %1098, %529
  %1100 = fmul fast float %515, %1068
  %1101 = call float @dx.op.tertiary.f32(i32 46, float %1070, float %520, float %1100)  ; FMad(a,b,c)
  %1102 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %525, float %1101)  ; FMad(a,b,c)
  %1103 = fadd fast float %1102, %530
  %1104 = fmul fast float %516, %1068
  %1105 = call float @dx.op.tertiary.f32(i32 46, float %1070, float %521, float %1104)  ; FMad(a,b,c)
  %1106 = call float @dx.op.tertiary.f32(i32 46, float %1091, float %526, float %1105)  ; FMad(a,b,c)
  %1107 = fadd fast float %1106, %531
  %1108 = fdiv fast float %1095, %1107
  %1109 = fdiv fast float %1099, %1107
  %1110 = fdiv fast float %1103, %1107
  %1111 = fsub fast float %548, %1108
  %1112 = fsub fast float %549, %1109
  %1113 = fsub fast float %550, %1110
  %1114 = fmul fast float %1111, %1111
  %1115 = fmul fast float %1112, %1112
  %1116 = fadd fast float %1115, %1114
  %1117 = fmul fast float %1113, %1113
  %1118 = fadd fast float %1116, %1117
  %1119 = call float @dx.op.unary.f32(i32 24, float %1118)  ; Sqrt(value)
  %1120 = extractvalue %dx.types.CBufRet.f32 %465, 2
  %1121 = fmul fast float %1120, %1119
  %1122 = call float @dx.op.binary.f32(i32 35, float %1121, float 1.000000e+00)  ; FMax(a,b)
  %1123 = fmul fast float %1122, %1122
  %1124 = icmp eq i32 %1053, 0
  br i1 %1124, label %1534, label %1125

; <label>:1125                                    ; preds = %1090
  br label %1126

; <label>:1126                                    ; preds = %1527, %1125
  %1127 = phi float [ %1528, %1527 ], [ %1026, %1125 ]
  %1128 = phi float [ %1529, %1527 ], [ %1027, %1125 ]
  %1129 = phi float [ %1530, %1527 ], [ %1028, %1125 ]
  %1130 = phi i32 [ %1531, %1527 ], [ 0, %1125 ]
  %1131 = add i32 %1130, %1056
  %1132 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %1133 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %1132, i32 %1131, i32 undef)  ; BufferLoad(srv,index,wot)
  %1134 = extractvalue %dx.types.ResRet.i32 %1133, 0
  %1135 = mul i32 %1134, 6
  %1136 = add i32 %1135, 4
  %1137 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %1138 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1136, i32 undef)  ; BufferLoad(srv,index,wot)
  %1139 = extractvalue %dx.types.ResRet.f32 %1138, 0
  %1140 = extractvalue %dx.types.ResRet.f32 %1138, 1
  %1141 = extractvalue %dx.types.ResRet.f32 %1138, 2
  %1142 = add i32 %1135, 3
  %1143 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1142, i32 undef)  ; BufferLoad(srv,index,wot)
  %1144 = extractvalue %dx.types.ResRet.f32 %1143, 3
  %1145 = add i32 %1135, 2
  %1146 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1145, i32 undef)  ; BufferLoad(srv,index,wot)
  %1147 = extractvalue %dx.types.ResRet.f32 %1146, 0
  %1148 = extractvalue %dx.types.ResRet.f32 %1146, 1
  %1149 = extractvalue %dx.types.ResRet.f32 %1146, 2
  %1150 = or i32 %1135, 1
  %1151 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1150, i32 undef)  ; BufferLoad(srv,index,wot)
  %1152 = extractvalue %dx.types.ResRet.f32 %1151, 0
  %1153 = extractvalue %dx.types.ResRet.f32 %1151, 1
  %1154 = extractvalue %dx.types.ResRet.f32 %1151, 2
  %1155 = extractvalue %dx.types.ResRet.f32 %1151, 3
  %1156 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1135, i32 undef)  ; BufferLoad(srv,index,wot)
  %1157 = extractvalue %dx.types.ResRet.f32 %1156, 3
  %1158 = bitcast float %1144 to i32
  %1159 = lshr i32 %1158, 16
  %1160 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1159)  ; LegacyF16ToF32(value)
  %1161 = fcmp fast ogt float %1160, 0.000000e+00
  br i1 %1161, label %1162, label %1527

; <label>:1162                                    ; preds = %1126
  %1163 = extractvalue %dx.types.ResRet.f32 %1156, 2
  %1164 = extractvalue %dx.types.ResRet.f32 %1156, 1
  %1165 = extractvalue %dx.types.ResRet.f32 %1156, 0
  %1166 = extractvalue %dx.types.ResRet.f32 %1146, 3
  %1167 = extractvalue %dx.types.ResRet.f32 %1143, 2
  %1168 = extractvalue %dx.types.ResRet.f32 %1143, 0
  %1169 = add i32 %1135, 5
  %1170 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %1137, i32 %1169, i32 undef)  ; BufferLoad(srv,index,wot)
  %1171 = extractvalue %dx.types.ResRet.f32 %1170, 3
  %1172 = bitcast float %1166 to i32
  %1173 = lshr i32 %1172, 16
  %1174 = and i32 %1173, 3
  %1175 = bitcast float %1168 to i32
  %1176 = and i32 %1175, 65535
  %1177 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1176)  ; LegacyF16ToF32(value)
  %1178 = lshr i32 %1175, 16
  %1179 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1178)  ; LegacyF16ToF32(value)
  %1180 = bitcast float %1167 to i32
  %1181 = and i32 %1180, 65535
  %1182 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1181)  ; LegacyF16ToF32(value)
  %1183 = fsub fast float -0.000000e+00, %1182
  %1184 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1158)  ; LegacyF16ToF32(value)
  %1185 = fsub fast float -0.000000e+00, %1184
  %1186 = fcmp fast oeq float %1155, 0.000000e+00
  %1187 = icmp eq i32 %1174, 2
  %1188 = icmp eq i32 %1174, 3
  %1189 = bitcast float %1171 to i32
  %1190 = and i32 %1189, 65535
  %1191 = call float @dx.op.legacyF16ToF32(i32 131, i32 %1190)  ; LegacyF16ToF32(value)
  %1192 = lshr i32 %1189, 16
  %1193 = and i32 %1192, 1023
  %1194 = uitofp i32 %1193 to float
  %1195 = fmul fast float %1194, 9.765625e-04
  %1196 = fsub fast float %1165, %548
  %1197 = fsub fast float %1164, %549
  %1198 = fsub fast float %1163, %550
  %1199 = call float @dx.op.dot3.f32(i32 55, float %1196, float %1197, float %1198, float %1196, float %1197, float %1198)  ; Dot3(ax,ay,az,bx,by,bz)
  %1200 = call float @dx.op.unary.f32(i32 25, float %1199)  ; Rsqrt(value)
  %1201 = fmul fast float %1200, %1196
  %1202 = fmul fast float %1200, %1197
  %1203 = fmul fast float %1200, %1198
  br i1 %1186, label %1204, label %1211

; <label>:1204                                    ; preds = %1162
  %1205 = fmul fast float %1157, %1157
  %1206 = fmul fast float %1205, %1199
  %1207 = fmul fast float %1206, %1206
  %1208 = fsub fast float 1.000000e+00, %1207
  %1209 = call float @dx.op.unary.f32(i32 7, float %1208)  ; Saturate(value)
  %1210 = fmul fast float %1209, %1209
  br label %1221

; <label>:1211                                    ; preds = %1162
  %1212 = fmul fast float %1196, %1157
  %1213 = fmul fast float %1197, %1157
  %1214 = fmul fast float %1198, %1157
  %1215 = call float @dx.op.dot3.f32(i32 55, float %1212, float %1213, float %1214, float %1212, float %1213, float %1214)  ; Dot3(ax,ay,az,bx,by,bz)
  %1216 = call float @dx.op.unary.f32(i32 7, float %1215)  ; Saturate(value)
  %1217 = fsub fast float 1.000000e+00, %1216
  %1218 = call float @dx.op.unary.f32(i32 23, float %1217)  ; Log(value)
  %1219 = fmul fast float %1218, %1155
  %1220 = call float @dx.op.unary.f32(i32 21, float %1219)  ; Exp(value)
  br label %1221

; <label>:1221                                    ; preds = %1211, %1204
  %1222 = phi float [ %1210, %1204 ], [ %1220, %1211 ]
  br i1 %1187, label %1223, label %1230

; <label>:1223                                    ; preds = %1221
  %1224 = call float @dx.op.dot3.f32(i32 55, float %1201, float %1202, float %1203, float %1147, float %1148, float %1149)  ; Dot3(ax,ay,az,bx,by,bz)
  %1225 = fsub fast float %1224, %1177
  %1226 = fmul fast float %1225, %1179
  %1227 = call float @dx.op.unary.f32(i32 7, float %1226)  ; Saturate(value)
  %1228 = fmul fast float %1227, %1227
  %1229 = fmul fast float %1228, %1222
  br label %1230

; <label>:1230                                    ; preds = %1223, %1221
  %1231 = phi float [ %1229, %1223 ], [ %1222, %1221 ]
  br i1 %1188, label %1232, label %1236

; <label>:1232                                    ; preds = %1230
  %1233 = call float @dx.op.dot3.f32(i32 55, float %1147, float %1148, float %1149, float %1201, float %1202, float %1203)  ; Dot3(ax,ay,az,bx,by,bz)
  %1234 = fcmp fast olt float %1233, 0.000000e+00
  %1235 = select i1 %1234, float 0.000000e+00, float %1231
  br label %1236

; <label>:1236                                    ; preds = %1232, %1230
  %1237 = phi float [ %1235, %1232 ], [ %1231, %1230 ]
  br i1 %1188, label %1238, label %1470

; <label>:1238                                    ; preds = %1236
  %1239 = fmul fast float %1149, %1140
  %1240 = fmul fast float %1148, %1141
  %1241 = fsub fast float %1239, %1240
  %1242 = fmul fast float %1147, %1141
  %1243 = fmul fast float %1149, %1139
  %1244 = fsub fast float %1242, %1243
  %1245 = fmul fast float %1148, %1139
  %1246 = fmul fast float %1147, %1140
  %1247 = fsub fast float %1245, %1246
  %1248 = fcmp fast ogt float %1195, 0x3FA1EB8520000000
  br i1 %1248, label %1249, label %1344

; <label>:1249                                    ; preds = %1238
  %1250 = fmul fast float %1196, %1241
  %1251 = call float @dx.op.tertiary.f32(i32 46, float %1244, float %1197, float %1250)  ; FMad(a,b,c)
  %1252 = call float @dx.op.tertiary.f32(i32 46, float %1247, float %1198, float %1251)  ; FMad(a,b,c)
  %1253 = fmul fast float %1196, %1139
  %1254 = call float @dx.op.tertiary.f32(i32 46, float %1140, float %1197, float %1253)  ; FMad(a,b,c)
  %1255 = call float @dx.op.tertiary.f32(i32 46, float %1141, float %1198, float %1254)  ; FMad(a,b,c)
  %1256 = fmul fast float %1196, %1147
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %1148, float %1197, float %1256)  ; FMad(a,b,c)
  %1258 = call float @dx.op.tertiary.f32(i32 46, float %1149, float %1198, float %1257)  ; FMad(a,b,c)
  %1259 = fmul fast float %1195, %1195
  %1260 = fsub fast float 1.000000e+00, %1259
  %1261 = call float @dx.op.unary.f32(i32 24, float %1260)  ; Sqrt(value)
  %1262 = fmul fast float %1195, %1191
  %1263 = call float @dx.op.binary.f32(i32 36, float %1258, float %1262)  ; FMin(a,b)
  %1264 = call float @dx.op.binary.f32(i32 35, float 0x3F1A36E2E0000000, float %1262)  ; FMax(a,b)
  %1265 = fdiv fast float %1263, %1264
  %1266 = fmul fast float %1261, %1191
  %1267 = fmul fast float %1266, %1265
  %1268 = fcmp fast ogt float %1252, 0.000000e+00
  %1269 = fcmp fast ogt float %1255, 0.000000e+00
  %1270 = fcmp fast olt float %1252, 0.000000e+00
  %1271 = fcmp fast olt float %1255, 0.000000e+00
  %1272 = zext i1 %1268 to i32
  %1273 = zext i1 %1269 to i32
  %1274 = zext i1 %1270 to i32
  %1275 = zext i1 %1271 to i32
  %1276 = sub nsw i32 %1272, %1274
  %1277 = sub nsw i32 %1273, %1275
  %1278 = sitofp i32 %1276 to float
  %1279 = sitofp i32 %1277 to float
  %1280 = fadd fast float %1267, %1182
  %1281 = fadd fast float %1267, %1184
  %1282 = call float @dx.op.unary.f32(i32 6, float %1252)  ; FAbs(value)
  %1283 = call float @dx.op.unary.f32(i32 6, float %1255)  ; FAbs(value)
  %1284 = call float @dx.op.binary.f32(i32 35, float %1282, float %1280)  ; FMax(a,b)
  %1285 = call float @dx.op.binary.f32(i32 35, float %1283, float %1281)  ; FMax(a,b)
  %1286 = fsub fast float %1183, %1267
  %1287 = fadd fast float %1286, %1284
  %1288 = fmul fast float %1287, %1278
  %1289 = fsub fast float %1185, %1267
  %1290 = fadd fast float %1289, %1285
  %1291 = fmul fast float %1290, %1279
  %1292 = fsub fast float %1258, %1263
  %1293 = call float @dx.op.binary.f32(i32 35, float %1292, float 0x3F50624DE0000000)  ; FMax(a,b)
  %1294 = call float @dx.op.unary.f32(i32 6, float %1288)  ; FAbs(value)
  %1295 = call float @dx.op.unary.f32(i32 6, float %1291)  ; FAbs(value)
  %1296 = fdiv fast float %1294, %1293
  %1297 = fdiv fast float %1295, %1293
  %1298 = fmul fast float %1296, %1263
  %1299 = fmul fast float %1297, %1263
  %1300 = fsub fast float %1298, %1267
  %1301 = fsub fast float %1299, %1267
  %1302 = fsub fast float -0.000000e+00, %1278
  %1303 = fsub fast float -0.000000e+00, %1279
  %1304 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1302)  ; FMax(a,b)
  %1305 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1303)  ; FMax(a,b)
  %1306 = fmul fast float %1300, %1304
  %1307 = fmul fast float %1301, %1305
  %1308 = fsub fast float %1306, %1182
  %1309 = fsub fast float %1307, %1184
  %1310 = call float @dx.op.binary.f32(i32 35, float %1308, float %1183)  ; FMax(a,b)
  %1311 = call float @dx.op.binary.f32(i32 35, float %1309, float %1185)  ; FMax(a,b)
  %1312 = call float @dx.op.binary.f32(i32 36, float %1310, float %1182)  ; FMin(a,b)
  %1313 = call float @dx.op.binary.f32(i32 36, float %1311, float %1184)  ; FMin(a,b)
  %1314 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1278)  ; FMax(a,b)
  %1315 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1279)  ; FMax(a,b)
  %1316 = fmul fast float %1314, %1300
  %1317 = fmul fast float %1315, %1301
  %1318 = fsub fast float %1182, %1316
  %1319 = fsub fast float %1184, %1317
  %1320 = call float @dx.op.binary.f32(i32 35, float %1318, float %1183)  ; FMax(a,b)
  %1321 = call float @dx.op.binary.f32(i32 35, float %1319, float %1185)  ; FMax(a,b)
  %1322 = call float @dx.op.binary.f32(i32 36, float %1320, float %1182)  ; FMin(a,b)
  %1323 = call float @dx.op.binary.f32(i32 36, float %1321, float %1184)  ; FMin(a,b)
  %1324 = fadd fast float %1322, %1312
  %1325 = fadd fast float %1323, %1313
  %1326 = fmul fast float %1324, 5.000000e-01
  %1327 = fmul fast float %1325, 5.000000e-01
  %1328 = fsub fast float %1322, %1312
  %1329 = fsub fast float %1323, %1313
  %1330 = fmul fast float %1328, 5.000000e-01
  %1331 = fmul fast float %1329, 5.000000e-01
  %1332 = fmul fast float %1326, %1241
  %1333 = fmul fast float %1326, %1244
  %1334 = fmul fast float %1326, %1247
  %1335 = fsub fast float %1196, %1332
  %1336 = fsub fast float %1197, %1333
  %1337 = fsub fast float %1198, %1334
  %1338 = fmul fast float %1327, %1139
  %1339 = fmul fast float %1327, %1140
  %1340 = fmul fast float %1327, %1141
  %1341 = fsub fast float %1335, %1338
  %1342 = fsub fast float %1336, %1339
  %1343 = fsub fast float %1337, %1340
  br label %1344

; <label>:1344                                    ; preds = %1249, %1238
  %1345 = phi float [ %1341, %1249 ], [ %1196, %1238 ]
  %1346 = phi float [ %1342, %1249 ], [ %1197, %1238 ]
  %1347 = phi float [ %1343, %1249 ], [ %1198, %1238 ]
  %1348 = phi float [ %1330, %1249 ], [ %1182, %1238 ]
  %1349 = phi float [ %1331, %1249 ], [ %1184, %1238 ]
  %1350 = fcmp fast oeq float %1348, 0.000000e+00
  %1351 = fcmp fast oeq float %1349, 0.000000e+00
  %1352 = or i1 %1350, %1351
  br i1 %1352, label %1500, label %1353

; <label>:1353                                    ; preds = %1344
  %1354 = call float @dx.op.dot3.f32(i32 55, float %1241, float %1244, float %1247, float %1345, float %1346, float %1347)  ; Dot3(ax,ay,az,bx,by,bz)
  %1355 = call float @dx.op.dot3.f32(i32 55, float %1139, float %1140, float %1141, float %1345, float %1346, float %1347)  ; Dot3(ax,ay,az,bx,by,bz)
  %1356 = call float @dx.op.dot3.f32(i32 55, float %1147, float %1148, float %1149, float %1345, float %1346, float %1347)  ; Dot3(ax,ay,az,bx,by,bz)
  %1357 = fsub fast float %1354, %1348
  %1358 = fadd fast float %1354, %1348
  %1359 = fsub fast float %1355, %1349
  %1360 = fadd fast float %1355, %1349
  %1361 = fmul fast float %1356, %1356
  %1362 = call float @dx.op.dot2.f32(i32 54, float %1357, float %1359, float %1357, float %1359)  ; Dot2(ax,ay,bx,by)
  %1363 = fadd fast float %1362, %1361
  %1364 = call float @dx.op.unary.f32(i32 25, float %1363)  ; Rsqrt(value)
  %1365 = fmul fast float %1364, %1357
  %1366 = fmul fast float %1364, %1359
  %1367 = fmul fast float %1364, %1356
  %1368 = call float @dx.op.dot2.f32(i32 54, float %1358, float %1359, float %1358, float %1359)  ; Dot2(ax,ay,bx,by)
  %1369 = fadd fast float %1368, %1361
  %1370 = call float @dx.op.unary.f32(i32 25, float %1369)  ; Rsqrt(value)
  %1371 = fmul fast float %1370, %1358
  %1372 = fmul fast float %1370, %1359
  %1373 = fmul fast float %1370, %1356
  %1374 = call float @dx.op.dot2.f32(i32 54, float %1358, float %1360, float %1358, float %1360)  ; Dot2(ax,ay,bx,by)
  %1375 = fadd fast float %1374, %1361
  %1376 = call float @dx.op.unary.f32(i32 25, float %1375)  ; Rsqrt(value)
  %1377 = fmul fast float %1376, %1358
  %1378 = fmul fast float %1376, %1360
  %1379 = fmul fast float %1376, %1356
  %1380 = call float @dx.op.dot2.f32(i32 54, float %1357, float %1360, float %1357, float %1360)  ; Dot2(ax,ay,bx,by)
  %1381 = fadd fast float %1380, %1361
  %1382 = call float @dx.op.unary.f32(i32 25, float %1381)  ; Rsqrt(value)
  %1383 = fmul fast float %1382, %1357
  %1384 = fmul fast float %1382, %1360
  %1385 = fmul fast float %1382, %1356
  %1386 = call float @dx.op.dot3.f32(i32 55, float %1365, float %1366, float %1367, float %1371, float %1372, float %1373)  ; Dot3(ax,ay,az,bx,by,bz)
  %1387 = call float @dx.op.dot3.f32(i32 55, float %1371, float %1372, float %1373, float %1377, float %1378, float %1379)  ; Dot3(ax,ay,az,bx,by,bz)
  %1388 = call float @dx.op.dot3.f32(i32 55, float %1377, float %1378, float %1379, float %1383, float %1384, float %1385)  ; Dot3(ax,ay,az,bx,by,bz)
  %1389 = call float @dx.op.dot3.f32(i32 55, float %1383, float %1384, float %1385, float %1365, float %1366, float %1367)  ; Dot3(ax,ay,az,bx,by,bz)
  %1390 = fmul fast float %1386, 0x3FC6666660000000
  %1391 = fsub fast float 0x3FF921FF20000000, %1390
  %1392 = fadd fast float %1386, 1.000000e+00
  %1393 = call float @dx.op.unary.f32(i32 25, float %1392)  ; Rsqrt(value)
  %1394 = fmul fast float %1387, 0x3FC6666660000000
  %1395 = fsub fast float 0x3FF921FF20000000, %1394
  %1396 = fadd fast float %1387, 1.000000e+00
  %1397 = call float @dx.op.unary.f32(i32 25, float %1396)  ; Rsqrt(value)
  %1398 = fmul fast float %1397, %1395
  %1399 = fmul fast float %1388, 0x3FC6666660000000
  %1400 = fsub fast float 0x3FF921FF20000000, %1399
  %1401 = fadd fast float %1388, 1.000000e+00
  %1402 = call float @dx.op.unary.f32(i32 25, float %1401)  ; Rsqrt(value)
  %1403 = fmul fast float %1389, 0x3FC6666660000000
  %1404 = fsub fast float 0x3FF921FF20000000, %1403
  %1405 = fadd fast float %1389, 1.000000e+00
  %1406 = call float @dx.op.unary.f32(i32 25, float %1405)  ; Rsqrt(value)
  %1407 = fmul fast float %1406, %1404
  %1408 = fmul fast float %1391, %1393
  %1409 = fsub fast float -0.000000e+00, %1408
  %1410 = fmul fast float %1365, %1409
  %1411 = fmul fast float %1366, %1409
  %1412 = fmul fast float %1367, %1409
  %1413 = fmul fast float %1398, %1377
  %1414 = fmul fast float %1398, %1378
  %1415 = fmul fast float %1398, %1379
  %1416 = fadd fast float %1413, %1410
  %1417 = fadd fast float %1414, %1411
  %1418 = fadd fast float %1415, %1412
  %1419 = fmul fast float %1418, %1372
  %1420 = fmul fast float %1417, %1373
  %1421 = fsub fast float %1419, %1420
  %1422 = fmul fast float %1416, %1373
  %1423 = fmul fast float %1418, %1371
  %1424 = fsub fast float %1422, %1423
  %1425 = fmul fast float %1417, %1371
  %1426 = fmul fast float %1416, %1372
  %1427 = fsub fast float %1425, %1426
  %1428 = fmul fast float %1407, %1365
  %1429 = fmul fast float %1407, %1366
  %1430 = fmul fast float %1407, %1367
  %1431 = fmul fast float %1400, %1402
  %1432 = fsub fast float -0.000000e+00, %1431
  %1433 = fmul fast float %1377, %1432
  %1434 = fmul fast float %1378, %1432
  %1435 = fmul fast float %1379, %1432
  %1436 = fadd fast float %1428, %1433
  %1437 = fadd fast float %1429, %1434
  %1438 = fadd fast float %1430, %1435
  %1439 = fmul fast float %1438, %1384
  %1440 = fmul fast float %1437, %1385
  %1441 = fsub fast float %1439, %1440
  %1442 = fmul fast float %1436, %1385
  %1443 = fmul fast float %1438, %1383
  %1444 = fsub fast float %1442, %1443
  %1445 = fmul fast float %1437, %1383
  %1446 = fmul fast float %1436, %1384
  %1447 = fsub fast float %1445, %1446
  %1448 = fadd fast float %1441, %1421
  %1449 = fadd fast float %1444, %1424
  %1450 = fadd fast float %1447, %1427
  %1451 = fmul fast float %1448, %1241
  %1452 = fmul fast float %1448, %1244
  %1453 = fmul fast float %1448, %1247
  %1454 = fmul fast float %1449, %1139
  %1455 = fmul fast float %1449, %1140
  %1456 = fmul fast float %1449, %1141
  %1457 = fadd fast float %1451, %1454
  %1458 = fadd fast float %1452, %1455
  %1459 = fadd fast float %1453, %1456
  %1460 = fmul fast float %1450, %1147
  %1461 = fmul fast float %1450, %1148
  %1462 = fmul fast float %1450, %1149
  %1463 = fadd fast float %1457, %1460
  %1464 = fadd fast float %1458, %1461
  %1465 = fadd fast float %1459, %1462
  %1466 = call float @dx.op.dot3.f32(i32 55, float %1463, float %1464, float %1465, float %1463, float %1464, float %1465)  ; Dot3(ax,ay,az,bx,by,bz)
  %1467 = call float @dx.op.unary.f32(i32 25, float %1466)  ; Rsqrt(value)
  %1468 = fmul fast float %1466, 5.000000e-01
  %1469 = fmul fast float %1468, %1467
  br label %1500

; <label>:1470                                    ; preds = %1236
  %1471 = fmul fast float %1184, 5.000000e-01
  %1472 = fmul fast float %1471, %1139
  %1473 = fmul fast float %1471, %1140
  %1474 = fmul fast float %1471, %1141
  %1475 = fsub fast float %1196, %1472
  %1476 = fsub fast float %1197, %1473
  %1477 = fsub fast float %1198, %1474
  %1478 = fadd fast float %1472, %1196
  %1479 = fadd fast float %1473, %1197
  %1480 = fadd fast float %1474, %1198
  %1481 = fcmp fast ogt float %1184, 0.000000e+00
  %1482 = call float @dx.op.dot3.f32(i32 55, float %1475, float %1476, float %1477, float %1475, float %1476, float %1477)  ; Dot3(ax,ay,az,bx,by,bz)
  br i1 %1481, label %1483, label %1494, !dx.controlflow.hints !49

; <label>:1483                                    ; preds = %1470
  %1484 = call float @dx.op.dot3.f32(i32 55, float %1478, float %1479, float %1480, float %1478, float %1479, float %1480)  ; Dot3(ax,ay,az,bx,by,bz)
  %1485 = call float @dx.op.unary.f32(i32 25, float %1482)  ; Rsqrt(value)
  %1486 = call float @dx.op.unary.f32(i32 25, float %1484)  ; Rsqrt(value)
  %1487 = fmul fast float %1486, %1485
  %1488 = call float @dx.op.dot3.f32(i32 55, float %1475, float %1476, float %1477, float %1478, float %1479, float %1480)  ; Dot3(ax,ay,az,bx,by,bz)
  %1489 = fmul fast float %1488, 5.000000e-01
  %1490 = fadd fast float %1489, %1123
  %1491 = fmul fast float %1490, %1487
  %1492 = fadd fast float %1491, 5.000000e-01
  %1493 = fdiv fast float %1487, %1492
  br label %1497

; <label>:1494                                    ; preds = %1470
  %1495 = fadd fast float %1482, %1123
  %1496 = fdiv fast float 1.000000e+00, %1495
  br label %1497

; <label>:1497                                    ; preds = %1494, %1483
  %1498 = phi float [ %1493, %1483 ], [ %1496, %1494 ]
  %1499 = select i1 %1186, float %1498, float 1.000000e+00
  br label %1500

; <label>:1500                                    ; preds = %1497, %1353, %1344
  %1501 = phi float [ %1499, %1497 ], [ 0.000000e+00, %1344 ], [ %1469, %1353 ]
  %1502 = fsub fast float -0.000000e+00, %581
  %1503 = fsub fast float -0.000000e+00, %582
  %1504 = fsub fast float -0.000000e+00, %583
  %1505 = call float @dx.op.dot3.f32(i32 55, float %1201, float %1202, float %1203, float %1502, float %1503, float %1504)  ; Dot3(ax,ay,az,bx,by,bz)
  %1506 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %36, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %1507 = extractvalue %dx.types.CBufRet.f32 %1506, 1
  %1508 = fmul fast float %1507, %1507
  %1509 = fsub fast float 1.000000e+00, %1508
  %1510 = fmul fast float %1505, 2.000000e+00
  %1511 = fadd fast float %1510, %1507
  %1512 = fmul fast float %1511, %1507
  %1513 = fadd fast float %1512, 1.000000e+00
  %1514 = call float @dx.op.unary.f32(i32 24, float %1513)  ; Sqrt(value)
  %1515 = fmul fast float %1514, 0x402921FB60000000
  %1516 = fmul fast float %1515, %1513
  %1517 = fdiv fast float %1509, %1516
  %1518 = fmul fast float %1237, %1160
  %1519 = fmul fast float %1518, %1501
  %1520 = fmul fast float %1519, %1517
  %1521 = fmul fast float %1520, %1152
  %1522 = fmul fast float %1520, %1153
  %1523 = fmul fast float %1520, %1154
  %1524 = fadd fast float %1521, %1127
  %1525 = fadd fast float %1522, %1128
  %1526 = fadd fast float %1523, %1129
  br label %1527

; <label>:1527                                    ; preds = %1500, %1126
  %1528 = phi float [ %1524, %1500 ], [ %1127, %1126 ]
  %1529 = phi float [ %1525, %1500 ], [ %1128, %1126 ]
  %1530 = phi float [ %1526, %1500 ], [ %1129, %1126 ]
  %1531 = add nuw i32 %1130, 1
  %1532 = icmp eq i32 %1531, %1053
  br i1 %1532, label %1533, label %1126, !llvm.loop !50

; <label>:1533                                    ; preds = %1527
  br label %1534

; <label>:1534                                    ; preds = %1533, %1090
  %1535 = phi float [ %1026, %1090 ], [ %1528, %1533 ]
  %1536 = phi float [ %1027, %1090 ], [ %1529, %1533 ]
  %1537 = phi float [ %1028, %1090 ], [ %1530, %1533 ]
  %1538 = add nuw nsw i32 %416, 1
  %1539 = icmp ult i32 %1538, %411
  br i1 %1539, label %412, label %1540

; <label>:1540                                    ; preds = %1534
  %1541 = uitofp i32 %411 to float
  %1542 = fdiv fast float %1535, %1541
  %1543 = fdiv fast float %1536, %1541
  %1544 = fdiv fast float %1537, %1541
  %1545 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %35, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1546 = extractvalue %dx.types.CBufRet.f32 %1545, 2
  %1547 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1548 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1547, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1549 = extractvalue %dx.types.ResRet.f32 %1548, 0
  %1550 = extractvalue %dx.types.ResRet.f32 %1548, 1
  %1551 = extractvalue %dx.types.ResRet.f32 %1548, 2
  %1552 = fmul fast float %1549, %1546
  %1553 = fmul fast float %1550, %1546
  %1554 = fmul fast float %1551, %1546
  %1555 = fadd fast float %1552, %1542
  %1556 = fadd fast float %1553, %1543
  %1557 = fadd fast float %1554, %1544
  %1558 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1559 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1558, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1560 = extractvalue %dx.types.ResRet.f32 %1559, 0
  %1561 = extractvalue %dx.types.ResRet.f32 %1559, 1
  %1562 = extractvalue %dx.types.ResRet.f32 %1559, 2
  %1563 = extractvalue %dx.types.ResRet.f32 %1559, 3
  %1564 = call float @dx.op.dot3.f32(i32 55, float %1560, float %1561, float %1562, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %1565 = fadd fast float %1563, %1564
  %1566 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %36, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %1567 = extractvalue %dx.types.CBufRet.i32 %1566, 0
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1575, label %1569, !dx.controlflow.hints !52

; <label>:1569                                    ; preds = %1540
  %1570 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1571 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1570, i32 0, i32 %37, i32 %38, i32 %39, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1572 = extractvalue %dx.types.ResRet.f32 %1571, 0
  %1573 = extractvalue %dx.types.ResRet.f32 %1571, 1
  %1574 = extractvalue %dx.types.ResRet.f32 %1571, 2
  br label %1575

; <label>:1575                                    ; preds = %1569, %1540
  %1576 = phi float [ %1572, %1569 ], [ 0.000000e+00, %1540 ]
  %1577 = phi float [ %1573, %1569 ], [ 0.000000e+00, %1540 ]
  %1578 = phi float [ %1574, %1569 ], [ 0.000000e+00, %1540 ]
  %1579 = extractvalue %dx.types.CBufRet.f32 %1545, 1
  %1580 = fmul fast float %1560, %1555
  %1581 = fmul fast float %1561, %1556
  %1582 = fmul fast float %1562, %1557
  %1583 = fadd fast float %1576, %1580
  %1584 = fadd fast float %1577, %1581
  %1585 = fadd fast float %1578, %1582
  %1586 = fmul fast float %1579, %1583
  %1587 = fmul fast float %1579, %1584
  %1588 = fmul fast float %1579, %1585
  %1589 = fcmp fast ogt float %397, 0.000000e+00
  br i1 %1589, label %1590, label %1616, !dx.controlflow.hints !53

; <label>:1590                                    ; preds = %1575
  %1591 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %1592 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1593 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1591, %dx.types.Handle %1592, float %378, float %379, float %374, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1594 = extractvalue %dx.types.ResRet.f32 %1593, 0
  %1595 = extractvalue %dx.types.ResRet.f32 %1593, 1
  %1596 = extractvalue %dx.types.ResRet.f32 %1593, 2
  %1597 = extractvalue %dx.types.ResRet.f32 %1593, 3
  %1598 = extractvalue %dx.types.CBufRet.f32 %791, 1
  %1599 = fmul fast float %1579, %1598
  %1600 = fmul fast float %1599, %1594
  %1601 = fmul fast float %1599, %1595
  %1602 = fmul fast float %1599, %1596
  %1603 = fmul fast float %1599, %1597
  %1604 = fsub fast float %1600, %1586
  %1605 = fsub fast float %1601, %1587
  %1606 = fsub fast float %1602, %1588
  %1607 = fsub fast float %1603, %1565
  %1608 = fmul fast float %1604, %397
  %1609 = fmul fast float %1605, %397
  %1610 = fmul fast float %1606, %397
  %1611 = fmul fast float %1607, %397
  %1612 = fadd fast float %1608, %1586
  %1613 = fadd fast float %1609, %1587
  %1614 = fadd fast float %1610, %1588
  %1615 = fadd fast float %1611, %1565
  br label %1616

; <label>:1616                                    ; preds = %1590, %1575
  %1617 = phi float [ %1612, %1590 ], [ %1586, %1575 ]
  %1618 = phi float [ %1613, %1590 ], [ %1587, %1575 ]
  %1619 = phi float [ %1614, %1590 ], [ %1588, %1575 ]
  %1620 = phi float [ %1615, %1590 ], [ %1565, %1575 ]
  %1621 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %32, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1622 = extractvalue %dx.types.CBufRet.i32 %1621, 0
  %1623 = extractvalue %dx.types.CBufRet.i32 %1621, 1
  %1624 = extractvalue %dx.types.CBufRet.i32 %1621, 2
  %1625 = icmp slt i32 %37, %1622
  %1626 = icmp slt i32 %38, %1623
  %1627 = icmp slt i32 %39, %1624
  %1628 = and i1 %1625, %1626
  %1629 = and i1 %1627, %1628
  br i1 %1629, label %1630, label %1644

; <label>:1630                                    ; preds = %1616
  %1631 = bitcast float %1617 to i32
  %1632 = bitcast float %1618 to i32
  %1633 = bitcast float %1619 to i32
  %1634 = bitcast float %1620 to i32
  %1635 = icmp ult i32 %1631, 2139095040
  %1636 = icmp ult i32 %1632, 2139095040
  %1637 = icmp ult i32 %1633, 2139095040
  %1638 = icmp ult i32 %1634, 2139095040
  %1639 = select i1 %1635, float %1617, float 0.000000e+00
  %1640 = select i1 %1636, float %1618, float 0.000000e+00
  %1641 = select i1 %1637, float %1619, float 0.000000e+00
  %1642 = select i1 %1638, float %1620, float 0.000000e+00
  %1643 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1643, i32 %37, i32 %38, i32 %39, float %1639, float %1640, float %1641, float %1642, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1644

; <label>:1644                                    ; preds = %1630, %1616, %203
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!42}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !27, !29, !35}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !9}
!15 = !{i32 7, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 10, i32 0, !9}
!16 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !7}
!17 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !7}
!18 = !{i32 10, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 4, i32 0, !9}
!19 = !{i32 11, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !9}
!20 = !{i32 12, %"class.Texture2D<float>"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !9}
!21 = !{i32 13, %"class.Texture2D<float>"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !9}
!22 = !{i32 14, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 4, i32 0, !9}
!23 = !{i32 15, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 4, i32 0, !9}
!24 = !{i32 16, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 16, i32 1, i32 4, i32 0, !9}
!25 = !{i32 17, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 17, i32 1, i32 4, i32 0, !9}
!26 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!27 = !{!28}
!28 = !{i32 0, %"class.RWTexture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !9}
!29 = !{!30, !31, !32, !33, !34}
!30 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 1380, null}
!31 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!32 = !{i32 2, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 2, i32 1, i32 708, null}
!33 = !{i32 3, %UniformBufferConstants_LumenGIVolumeStruct* undef, !"", i32 0, i32 3, i32 1, i32 572, null}
!34 = !{i32 4, %UniformBufferConstants_VolumetricFog* undef, !"", i32 0, i32 4, i32 1, i32 104, null}
!35 = !{!36, !37, !38, !39, !40, !41}
!36 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!37 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!38 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!39 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!40 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!41 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!42 = !{void ()* @LightScatteringCS, !"LightScatteringCS", null, !4, !43}
!43 = !{i32 4, !44, i32 5, !45}
!44 = !{i32 4, i32 4, i32 4}
!45 = !{i32 0}
!46 = distinct !{!46, !"dx.controlflow.hints", i32 2}
!47 = distinct !{!47, !"dx.controlflow.hints", i32 1}
!48 = distinct !{!48, !"dx.controlflow.hints", i32 1}
!49 = distinct !{!49, !"dx.controlflow.hints", i32 1}
!50 = distinct !{!50, !51}
!51 = !{!"llvm.loop.unroll.disable"}
!52 = distinct !{!52, !"dx.controlflow.hints", i32 1}
!53 = distinct !{!53, !"dx.controlflow.hints", i32 1}
