#line 1 "MoveShaderParametersToRootConstantBuffer"
cbuffer _RootShaderParameters
{
float DiffuseColorBoost : packoffset(c3);
float SkylightLeaking : packoffset(c3.y);
float SkylightLeakingRoughness : packoffset(c3.z);
float InvFullSkylightLeakingDistance : packoffset(c3.w);
uint SampleHeightFog : packoffset(c4);
uint SurfaceCacheUpdateFrameIndex : packoffset(c10.w);
float ReprojectionRadiusScale : packoffset(c16);
float InvClipmapFadeSize : packoffset(c16.w);
uint2 ProbeAtlasResolutionInProbes : packoffset(c17);
uint RadianceProbeClipmapResolution : packoffset(c17.z);
uint NumRadianceProbeClipmaps : packoffset(c17.w);
uint RadianceProbeResolution : packoffset(c18);
uint FinalProbeResolution : packoffset(c18.y);
uint FinalRadianceAtlasMaxMip : packoffset(c18.z);
uint CalculateIrradiance : packoffset(c18.w);
uint IrradianceProbeResolution : packoffset(c19);
uint OcclusionProbeResolution : packoffset(c19.y);
float4 RadianceProbeSettings[6] : packoffset(c23);
float4 PaddedWorldPositionToRadianceProbeCoordBias[6] : packoffset(c29);
float4 PaddedRadianceProbeCoordToWorldPositionBias[6] : packoffset(c35);
float2 InvProbeFinalRadianceAtlasResolution : packoffset(c41);
float2 InvProbeFinalIrradianceAtlasResolution : packoffset(c41.z);
float2 InvProbeDepthAtlasResolution : packoffset(c42);
uint OverrideCacheOcclusionLighting : packoffset(c42.z);
uint ShowBlackRadianceCacheLighting : packoffset(c42.w);
uint ProbeAtlasResolutionModuloMask : packoffset(c43);
uint ProbeAtlasResolutionDivideShift : packoffset(c43.y);
float3 TranslucencyGIGridZParams : packoffset(c45);
uint TranslucencyGIGridPixelSizeShift : packoffset(c45.w);
uint3 TranslucencyGIGridSize : packoffset(c46);
uint UseJitter : packoffset(c46.w);
float3 FrameJitterOffset : packoffset(c47);
float4x4 UnjitteredClipToTranslatedWorld : packoffset(c48);
uint TranslucencyVolumeTracingOctahedronResolution : packoffset(c52);
float HZBMipLevel : packoffset(c53);
float2 ViewportUVToHZBBufferUV : packoffset(c53.z);
float StepFactor : packoffset(c54);
float MaxTraceDistance : packoffset(c54.y);
float VoxelTraceStartDistanceScale : packoffset(c54.z);
float MaxRayIntensity : packoffset(c54.w);
}

#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6
// #define __SHADER_TARGET_MINOR 6
// #define ALLOW_STATIC_LIGHTING 1
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 1
// #define COMPILER_SUPPORTS_HLSL2021 1
// #define COMPUTESHADER 1
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define ENABLE_DYNAMIC_SKY_LIGHT 0
// #define FORWARD_SHADING 0
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 1
// #define GBUFFER_REFACTOR 1
// #define GEOMETRYSHADER 0
// #define HAS_INVERTED_Z_BUFFER 1
// #define INSTANCED_STEREO 0
// #define IRIS_NORMAL 0
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MESHSHADER 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define PIXELSHADER 0
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1
// #define PLATFORM_SUPPORTS_BINDLESS 0
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 1
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_UB_STRUCT 1
// #define POST_PROCESS_ALPHA 0
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_OIT 0
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1
// #define PROJECT_SUPPORTS_LUMEN 1
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define SM6_PROFILE 1
// #define STRATA_ADVANCED_DEBUG_ENABLED 0
// #define STRATA_ENABLED 0
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0
// #define STRATA_USE_ACCURATE_SRGB 0
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0
// #define SUPPORT_VSM_FOWARD_QUALITY 0
// #define THREADGROUP_SIZE 8
// #define TRACE_FROM_VOLUME 1
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_DBUFFER 1
// #define USE_GLOBAL_GPU_SCENE_DATA 1
// #define USE_RADIANCE_CACHE 0
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line   1 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"






#line   7 "/Engine/Private/Common.ush"


#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"



























	
#line  10 "/Engine/Public/Platform/D3D/D3DCommon.ush"

	
	


precise float MakePrecise(float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(float4 v) { precise float4 pv = v; return pv; }





SamplerState D3DStaticPointWrappedSampler       : register(s0, space1000);
SamplerState D3DStaticPointClampedSampler       : register(s1, space1000);
SamplerState D3DStaticBilinearWrappedSampler    : register(s2, space1000);
SamplerState D3DStaticBilinearClampedSampler    : register(s3, space1000);
SamplerState D3DStaticTrilinearWrappedSampler   : register(s4, space1000);
SamplerState D3DStaticTrilinearClampedSampler   : register(s5, space1000);











RWStructuredBuffer<uint> UEDiagnosticBuffer : register(u0, space999);

void UEReportAssertWithPayload(uint AssertID, uint4 Payload)
{
	if (WaveIsFirstLane())
	{
		
		uint OldValue = 0;
		InterlockedAdd(UEDiagnosticBuffer[0], 1, OldValue);
		if (OldValue == 0)
		{
			UEDiagnosticBuffer[1] = AssertID;
			UEDiagnosticBuffer[2] = Payload.x;
			UEDiagnosticBuffer[3] = Payload.y;
			UEDiagnosticBuffer[4] = Payload.z;
			UEDiagnosticBuffer[5] = Payload.w;
		}
		
		
		for (;;)
		{
			InterlockedAdd(UEDiagnosticBuffer[0], 0, OldValue);
			if (OldValue == 0)
			{
				break;
			}
		}
	}
}












	
	

	
	

	
	
	

	
	
	



	

	






	
	

	
		

		uint64_t PackUlongType(uint2 Value)
		{
			return ((uint64_t)Value.y << 32) | Value.x;
		}

		uint2 UnpackUlongType(uint64_t Value)
		{
			return uint2(uint(Value), uint(Value >> 32));
		}
	

	
		void ImageInterlockedMaxUInt64(RWTexture2D<uint64_t> Dest, uint2 Coord, uint64_t Value)
		{
			InterlockedMax(Dest[Coord], Value);
		}
	







#line  36 "/Engine/Public/Platform.ush"



#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  70 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  39 "/Engine/Public/Platform.ush"




#line   6 "/Engine/Public/ShaderVersion.ush"
#line  43 "/Engine/Public/Platform.ush"








































































































































































	











	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	















	
	

#line 322 "/Engine/Public/Platform.ush"














































	
	
	
	
	

















































	
















































































void ShaderYield()
{
	
}



















































































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}

#line 891 "/Engine/Public/Platform.ush"








#line 925 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 976 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}







#line 1126 "/Engine/Public/Platform.ush"



uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}




















uint MaskedBitCount( uint2 Bits )
{
	return MaskedBitCount( Bits, WaveGetLaneIndex() );
}



uint2 WaveBallot( bool Expr )
{
	return WaveActiveBallot( Expr ).xy;
}



uint WaveGetActiveLaneIndexLast()
{
	uint2 ActiveMask = WaveActiveBallot( true ).xy;
	return firstbithigh( ActiveMask.y ? ActiveMask.y : ActiveMask.x ) + ( ActiveMask.y ? 32 : 0 );
}





















	
	




	


		
	




















#line   9 "/Engine/Private/Common.ush"











	
	
	
	
	
	
	
	
	


struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};

struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FloatDeriv4
{
	float4 Value;
	float4 Ddx;
	float4 Ddy;
};

FloatDeriv ConstructFloatDeriv(float InValue, float InDdx, float InDdy)
{
	FloatDeriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv3 ConstructFloatDeriv3(float3 InValue, float3 InDdx, float3 InDdy)
{
	FloatDeriv3 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv4 ConstructFloatDeriv4(float4 InValue, float4 InDdx, float4 InDdy)
{
	FloatDeriv4 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}















const static float PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max11BitsFloat = 65024.0f;
const static float Max10BitsFloat = 64512.0f;
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);


















	


		
	



















	





	



#line   3 "/Engine/Private/GeneratedUniformBufferTypes.ush"





#line   3 "/Engine/Private/Nanite/NanitePackedNaniteView.ush"


struct FPackedNaniteView
{
	float4x4	SVPositionToTranslatedWorld;
	float4x4	ViewToTranslatedWorld;

	float4x4	TranslatedWorldToView;
	float4x4	TranslatedWorldToClip;
	float4x4	TranslatedWorldToSubpixelClip;	
	float4x4	ViewToClip;
	float4x4	ClipToRelativeWorld;

	float4x4	PrevTranslatedWorldToView;
	float4x4	PrevTranslatedWorldToClip;
	float4x4	PrevViewToClip;
	float4x4	PrevClipToRelativeWorld;

	int4		ViewRect;
	float4		ViewSizeAndInvSize;
	float4		ClipSpaceScaleOffset;
	float3		RelativePreViewTranslation;
	float		ViewTilePositionX;
	float3		RelativePrevPreViewTranslation;
	float		ViewTilePositionY;
	float3		RelativeWorldCameraOrigin;
	float		ViewTilePositionZ;
	float3		DrawDistanceOriginTranslatedWorld;
	float		RangeBasedCullingDistance;
	float3		ViewForward;
	float 		NearPlane;

	float4		TranslatedGlobalClipPlane; 

	float3		MatrixTilePosition;
	float		Padding1;

	float2		LODScales;
	float		MinBoundsRadiusSq;
	uint		StreamingPriorityCategory_AndFlags;

	int4		TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;

	int4		HZBTestViewRect;
};
#line   8 "/Engine/Private/GeneratedUniformBufferTypes.ush"



#line   3 "/Engine/Private/HairStrands/HairStrandsVisibilityCommonStruct.ush"


struct FPackedHairSample
{
	float Depth;
	uint  PrimitiveID_MacroGroupID;
	uint  Tangent_Coverage8bit;
	uint  BaseColor_Roughness;
	uint  Specular_LightChannels_Backlit;
};

struct FPackedHairVis
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
};

struct FPackedHairVisPPLL
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
	uint NextNodeIndex;
};
#line  11 "/Engine/Private/GeneratedUniformBufferTypes.ush"

#line   3 "/Engine/Private/HairStrands/HairStrandsVoxelPageCommonStruct.ush"


struct FPackedVirtualVoxelNodeDesc  
{
	float3	TranslatedWorldMinAABB;
	uint	PackedPageIndexResolution; 
	float3	TranslatedWorldMaxAABB;
	uint	PageIndexOffset_VoxelWorldSize;
}; 

struct FVoxelizationViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3   ViewForward;
	float    Pad0;
	uint2    RasterResolution;
	float2   Pad1;
};  
#line  12 "/Engine/Private/GeneratedUniformBufferTypes.ush"

#line   3 "/Engine/Private/HairStrands/HairStrandsDeepShadowCommonStruct.ush"


struct FDeepShadowViewInfo
{
	float4x4 TranslatedWorldToClipScaledBiased; 
	float4x4 TranslatedWorldToClip;
	float4 AtlasScaleBias; 
	float3   ViewForward;
	float    MinRadiusAtDepth1;
};
#line  13 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 166 "/Engine/Private/Common.ush"



#line   1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line   2 "/Engine/Generated/UniformBuffers/View.ush"

cbuffer  UniformBufferConstants_View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_TranslatedWorldToSubpixelClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_1036;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_1052;
	 float3  View_ViewForward;
	 float  PrePadding_View_1068;
	 float3  View_ViewUp;
	 float  PrePadding_View_1084;
	 float3  View_ViewRight;
	 float  PrePadding_View_1100;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1116;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1132;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1180;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1196;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1212;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1228;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1692;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1708;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1724;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1740;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float  PrePadding_View_2188;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2260;
	 float  PrePadding_View_2264;
	 float  PrePadding_View_2268;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2344;
	 float  PrePadding_View_2348;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2380;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2540;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2556;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2572;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2764;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2920;
	 float  PrePadding_View_2924;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2952;
	 float  PrePadding_View_2956;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3160;
	 float  PrePadding_View_3164;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3580;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3596;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3660;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3676;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3692;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogScreenUVToHistoryVolumeUV;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3716;
	 float  PrePadding_View_3720;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3740;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3756;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3796;
	 float  PrePadding_View_3800;
	 float  PrePadding_View_3804;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3864;
	 uint  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3896;
	 float  PrePadding_View_3900;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3932;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_InstanceSceneDataSOAStride;
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4564;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4572;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4580;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4588;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4596;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4604;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4612;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4652;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4660;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4668;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4676;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4684;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4692;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4724;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4732;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4740;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4748;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4756;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4804;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4828;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4836;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4844;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4900;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4908;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4916;
	 uint BindlessResource_View_PrimitiveSceneData ;
	 uint  PrePadding_View_4924;
	 uint BindlessResource_View_InstanceSceneData ;
	 uint  PrePadding_View_4932;
	 uint BindlessResource_View_InstancePayloadData ;
	 uint  PrePadding_View_4940;
	 uint BindlessResource_View_LightmapSceneData ;
	 uint  PrePadding_View_4948;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4956;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_4996;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5004;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5012;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5020;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5028;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5036;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5044;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5052;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5060;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5068;
	 uint BindlessResource_View_LTCMatTexture ;
	 uint  PrePadding_View_5076;
	 uint BindlessSampler_View_LTCMatSampler ;
	 uint  PrePadding_View_5084;
	 uint BindlessResource_View_LTCAmpTexture ;
	 uint  PrePadding_View_5092;
	 uint BindlessSampler_View_LTCAmpSampler ;
	 uint  PrePadding_View_5100;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5140;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5148;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5156;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5164;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5196;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5204;
	 uint  PrePadding_View_5208;
	 uint  PrePadding_View_5212;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5236;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5252;
	 uint  PrePadding_View_5256;
	 uint  PrePadding_View_5260;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5300;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5324;
	 uint BindlessResource_View_EditorVisualizeLevelInstanceIds ;
	 uint  PrePadding_View_5332;
	 uint BindlessResource_View_EditorSelectedHitProxyIds ;
	 uint  PrePadding_View_5340;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5348;
	 uint  PrePadding_View_5352;
	 uint  PrePadding_View_5356;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5372;
	 float3  View_TLASViewTilePosition;
}
  SamplerState  View_MaterialTextureBilinearWrapedSampler ;
  SamplerState  View_MaterialTextureBilinearClampedSampler ;
  Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture ;
  Texture3D  View_VolumetricLightmapBrickAmbientVector ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients0 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients1 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients2 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients3 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients4 ;
  Texture3D  View_VolumetricLightmapBrickSHCoefficients5 ;
  Texture3D  View_SkyBentNormalBrickTexture ;
  Texture3D  View_DirectionalLightShadowingBrickTexture ;
  SamplerState  View_VolumetricLightmapBrickAmbientVectorSampler ;
  SamplerState  View_VolumetricLightmapTextureSampler0 ;
  SamplerState  View_VolumetricLightmapTextureSampler1 ;
  SamplerState  View_VolumetricLightmapTextureSampler2 ;
  SamplerState  View_VolumetricLightmapTextureSampler3 ;
  SamplerState  View_VolumetricLightmapTextureSampler4 ;
  SamplerState  View_VolumetricLightmapTextureSampler5 ;
  SamplerState  View_SkyBentNormalTextureSampler ;
  SamplerState  View_DirectionalLightShadowingTextureSampler ;
  Texture3D  View_GlobalDistanceFieldPageAtlasTexture ;
  Texture3D  View_GlobalDistanceFieldCoverageAtlasTexture ;
  Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture ;
  Texture3D  View_GlobalDistanceFieldMipTexture ;
  Texture2D  View_AtmosphereTransmittanceTexture ;
  SamplerState  View_AtmosphereTransmittanceTextureSampler ;
  Texture2D  View_AtmosphereIrradianceTexture ;
  SamplerState  View_AtmosphereIrradianceTextureSampler ;
  Texture3D  View_AtmosphereInscatterTexture ;
  SamplerState  View_AtmosphereInscatterTextureSampler ;
  Texture2D  View_PerlinNoiseGradientTexture ;
  SamplerState  View_PerlinNoiseGradientTextureSampler ;
  Texture3D  View_PerlinNoise3DTexture ;
  SamplerState  View_PerlinNoise3DTextureSampler ;
  Texture2D<uint>  View_SobolSamplingTexture ;
  SamplerState  View_SharedPointWrappedSampler ;
  SamplerState  View_SharedPointClampedSampler ;
  SamplerState  View_SharedBilinearWrappedSampler ;
  SamplerState  View_SharedBilinearClampedSampler ;
  SamplerState  View_SharedBilinearAnisoClampedSampler ;
  SamplerState  View_SharedTrilinearWrappedSampler ;
  SamplerState  View_SharedTrilinearClampedSampler ;
  Texture2D  View_PreIntegratedBRDF ;
  SamplerState  View_PreIntegratedBRDFSampler ;
  StructuredBuffer<float4>  View_PrimitiveSceneData ;
  StructuredBuffer<float4>  View_InstanceSceneData ;
  StructuredBuffer<float4>  View_InstancePayloadData ;
  StructuredBuffer<float4>  View_LightmapSceneData ;
  StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap ;
  Texture2D  View_TransmittanceLutTexture ;
  SamplerState  View_TransmittanceLutTextureSampler ;
  Texture2D  View_SkyViewLutTexture ;
  SamplerState  View_SkyViewLutTextureSampler ;
  Texture2D  View_DistantSkyLightLutTexture ;
  SamplerState  View_DistantSkyLightLutTextureSampler ;
  Texture3D  View_CameraAerialPerspectiveVolume ;
  SamplerState  View_CameraAerialPerspectiveVolumeSampler ;
  Texture3D  View_CameraAerialPerspectiveVolumeMieOnly ;
  SamplerState  View_CameraAerialPerspectiveVolumeMieOnlySampler ;
  Texture3D  View_CameraAerialPerspectiveVolumeRayOnly ;
  SamplerState  View_CameraAerialPerspectiveVolumeRayOnlySampler ;
  Texture3D  View_HairScatteringLUTTexture ;
  SamplerState  View_HairScatteringLUTSampler ;
  Texture2D  View_LTCMatTexture ;
  SamplerState  View_LTCMatSampler ;
  Texture2D  View_LTCAmpTexture ;
  SamplerState  View_LTCAmpSampler ;
  Texture2D<float2>  View_ShadingEnergyGGXSpecTexture ;
  Texture3D<float2>  View_ShadingEnergyGGXGlassTexture ;
  Texture2D<float2>  View_ShadingEnergyClothSpecTexture ;
  Texture2D<float>  View_ShadingEnergyDiffuseTexture ;
  SamplerState  View_ShadingEnergySampler ;
  Texture2D  View_SSProfilesTexture ;
  SamplerState  View_SSProfilesSampler ;
  SamplerState  View_SSProfilesTransmissionSampler ;
  Texture2DArray  View_SSProfilesPreIntegratedTexture ;
  SamplerState  View_SSProfilesPreIntegratedSampler ;
  Buffer<float4>  View_WaterIndirection ;
  Buffer<float4>  View_WaterData ;
  Texture2D<float4>  View_RectLightAtlasTexture ;
  SamplerState  View_RectLightAtlasSampler ;
  Texture2DArray<float>  View_IESAtlasTexture ;
  SamplerState  View_IESAtlasSampler ;
  SamplerState  View_LandscapeWeightmapSampler ;
  Buffer<uint>  View_LandscapeIndirection ;
  Buffer<float>  View_LandscapePerComponentData ;
  RWBuffer<uint>  View_VTFeedbackBuffer ;
  Buffer<uint>  View_EditorVisualizeLevelInstanceIds ;
  Buffer<uint>  View_EditorSelectedHitProxyIds ;
  Buffer<float>  View_PhysicsFieldClipmapBuffer ;
static const struct
{
	 float4x4  TranslatedWorldToClip;
	 float4x4  TranslatedWorldToSubpixelClip;
	 float4x4  RelativeWorldToClip;
	 float4x4  ClipToRelativeWorld;
	 float4x4  TranslatedWorldToView;
	 float4x4  ViewToTranslatedWorld;
	 float4x4  TranslatedWorldToCameraView;
	 float4x4  CameraViewToTranslatedWorld;
	 float4x4  ViewToClip;
	 float4x4  ViewToClipNoAA;
	 float4x4  ClipToView;
	 float4x4  ClipToTranslatedWorld;
	 float4x4  SVPositionToTranslatedWorld;
	 float4x4  ScreenToRelativeWorld;
	 float4x4  ScreenToTranslatedWorld;
	 float4x4  MobileMultiviewShadowTransform;
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 float3  ViewForward;
	 float3  ViewUp;
	 float3  ViewRight;
	 float3  HMDViewNoRollUp;
	 float3  HMDViewNoRollRight;
	 float4  InvDeviceZToWorldZTransform;
	 float4  ScreenPositionScaleBias;
	 float3  RelativeWorldCameraOrigin;
	 float3  TranslatedWorldCameraOrigin;
	 float3  RelativeWorldViewOrigin;
	 float3  RelativePreViewTranslation;
	 float4x4  PrevViewToClip;
	 float4x4  PrevClipToView;
	 float4x4  PrevTranslatedWorldToClip;
	 float4x4  PrevTranslatedWorldToView;
	 float4x4  PrevViewToTranslatedWorld;
	 float4x4  PrevTranslatedWorldToCameraView;
	 float4x4  PrevCameraViewToTranslatedWorld;
	 float3  PrevTranslatedWorldCameraOrigin;
	 float3  PrevRelativeWorldCameraOrigin;
	 float3  PrevRelativeWorldViewOrigin;
	 float3  RelativePrevPreViewTranslation;
	 float4x4  PrevClipToRelativeWorld;
	 float4x4  PrevScreenToTranslatedWorld;
	 float4x4  ClipToPrevClip;
	 float4x4  ClipToPrevClipWithAA;
	 float4  TemporalAAJitter;
	 float4  GlobalClippingPlane;
	 float2  FieldOfViewWideAngles;
	 float2  PrevFieldOfViewWideAngles;
	 float4  ViewRectMin;
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax;
	 float4  ScreenToViewSpace;
	 float2  BufferToSceneTextureScale;
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 float4  DiffuseOverrideParameter;
	 float4  SpecularOverrideParameter;
	 float4  NormalOverrideParameter;
	 float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 float  OutOfBoundsMask;
	 float3  WorldCameraMovementSinceLastFrame;
	 float  CullingSign;
	 float  NearPlane;
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 float  CameraCut;
	 float  UnlitViewmodeMask;
	 float4  DirectionalLightColor;
	 float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float  HMDEyePaddingOffset;
	 float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  StereoPassIndex;
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogScreenUVToHistoryVolumeUV;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  InstanceSceneDataSOAStride;
	 uint  GPUSceneViewId;
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 uint  bShadingEnergyConservation;
	 uint  bShadingEnergyPreservation;
	 float4  RectLightAtlasSizeAndInvSize;
	 float  RectLightAtlasMaxMipLevel;
	 float4  IESAtlasSizeAndInvSize;
	 float3  TLASRelativePreViewTranslation;
	 float3  TLASViewTilePosition;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	StructuredBuffer<float4> InstanceSceneData;
	StructuredBuffer<float4> InstancePayloadData;
	StructuredBuffer<float4> LightmapSceneData;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D CameraAerialPerspectiveVolumeMieOnly;
	SamplerState CameraAerialPerspectiveVolumeMieOnlySampler;
	Texture3D CameraAerialPerspectiveVolumeRayOnly;
	SamplerState CameraAerialPerspectiveVolumeRayOnlySampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D LTCMatTexture;
	SamplerState LTCMatSampler;
	Texture2D LTCAmpTexture;
	SamplerState LTCAmpSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Texture2D<float4> RectLightAtlasTexture;
	SamplerState RectLightAtlasSampler;
	Texture2DArray<float> IESAtlasTexture;
	SamplerState IESAtlasSampler;
	SamplerState LandscapeWeightmapSampler;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWBuffer<uint> VTFeedbackBuffer;
	Buffer<uint> EditorVisualizeLevelInstanceIds;
	Buffer<uint> EditorSelectedHitProxyIds;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_TranslatedWorldToSubpixelClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_ViewRectMinAndSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_BufferToSceneTextureScale,View_ResolutionFractionAndInv,View_NumSceneColorMSAASamples,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_WorldIsPaused,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle_PPTrans,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeTranslatedCenterAndExtent,View_GlobalVolumeTranslatedWorldToUVAddAndMul,View_GlobalDistanceFieldMipTranslatedWorldToUVScale,View_GlobalDistanceFieldMipTranslatedWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_CoveredExpandSurfaceScale,View_NotCoveredExpandSurfaceScale,View_NotCoveredMinStepScale,View_DitheredTransparencyStepThreshold,View_DitheredTransparencyTraceThreshold,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogScreenUVToHistoryVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_InstanceSceneDataSOAStride,View_GPUSceneViewId,View_ViewResolutionFraction,View_SubSurfaceColorAsTransmittanceAtDistanceInMeters,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_RectLightAtlasSizeAndInvSize,View_RectLightAtlasMaxMipLevel,View_IESAtlasSizeAndInvSize,View_TLASRelativePreViewTranslation,View_TLASViewTilePosition,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,View_PrimitiveSceneData,View_InstanceSceneData,View_InstancePayloadData,View_LightmapSceneData,View_SkyIrradianceEnvironmentMap,View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_CameraAerialPerspectiveVolumeMieOnly,View_CameraAerialPerspectiveVolumeMieOnlySampler,View_CameraAerialPerspectiveVolumeRayOnly,View_CameraAerialPerspectiveVolumeRayOnlySampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_LTCMatTexture,View_LTCMatSampler,View_LTCAmpTexture,View_LTCAmpSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,View_WaterIndirection,View_WaterData,View_RectLightAtlasTexture,View_RectLightAtlasSampler,View_IESAtlasTexture,View_IESAtlasSampler,View_LandscapeWeightmapSampler,View_LandscapeIndirection,View_LandscapePerComponentData,View_VTFeedbackBuffer,View_EditorVisualizeLevelInstanceIds,View_EditorSelectedHitProxyIds,View_PhysicsFieldClipmapBuffer,};

#line   1 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/Strata.ush"

cbuffer  UniformBufferConstants_Strata 
{
	 uint  Strata_MaxBytesPerPixel;
	 uint  Strata_bRoughDiffuse;
	 uint  Strata_PeelLayersAboveDepth;
	 uint  Strata_bRoughnessTracking;
	 int  Strata_SliceStoringDebugStrataTreeData;
	 int  Strata_FirstSliceStoringStrataSSSData;
	 uint  Strata_TileSize;
	 uint  Strata_TileSizeLog2;
	 int2  Strata_TileCount;
	 int2  Strata_TileOffset;
	 int2  Strata_OverflowTileCount;
	 int2  Strata_OverflowTileOffset;
	 uint BindlessResource_Strata_MaterialTextureArray ;
	 uint  PrePadding_Strata_68;
	 uint BindlessResource_Strata_TopLayerTexture ;
	 uint  PrePadding_Strata_76;
	 uint BindlessResource_Strata_OpaqueRoughRefractionTexture ;
	 uint  PrePadding_Strata_84;
	 uint BindlessResource_Strata_BSDFOffsetTexture ;
	 uint  PrePadding_Strata_92;
	 uint BindlessResource_Strata_BSDFTileTexture ;
	 uint  PrePadding_Strata_100;
	 uint BindlessResource_Strata_BSDFTileCountBuffer ;
}
  Texture2DArray<uint>  Strata_MaterialTextureArray ;
  Texture2D<uint2>  Strata_TopLayerTexture ;
  Texture2D<float3>  Strata_OpaqueRoughRefractionTexture ;
  Texture2D<uint>  Strata_BSDFOffsetTexture ;
  Texture2D<uint>  Strata_BSDFTileTexture ;
  Buffer<uint>  Strata_BSDFTileCountBuffer ;
static const struct
{
	 uint  MaxBytesPerPixel;
	 uint  bRoughDiffuse;
	 uint  PeelLayersAboveDepth;
	 uint  bRoughnessTracking;
	 int  SliceStoringDebugStrataTreeData;
	 int  FirstSliceStoringStrataSSSData;
	 uint  TileSize;
	 uint  TileSizeLog2;
	 int2  TileCount;
	 int2  TileOffset;
	 int2  OverflowTileCount;
	 int2  OverflowTileOffset;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint2> TopLayerTexture;
	Texture2D<float3> OpaqueRoughRefractionTexture;
	Texture2D<uint> BSDFOffsetTexture;
	Texture2D<uint> BSDFTileTexture;
	Buffer<uint> BSDFTileCountBuffer;
} Strata = {Strata_MaxBytesPerPixel,Strata_bRoughDiffuse,Strata_PeelLayersAboveDepth,Strata_bRoughnessTracking,Strata_SliceStoringDebugStrataTreeData,Strata_FirstSliceStoringStrataSSSData,Strata_TileSize,Strata_TileSizeLog2,Strata_TileCount,Strata_TileOffset,Strata_OverflowTileCount,Strata_OverflowTileOffset,Strata_MaterialTextureArray,Strata_TopLayerTexture,Strata_OpaqueRoughRefractionTexture,Strata_BSDFOffsetTexture,Strata_BSDFTileTexture,Strata_BSDFTileCountBuffer,};

#line   2 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"

cbuffer  UniformBufferConstants_DrawRectangleParameters 
{
	 float4  DrawRectangleParameters_PosScaleBias;
	 float4  DrawRectangleParameters_UVScaleBias;
	 float4  DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
static const struct
{
	 float4  PosScaleBias;
	 float4  UVScaleBias;
	 float4  InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,};

#line   3 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/InstancedView.ush"

cbuffer  UniformBufferConstants_InstancedView 
{
	 float4x4  InstancedView_TranslatedWorldToClip[2];
	 float4x4  InstancedView_TranslatedWorldToSubpixelClip[2];
	 float4x4  InstancedView_RelativeWorldToClip[2];
	 float4x4  InstancedView_ClipToRelativeWorld[2];
	 float4x4  InstancedView_TranslatedWorldToView[2];
	 float4x4  InstancedView_ViewToTranslatedWorld[2];
	 float4x4  InstancedView_TranslatedWorldToCameraView[2];
	 float4x4  InstancedView_CameraViewToTranslatedWorld[2];
	 float4x4  InstancedView_ViewToClip[2];
	 float4x4  InstancedView_ViewToClipNoAA[2];
	 float4x4  InstancedView_ClipToView[2];
	 float4x4  InstancedView_ClipToTranslatedWorld[2];
	 float4x4  InstancedView_SVPositionToTranslatedWorld[2];
	 float4x4  InstancedView_ScreenToRelativeWorld[2];
	 float4x4  InstancedView_ScreenToTranslatedWorld[2];
	 float4x4  InstancedView_MobileMultiviewShadowTransform[2];
	 float3  InstancedView_ViewTilePosition;
	 float  PrePadding_InstancedView_2060;
	 float3  InstancedView_MatrixTilePosition;
	 float  PrePadding_InstancedView_2076;
	 float3  InstancedView_ViewForward;
	 float  PrePadding_InstancedView_2092;
	 float3  InstancedView_ViewUp;
	 float  PrePadding_InstancedView_2108;
	 float3  InstancedView_ViewRight;
	 float  PrePadding_InstancedView_2124;
	 float4  InstancedView_HMDViewNoRollUp[2];
	 float4  InstancedView_HMDViewNoRollRight[2];
	 float4  InstancedView_InvDeviceZToWorldZTransform[2];
	 float4  InstancedView_ScreenPositionScaleBias[2];
	 float4  InstancedView_RelativeWorldCameraOrigin[2];
	 float4  InstancedView_TranslatedWorldCameraOrigin[2];
	 float4  InstancedView_RelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePreViewTranslation[2];
	 float4x4  InstancedView_PrevViewToClip[2];
	 float4x4  InstancedView_PrevClipToView[2];
	 float4x4  InstancedView_PrevTranslatedWorldToClip[2];
	 float4x4  InstancedView_PrevTranslatedWorldToView[2];
	 float4x4  InstancedView_PrevViewToTranslatedWorld[2];
	 float4x4  InstancedView_PrevTranslatedWorldToCameraView[2];
	 float4x4  InstancedView_PrevCameraViewToTranslatedWorld[2];
	 float4  InstancedView_PrevTranslatedWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePrevPreViewTranslation[2];
	 float4x4  InstancedView_PrevClipToRelativeWorld[2];
	 float4x4  InstancedView_PrevScreenToTranslatedWorld[2];
	 float4x4  InstancedView_ClipToPrevClip[2];
	 float4x4  InstancedView_ClipToPrevClipWithAA[2];
	 float4  InstancedView_TemporalAAJitter[2];
	 float4  InstancedView_GlobalClippingPlane[2];
	 float4  InstancedView_FieldOfViewWideAngles[2];
	 float4  InstancedView_PrevFieldOfViewWideAngles[2];
	 float4  InstancedView_ViewRectMin[2];
	 float4  InstancedView_ViewSizeAndInvSize;
	 uint4  InstancedView_ViewRectMinAndSize;
	 float4  InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	 float4  InstancedView_BufferSizeAndInvSize;
	 float4  InstancedView_BufferBilinearUVMinMax[2];
	 float4  InstancedView_ScreenToViewSpace[2];
	 float4  InstancedView_BufferToSceneTextureScale[2];
	 float2  InstancedView_ResolutionFractionAndInv;
	 int  InstancedView_NumSceneColorMSAASamples;
	 float  InstancedView_PreExposure;
	 float  InstancedView_OneOverPreExposure;
	 float  PrePadding_InstancedView_4260;
	 float  PrePadding_InstancedView_4264;
	 float  PrePadding_InstancedView_4268;
	 float4  InstancedView_DiffuseOverrideParameter;
	 float4  InstancedView_SpecularOverrideParameter;
	 float4  InstancedView_NormalOverrideParameter;
	 float2  InstancedView_RoughnessOverrideParameter;
	 float  InstancedView_PrevFrameGameTime;
	 float  InstancedView_PrevFrameRealTime;
	 float  InstancedView_OutOfBoundsMask;
	 float  PrePadding_InstancedView_4340;
	 float  PrePadding_InstancedView_4344;
	 float  PrePadding_InstancedView_4348;
	 float4  InstancedView_WorldCameraMovementSinceLastFrame[2];
	 float  InstancedView_CullingSign;
	 float  PrePadding_InstancedView_4388;
	 float  PrePadding_InstancedView_4392;
	 float  PrePadding_InstancedView_4396;
	 float4  InstancedView_NearPlane[2];
	 float  InstancedView_GameTime;
	 float  InstancedView_RealTime;
	 float  InstancedView_DeltaTime;
	 float  InstancedView_MaterialTextureMipBias;
	 float  InstancedView_MaterialTextureDerivativeMultiply;
	 uint  InstancedView_Random;
	 uint  InstancedView_FrameNumber;
	 uint  InstancedView_StateFrameIndexMod8;
	 uint  InstancedView_StateFrameIndex;
	 uint  InstancedView_DebugViewModeMask;
	 uint  InstancedView_WorldIsPaused;
	 float  InstancedView_CameraCut;
	 float  InstancedView_UnlitViewmodeMask;
	 float  PrePadding_InstancedView_4484;
	 float  PrePadding_InstancedView_4488;
	 float  PrePadding_InstancedView_4492;
	 float4  InstancedView_DirectionalLightColor;
	 float3  InstancedView_DirectionalLightDirection;
	 float  PrePadding_InstancedView_4524;
	 float4  InstancedView_TranslucencyLightingVolumeMin[2];
	 float4  InstancedView_TranslucencyLightingVolumeInvSize[2];
	 float4  InstancedView_TemporalAAParams;
	 float4  InstancedView_CircleDOFParams;
	 float  InstancedView_DepthOfFieldSensorWidth;
	 float  InstancedView_DepthOfFieldFocalDistance;
	 float  InstancedView_DepthOfFieldScale;
	 float  InstancedView_DepthOfFieldFocalLength;
	 float  InstancedView_DepthOfFieldFocalRegion;
	 float  InstancedView_DepthOfFieldNearTransitionRegion;
	 float  InstancedView_DepthOfFieldFarTransitionRegion;
	 float  InstancedView_MotionBlurNormalizedToPixel;
	 float  InstancedView_GeneralPurposeTweak;
	 float  InstancedView_GeneralPurposeTweak2;
	 float  InstancedView_DemosaicVposOffset;
	 float  InstancedView_DecalDepthBias;
	 float3  InstancedView_IndirectLightingColorScale;
	 float  PrePadding_InstancedView_4684;
	 float3  InstancedView_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_InstancedView_4700;
	 float3  InstancedView_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_InstancedView_4716;
	 float4  InstancedView_AtmosphereLightDirection[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  InstancedView_AtmosphereLightDiscLuminance[2];
	 float4  InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  InstancedView_SkyViewLutSizeAndInvSize;
	 float3  InstancedView_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_InstancedView_4908;
	 float4  InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  InstancedView_SkyViewLutReferential;
	 float4  InstancedView_SkyAtmosphereSkyLuminanceFactor;
	 float  InstancedView_SkyAtmospherePresentInScene;
	 float  InstancedView_SkyAtmosphereHeightFogContribution;
	 float  InstancedView_SkyAtmosphereBottomRadiusKm;
	 float  InstancedView_SkyAtmosphereTopRadiusKm;
	 float4  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_InstancedView_5064;
	 float  PrePadding_InstancedView_5068;
	 float3  InstancedView_NormalCurvatureToRoughnessScaleBias;
	 float  InstancedView_RenderingReflectionCaptureMask;
	 float  InstancedView_RealTimeReflectionCapture;
	 float  InstancedView_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_InstancedView_5096;
	 float  PrePadding_InstancedView_5100;
	 float4  InstancedView_AmbientCubemapTint;
	 float  InstancedView_AmbientCubemapIntensity;
	 float  InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  InstancedView_SkyLightAffectReflectionFlag;
	 float  InstancedView_SkyLightAffectGlobalIlluminationFlag;
	 float4  InstancedView_SkyLightColor;
	 float4  InstancedView_MobileSkyIrradianceEnvironmentMap[8];
	 float  InstancedView_MobilePreviewMode;
	 float  PrePadding_InstancedView_5284;
	 float  PrePadding_InstancedView_5288;
	 float  PrePadding_InstancedView_5292;
	 float4  InstancedView_HMDEyePaddingOffset[2];
	 float  InstancedView_ReflectionCubemapMaxMip;
	 float  InstancedView_ShowDecalsMask;
	 uint  InstancedView_DistanceFieldAOSpecularOcclusionMode;
	 float  InstancedView_IndirectCapsuleSelfShadowingIntensity;
	 float3  InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 float  PrePadding_InstancedView_5356;
	 int4  InstancedView_StereoPassIndex[2];
	 float4  InstancedView_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  InstancedView_GlobalDistanceFieldMipFactor;
	 float  InstancedView_GlobalDistanceFieldMipTransition;
	 int  InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_InstancedView_5788;
	 float3  InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_InstancedView_5804;
	 float3  InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  InstancedView_GlobalVolumeDimension;
	 float  InstancedView_GlobalVolumeTexelSize;
	 float  InstancedView_MaxGlobalDFAOConeDistance;
	 uint  InstancedView_NumGlobalSDFClipmaps;
	 float  InstancedView_CoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredMinStepScale;
	 float  InstancedView_DitheredTransparencyStepThreshold;
	 float  InstancedView_DitheredTransparencyTraceThreshold;
	 int2  InstancedView_CursorPosition;
	 float  InstancedView_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_InstancedView_5868;
	 float3  InstancedView_VolumetricFogInvGridSize;
	 float  PrePadding_InstancedView_5884;
	 float3  InstancedView_VolumetricFogGridZParams;
	 float  PrePadding_InstancedView_5900;
	 float2  InstancedView_VolumetricFogSVPosToVolumeUV;
	 float2  InstancedView_VolumetricFogScreenUVToHistoryVolumeUV;
	 float  InstancedView_VolumetricFogMaxDistance;
	 float  PrePadding_InstancedView_5924;
	 float  PrePadding_InstancedView_5928;
	 float  PrePadding_InstancedView_5932;
	 float3  InstancedView_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_InstancedView_5948;
	 float3  InstancedView_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_InstancedView_5964;
	 float3  InstancedView_VolumetricLightmapIndirectionTextureSize;
	 float  InstancedView_VolumetricLightmapBrickSize;
	 float3  InstancedView_VolumetricLightmapBrickTexelSize;
	 float  InstancedView_IndirectLightingCacheShowFlag;
	 float  InstancedView_EyeToPixelSpreadAngle;
	 float  PrePadding_InstancedView_6004;
	 float  PrePadding_InstancedView_6008;
	 float  PrePadding_InstancedView_6012;
	 float4  InstancedView_XRPassthroughCameraUVs[2];
	 float  InstancedView_GlobalVirtualTextureMipBias;
	 uint  InstancedView_VirtualTextureFeedbackShift;
	 uint  InstancedView_VirtualTextureFeedbackMask;
	 uint  InstancedView_VirtualTextureFeedbackStride;
	 uint  InstancedView_VirtualTextureFeedbackJitterOffset;
	 uint  InstancedView_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_InstancedView_6072;
	 uint  PrePadding_InstancedView_6076;
	 float4  InstancedView_RuntimeVirtualTextureMipLevel;
	 float2  InstancedView_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_InstancedView_6104;
	 float  PrePadding_InstancedView_6108;
	 float4  InstancedView_RuntimeVirtualTextureDebugParams;
	 float  InstancedView_OverrideLandscapeLOD;
	 int  InstancedView_FarShadowStaticMeshLODBias;
	 float  InstancedView_MinRoughness;
	 float  PrePadding_InstancedView_6140;
	 float4  InstancedView_HairRenderInfo;
	 uint  InstancedView_EnableSkyLight;
	 uint  InstancedView_HairRenderInfoBits;
	 uint  InstancedView_HairComponents;
	 float  InstancedView_bSubsurfacePostprocessEnabled;
	 float4  InstancedView_SSProfilesTextureSizeAndInvSize;
	 float4  InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  InstancedView_PhysicsFieldClipmapCenter;
	 float  InstancedView_PhysicsFieldClipmapDistance;
	 int  InstancedView_PhysicsFieldClipmapResolution;
	 int  InstancedView_PhysicsFieldClipmapExponent;
	 int  InstancedView_PhysicsFieldClipmapCount;
	 int  InstancedView_PhysicsFieldTargetCount;
	 int4  InstancedView_PhysicsFieldTargets[32];
	 uint  InstancedView_InstanceSceneDataSOAStride;
	 uint  PrePadding_InstancedView_6756;
	 uint  PrePadding_InstancedView_6760;
	 uint  PrePadding_InstancedView_6764;
	 uint4  InstancedView_GPUSceneViewId[2];
	 float  InstancedView_ViewResolutionFraction;
	 float  InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
}
static const struct
{
	 float4x4  TranslatedWorldToClip[2];
	 float4x4  TranslatedWorldToSubpixelClip[2];
	 float4x4  RelativeWorldToClip[2];
	 float4x4  ClipToRelativeWorld[2];
	 float4x4  TranslatedWorldToView[2];
	 float4x4  ViewToTranslatedWorld[2];
	 float4x4  TranslatedWorldToCameraView[2];
	 float4x4  CameraViewToTranslatedWorld[2];
	 float4x4  ViewToClip[2];
	 float4x4  ViewToClipNoAA[2];
	 float4x4  ClipToView[2];
	 float4x4  ClipToTranslatedWorld[2];
	 float4x4  SVPositionToTranslatedWorld[2];
	 float4x4  ScreenToRelativeWorld[2];
	 float4x4  ScreenToTranslatedWorld[2];
	 float4x4  MobileMultiviewShadowTransform[2];
	 float3  ViewTilePosition;
	 float3  MatrixTilePosition;
	 float3  ViewForward;
	 float3  ViewUp;
	 float3  ViewRight;
	 float4  HMDViewNoRollUp[2];
	 float4  HMDViewNoRollRight[2];
	 float4  InvDeviceZToWorldZTransform[2];
	 float4  ScreenPositionScaleBias[2];
	 float4  RelativeWorldCameraOrigin[2];
	 float4  TranslatedWorldCameraOrigin[2];
	 float4  RelativeWorldViewOrigin[2];
	 float4  RelativePreViewTranslation[2];
	 float4x4  PrevViewToClip[2];
	 float4x4  PrevClipToView[2];
	 float4x4  PrevTranslatedWorldToClip[2];
	 float4x4  PrevTranslatedWorldToView[2];
	 float4x4  PrevViewToTranslatedWorld[2];
	 float4x4  PrevTranslatedWorldToCameraView[2];
	 float4x4  PrevCameraViewToTranslatedWorld[2];
	 float4  PrevTranslatedWorldCameraOrigin[2];
	 float4  PrevRelativeWorldCameraOrigin[2];
	 float4  PrevRelativeWorldViewOrigin[2];
	 float4  RelativePrevPreViewTranslation[2];
	 float4x4  PrevClipToRelativeWorld[2];
	 float4x4  PrevScreenToTranslatedWorld[2];
	 float4x4  ClipToPrevClip[2];
	 float4x4  ClipToPrevClipWithAA[2];
	 float4  TemporalAAJitter[2];
	 float4  GlobalClippingPlane[2];
	 float4  FieldOfViewWideAngles[2];
	 float4  PrevFieldOfViewWideAngles[2];
	 float4  ViewRectMin[2];
	 float4  ViewSizeAndInvSize;
	 uint4  ViewRectMinAndSize;
	 float4  LightProbeSizeRatioAndInvSizeRatio;
	 float4  BufferSizeAndInvSize;
	 float4  BufferBilinearUVMinMax[2];
	 float4  ScreenToViewSpace[2];
	 float4  BufferToSceneTextureScale[2];
	 float2  ResolutionFractionAndInv;
	 int  NumSceneColorMSAASamples;
	 float  PreExposure;
	 float  OneOverPreExposure;
	 float4  DiffuseOverrideParameter;
	 float4  SpecularOverrideParameter;
	 float4  NormalOverrideParameter;
	 float2  RoughnessOverrideParameter;
	 float  PrevFrameGameTime;
	 float  PrevFrameRealTime;
	 float  OutOfBoundsMask;
	 float4  WorldCameraMovementSinceLastFrame[2];
	 float  CullingSign;
	 float4  NearPlane[2];
	 float  GameTime;
	 float  RealTime;
	 float  DeltaTime;
	 float  MaterialTextureMipBias;
	 float  MaterialTextureDerivativeMultiply;
	 uint  Random;
	 uint  FrameNumber;
	 uint  StateFrameIndexMod8;
	 uint  StateFrameIndex;
	 uint  DebugViewModeMask;
	 uint  WorldIsPaused;
	 float  CameraCut;
	 float  UnlitViewmodeMask;
	 float4  DirectionalLightColor;
	 float3  DirectionalLightDirection;
	 float4  TranslucencyLightingVolumeMin[2];
	 float4  TranslucencyLightingVolumeInvSize[2];
	 float4  TemporalAAParams;
	 float4  CircleDOFParams;
	 float  DepthOfFieldSensorWidth;
	 float  DepthOfFieldFocalDistance;
	 float  DepthOfFieldScale;
	 float  DepthOfFieldFocalLength;
	 float  DepthOfFieldFocalRegion;
	 float  DepthOfFieldNearTransitionRegion;
	 float  DepthOfFieldFarTransitionRegion;
	 float  MotionBlurNormalizedToPixel;
	 float  GeneralPurposeTweak;
	 float  GeneralPurposeTweak2;
	 float  DemosaicVposOffset;
	 float  DecalDepthBias;
	 float3  IndirectLightingColorScale;
	 float3  PrecomputedIndirectLightingColorScale;
	 float3  PrecomputedIndirectSpecularColorScale;
	 float4  AtmosphereLightDirection[2];
	 float4  AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  AtmosphereLightIlluminanceOuterSpace[2];
	 float4  AtmosphereLightDiscLuminance[2];
	 float4  AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  SkyViewLutSizeAndInvSize;
	 float3  SkyCameraTranslatedWorldOrigin;
	 float4  SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  SkyViewLutReferential;
	 float4  SkyAtmosphereSkyLuminanceFactor;
	 float  SkyAtmospherePresentInScene;
	 float  SkyAtmosphereHeightFogContribution;
	 float  SkyAtmosphereBottomRadiusKm;
	 float  SkyAtmosphereTopRadiusKm;
	 float4  SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float3  NormalCurvatureToRoughnessScaleBias;
	 float  RenderingReflectionCaptureMask;
	 float  RealTimeReflectionCapture;
	 float  RealTimeReflectionCapturePreExposure;
	 float4  AmbientCubemapTint;
	 float  AmbientCubemapIntensity;
	 float  SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  SkyLightAffectReflectionFlag;
	 float  SkyLightAffectGlobalIlluminationFlag;
	 float4  SkyLightColor;
	 float4  MobileSkyIrradianceEnvironmentMap[8];
	 float  MobilePreviewMode;
	 float4  HMDEyePaddingOffset[2];
	 float  ReflectionCubemapMaxMip;
	 float  ShowDecalsMask;
	 uint  DistanceFieldAOSpecularOcclusionMode;
	 float  IndirectCapsuleSelfShadowingIntensity;
	 float3  ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int4  StereoPassIndex[2];
	 float4  GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  GlobalDistanceFieldMipFactor;
	 float  GlobalDistanceFieldMipTransition;
	 int  GlobalDistanceFieldClipmapSizeInPages;
	 float3  GlobalDistanceFieldInvPageAtlasSize;
	 float3  GlobalDistanceFieldInvCoverageAtlasSize;
	 float  GlobalVolumeDimension;
	 float  GlobalVolumeTexelSize;
	 float  MaxGlobalDFAOConeDistance;
	 uint  NumGlobalSDFClipmaps;
	 float  CoveredExpandSurfaceScale;
	 float  NotCoveredExpandSurfaceScale;
	 float  NotCoveredMinStepScale;
	 float  DitheredTransparencyStepThreshold;
	 float  DitheredTransparencyTraceThreshold;
	 int2  CursorPosition;
	 float  bCheckerboardSubsurfaceProfileRendering;
	 float3  VolumetricFogInvGridSize;
	 float3  VolumetricFogGridZParams;
	 float2  VolumetricFogSVPosToVolumeUV;
	 float2  VolumetricFogScreenUVToHistoryVolumeUV;
	 float  VolumetricFogMaxDistance;
	 float3  VolumetricLightmapWorldToUVScale;
	 float3  VolumetricLightmapWorldToUVAdd;
	 float3  VolumetricLightmapIndirectionTextureSize;
	 float  VolumetricLightmapBrickSize;
	 float3  VolumetricLightmapBrickTexelSize;
	 float  IndirectLightingCacheShowFlag;
	 float  EyeToPixelSpreadAngle;
	 float4  XRPassthroughCameraUVs[2];
	 float  GlobalVirtualTextureMipBias;
	 uint  VirtualTextureFeedbackShift;
	 uint  VirtualTextureFeedbackMask;
	 uint  VirtualTextureFeedbackStride;
	 uint  VirtualTextureFeedbackJitterOffset;
	 uint  VirtualTextureFeedbackSampleOffset;
	 float4  RuntimeVirtualTextureMipLevel;
	 float2  RuntimeVirtualTexturePackHeight;
	 float4  RuntimeVirtualTextureDebugParams;
	 float  OverrideLandscapeLOD;
	 int  FarShadowStaticMeshLODBias;
	 float  MinRoughness;
	 float4  HairRenderInfo;
	 uint  EnableSkyLight;
	 uint  HairRenderInfoBits;
	 uint  HairComponents;
	 float  bSubsurfacePostprocessEnabled;
	 float4  SSProfilesTextureSizeAndInvSize;
	 float4  SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float3  PhysicsFieldClipmapCenter;
	 float  PhysicsFieldClipmapDistance;
	 int  PhysicsFieldClipmapResolution;
	 int  PhysicsFieldClipmapExponent;
	 int  PhysicsFieldClipmapCount;
	 int  PhysicsFieldTargetCount;
	 int4  PhysicsFieldTargets[32];
	 uint  InstanceSceneDataSOAStride;
	 uint4  GPUSceneViewId[2];
	 float  ViewResolutionFraction;
	 float  SubSurfaceColorAsTransmittanceAtDistanceInMeters;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_TranslatedWorldToSubpixelClip,InstancedView_RelativeWorldToClip,InstancedView_ClipToRelativeWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToRelativeWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewTilePosition,InstancedView_MatrixTilePosition,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_RelativeWorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_RelativeWorldViewOrigin,InstancedView_RelativePreViewTranslation,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevTranslatedWorldCameraOrigin,InstancedView_PrevRelativeWorldCameraOrigin,InstancedView_PrevRelativeWorldViewOrigin,InstancedView_RelativePrevPreViewTranslation,InstancedView_PrevClipToRelativeWorld,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_ClipToPrevClipWithAA,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_ViewRectMinAndSize,InstancedView_LightProbeSizeRatioAndInvSizeRatio,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_BufferToSceneTextureScale,InstancedView_ResolutionFractionAndInv,InstancedView_NumSceneColorMSAASamples,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_WorldIsPaused,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_GeneralPurposeTweak,InstancedView_GeneralPurposeTweak2,InstancedView_DemosaicVposOffset,InstancedView_DecalDepthBias,InstancedView_IndirectLightingColorScale,InstancedView_PrecomputedIndirectLightingColorScale,InstancedView_PrecomputedIndirectSpecularColorScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance,InstancedView_AtmosphereLightIlluminanceOuterSpace,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyCameraTranslatedWorldOrigin,InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight,InstancedView_SkyViewLutReferential,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmospherePresentInScene,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_RealTimeReflectionCapture,InstancedView_RealTimeReflectionCapturePreExposure,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_MobileSkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeTranslatedCenterAndExtent,InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul,InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale,InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias,InstancedView_GlobalDistanceFieldMipFactor,InstancedView_GlobalDistanceFieldMipTransition,InstancedView_GlobalDistanceFieldClipmapSizeInPages,InstancedView_GlobalDistanceFieldInvPageAtlasSize,InstancedView_GlobalDistanceFieldInvCoverageAtlasSize,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDFAOConeDistance,InstancedView_NumGlobalSDFClipmaps,InstancedView_CoveredExpandSurfaceScale,InstancedView_NotCoveredExpandSurfaceScale,InstancedView_NotCoveredMinStepScale,InstancedView_DitheredTransparencyStepThreshold,InstancedView_DitheredTransparencyTraceThreshold,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogScreenUVToHistoryVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_XRPassthroughCameraUVs,InstancedView_GlobalVirtualTextureMipBias,InstancedView_VirtualTextureFeedbackShift,InstancedView_VirtualTextureFeedbackMask,InstancedView_VirtualTextureFeedbackStride,InstancedView_VirtualTextureFeedbackJitterOffset,InstancedView_VirtualTextureFeedbackSampleOffset,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_OverrideLandscapeLOD,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_EnableSkyLight,InstancedView_HairRenderInfoBits,InstancedView_HairComponents,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_SSProfilesTextureSizeAndInvSize,InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize,InstancedView_PhysicsFieldClipmapCenter,InstancedView_PhysicsFieldClipmapDistance,InstancedView_PhysicsFieldClipmapResolution,InstancedView_PhysicsFieldClipmapExponent,InstancedView_PhysicsFieldClipmapCount,InstancedView_PhysicsFieldTargetCount,InstancedView_PhysicsFieldTargets,InstancedView_InstanceSceneDataSOAStride,InstancedView_GPUSceneViewId,InstancedView_ViewResolutionFraction,InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters,};

#line   4 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/LumenCardScene.ush"

cbuffer  UniformBufferConstants_LumenCardScene 
{
	 uint  LumenCardScene_NumCards;
	 uint  LumenCardScene_NumMeshCards;
	 uint  LumenCardScene_NumCardPages;
	 uint  LumenCardScene_NumHeightfields;
	 uint  LumenCardScene_MaxConeSteps;
	 uint  PrePadding_LumenCardScene_20;
	 float2  LumenCardScene_PhysicalAtlasSize;
	 float2  LumenCardScene_InvPhysicalAtlasSize;
	 float  LumenCardScene_IndirectLightingAtlasDownsampleFactor;
	 uint  LumenCardScene_NumDistantCards;
	 float  LumenCardScene_DistantSceneMaxTraceDistance;
	 float  PrePadding_LumenCardScene_52;
	 float  PrePadding_LumenCardScene_56;
	 float  PrePadding_LumenCardScene_60;
	 float3  LumenCardScene_DistantSceneDirection;
	 float  PrePadding_LumenCardScene_76;
	 uint4  LumenCardScene_DistantCardIndices[2];
	 uint BindlessResource_LumenCardScene_CardData ;
	 uint  PrePadding_LumenCardScene_116;
	 uint BindlessResource_LumenCardScene_CardPageData ;
	 uint  PrePadding_LumenCardScene_124;
	 uint BindlessResource_LumenCardScene_MeshCardsData ;
	 uint  PrePadding_LumenCardScene_132;
	 uint BindlessResource_LumenCardScene_HeightfieldData ;
	 uint  PrePadding_LumenCardScene_140;
	 uint BindlessResource_LumenCardScene_PageTableBuffer ;
	 uint  PrePadding_LumenCardScene_148;
	 uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer ;
	 uint  PrePadding_LumenCardScene_156;
	 uint BindlessResource_LumenCardScene_AlbedoAtlas ;
	 uint  PrePadding_LumenCardScene_164;
	 uint BindlessResource_LumenCardScene_OpacityAtlas ;
	 uint  PrePadding_LumenCardScene_172;
	 uint BindlessResource_LumenCardScene_NormalAtlas ;
	 uint  PrePadding_LumenCardScene_180;
	 uint BindlessResource_LumenCardScene_EmissiveAtlas ;
	 uint  PrePadding_LumenCardScene_188;
	 uint BindlessResource_LumenCardScene_DepthAtlas ;
}
  StructuredBuffer<float4>  LumenCardScene_CardData ;
  StructuredBuffer<float4>  LumenCardScene_CardPageData ;
  StructuredBuffer<float4>  LumenCardScene_MeshCardsData ;
  StructuredBuffer<float4>  LumenCardScene_HeightfieldData ;
  ByteAddressBuffer  LumenCardScene_PageTableBuffer ;
  ByteAddressBuffer  LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer ;
  Texture2D  LumenCardScene_AlbedoAtlas ;
  Texture2D  LumenCardScene_OpacityAtlas ;
  Texture2D  LumenCardScene_NormalAtlas ;
  Texture2D  LumenCardScene_EmissiveAtlas ;
  Texture2D  LumenCardScene_DepthAtlas ;
static const struct
{
	 uint  NumCards;
	 uint  NumMeshCards;
	 uint  NumCardPages;
	 uint  NumHeightfields;
	 uint  MaxConeSteps;
	 float2  PhysicalAtlasSize;
	 float2  InvPhysicalAtlasSize;
	 float  IndirectLightingAtlasDownsampleFactor;
	 uint  NumDistantCards;
	 float  DistantSceneMaxTraceDistance;
	 float3  DistantSceneDirection;
	 uint4  DistantCardIndices[2];
	StructuredBuffer<float4> CardData;
	StructuredBuffer<float4> CardPageData;
	StructuredBuffer<float4> MeshCardsData;
	StructuredBuffer<float4> HeightfieldData;
	ByteAddressBuffer PageTableBuffer;
	ByteAddressBuffer SceneInstanceIndexToMeshCardsIndexBuffer;
	Texture2D AlbedoAtlas;
	Texture2D OpacityAtlas;
	Texture2D NormalAtlas;
	Texture2D EmissiveAtlas;
	Texture2D DepthAtlas;
} LumenCardScene = {LumenCardScene_NumCards,LumenCardScene_NumMeshCards,LumenCardScene_NumCardPages,LumenCardScene_NumHeightfields,LumenCardScene_MaxConeSteps,LumenCardScene_PhysicalAtlasSize,LumenCardScene_InvPhysicalAtlasSize,LumenCardScene_IndirectLightingAtlasDownsampleFactor,LumenCardScene_NumDistantCards,LumenCardScene_DistantSceneMaxTraceDistance,LumenCardScene_DistantSceneDirection,LumenCardScene_DistantCardIndices,LumenCardScene_CardData,LumenCardScene_CardPageData,LumenCardScene_MeshCardsData,LumenCardScene_HeightfieldData,LumenCardScene_PageTableBuffer,LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer,LumenCardScene_AlbedoAtlas,LumenCardScene_OpacityAtlas,LumenCardScene_NormalAtlas,LumenCardScene_EmissiveAtlas,LumenCardScene_DepthAtlas,};

#line   5 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionStruct.ush"

cbuffer  UniformBufferConstants_ReflectionStruct 
{
	 float4  ReflectionStruct_SkyLightParameters;
	 uint BindlessResource_ReflectionStruct_SkyLightCubemap ;
	 uint  PrePadding_ReflectionStruct_20;
	 uint BindlessSampler_ReflectionStruct_SkyLightCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_28;
	 uint BindlessResource_ReflectionStruct_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_ReflectionStruct_36;
	 uint BindlessSampler_ReflectionStruct_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_44;
	 uint BindlessResource_ReflectionStruct_ReflectionCubemap ;
	 uint  PrePadding_ReflectionStruct_52;
	 uint BindlessSampler_ReflectionStruct_ReflectionCubemapSampler ;
	 uint  PrePadding_ReflectionStruct_60;
	 uint BindlessResource_ReflectionStruct_PreIntegratedGF ;
	 uint  PrePadding_ReflectionStruct_68;
	 uint BindlessSampler_ReflectionStruct_PreIntegratedGFSampler ;
}
  TextureCube  ReflectionStruct_SkyLightCubemap ;
  SamplerState  ReflectionStruct_SkyLightCubemapSampler ;
  TextureCube  ReflectionStruct_SkyLightBlendDestinationCubemap ;
  SamplerState  ReflectionStruct_SkyLightBlendDestinationCubemapSampler ;
  TextureCubeArray  ReflectionStruct_ReflectionCubemap ;
  SamplerState  ReflectionStruct_ReflectionCubemapSampler ;
  Texture2D  ReflectionStruct_PreIntegratedGF ;
  SamplerState  ReflectionStruct_PreIntegratedGFSampler ;
static const struct
{
	 float4  SkyLightParameters;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} ReflectionStruct = {ReflectionStruct_SkyLightParameters,ReflectionStruct_SkyLightCubemap,ReflectionStruct_SkyLightCubemapSampler,ReflectionStruct_SkyLightBlendDestinationCubemap,ReflectionStruct_SkyLightBlendDestinationCubemapSampler,ReflectionStruct_ReflectionCubemap,ReflectionStruct_ReflectionCubemapSampler,ReflectionStruct_PreIntegratedGF,ReflectionStruct_PreIntegratedGFSampler,};

#line   6 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionCaptureES31.ush"

cbuffer  UniformBufferConstants_ReflectionCaptureES31 
{
	 float4  ReflectionCaptureES31_PositionAndRadius[100];
	 float4  ReflectionCaptureES31_TilePosition[100];
	 float4  ReflectionCaptureES31_CaptureProperties[100];
	 float4  ReflectionCaptureES31_CaptureOffsetAndAverageBrightness[100];
	 float4x4  ReflectionCaptureES31_BoxTransform[100];
	 float4  ReflectionCaptureES31_BoxScales[100];
}
static const struct
{
	 float4  PositionAndRadius[100];
	 float4  TilePosition[100];
	 float4  CaptureProperties[100];
	 float4  CaptureOffsetAndAverageBrightness[100];
	 float4x4  BoxTransform[100];
	 float4  BoxScales[100];
} ReflectionCaptureES31 = {ReflectionCaptureES31_PositionAndRadius,ReflectionCaptureES31_TilePosition,ReflectionCaptureES31_CaptureProperties,ReflectionCaptureES31_CaptureOffsetAndAverageBrightness,ReflectionCaptureES31_BoxTransform,ReflectionCaptureES31_BoxScales,};

#line   7 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/ReflectionCaptureSM5.ush"

cbuffer  UniformBufferConstants_ReflectionCaptureSM5 
{
	 float4  ReflectionCaptureSM5_PositionAndRadius[341];
	 float4  ReflectionCaptureSM5_TilePosition[341];
	 float4  ReflectionCaptureSM5_CaptureProperties[341];
	 float4  ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness[341];
	 float4x4  ReflectionCaptureSM5_BoxTransform[341];
	 float4  ReflectionCaptureSM5_BoxScales[341];
}
static const struct
{
	 float4  PositionAndRadius[341];
	 float4  TilePosition[341];
	 float4  CaptureProperties[341];
	 float4  CaptureOffsetAndAverageBrightness[341];
	 float4x4  BoxTransform[341];
	 float4  BoxScales[341];
} ReflectionCaptureSM5 = {ReflectionCaptureSM5_PositionAndRadius,ReflectionCaptureSM5_TilePosition,ReflectionCaptureSM5_CaptureProperties,ReflectionCaptureSM5_CaptureOffsetAndAverageBrightness,ReflectionCaptureSM5_BoxTransform,ReflectionCaptureSM5_BoxScales,};

#line   8 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/Primitive.ush"

cbuffer  UniformBufferConstants_Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPODisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  PrePadding_Primitive_584;
	 uint  PrePadding_Primitive_588;
	 float4  Primitive_CustomPrimitiveData[9];
}
static const struct
{
	 uint  Flags;
	 uint  InstanceSceneDataOffset;
	 uint  NumInstanceSceneDataEntries;
	 int  SingleCaptureIndex;
	 float3  TilePosition;
	 uint  PrimitiveComponentId;
	 float4x4  LocalToRelativeWorld;
	 float4x4  RelativeWorldToLocal;
	 float4x4  PreviousLocalToRelativeWorld;
	 float4x4  PreviousRelativeWorldToLocal;
	 float4x4  WorldToPreviousWorld;
	 float3  InvNonUniformScale;
	 float  ObjectBoundsX;
	 float4  ObjectRelativeWorldPositionAndRadius;
	 float3  ActorRelativeWorldPosition;
	 uint  LightmapUVIndex;
	 float3  ObjectOrientation;
	 uint  LightmapDataIndex;
	 float4  NonUniformScale;
	 float3  PreSkinnedLocalBoundsMin;
	 uint  NaniteResourceID;
	 float3  PreSkinnedLocalBoundsMax;
	 uint  NaniteHierarchyOffset;
	 float3  LocalObjectBoundsMin;
	 float  ObjectBoundsY;
	 float3  LocalObjectBoundsMax;
	 float  ObjectBoundsZ;
	 float3  InstanceLocalBoundsCenter;
	 uint  InstancePayloadDataOffset;
	 float3  InstanceLocalBoundsExtent;
	 uint  InstancePayloadDataStride;
	 float3  WireframeColor;
	 uint  PackedNaniteFlags;
	 float3  LevelColor;
	 int  PersistentPrimitiveIndex;
	 float2  InstanceDrawDistanceMinMaxSquared;
	 float  InstanceWPODisableDistanceSquared;
	 uint  NaniteRayTracingDataOffset;
	 float  MaxWPODisplacement;
	 uint  CustomStencilValueAndMask;
	 float4  CustomPrimitiveData[9];
} Primitive = {Primitive_Flags,Primitive_InstanceSceneDataOffset,Primitive_NumInstanceSceneDataEntries,Primitive_SingleCaptureIndex,Primitive_TilePosition,Primitive_PrimitiveComponentId,Primitive_LocalToRelativeWorld,Primitive_RelativeWorldToLocal,Primitive_PreviousLocalToRelativeWorld,Primitive_PreviousRelativeWorldToLocal,Primitive_WorldToPreviousWorld,Primitive_InvNonUniformScale,Primitive_ObjectBoundsX,Primitive_ObjectRelativeWorldPositionAndRadius,Primitive_ActorRelativeWorldPosition,Primitive_LightmapUVIndex,Primitive_ObjectOrientation,Primitive_LightmapDataIndex,Primitive_NonUniformScale,Primitive_PreSkinnedLocalBoundsMin,Primitive_NaniteResourceID,Primitive_PreSkinnedLocalBoundsMax,Primitive_NaniteHierarchyOffset,Primitive_LocalObjectBoundsMin,Primitive_ObjectBoundsY,Primitive_LocalObjectBoundsMax,Primitive_ObjectBoundsZ,Primitive_InstanceLocalBoundsCenter,Primitive_InstancePayloadDataOffset,Primitive_InstanceLocalBoundsExtent,Primitive_InstancePayloadDataStride,Primitive_WireframeColor,Primitive_PackedNaniteFlags,Primitive_LevelColor,Primitive_PersistentPrimitiveIndex,Primitive_InstanceDrawDistanceMinMaxSquared,Primitive_InstanceWPODisableDistanceSquared,Primitive_NaniteRayTracingDataOffset,Primitive_MaxWPODisplacement,Primitive_CustomStencilValueAndMask,Primitive_CustomPrimitiveData,};

#line   9 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/InstanceCulling.ush"

cbuffer  UniformBufferConstants_InstanceCulling 
{
	 uint BindlessResource_InstanceCulling_InstanceIdsBuffer ;
	 uint  PrePadding_InstanceCulling_4;
	 uint BindlessResource_InstanceCulling_PageInfoBuffer ;
	 uint  PrePadding_InstanceCulling_12;
	 uint  InstanceCulling_BufferCapacity;
}
  StructuredBuffer<uint>  InstanceCulling_InstanceIdsBuffer ;
  StructuredBuffer<uint>  InstanceCulling_PageInfoBuffer ;
static const struct
{
	 uint  BufferCapacity;
	StructuredBuffer<uint> InstanceIdsBuffer;
	StructuredBuffer<uint> PageInfoBuffer;
} InstanceCulling = {InstanceCulling_BufferCapacity,InstanceCulling_InstanceIdsBuffer,InstanceCulling_PageInfoBuffer,};

#line  10 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/BlueNoise.ush"

cbuffer  UniformBufferConstants_BlueNoise 
{
	 int3  BlueNoise_Dimensions;
	 int  PrePadding_BlueNoise_12;
	 int3  BlueNoise_ModuloMasks;
	 int  PrePadding_BlueNoise_28;
	 uint BindlessResource_BlueNoise_ScalarTexture ;
	 uint  PrePadding_BlueNoise_36;
	 uint BindlessResource_BlueNoise_Vec2Texture ;
}
  Texture2D  BlueNoise_ScalarTexture ;
  Texture2D  BlueNoise_Vec2Texture ;
static const struct
{
	 int3  Dimensions;
	 int3  ModuloMasks;
	Texture2D ScalarTexture;
	Texture2D Vec2Texture;
} BlueNoise = {BlueNoise_Dimensions,BlueNoise_ModuloMasks,BlueNoise_ScalarTexture,BlueNoise_Vec2Texture,};

#line  11 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"

cbuffer  UniformBufferConstants_MobileSceneTextures 
{
	 uint BindlessResource_MobileSceneTextures_SceneColorTexture ;
	 uint  PrePadding_MobileSceneTextures_4;
	 uint BindlessSampler_MobileSceneTextures_SceneColorTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_12;
	 uint BindlessResource_MobileSceneTextures_SceneDepthTexture ;
	 uint  PrePadding_MobileSceneTextures_20;
	 uint BindlessSampler_MobileSceneTextures_SceneDepthTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_28;
	 uint BindlessResource_MobileSceneTextures_CustomDepthTexture ;
	 uint  PrePadding_MobileSceneTextures_36;
	 uint BindlessSampler_MobileSceneTextures_CustomDepthTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_44;
	 uint BindlessResource_MobileSceneTextures_CustomStencilTexture ;
	 uint  PrePadding_MobileSceneTextures_52;
	 uint BindlessResource_MobileSceneTextures_SceneVelocityTexture ;
	 uint  PrePadding_MobileSceneTextures_60;
	 uint BindlessSampler_MobileSceneTextures_SceneVelocityTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_68;
	 uint BindlessResource_MobileSceneTextures_GBufferATexture ;
	 uint  PrePadding_MobileSceneTextures_76;
	 uint BindlessResource_MobileSceneTextures_GBufferBTexture ;
	 uint  PrePadding_MobileSceneTextures_84;
	 uint BindlessResource_MobileSceneTextures_GBufferCTexture ;
	 uint  PrePadding_MobileSceneTextures_92;
	 uint BindlessResource_MobileSceneTextures_GBufferDTexture ;
	 uint  PrePadding_MobileSceneTextures_100;
	 uint BindlessResource_MobileSceneTextures_SceneDepthAuxTexture ;
	 uint  PrePadding_MobileSceneTextures_108;
	 uint BindlessSampler_MobileSceneTextures_GBufferATextureSampler ;
	 uint  PrePadding_MobileSceneTextures_116;
	 uint BindlessSampler_MobileSceneTextures_GBufferBTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_124;
	 uint BindlessSampler_MobileSceneTextures_GBufferCTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_132;
	 uint BindlessSampler_MobileSceneTextures_GBufferDTextureSampler ;
	 uint  PrePadding_MobileSceneTextures_140;
	 uint BindlessSampler_MobileSceneTextures_SceneDepthAuxTextureSampler ;
}
  Texture2D  MobileSceneTextures_SceneColorTexture ;
  SamplerState  MobileSceneTextures_SceneColorTextureSampler ;
  Texture2D  MobileSceneTextures_SceneDepthTexture ;
  SamplerState  MobileSceneTextures_SceneDepthTextureSampler ;
  Texture2D  MobileSceneTextures_CustomDepthTexture ;
  SamplerState  MobileSceneTextures_CustomDepthTextureSampler ;
  Texture2D<uint2>  MobileSceneTextures_CustomStencilTexture ;
  Texture2D  MobileSceneTextures_SceneVelocityTexture ;
  SamplerState  MobileSceneTextures_SceneVelocityTextureSampler ;
  Texture2D  MobileSceneTextures_GBufferATexture ;
  Texture2D  MobileSceneTextures_GBufferBTexture ;
  Texture2D  MobileSceneTextures_GBufferCTexture ;
  Texture2D  MobileSceneTextures_GBufferDTexture ;
  Texture2D  MobileSceneTextures_SceneDepthAuxTexture ;
  SamplerState  MobileSceneTextures_GBufferATextureSampler ;
  SamplerState  MobileSceneTextures_GBufferBTextureSampler ;
  SamplerState  MobileSceneTextures_GBufferCTextureSampler ;
  SamplerState  MobileSceneTextures_GBufferDTextureSampler ;
  SamplerState  MobileSceneTextures_SceneDepthAuxTextureSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D<uint2> CustomStencilTexture;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_CustomStencilTexture,MobileSceneTextures_SceneVelocityTexture,MobileSceneTextures_SceneVelocityTextureSampler,MobileSceneTextures_GBufferATexture,MobileSceneTextures_GBufferBTexture,MobileSceneTextures_GBufferCTexture,MobileSceneTextures_GBufferDTexture,MobileSceneTextures_SceneDepthAuxTexture,MobileSceneTextures_GBufferATextureSampler,MobileSceneTextures_GBufferBTextureSampler,MobileSceneTextures_GBufferCTextureSampler,MobileSceneTextures_GBufferDTextureSampler,MobileSceneTextures_SceneDepthAuxTextureSampler,};

#line  12 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line   2 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"

cbuffer  UniformBufferConstants_SceneTexturesStruct 
{
	 uint BindlessResource_SceneTexturesStruct_SceneColorTexture ;
	 uint  PrePadding_SceneTexturesStruct_4;
	 uint BindlessResource_SceneTexturesStruct_SceneDepthTexture ;
	 uint  PrePadding_SceneTexturesStruct_12;
	 uint BindlessResource_SceneTexturesStruct_GBufferATexture ;
	 uint  PrePadding_SceneTexturesStruct_20;
	 uint BindlessResource_SceneTexturesStruct_GBufferBTexture ;
	 uint  PrePadding_SceneTexturesStruct_28;
	 uint BindlessResource_SceneTexturesStruct_GBufferCTexture ;
	 uint  PrePadding_SceneTexturesStruct_36;
	 uint BindlessResource_SceneTexturesStruct_GBufferDTexture ;
	 uint  PrePadding_SceneTexturesStruct_44;
	 uint BindlessResource_SceneTexturesStruct_GBufferETexture ;
	 uint  PrePadding_SceneTexturesStruct_52;
	 uint BindlessResource_SceneTexturesStruct_GBufferFTexture ;
	 uint  PrePadding_SceneTexturesStruct_60;
	 uint BindlessResource_SceneTexturesStruct_GBufferVelocityTexture ;
	 uint  PrePadding_SceneTexturesStruct_68;
	 uint BindlessResource_SceneTexturesStruct_ScreenSpaceAOTexture ;
	 uint  PrePadding_SceneTexturesStruct_76;
	 uint BindlessResource_SceneTexturesStruct_CustomDepthTexture ;
	 uint  PrePadding_SceneTexturesStruct_84;
	 uint BindlessResource_SceneTexturesStruct_CustomStencilTexture ;
	 uint  PrePadding_SceneTexturesStruct_92;
	 uint BindlessSampler_SceneTexturesStruct_PointClampSampler ;
}
  Texture2D  SceneTexturesStruct_SceneColorTexture ;
  Texture2D  SceneTexturesStruct_SceneDepthTexture ;
  Texture2D  SceneTexturesStruct_GBufferATexture ;
  Texture2D  SceneTexturesStruct_GBufferBTexture ;
  Texture2D  SceneTexturesStruct_GBufferCTexture ;
  Texture2D  SceneTexturesStruct_GBufferDTexture ;
  Texture2D  SceneTexturesStruct_GBufferETexture ;
  Texture2D  SceneTexturesStruct_GBufferFTexture ;
  Texture2D  SceneTexturesStruct_GBufferVelocityTexture ;
  Texture2D  SceneTexturesStruct_ScreenSpaceAOTexture ;
  Texture2D  SceneTexturesStruct_CustomDepthTexture ;
  Texture2D<uint2>  SceneTexturesStruct_CustomStencilTexture ;
  SamplerState  SceneTexturesStruct_PointClampSampler ;
static const struct
{
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomStencilTexture,SceneTexturesStruct_PointClampSampler,};

#line  13 "/Engine/Generated/GeneratedUniformBuffers.ush"

#line 169 "/Engine/Private/Common.ush"



#line   7 "/Engine/Private/CommonViewUniformBuffer.ush"





float2 GetTanHalfFieldOfView()
{
	return float2(View.ClipToView[0][0], View.ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View.PrevClipToView[0][0], View.PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View.ViewToClip[0][0], View.ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View.PrevViewToClip[0][0], View.PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{
	
	return View.StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 172 "/Engine/Private/Common.ush"




float FmodFloor(float Lhs, float Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float2 FmodFloor(float2 Lhs, float2 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float3 FmodFloor(float3 Lhs, float3 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float4 FmodFloor(float4 Lhs, float4 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float VectorSum(float V) { return V; }
float VectorSum(float2 V) { return V.x + V.y; }
float VectorSum(float3 V) { return V.x + V.y + V.z; }
float VectorSum(float4 V) { return V.x + V.y + V.z + V.w; }

#line   3 "/Engine/Private/LargeWorldCoordinates.ush"


struct FLWCScalar
{
	float Tile;
	float Offset;
};

struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

struct FLWCScalarDeriv
{
	FLWCScalar Value;
	float Ddx;
	float Ddy;
};

struct FLWCVector2Deriv
{
	FLWCVector2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FLWCVector4Deriv
{
	FLWCVector4 Value;
	float4 Ddx;
	float4 Ddy;
};


struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};


struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};




float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

float4x4 Make4x3Matrix(float4x4 M)
{
	
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }

FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }

FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }

FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}



FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }






FLWCScalar LWCSwizzle(FLWCScalar V, int C0) { return V; }
FLWCScalar LWCSwizzle(FLWCVector2 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector3 V, int C0) { return LWCGetComponent(V, C0); }
FLWCScalar LWCSwizzle(FLWCVector4 V, int C0) { return LWCGetComponent(V, C0); }

FLWCVector2 LWCSwizzle(FLWCScalar V, int C0, int C1) { return MakeLWCVector(V, V); }
FLWCVector2 LWCSwizzle(FLWCVector2 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector3 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }
FLWCVector2 LWCSwizzle(FLWCVector4 V, int C0, int C1) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1)); }

FLWCVector3 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2) { return MakeLWCVector(V, V, V); }
FLWCVector3 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }
FLWCVector3 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2)); }

FLWCVector4 LWCSwizzle(FLWCScalar V, int C0, int C1, int C2, int C3) { return MakeLWCVector(V, V, V, V); }
FLWCVector4 LWCSwizzle(FLWCVector2 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector3 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }
FLWCVector4 LWCSwizzle(FLWCVector4 V, int C0, int C1, int C2, int C3) { return MakeLWCVector(LWCGetComponent(V, C0), LWCGetComponent(V, C1), LWCGetComponent(V, C2), LWCGetComponent(V, C3)); }

float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}


float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }


FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCInverseMatrix LWCPromoteInverse(float4x4 Value) { return MakeLWCInverseMatrix((float3)0, Value); }

FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCMatrix Lhs, FLWCVector3 Rhs)
{
	float4x4 Result = Lhs.M;
	Result[3].xyz += ( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f;
	Result[3].xyz += Rhs.Offset;
	return Result;
}

FLWCMatrix LWCMultiplyTranslation(float4x4 Lhs, FLWCVector3 Rhs)
{
	FLWCMatrix Result = MakeLWCMatrix( (( Rhs ).Tile), Lhs);
	Result.M[3].xyz += Rhs.Offset;
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCVector3 Lhs, FLWCInverseMatrix Rhs)
{
	float3 Offset = ( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f + Lhs.Offset;
	return mul(MakeTranslationMatrix(Offset), Rhs.M);
}

FLWCInverseMatrix LWCMultiplyTranslation(FLWCVector3 Lhs, float4x4 Rhs)
{
	FLWCInverseMatrix Result = MakeLWCInverseMatrix(- (( Lhs ).Tile), Rhs);
	Result.M = mul(MakeTranslationMatrix(Lhs.Offset), Result.M);
	return Result;
}

FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( (( InMatrix ).Tile), InMatrix.M[3].xyz);
}

void LWCSetOrigin(inout FLWCMatrix InOutMatrix, FLWCVector3 Origin)
{
	 ( InOutMatrix ).Tile = (  (( Origin ).Tile) );
	InOutMatrix.M[3].xyz = Origin.Offset;
}





#line   5 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNormalizeTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCScalar LWCMakeIntTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile);
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtUnscaled(FLWCScalar V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCSqrtScaled(FLWCScalar V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float LWCRsqrtScaled(FLWCScalar V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float LWCSqrt(FLWCScalar V) { return LWCSqrtScaled(V, 1448.15466f); }
float LWCRsqrt(FLWCScalar V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool  LWCGreater ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool  LWCGreater ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool  LWCGreater ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool  LWCGreaterEqual ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool  LWCGreaterEqual ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool  LWCGreaterEqual ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool  LWCLess ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool  LWCLess ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool  LWCLess ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool  LWCLessEqual ( FLWCScalar Lhs, FLWCScalar Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool  LWCLessEqual ( float Lhs, FLWCScalar Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool  LWCLessEqual ( FLWCScalar Lhs, float Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float LWCDdx(FLWCScalar V) { return (float)0; }
float LWCDdy(FLWCScalar V) { return (float)0; }





FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool LWCEquals(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool LWCEquals(float Lhs, FLWCScalar Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool LWCEquals(FLWCScalar Lhs, float Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool LWCEqualsApprox(FLWCScalar Lhs, FLWCScalar Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float)Threshold;
}
bool LWCEqualsApprox(float Lhs, FLWCScalar Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float)Threshold;
}
bool LWCEqualsApprox(FLWCScalar Lhs, float Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float)Threshold;
}

FLWCScalar LWCSelect(bool S, FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCScalar LWCSelect(bool S, float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( select_internal( S , (float)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCScalar LWCSelect(bool S, FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( select_internal( S ,  (( Lhs ).Tile) , (float)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCScalar LWCNegate(FLWCScalar V) { return MakeLWCScalar(- (( V ).Tile), -V.Offset); }

float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCScalar LWCFloor(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), floor(VN.Offset)); }
FLWCScalar LWCCeil(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), ceil(VN.Offset)); }
FLWCScalar LWCRound(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), round(VN.Offset)); }
FLWCScalar LWCTrunc(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), trunc(VN.Offset)); }


float LWCSign(FLWCScalar V) { return float(sign(LWCToFloat(V))); }
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }
float LWCClampScalar(FLWCScalar V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }


FLWCScalar LWCLerp(FLWCScalar Lhs, FLWCScalar Rhs, float S)
{
	return MakeLWCScalar(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float LWCFmod(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float LWCFmodFloor(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float LWCFmodFloorPI(FLWCScalar V)
{
	return LWCFmodFloor(V, PI);
	
}
float LWCFmodFloor2PI(FLWCScalar V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float LWCSin(FLWCScalar V) { return sin(LWCFmodFloor2PI(V)); }
float LWCCos(FLWCScalar V) { return cos(LWCFmodFloor2PI(V)); }
float LWCTan(FLWCScalar V) { return tan(LWCFmodFloorPI(V)); }
float LWCASin(FLWCScalar V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float LWCACos(FLWCScalar V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float LWCATan(FLWCScalar V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float LWCSmoothStep(FLWCScalar Lhs, FLWCScalar Rhs, FLWCScalar S)
{
	float t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCScalar LWCMin(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMin(float Lhs, FLWCScalar Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMin(FLWCScalar Lhs, float Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(float Lhs, FLWCScalar Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar LWCMax(FLWCScalar Lhs, float Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCScalar LWCAbs(FLWCScalar V) { return LWCSelect(LWCLess(V, (float)0), LWCNegate(V), V); }

float LWCStep(FLWCScalar Lhs, FLWCScalar Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }
float LWCStep(FLWCScalar Lhs, float Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }
float LWCStep(float Lhs, FLWCScalar Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float)1.0f , (float)0.0f ); }


FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 376 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNormalizeTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector2 LWCMakeIntTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile);
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtUnscaled(FLWCVector2 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCSqrtScaled(FLWCVector2 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float2 LWCRsqrtScaled(FLWCVector2 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2 LWCSqrt(FLWCVector2 V) { return LWCSqrtScaled(V, 1448.15466f); }
float2 LWCRsqrt(FLWCVector2 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool2  LWCGreater ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool2  LWCGreater ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool2  LWCGreater ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool2  LWCGreaterEqual ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool2  LWCGreaterEqual ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool2  LWCGreaterEqual ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool2  LWCLess ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool2  LWCLess ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool2  LWCLess ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool2  LWCLessEqual ( FLWCVector2 Lhs, FLWCVector2 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool2  LWCLessEqual ( float2 Lhs, FLWCVector2 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool2  LWCLessEqual ( FLWCVector2 Lhs, float2 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float2 LWCDdx(FLWCVector2 V) { return (float2)0; }
float2 LWCDdy(FLWCVector2 V) { return (float2)0; }





FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool2 LWCEquals(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool2 LWCEquals(float2 Lhs, FLWCVector2 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool2 LWCEquals(FLWCVector2 Lhs, float2 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool2 LWCEqualsApprox(FLWCVector2 Lhs, FLWCVector2 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float2)Threshold;
}
bool2 LWCEqualsApprox(float2 Lhs, FLWCVector2 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float2)Threshold;
}
bool2 LWCEqualsApprox(FLWCVector2 Lhs, float2 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float2)Threshold;
}

FLWCVector2 LWCSelect(bool2 S, FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector2 LWCSelect(bool2 S, float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( select_internal( S , (float2)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector2 LWCSelect(bool2 S, FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( select_internal( S ,  (( Lhs ).Tile) , (float2)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector2 LWCNegate(FLWCVector2 V) { return MakeLWCVector2(- (( V ).Tile), -V.Offset); }

float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector2 LWCFloor(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector2 LWCCeil(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector2 LWCRound(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), round(VN.Offset)); }
FLWCVector2 LWCTrunc(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), trunc(VN.Offset)); }


float2 LWCSign(FLWCVector2 V) { return float2(sign(LWCToFloat(V))); }
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }
float2 LWCClampScalar(FLWCVector2 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }


FLWCVector2 LWCLerp(FLWCVector2 Lhs, FLWCVector2 Rhs, float2 S)
{
	return MakeLWCVector2(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float2 LWCFmod(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float2 LWCFmodFloor(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float2 LWCFmodFloorPI(FLWCVector2 V)
{
	return LWCFmodFloor(V, PI);
	
}
float2 LWCFmodFloor2PI(FLWCVector2 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float2 LWCSin(FLWCVector2 V) { return sin(LWCFmodFloor2PI(V)); }
float2 LWCCos(FLWCVector2 V) { return cos(LWCFmodFloor2PI(V)); }
float2 LWCTan(FLWCVector2 V) { return tan(LWCFmodFloorPI(V)); }
float2 LWCASin(FLWCVector2 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float2 LWCACos(FLWCVector2 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float2 LWCATan(FLWCVector2 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float2 LWCSmoothStep(FLWCVector2 Lhs, FLWCVector2 Rhs, FLWCVector2 S)
{
	float2 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector2 LWCMin(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMin(float2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMin(FLWCVector2 Lhs, float2 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(float2 Lhs, FLWCVector2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2 LWCMax(FLWCVector2 Lhs, float2 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector2 LWCAbs(FLWCVector2 V) { return LWCSelect(LWCLess(V, (float2)0), LWCNegate(V), V); }

float2 LWCStep(FLWCVector2 Lhs, FLWCVector2 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }
float2 LWCStep(FLWCVector2 Lhs, float2 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }
float2 LWCStep(float2 Lhs, FLWCVector2 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float2)1.0f , (float2)0.0f ); }


FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 386 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNormalizeTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector3 LWCMakeIntTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile);
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtUnscaled(FLWCVector3 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCSqrtScaled(FLWCVector3 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float3 LWCRsqrtScaled(FLWCVector3 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3 LWCSqrt(FLWCVector3 V) { return LWCSqrtScaled(V, 1448.15466f); }
float3 LWCRsqrt(FLWCVector3 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool3  LWCGreater ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool3  LWCGreater ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool3  LWCGreater ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool3  LWCGreaterEqual ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool3  LWCGreaterEqual ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool3  LWCGreaterEqual ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool3  LWCLess ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool3  LWCLess ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool3  LWCLess ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool3  LWCLessEqual ( FLWCVector3 Lhs, FLWCVector3 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool3  LWCLessEqual ( float3 Lhs, FLWCVector3 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool3  LWCLessEqual ( FLWCVector3 Lhs, float3 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float3 LWCDdx(FLWCVector3 V) { return (float3)0; }
float3 LWCDdy(FLWCVector3 V) { return (float3)0; }





FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool3 LWCEquals(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool3 LWCEquals(float3 Lhs, FLWCVector3 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool3 LWCEquals(FLWCVector3 Lhs, float3 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool3 LWCEqualsApprox(FLWCVector3 Lhs, FLWCVector3 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float3)Threshold;
}
bool3 LWCEqualsApprox(float3 Lhs, FLWCVector3 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float3)Threshold;
}
bool3 LWCEqualsApprox(FLWCVector3 Lhs, float3 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float3)Threshold;
}

FLWCVector3 LWCSelect(bool3 S, FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector3 LWCSelect(bool3 S, float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( select_internal( S , (float3)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector3 LWCSelect(bool3 S, FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( select_internal( S ,  (( Lhs ).Tile) , (float3)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector3 LWCNegate(FLWCVector3 V) { return MakeLWCVector3(- (( V ).Tile), -V.Offset); }

float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector3 LWCFloor(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector3 LWCCeil(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector3 LWCRound(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), round(VN.Offset)); }
FLWCVector3 LWCTrunc(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), trunc(VN.Offset)); }


float3 LWCSign(FLWCVector3 V) { return float3(sign(LWCToFloat(V))); }
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }
float3 LWCClampScalar(FLWCVector3 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }


FLWCVector3 LWCLerp(FLWCVector3 Lhs, FLWCVector3 Rhs, float3 S)
{
	return MakeLWCVector3(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float3 LWCFmod(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float3 LWCFmodFloor(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float3 LWCFmodFloorPI(FLWCVector3 V)
{
	return LWCFmodFloor(V, PI);
	
}
float3 LWCFmodFloor2PI(FLWCVector3 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float3 LWCSin(FLWCVector3 V) { return sin(LWCFmodFloor2PI(V)); }
float3 LWCCos(FLWCVector3 V) { return cos(LWCFmodFloor2PI(V)); }
float3 LWCTan(FLWCVector3 V) { return tan(LWCFmodFloorPI(V)); }
float3 LWCASin(FLWCVector3 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float3 LWCACos(FLWCVector3 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float3 LWCATan(FLWCVector3 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float3 LWCSmoothStep(FLWCVector3 Lhs, FLWCVector3 Rhs, FLWCVector3 S)
{
	float3 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector3 LWCMin(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMin(float3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMin(FLWCVector3 Lhs, float3 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(float3 Lhs, FLWCVector3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3 LWCMax(FLWCVector3 Lhs, float3 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector3 LWCAbs(FLWCVector3 V) { return LWCSelect(LWCLess(V, (float3)0), LWCNegate(V), V); }

float3 LWCStep(FLWCVector3 Lhs, FLWCVector3 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }
float3 LWCStep(FLWCVector3 Lhs, float3 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }
float3 LWCStep(float3 Lhs, FLWCVector3 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float3)1.0f , (float3)0.0f ); }


FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 396 "/Engine/Private/LargeWorldCoordinates.ush"










#line   5 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNormalizeTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}


FLWCVector4 LWCMakeIntTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile);
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtUnscaled(FLWCVector4 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCSqrtScaled(FLWCVector4 V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float4 LWCRsqrtScaled(FLWCVector4 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4 LWCSqrt(FLWCVector4 V) { return LWCSqrtScaled(V, 1448.15466f); }
float4 LWCRsqrt(FLWCVector4 V) { return LWCRsqrtScaled(V, 0.000690533954f); }
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }









  bool4  LWCGreater ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool4  LWCGreater ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool4  LWCGreater ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
  bool4  LWCGreaterEqual ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool4  LWCGreaterEqual ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool4  LWCGreaterEqual ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
  bool4  LWCLess ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool4  LWCLess ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool4  LWCLess ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
  bool4  LWCLessEqual ( FLWCVector4 Lhs, FLWCVector4 Rhs) { 		return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool4  LWCLessEqual ( float4 Lhs, FLWCVector4 Rhs) { 		return - (( Rhs ).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool4  LWCLessEqual ( FLWCVector4 Lhs, float4 Rhs) { 		return  (( Lhs ).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }





float4 LWCDdx(FLWCVector4 V) { return (float4)0; }
float4 LWCDdy(FLWCVector4 V) { return (float4)0; }





FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

bool4 LWCEquals(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return ( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f == Rhs.Offset - Lhs.Offset;
}
bool4 LWCEquals(float4 Lhs, FLWCVector4 Rhs)
{
	return - (( Rhs ).Tile) * 2097152.00f == Rhs.Offset - Lhs;
} 
bool4 LWCEquals(FLWCVector4 Lhs, float4 Rhs)
{
	return  (( Lhs ).Tile) * 2097152.00f == Rhs - Lhs.Offset;
}
bool4 LWCEqualsApprox(FLWCVector4 Lhs, FLWCVector4 Rhs, float Threshold)
{
	return abs(( (( Lhs ).Tile) -  (( Rhs ).Tile)) * 2097152.00f + (Lhs.Offset - Rhs.Offset)) < (float4)Threshold;
}
bool4 LWCEqualsApprox(float4 Lhs, FLWCVector4 Rhs, float Threshold)
{
	return abs(- (( Rhs ).Tile) * 2097152.00f + (Lhs - Rhs.Offset)) < (float4)Threshold;
}
bool4 LWCEqualsApprox(FLWCVector4 Lhs, float4 Rhs, float Threshold)
{
	return abs( (( Lhs ).Tile) * 2097152.00f + (Lhs.Offset - Rhs)) < (float4)Threshold;
}

FLWCVector4 LWCSelect(bool4 S, FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( select_internal( S ,  (( Lhs ).Tile) ,  (( Rhs ).Tile) ),  select_internal( S , Lhs.Offset , Rhs.Offset )); }
FLWCVector4 LWCSelect(bool4 S, float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( select_internal( S , (float4)0 ,  (( Rhs ).Tile) ),  select_internal( S , Lhs , Rhs.Offset )); }
FLWCVector4 LWCSelect(bool4 S, FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( select_internal( S ,  (( Lhs ).Tile) , (float4)0 ),  select_internal( S , Lhs.Offset , Rhs )); }

FLWCVector4 LWCNegate(FLWCVector4 V) { return MakeLWCVector4(- (( V ).Tile), -V.Offset); }

float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

FLWCVector4 LWCFloor(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), floor(VN.Offset)); }
FLWCVector4 LWCCeil(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), ceil(VN.Offset)); }
FLWCVector4 LWCRound(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), round(VN.Offset)); }
FLWCVector4 LWCTrunc(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), trunc(VN.Offset)); }


float4 LWCSign(FLWCVector4 V) { return float4(sign(LWCToFloat(V))); }
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }
float4 LWCClampScalar(FLWCVector4 V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }


FLWCVector4 LWCLerp(FLWCVector4 Lhs, FLWCVector4 Rhs, float4 S)
{
	return MakeLWCVector4(lerp( (( Lhs ).Tile),  (( Rhs ).Tile), S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float4 LWCFmod(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float4 LWCFmodFloor(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}
float4 LWCFmodFloorPI(FLWCVector4 V)
{
	return LWCFmodFloor(V, PI);
	
}
float4 LWCFmodFloor2PI(FLWCVector4 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

float4 LWCSin(FLWCVector4 V) { return sin(LWCFmodFloor2PI(V)); }
float4 LWCCos(FLWCVector4 V) { return cos(LWCFmodFloor2PI(V)); }
float4 LWCTan(FLWCVector4 V) { return tan(LWCFmodFloorPI(V)); }
float4 LWCASin(FLWCVector4 V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float4 LWCACos(FLWCVector4 V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float4 LWCATan(FLWCVector4 V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float4 LWCSmoothStep(FLWCVector4 Lhs, FLWCVector4 Rhs, FLWCVector4 S)
{
	float4 t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector4 LWCMin(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMin(float4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMin(FLWCVector4 Lhs, float4 Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(float4 Lhs, FLWCVector4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4 LWCMax(FLWCVector4 Lhs, float4 Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector4 LWCAbs(FLWCVector4 V) { return LWCSelect(LWCLess(V, (float4)0), LWCNegate(V), V); }

float4 LWCStep(FLWCVector4 Lhs, FLWCVector4 Rhs)   { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }
float4 LWCStep(FLWCVector4 Lhs, float4 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }
float4 LWCStep(float4 Lhs, FLWCVector4 Rhs) { return  select_internal( LWCGreaterEqual(Rhs, Lhs) , (float4)1.0f , (float4)0.0f ); }


FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 406 "/Engine/Private/LargeWorldCoordinates.ush"







FLWCScalar LWCMakeRelativeToTile(FLWCScalar V, float NewTile) { return MakeLWCScalar(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCScalar(NewTile, (float)0.0f)))); }
FLWCVector2 LWCMakeRelativeToTile(FLWCVector2 V, float2 NewTile) { return MakeLWCVector2(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector2(NewTile, (float2)0.0f)))); }
FLWCVector3 LWCMakeRelativeToTile(FLWCVector3 V, float3 NewTile) { return MakeLWCVector3(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector3(NewTile, (float3)0.0f)))); }
FLWCVector4 LWCMakeRelativeToTile(FLWCVector4 V, float4 NewTile) { return MakeLWCVector4(NewTile, LWCToFloat(LWCSubtract(V, MakeLWCVector4(NewTile, (float4)0.0f)))); }
FLWCMatrix LWCMakeRelativeToTile(FLWCMatrix M, float3 NewTile)
{
	LWCSetOrigin(M, LWCMakeRelativeToTile(LWCGetOrigin(M), NewTile));
	return M;
}

FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }

FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }


FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}



FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }

float LWCNormalize(FLWCScalar V) { return 1.0f; } 
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }












#line 201 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/InstancedStereo.ush"








#line   1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 TranslatedWorldToSubpixelClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogScreenUVToHistoryVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
	void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.TranslatedWorldToSubpixelClip = View.TranslatedWorldToSubpixelClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.MatrixTilePosition = View.MatrixTilePosition;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View.RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View.RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View.RelativePreViewTranslation;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View.PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View.PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View.RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogScreenUVToHistoryVolumeUV = View.VolumetricFogScreenUVToHistoryVolumeUV;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View.OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = View.InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	FinalizeViewState(Result);
	return Result;
}
#line 649 "/Engine/Generated/GeneratedInstancedStereo.ush"

#line  15 "/Engine/Private/InstancedStereo.ush"


void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}



static ViewState ResolvedView = (ViewState)0.0f;

ViewState ResolveView()
{
	return GetPrimaryView();
}













bool IsInstancedStereo()
{



	return false;

}

uint GetEyeIndex(uint InstanceId)
{



	return 0;

}

uint GetInstanceId(uint InstanceId)
{



	return InstanceId;

}
#line 203 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/Definitions.usf"























































































































































































































































































#line 205 "/Engine/Private/Common.ush"


#line   7 "/Engine/Private/AssertionMacros.ush"

















	









	









	







	





















	

	
	

#line 207 "/Engine/Private/Common.ush"







	







	























static float GlobalTextureMipBias = 0;
static float GlobalRayCone_TexArea = 0;
float ComputeRayConeLod(Texture2D Tex)
{






    return 0.0f;

}

float  ClampToHalfFloatRange(float  X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4 Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);



}
float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{

	return Tex.SampleLevel(Sampler, UV.Value, ComputeRayConeLod(Tex) + GlobalTextureMipBias);



}
float Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias) .a;



}
float4 Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV, float MipBias)
{

	return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + MipBias + GlobalTextureMipBias);



}
float4 Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV, float2 DDX, float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV, float MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV, float3 DDX, float3 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4 TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV, float Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4 TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV, float MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV, float3 DDX, float3 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4 TextureExternalSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{

	


		return Tex.SampleLevel(Sampler, UV, ComputeRayConeLod(Tex) + GlobalTextureMipBias);
	



}
float4 TextureExternalSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV, float2 DDX, float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4 TextureExternalSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4 Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Texture1DSample(Tex, Sampler, UV);

}
float4 Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4 Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4 TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}
float4 TextureExternalSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return TextureExternalSample(Tex, Sampler, UV);

}

float4 Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV, float MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}
float4 Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV, float2 DDX, float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}












float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;	
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;

	




	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0: 
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1: 
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2: 
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame,  InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


float4 TextureCubeArraySample(TextureCubeArray Tex, SamplerState Sampler, float4 UV)
{
	return Tex.Sample(Sampler, UV);
}

float4 TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float4 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

float4 TextureCubeArraySampleBias(TextureCubeArray Tex, SamplerState Sampler, float4 UV, float MipBias)
{

	return Tex.SampleLevel(Sampler, UV, 0);



}

float4 TextureCubeArraySampleGrad(TextureCubeArray Tex, SamplerState Sampler, float4 UV, float3 DDX, float3 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float4 TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex, float Mip)
{
	return TextureCubeArraySampleLevel(Tex, Sampler, float4(UV, ArrayIndex), Mip);
}




	






	
	

	

	
	




	








float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

float length2(float2 v)
{
	return dot(v, v);
}
float length2(float3 v)
{
	return dot(v, v);
}
float length2(float4 v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;



}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;



}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;



}




float ClampedPow(float X,float Y)
{
	return pow(max(abs(X),0.000001f),Y);
}
float2 ClampedPow(float2 X,float2 Y)
{
	return pow(max(abs(X),float2(0.000001f,0.000001f)),Y);
}
float3 ClampedPow(float3 X,float3 Y)
{
	return pow(max(abs(X),float3(0.000001f,0.000001f,0.000001f)),Y);
}  
float4 ClampedPow(float4 X,float4 Y)
{
	return pow(max(abs(X),float4(0.000001f,0.000001f,0.000001f,0.000001f)),Y);
} 


float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}  
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
} 

float DDX(float Input)
{

	return 0;



}

float2 DDX(float2 Input)
{

	return 0;



}

float3 DDX(float3 Input)
{

	return 0;



}

float4 DDX(float4 Input)
{

	return 0;



}

float DDY(float Input)
{

	return 0;



}

float2 DDY(float2 Input)
{

	return 0;



}

float3 DDY(float3 Input)
{

	return 0;



}

float4 DDY(float4 Input)
{

	return 0;



}

#line   7 "/Engine/Private/FastMath.ush"


#line   3 "/Engine/Private/FastMathThirdParty.ush"







































float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}

int4 fastClamp(int4 x, int4 Min, int4 Max)
{




	return clamp(x, Min, Max);

}

int3 fastClamp(int3 x, int3 Min, int3 Max)
{




	return clamp(x, Min, Max);

}

int2 fastClamp(int2 x, int2 Min, int2 Max)
{




	return clamp(x, Min, Max);

}

int fastClamp(int x, int Min, int Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}





float atanFastPos( float x ) 
{ 
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float2 atanFast( float2 x )
{
	return float2( atanFast(x.x), atanFast(x.y) );
}

float3 atanFast( float3 x )
{
	return float3( atanFast(x.x), atanFast(x.y), atanFast(x.z) );
}

float4 atanFast( float4 x )
{
	return float4( atanFast(x.x), atanFast(x.y), atanFast(x.z), atanFast(x.w) );
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;

	
	t0 =         + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}

float2 atan2Fast( float2 y, float2 x )
{
	return float2( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y) );
}

float3 atan2Fast( float3 y, float3 x )
{
	return float3( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z) );
}

float4 atan2Fast( float4 y, float4 x )
{
	return float4( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z), atan2Fast(y.w, x.w) );
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;

	
	
	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{
	
	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x80000000) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line   9 "/Engine/Private/FastMath.ush"




  float FastExp( float x) { return exp2(1.442695f * x); }
  float2 FastExp( float2 x) { return exp2(1.442695f * x); }
  float3 FastExp( float3 x) { return exp2(1.442695f * x); }
  float4 FastExp( float4 x) { return exp2(1.442695f * x); }




  float FastLog( float x) { return log2(0.693147f * x); }
  float2 FastLog( float2 x) { return log2(0.693147f * x); }
  float3 FastLog( float3 x) { return log2(0.693147f * x); }
  float4 FastLog( float4 x) { return log2(0.693147f * x); }
#line 740 "/Engine/Private/Common.ush"

#line   7 "/Engine/Private/Random.ush"





float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	
	
	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}












float RandBBSfloat(float seed)
{
	float s = frac(seed / 4093);
	s = frac(s * s * 4093);
	s = frac(s * s * 4093);
	return s;
}








uint3 Rand3DPCG16(int3 p)
{
	
	uint3 v = uint3(p);

	
	
	
	v = v * 1664525u + 1013904223u;

	
	
	
	
	
	
	
	
	
	
	
	
	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	return v >> 16u;
}






uint3 Rand3DPCG32(int3 p)
{
	
	uint3 v = uint3(p);

	
	v = v * 1664525u + 1013904223u;

	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	v ^= v >> 16u;

	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}








uint4 Rand4DPCG32(int4 p)
{
	
	uint4 v = uint4(p);

	
	v = v * 1664525u + 1013904223u;

	
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	v ^= (v >> 16u);

	
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}








void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);

	
	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
























uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{
	
	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };
	
	uint y = v[0];
	uint z = v[1];
	uint sum = 0;
	
	[unroll] for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v,  bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); 
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{	
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{	
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{
	
	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;

	
	
	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;

	
	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;	
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;	
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
















float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{
	
	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;

	
	
	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][0] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][0] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][1] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][1] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][2] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][2] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[1][3] = float3(rand.yyy & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	gvec[2][3] = float3(rand.zzz & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);

	
	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;
	
	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;
	
	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);
	
	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;	
	if (bTiling)						
	{
		OffsetB = iv1.z * ZShear;
	}

	
	float ts = 1 / 128.0f;

	
	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;

	
	float2 TexA1 = TexA0 + ts;	
	float2 TexB1 = TexB0 + ts;
	if (bTiling)				
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}


	
	float3 A = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;
	
	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{
	
	float Extent = 16;

	
	
	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);

	
	float3 uvw = frac(xyz);
	
	
	float3 p0 = xyz - uvw;

	
	float3 f = PerlinRamp(float4(uvw, 0)).xyz;	
	
	float3 p = p0 + f;
	
	float4 NoiseSample = Texture3DSampleLevel(View.PerlinNoise3DTexture, View.PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);		

	
	
	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{
	
	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;

	
	
	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}

	
	
	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}

	
	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v),  fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);

	
	float4 mindist = float4(0,0,0,100);
	float3 p, offset;

	
	if (Quality == 3)
	{
		 [unroll( 3 )] for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			 [unroll( 3 )] for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				 [unroll( 3 )] for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}

	
	else
	{
		 [unroll( 2 )] for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					if (Quality == 2)
					{
						
						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}

	
	if (Quality >= 4)
	{
		 [unroll( 2 )] for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					
					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}

	
	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos); 
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1); 

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b = 
		  min(max(0, RG), max(0, RB))		
		+ min(max(0, -RG), max(0, GB))		
		+ min(max(0, -RB), max(0, -GB));	
	
	ret.a = 
		  min(max(0, -RG), max(0, -RB))		
		+ min(max(0, RG), max(0, -GB))		
		+ min(max(0, RB), max(0, GB));		

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;

	
	float3 p = Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View.PerlinNoiseGradientTexture, View.PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);

	
	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	
	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);

	
	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);
	
	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop] for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}


#line 741 "/Engine/Private/Common.ush"

  




float PhongShadingPow(float X, float Y)
{
	
	

	

	

	
	
	

	

	
	

	return ClampedPow(X, Y);
}












	



	



Texture2D		LightAttenuationTexture;
SamplerState	LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));
	
	IntVal =  select_internal( IntVal > 127 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 127.0f, -1, 1);
}
float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFF8000 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));
	
	IntVal =  select_internal( IntVal > 32767 , IntVal | 0xFFFFFF80 , IntVal );
	return clamp(IntVal / 32767.0f, -1, 1);
}
float ConvertTangentSnormToUnorm8(float Input)
{
	float Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res =  select_internal( Input >= 0.0f , Input * 127 , ((Input + 1.0) * 127) + 128 );
	return clamp(Res / 255, 0.0f, 0.99f);
}
float ConvertTangentSnormToUnorm16(float Input)
{
	float Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}
float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res =  select_internal( Input >= 0.0f , Input * 32767 , ((Input + 1.0) * 32767) + 32768 );
	return clamp(Res / 65535, 0.0f, 0.99f);
}






uint PackUnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, 0.0, 1.0) * 65535.0));
	return (sv.x | (sv.y << 16u));
}

uint PackSnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, -1.0, 1.0) * 32767.0) + 32767.0);
	return (sv.x | (sv.y << 16u));
}

float2 UnpackUnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = (p & 0xffff) * rcp(65535.0f);
	Ret.y = (p >> 16u) * rcp(65535.0f);
	return Ret;
}

float2 UnpackSnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = clamp((float(p & 0xffff) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	Ret.y = clamp((float(p >> 16u) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	return Ret;
}

float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float AtanFast( float x )
{
	
	float3 A = x < 1 ? float3( x, 0, 1 ) : float3( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float EncodeLightAttenuation(float InColor)
{
	
	
	return sqrt(InColor);
}


float4 EncodeLightAttenuation(float4 InColor)
{
	return sqrt(InColor);
}


float DecodeLightAttenuation(float InColor)
{
	return Square(InColor);
}


float4 DecodeLightAttenuation(float4 InColor)
{
	return Square(InColor);
}


float4 RGBTEncode(float3 Color)
{
	float4 RGBT;
	float Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3 RGBTDecode(float4 RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4 RGBMEncode( float3 Color )
{
	Color *= 1.0 / 64.0;
	
	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4 RGBMEncodeFast( float3 Color )
{
	
	float4 rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *= float4( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3 RGBMDecode( float4 rgbm, float MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3 RGBMDecode( float4 rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4 RGBTEncode8BPC(float3 Color, float Range)
{
	float Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4 RGBT;
	RGBT.a = (Range + 1) / Range *  Max / (1 + Max);

	
	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3 RGBTDecode8BPC(float4 RGBT, float Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}


















float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;
	
	
	
	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return DecodeLightAttenuation(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View.InvDeviceZToWorldZTransform[0] + View.InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View.InvDeviceZToWorldZTransform[2] - View.InvDeviceZToWorldZTransform[3]);
}


bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip[3][3] >= 1.0f;
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (IsOrthoProjection(View.ViewToClip))
	{
		
		return SceneDepth * View.ViewToClip[2][2] + View.ViewToClip[3][2];
	}
	else
	{
		
		return 1.0f / ((SceneDepth + View.InvDeviceZToWorldZTransform[3]) * View.InvDeviceZToWorldZTransform[2]);
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View.BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{
	


	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * View.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;

	
	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);

	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{
	
	float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;	

	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View.BufferSizeAndInvSize.xy - View.ViewRectMin.xy;
	return PixelPos.xy * View.ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View.ViewSizeAndInvSize.xy;
	return (PixelPos + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x =  ViewportUV.x * View.ScreenToViewSpace.x  + View.ScreenToViewSpace.z;
	ProjViewPos.y =  ViewportUV.y * View.ScreenToViewSpace.y  + View.ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}







float2 ScreenAlignedPosition( float4 ScreenPosition )
{
	return float2(ScreenPositionToBufferUV(ScreenPosition));
}




float2 ScreenAlignedUV( float2 UV )
{
	return (UV*float2(2,-2) + float2(-1,1))*View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
}




float2 GetViewportCoordinates(float2 InFragmentCoordinates)
{
	return InFragmentCoordinates;
}




float4 UnpackNormalMap( float4 TextureSample )
{
	


		float2 NormalXY = TextureSample.rg;
	

	NormalXY = NormalXY * float2(2.0f,2.0f) - float2(1.0f,1.0f);
	float NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return float4( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{
	
	float4 MaskConst = float4(Channel == 0, Channel == 1, Channel == 2, Channel == 3);

	
	const float WidthConst = 1.0f;			
	float InvWidthConst = 1 / WidthConst;

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	float Result;
	{
		
		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));

		
		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y)); 
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);	

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{
	
	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;
	
	[loop] for(uint i = 0; i < Levels; ++i)
	{
		
		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{
		
		Out = Out * 0.5f + 0.5f;
	}

	
	return lerp(OutputMin, OutputMax, Out);
}





float4 MaterialExpressionVectorNoise(float3 Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);	

	
	switch (Function)
	{
	case 0:	
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1: 
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2: 
		result = Jacobian[0];
		break;
	case 3: 
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default: 
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}















float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);
	
	
	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;
	
	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;
	
	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;
	
	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));
	
	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));
	
	return saturate(BoxIntersections);
}


float ComputeDistanceFromBoxToPoint(float3 Mins, float3 Maxs, float3 InPoint)
{
	float3 DistancesToMin =  select_internal( InPoint < Mins , abs(InPoint - Mins) , float(0.0) );
	float3 DistancesToMax =  select_internal( InPoint > Maxs , abs(InPoint - Maxs) , float(0.0) );

	
	float Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float ComputeSquaredDistanceFromBoxToPoint(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}





float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;

	
	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	
	
	return mul(InTangentVector, TangentToWorld);
}


float3 TransformWorldVectorToTangent(float3x3 TangentToWorld, float3 InWorldVector)
{
	
	
	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{
	
	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float GetBoxPushout(float3 Normal,float3 Extent)
{
	return dot(abs(Normal * Extent), float3(1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}










struct FScreenVertexOutput
{
	noperspective float2 UV : TEXCOORD0;
	float4 Position : SV_POSITION;
};




float4 EncodeVelocityToTexture(float3 V)
{
	
		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));
	

	
	
	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;

	
		uint Vz = asuint(V.z);

		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float((Vz >>  0) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
	






	return EncodedV;

}

float3 DecodeVelocityFromTexture(float4 InEncodedV)
{



	float4 EncodedV = InEncodedV;

	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;

	
		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
	



	
		V.xy = (V.xy * abs(V.xy)) * 0.5;
	

	return V;
}


bool GetGIReplaceState()
{



	return false;

}


bool GetNaniteReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}




bool GetPathTracingQualitySwitch() { return false;  }
bool GetPathTracingIsShadow() { return false; }
bool GetPathTracingIsIndirectDiffuse() { return false; }
bool GetPathTracingIsIndirectSpecular() { return false; }
bool GetPathTracingIsIndirectVolume() { return false; }


bool GetLightmassReplaceState()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}

struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};







void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters.UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters.UVScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters.PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters.PosScaleBias.xy)) * DrawRectangleParameters.InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}












  float SafeSaturate( float In) {	return saturate(In);}
  float2 SafeSaturate( float2 In) {	return saturate(In);}
  float3 SafeSaturate( float3 In) {	return saturate(In);}
  float4 SafeSaturate( float4 In) {	return saturate(In);}







#line 1893 "/Engine/Private/Common.ush"


  bool IsFinite( float In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool IsPositiveFinite( float In) {	return asuint(In) < 0x7F800000; } float MakeFinite( float In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float MakePositiveFinite( float In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool2 IsFinite( float2 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool2 IsPositiveFinite( float2 In) {	return asuint(In) < 0x7F800000; } float2 MakeFinite( float2 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float2 MakePositiveFinite( float2 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool3 IsFinite( float3 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool3 IsPositiveFinite( float3 In) {	return asuint(In) < 0x7F800000; } float3 MakeFinite( float3 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float3 MakePositiveFinite( float3 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }
  bool4 IsFinite( float4 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; } bool4 IsPositiveFinite( float4 In) {	return asuint(In) < 0x7F800000; } float4 MakeFinite( float4 In) {    return  select_internal( !IsFinite(In) , 0.0 , In ); } float4 MakePositiveFinite( float4 In) {    return  select_internal( !IsPositiveFinite(In) , 0.0 , In ); }





bool GetShadowReplaceState()
{



	return false;

}

bool GetReflectionCapturePassSwitchState()
{
	return View.RenderingReflectionCaptureMask > 0.0f;
}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) * (1.0f/128.0f);
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return reversebits(Bitfield) >> (32 - BitCount);
}


inline uint Flatten2D(uint2 Coord, uint2 Dim)
{
	return Coord.x + Coord.y * Dim.x;
}


inline uint2 Unflatten2D(uint Index, uint2 Dim)
{
	return uint2(Index % Dim.x, Index / Dim.x);
}

uint2 ZOrder2D(uint Index, const uint SizeLog2)
{
	uint2 Coord = 0; 

	[unroll]
	for (uint i = 0; i < SizeLog2; i++)
	{
		Coord.x |= ((Index >> (2 * i + 0)) & 0x1) << i;
		Coord.y |= ((Index >> (2 * i + 1)) & 0x1) << i;
	}

	return Coord;
}

uint3 ZOrder3D(uint Index, const uint SizeLog2)
{
    uint3 Coord = 0;
    
    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Coord.x |= ((Index >> (3 * i + 0)) & 0x1) << i;
        Coord.y |= ((Index >> (3 * i + 1)) & 0x1) << i;
        Coord.z |= ((Index >> (3 * i + 2)) & 0x1) << i;
    }

    return Coord;
}

uint ZOrder3DEncode(uint3 Coord, const uint SizeLog2)
{
    uint Index = 0;
    
    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Index |= ((Coord.x >> i) & 0x1) << (3 * i + 0);
        Index |= ((Coord.y >> i) & 0x1) << (3 * i + 1);
        Index |= ((Coord.z >> i) & 0x1) << (3 * i + 2);
    }

    return Index;
}

uint DivideAndRoundUp(uint Dividend, uint Divisor)
{
	return (Dividend + Divisor - 1) / Divisor;
}


uint DivideAndRoundUp(uint Dividend, uint Divisor, uint DivisorAsBitShift)
{
	return (Dividend + Divisor - 1) >> DivisorAsBitShift;
}


struct FPixelShaderIn
{
	
	float4 SvPosition;

	
	uint Coverage;

	
	bool bIsFrontFace;
};

struct FPixelShaderOut
{
	
	float4 MRT[8];
	
	
	uint StrataOutput[3];
	uint StrataTopLayerData;

	
	uint Coverage;

	
	float Depth;
};





























float4 GatherDepth(Texture2D Texture, float2 UV)
{
	
	float4 DeviceZ = Texture.GatherRed( D3DStaticBilinearClampedSampler, UV);

	return float4(
		ConvertFromDeviceZ(DeviceZ.x),
		ConvertFromDeviceZ(DeviceZ.y),
		ConvertFromDeviceZ(DeviceZ.z),
		ConvertFromDeviceZ(DeviceZ.w));
}




#line   7 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   7 "/Engine/Private/SHCommon.ush"



struct FOneBandSHVector
{
	float V;
};


struct FOneBandSHVectorRGB
{
	FOneBandSHVector R;
	FOneBandSHVector G;
	FOneBandSHVector B;
};


struct FTwoBandSHVector
{
	float4 V;
};


struct FTwoBandSHVectorRGB
{
	FTwoBandSHVector R;
	FTwoBandSHVector G;
	FTwoBandSHVector B;
};


struct FThreeBandSHVector
{
	float4 V0;
	float4 V1;
	float V2;
};

struct FThreeBandSHVectorRGB
{
	FThreeBandSHVector R;
	FThreeBandSHVector G;
	FThreeBandSHVector B;
};

FTwoBandSHVectorRGB MulSH(FTwoBandSHVectorRGB A, float Scalar)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.R.V * Scalar;
	Result.G.V = A.G.V * Scalar;
	Result.B.V = A.B.V * Scalar;
	return Result;
}

FTwoBandSHVectorRGB MulSH(FTwoBandSHVector A, float3 Color)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.V * Color.r;
	Result.G.V = A.V * Color.g;
	Result.B.V = A.V * Color.b;
	return Result;
}

FTwoBandSHVector MulSH(FTwoBandSHVector A, float Scalar)
{
	FTwoBandSHVector Result;
	Result.V = A.V * Scalar;
	return Result;
}

FThreeBandSHVectorRGB MulSH3(FThreeBandSHVector A, float3 Color)
{
	FThreeBandSHVectorRGB Result;
	Result.R.V0 = A.V0 * Color.r;
	Result.R.V1 = A.V1 * Color.r;
	Result.R.V2 = A.V2 * Color.r;
	Result.G.V0 = A.V0 * Color.g;
	Result.G.V1 = A.V1 * Color.g;
	Result.G.V2 = A.V2 * Color.g;
	Result.B.V0 = A.V0 * Color.b;
	Result.B.V1 = A.V1 * Color.b;
	Result.B.V2 = A.V2 * Color.b;
	return Result;
}

FThreeBandSHVector MulSH3(FThreeBandSHVector A, float Scalar)
{
	FThreeBandSHVector Result;
	Result.V0 = A.V0 * Scalar;
	Result.V1 = A.V1 * Scalar;
	Result.V2 = A.V2 * Scalar;
	return Result;
}

FTwoBandSHVector AddSH(FTwoBandSHVector A, FTwoBandSHVector B)
{
	FTwoBandSHVector Result = A;
	Result.V += B.V;
	return Result;
}

FTwoBandSHVectorRGB AddSH(FTwoBandSHVectorRGB A, FTwoBandSHVectorRGB B)
{
	FTwoBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}

FThreeBandSHVector AddSH(FThreeBandSHVector A, FThreeBandSHVector B)
{
	FThreeBandSHVector Result = A;
	Result.V0 += B.V0;
	Result.V1 += B.V1;
	Result.V2 += B.V2;
	return Result;
}

FThreeBandSHVectorRGB AddSH(FThreeBandSHVectorRGB A, FThreeBandSHVectorRGB B)
{
	FThreeBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}





float DotSH(FTwoBandSHVector A,FTwoBandSHVector B)
{
	float Result = dot(A.V, B.V);
	return Result;
}





float3 DotSH(FTwoBandSHVectorRGB A,FTwoBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH(A.R,B);
	Result.g = DotSH(A.G,B);
	Result.b = DotSH(A.B,B);
	return Result;
}

float DotSH1(FOneBandSHVector A,FOneBandSHVector B)
{
	float Result = A.V * B.V;
	return Result;
}

float3 DotSH1(FOneBandSHVectorRGB A,FOneBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH1(A.R,B);
	Result.g = DotSH1(A.G,B);
	Result.b = DotSH1(A.B,B);
	return Result;
}

float DotSH3(FThreeBandSHVector A,FThreeBandSHVector B)
{
	float Result = dot(A.V0, B.V0);
	Result += dot(A.V1, B.V1);
	Result += A.V2 * B.V2;
	return Result;
}

float3 DotSH3(FThreeBandSHVectorRGB A,FThreeBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH3(A.R,B);
	Result.g = DotSH3(A.G,B);
	Result.b = DotSH3(A.B,B);
	return Result;
}

FTwoBandSHVector GetLuminance(FTwoBandSHVectorRGB InRGBVector)
{
	FTwoBandSHVector Out;
	Out.V = InRGBVector.R.V * 0.3f + InRGBVector.G.V * 0.59f + InRGBVector.B.V * 0.11f;
	return Out;
}


float3 GetMaximumDirection(FTwoBandSHVector SHVector)
{
	
	float3 MaxDirection = float3(-SHVector.V.w, -SHVector.V.y, SHVector.V.z);
	float Length = length(MaxDirection);
	return MaxDirection / max(Length, .0001f);
}


FOneBandSHVector SHBasisFunction1()
{
	FOneBandSHVector Result;
	
	Result.V = 0.282095f; 
	return Result;
}

FTwoBandSHVector SHBasisFunction(float3 InputVector)
{
	FTwoBandSHVector Result;
	
	Result.V.x = 0.282095f; 
	Result.V.y = -0.488603f * InputVector.y;
	Result.V.z = 0.488603f * InputVector.z;
	Result.V.w = -0.488603f * InputVector.x;
	return Result;
}

FThreeBandSHVector SHBasisFunction3(float3 InputVector)
{
	FThreeBandSHVector Result;
	
	Result.V0.x = 0.282095f; 
	Result.V0.y = -0.488603f * InputVector.y;
	Result.V0.z = 0.488603f * InputVector.z;
	Result.V0.w = -0.488603f * InputVector.x;

	float3 VectorSquared = InputVector * InputVector;
	Result.V1.x = 1.092548f * InputVector.x * InputVector.y;
	Result.V1.y = -1.092548f * InputVector.y * InputVector.z;
	Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);
	Result.V1.w = -1.092548f * InputVector.x * InputVector.z;
	Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);

	return Result;
}


float SHAmbientFunction()
{
	return 1 / (2 * sqrt(PI));
}





FOneBandSHVector CalcDiffuseTransferSH1(float Exponent)
{
	FOneBandSHVector Result = SHBasisFunction1();

	
	
	float L0 =					2 * PI / (1 + 1 * Exponent							);

	
	Result.V *= L0;

	return Result;
}

FTwoBandSHVector CalcDiffuseTransferSH(float3 Normal,float Exponent)
{
	FTwoBandSHVector Result = SHBasisFunction(Normal);

	
	
	float L0 =					2 * PI / (1 + 1 * Exponent							);
	float L1 =					2 * PI / (2 + 1 * Exponent							);

	
	Result.V.x *= L0;
	Result.V.yzw *= L1;

	return Result;
}

FThreeBandSHVector CalcDiffuseTransferSH3(float3 Normal,float Exponent)
{
	FThreeBandSHVector Result = SHBasisFunction3(Normal);

	
	
	float L0 =					2 * PI / (1 + 1 * Exponent						);
	float L1 =					2 * PI / (2 + 1 * Exponent						);
	float L2 = Exponent *		2 * PI / (3 + 4 * Exponent + Exponent * Exponent);
	float L3 = (Exponent - 1) *	2 * PI / (8 + 6 * Exponent + Exponent * Exponent);

	







	Result.V0.x *= L0;
	Result.V0.yzw *= L1;
	Result.V1.xyzw *= L2;
	Result.V2 *= L2;

	return Result;
}
 
  


float3 EvaluateSHIrradiance(float3 Direction, float CosThetaAO, FThreeBandSHVectorRGB SH)
{
	float t2 = CosThetaAO * CosThetaAO;
	float t3 = t2 * CosThetaAO;
	float t4 = t2 * t2;

	float c0 = .5f * sqrt(PI) * (1 - t2);
	float c1 = sqrt(PI / 3.0f) * (1 - t3);
	float c2 = sqrt(5.0f * PI) / 16.0f * (3.0f * (1.0f - t4) - 2.0f * (1.0f - t2));

	return max(0.0f, c0 * float3(SH.R.V0.x, SH.G.V0.x, SH.B.V0.x)
		+ c1 * (-float3(SH.R.V0.y, SH.G.V0.y, SH.B.V0.y) * Direction.y + float3(SH.R.V0.z, SH.G.V0.z, SH.B.V0.z) * Direction.z - float3(SH.R.V0.w, SH.G.V0.w, SH.B.V0.w) * Direction.x)
		+ c2 * (float3(SH.R.V1.z, SH.G.V1.z, SH.B.V1.z) * (3.0f * Direction.z * Direction.z - 1.0f)
			+ sqrt(3.0f) * (float3(SH.R.V2, SH.G.V2, SH.B.V2) * (Direction.x * Direction.x - Direction.y * Direction.y)
				+ 2.0f * (float3(SH.R.V1.x, SH.G.V1.x, SH.B.V1.x) * Direction.x * Direction.y - float3(SH.R.V1.y, SH.G.V1.y, SH.B.V1.y) * Direction.y * Direction.z - float3(SH.R.V1.w, SH.G.V1.w, SH.B.V1.w) * Direction.z * Direction.x))));
}
#line   8 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   3 "/Engine/Private/MonteCarlo.ush"










float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}



float3x3 GetTangentBasisFrisvad(float3 TangentZ)
{
	float3 TangentX;
	float3 TangentY;

	if (TangentZ.z < -0.9999999f)
	{
		TangentX = float3(0, -1, 0);
		TangentY = float3(-1, 0, 0);
	}
	else
	{
		float A = 1.0f / (1.0f + TangentZ.z);
		float B = -TangentZ.x * TangentZ.y * A;
		TangentX = float3(1.0f - TangentZ.x * TangentZ.x * A, B, -TangentZ.x);
		TangentY = float3(B, 1.0f - TangentZ.y * TangentZ.y * A, -TangentZ.y);
	}

	return float3x3( TangentX, TangentY, TangentZ );
}

float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

float3 WorldToTangent(float3 Vec, float3 TangentZ)
{
	return mul(GetTangentBasis(TangentZ), Vec);
}

float2 Hammersley( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x & 0xffff ) / (1<<16) );
	float E2 = float( reversebits(Index) ^ Random.y ) * 2.3283064365386963e-10;
	return float2( E1, E2 );
}

float2 Hammersley16( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x ) * (1.0 / 65536.0) );
	float E2 = float( ( reversebits(Index) >> 16 ) ^ Random.y ) * (1.0 / 65536.0);
	return float2( E1, E2 );
}


float2 R2Sequence( uint Index )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	return frac( a * Index );
}



float2 JitteredR2( uint Index, uint NumSamples, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * float(Index) + ( JitterAmount * 0.5 * d0 * sqrt(PI) * rsqrt( float(NumSamples) ) ) * Jitter );
}


float2 JitteredR2( uint Index, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * Index + ( JitterAmount * 0.25 * d0 * sqrt(PI) * rsqrt( Index - i0 ) ) * Jitter );
}




float2 UniformSampleDisk( float2 E )
{
	float Theta = 2 * PI * E.x;
	float Radius = sqrt( E.y );
	return Radius * float2( cos( Theta ), sin( Theta ) );
}


float3 ConcentricDiskSamplingHelper(float2 E)
{
	
	float2 p = 2 * E - 0.99999994;
	float2 a = abs(p);
	float Lo = min(a.x, a.y);
	float Hi = max(a.x, a.y);
	float Epsilon = 5.42101086243e-20; 
	float Phi = (PI / 4) * (Lo / (Hi + Epsilon) + 2 * float(a.y >= a.x));
	float Radius = Hi;
	
	const uint SignMask = 0x80000000;
	float2 Disk = asfloat((asuint(float2(cos(Phi), sin(Phi))) & ~SignMask) | (asuint(p) & SignMask));
	
	return float3(Disk, Radius);
}

float2 UniformSampleDiskConcentric( float2 E )
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	return Result.xy * Result.z; 
}



float2 UniformSampleDiskConcentricApprox( float2 E )
{
	float2 sf = E * sqrt(2.0) - sqrt(0.5);	
	float2 sq = sf*sf;
	float root = sqrt(2.0*max(sq.x, sq.y) - min(sq.x, sq.y));
	if (sq.x > sq.y)
	{
		sf.x = sf.x > 0 ? root : -root;
	}
	else
	{
		sf.y = sf.y > 0 ? root : -root;
	}
	return sf;
}





float3 EquiAreaSphericalMapping(float2 UV)
{
	UV = 2 * UV - 1;
	float D = 1 - (abs(UV.x) + abs(UV.y));
	float R = 1 - abs(D);
	
	
	float Phi = R == 0 ? 0 : (PI / 4) * ((abs(UV.y) - abs(UV.x)) / R + 1);
	float F = R * sqrt(2 - R * R);
	return float3(
		F * sign(UV.x) * abs(cos(Phi)),
		F * sign(UV.y) * abs(sin(Phi)),
		sign(D) * (1 - R * R)
	);
}




float2 InverseEquiAreaSphericalMapping(float3 Direction)
{
	
	Direction = normalize(Direction);
	
	float3 AbsDir = abs(Direction);
	float R = sqrt(1 - AbsDir.z);
	float Epsilon = 5.42101086243e-20; 
	float x = min(AbsDir.x, AbsDir.y) / (max(AbsDir.x, AbsDir.y) + Epsilon);

	
	const float t1 = 0.406758566246788489601959989e-5f;
	const float t2 = 0.636226545274016134946890922156f;
	const float t3 = 0.61572017898280213493197203466e-2f;
	const float t4 = -0.247333733281268944196501420480f;
	const float t5 = 0.881770664775316294736387951347e-1f;
	const float t6 = 0.419038818029165735901852432784e-1f;
	const float t7 = -0.251390972343483509333252996350e-1f;

	
	float Phi = t6 + t7 * x;
	Phi = t5 + Phi * x;
	Phi = t4 + Phi * x;
	Phi = t3 + Phi * x;
	Phi = t2 + Phi * x;
	Phi = t1 + Phi * x;

	Phi = (AbsDir.x < AbsDir.y) ? 1 - Phi : Phi;
	float2 UV = float2(R - Phi * R, Phi * R);
	UV = (Direction.z < 0) ? 1 - UV.yx : UV;
	UV = asfloat(asuint(UV) ^ (asuint(Direction.xy) & 0x80000000u));
	return UV * 0.5 + 0.5;
}



float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (4 * PI);

	return float4( H, PDF );
}


float4 UniformSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (2 * PI);

	return float4( H, PDF );
}


float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 / PI);

	return float4(H, PDF);
}


float4 CosineSampleHemisphereConcentric(float2 E)
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z;
	float CosTheta = sqrt(1 - SinTheta * SinTheta);
	return float4(Result.xy * SinTheta, CosTheta, CosTheta * (1.0 / PI));
}


float4 CosineSampleHemisphere( float2 E, float3 N ) 
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );

	float PDF = dot(H, N) * (1.0 /  PI);

	return float4( H, PDF );
}

float4 UniformSampleCone( float2 E, float CosThetaMax )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = lerp( CosThetaMax, 1, E.y );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 L;
	L.x = SinTheta * cos( Phi );
	L.y = SinTheta * sin( Phi );
	L.z = CosTheta;

	float PDF = 1.0 / ( 2 * PI * (1 - CosThetaMax) );

	return float4( L, PDF );
}




float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;
	
	
	
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}

float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}


float4 UniformSampleConeConcentricRobust(float2 E, float SinThetaMax2)
{
	
	
	
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z * sqrt(SinThetaMax2);
	float CosTheta = sqrt(1 - SinTheta * SinTheta);

	float3 L = float3(Result.xy * SinTheta, CosTheta);
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}


float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	
	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

float VisibleGGXPDF_aniso(float3 V, float3 H, float2 Alpha)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);
	float a2 = Alpha.x * Alpha.y;
	float3 Hs = float3(Alpha.y * H.x, Alpha.x * H.y, a2 * NoH);
	float S = dot(Hs, Hs);
	float D = (1.0f / PI) * a2 * Square(a2 / S);
	float LenV = length(float3(V.x * Alpha.x, V.y * Alpha.y, NoV));
	float Pdf = (2 * D * VoH) / (NoV + LenV);
	return Pdf;
}





float4 ImportanceSampleVisibleGGX( float2 DiskE, float a2, float3 V )
{
	
	float a = sqrt(a2);

	
	float3 Vh = normalize( float3( a * V.xy, V.z ) );

	
	
	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tangent0 = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Tangent1 = cross(Vh, Tangent0);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = (1 - s) * sqrt( 1 - p.x * p.x ) + s * p.y;

	float3 H;
	H  = p.x * Tangent0;
	H += p.y * Tangent1;
	H += sqrt( saturate( 1 - dot( p, p ) ) ) * Vh;

	
	H = normalize( float3( a * H.xy, max(0.0, H.z) ) );

	return float4(H, VisibleGGXPDF(V, H, a2));
}





float4 ImportanceSampleVisibleGGX_aniso(float2 DiskE, float2 Alpha, float3 V)
{
	
	float3 Vh = normalize(float3(Alpha * V.xy, V.z));

	
	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tx = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Ty = cross(Vh, Tx);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = lerp(sqrt(1 - p.x * p.x), p.y, s);

	float3 H = p.x * Tx + p.y * Ty + sqrt(saturate(1 - dot(p, p))) * Vh;

	
	H = normalize(float3(Alpha * H.xy, max(0.0, H.z)));

	return float4(H, VisibleGGXPDF_aniso(V, H, Alpha));
}



float MISWeight( uint Num, float PDF, uint OtherNum, float OtherPDF )
{
	float Weight = Num * PDF;
	float OtherWeight = OtherNum * OtherPDF;
	return Weight * Weight / (Weight * Weight + OtherWeight * OtherWeight);
}


float MISWeightBalanced(float Pdf, float OtherPdf)
{
	
	

	if (Pdf == OtherPdf)
	{
		
		return 0.5f;
	}

	
	
	
	
	
	if (OtherPdf < Pdf)
	{
		float x = OtherPdf / Pdf;
		return 1.0 / (1.0 + x);
	}
	else
	{
		
		float x = Pdf / OtherPdf;
		return 1.0 - 1.0 / (1.0 + x);
	}
}


float MISWeightRobust(float Pdf, float OtherPdf) {
	
	

	
	
	
	
	
	

	if (Pdf == OtherPdf)
	{
		
		return 0.5f;
	}

	
	
	
	
	
	if (OtherPdf < Pdf)
	{
		float x = OtherPdf / Pdf;
		return 1.0 / (1.0 + x * x);
	}
	else
	{
		
		float x = Pdf / OtherPdf;
		return 1.0 - 1.0 / (1.0 + x * x);
	}
}



float RescaleRandomNumber(float RandVal, float LowerBound, float UpperBound)
{
	const float OneMinusEpsilon = 0.99999994; 
	return min((RandVal - LowerBound) / (UpperBound - LowerBound), OneMinusEpsilon);
}




float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}
#line   9 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   7 "/Engine/Private/OctahedralCommon.ush"











float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

float2 UnitVectorToHemiOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	return float2( N.x + N.y, N.x - N.y );
}

float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}


uint2 OctahedralMapWrapBorder(uint2 TexelCoord, uint Resolution, uint BorderSize)
{
	if (TexelCoord.x < BorderSize)
	{
		TexelCoord.x = BorderSize - 1 + BorderSize - TexelCoord.x;
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.x >= Resolution - BorderSize)
	{
		TexelCoord.x = (Resolution - BorderSize) - (TexelCoord.x - (Resolution - BorderSize - 1));
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.y < BorderSize)
	{
		TexelCoord.y = BorderSize - 1 + BorderSize - TexelCoord.y;
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}
	if (TexelCoord.y >= Resolution - BorderSize)
	{
		TexelCoord.y = (Resolution - BorderSize) - (TexelCoord.y - (Resolution - BorderSize - 1));
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}

	return TexelCoord - BorderSize;
}



float ComputeSphericalExcess(float3 A, float3 B, float3 C) {
    float CosAB = dot(A, B);
    float SinAB = 1.0f - CosAB * CosAB;
    float CosBC = dot(B, C);
    float SinBC = 1.0f - CosBC * CosBC;
    float CosCA = dot(C, A);
    float CosC = CosCA - CosAB * CosBC;
    float SinC = sqrt(SinAB * SinBC - CosC * CosC);
    float Inv = (1.0f - CosAB) * (1.0f - CosBC);
	return 2.0f * atan2(SinC, sqrt((SinAB * SinBC * (1.0f + CosBC) * (1.0f + CosAB)) / Inv) + CosC);
}


float OctahedralSolidAngle(float2 TexelCoord, float InvResolution)
{
	float3 Direction10 = OctahedronToUnitVector((TexelCoord + float2(.5f, -.5f) * InvResolution) * 2.0f - 1.0f);
	float3 Direction01 = OctahedronToUnitVector((TexelCoord + float2(-.5f, .5f) * InvResolution) * 2.0f - 1.0f);

	float SolidAngle0 = ComputeSphericalExcess(
		OctahedronToUnitVector((TexelCoord + float2(-.5f, -.5f) * InvResolution) * 2.0f - 1.0f), 
		Direction10,
		Direction01);

	float SolidAngle1 = ComputeSphericalExcess(
		OctahedronToUnitVector((TexelCoord + float2(.5f, .5f) * InvResolution) * 2.0f - 1.0f), 
		Direction01,
		Direction10);

	return SolidAngle0 + SolidAngle1;
}
#line  10 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   3 "/Engine/Private/Lumen/LumenCardCommon.ush"




struct FLumenCardData
{
	
	float3x3 MeshCardsToLocalRotation;
	float3 MeshCardsOrigin;
	float3 MeshCardsExtent;

	
	float3x3 WorldToLocalRotation;
	float3 Origin;
	float3 LocalExtent;

	uint2 SizeInPages;
	uint PageTableOffset;

	uint2 HiResSizeInPages;
	uint HiResPageTableOffset;

	
	uint2 ResLevelToResLevelXYBias;

	bool bVisible;
	bool bHeightfield;
	uint AxisAlignedDirection;
	uint LightingChannelMask;

	
	float TexelSize;
};




	











FLumenCardData GetLumenCardData(uint CardId)
{
	FLumenCardData CardData = (FLumenCardData)0;

	uint BaseOffset = CardId * 9;
	float4 Vector0 = LumenCardScene.CardData[BaseOffset + 0];
	float4 Vector1 = LumenCardScene.CardData[BaseOffset + 1];
	float4 Vector2 = LumenCardScene.CardData[BaseOffset + 2];
	float4 Vector3 = LumenCardScene.CardData[BaseOffset + 3];
	float4 Vector4 = LumenCardScene.CardData[BaseOffset + 4];
	float4 Vector5 = LumenCardScene.CardData[BaseOffset + 5];
	float4 Vector6 = LumenCardScene.CardData[BaseOffset + 6];
	float4 Vector7 = LumenCardScene.CardData[BaseOffset + 7];
	float4 Vector8 = LumenCardScene.CardData[BaseOffset + 8];

	CardData.WorldToLocalRotation[0] = Vector0.xyz;
	CardData.WorldToLocalRotation[1] = Vector1.xyz;
	CardData.WorldToLocalRotation[2] = Vector2.xyz;
	CardData.Origin = float3(Vector0.w, Vector1.w, Vector2.w);

	CardData.LocalExtent = abs(Vector3.xyz);

	uint Packed3W = asuint(Vector3.w);
	CardData.ResLevelToResLevelXYBias.x = (Packed3W >> 0) & 0xFF;
	CardData.ResLevelToResLevelXYBias.y = (Packed3W >> 8) & 0xFF;
	CardData.AxisAlignedDirection = (Packed3W >> 16) & 0xF;
	CardData.LightingChannelMask = (Packed3W >> 20) & 0xF;
	CardData.bVisible = (Packed3W >> 24) & 1;
	CardData.bHeightfield = (Packed3W >> 25) & 1;
	 
	CardData.SizeInPages.x = (asuint(Vector4.x) >> 0) & 0xFFFF;
	CardData.SizeInPages.y = (asuint(Vector4.x) >> 16) & 0xFFFF;
	CardData.PageTableOffset = asuint(Vector4.y);
	CardData.HiResSizeInPages.x = (asuint(Vector4.z) >> 0) & 0xFFFF;
	CardData.HiResSizeInPages.y = (asuint(Vector4.z) >> 16) & 0xFFFF;
	CardData.HiResPageTableOffset = asuint(Vector4.w);

	CardData.MeshCardsToLocalRotation[0] = Vector5.xyz;
	CardData.MeshCardsToLocalRotation[1] = Vector6.xyz;
	CardData.MeshCardsToLocalRotation[2] = Vector7.xyz;
	CardData.MeshCardsOrigin = float3(Vector5.w, Vector6.w, Vector7.w);
	CardData.MeshCardsExtent = Vector8.xyz;
	CardData.TexelSize = Vector8.w;

	return CardData;
}

struct FLumenCardPageData
{
	uint CardIndex;
	bool bMapped;

	uint ResLevelPageTableOffset;
	uint2 ResLevelSizeInTiles;

	float2 SizeInTexels;
	float2 PhysicalAtlasCoord;

	float4 CardUVRect;
	float4 PhysicalAtlasUVRect;
	float2 CardUVTexelScale;
	float2 PhysicalAtlasUVTexelScale;

	uint LastDirectLightingUpdateFrameIndex;
	uint LastIndirectLightingUpdateFrameIndex;

	
	uint IndirectLightingTemporalIndex;
};

RWStructuredBuffer<float4> RWLumenCardPageDataBuffer;



	



FLumenCardPageData GetLumenCardPageData(uint CardPageId)
{
	FLumenCardPageData CardPageData = (FLumenCardPageData) 0;

	uint BaseOffset = CardPageId * 5;
	float4 Vector0 = LumenCardScene.CardPageData[BaseOffset + 0];
	float4 Vector1 = LumenCardScene.CardPageData[BaseOffset + 1];
	float4 Vector2 = LumenCardScene.CardPageData[BaseOffset + 2];
	float4 Vector3 = LumenCardScene.CardPageData[BaseOffset + 3];
	float4 Vector4 = LumenCardScene.CardPageData[BaseOffset + 4];

	CardPageData.CardIndex = asuint(Vector0.x);
	CardPageData.ResLevelPageTableOffset = asuint(Vector0.y);
	CardPageData.SizeInTexels = Vector0.zw;
	CardPageData.CardUVRect = Vector1;
	CardPageData.PhysicalAtlasUVRect = Vector2;
	CardPageData.CardUVTexelScale = Vector3.xy;
	CardPageData.ResLevelSizeInTiles = asuint(Vector3.zw);

	CardPageData.LastDirectLightingUpdateFrameIndex = asuint(Vector4.x);
	CardPageData.LastIndirectLightingUpdateFrameIndex = asuint(Vector4.y);
	CardPageData.IndirectLightingTemporalIndex = asuint(Vector4.z);

	
	CardPageData.bMapped = CardPageData.SizeInTexels.x > 0;
	CardPageData.PhysicalAtlasCoord = CardPageData.PhysicalAtlasUVRect.xy * LumenCardScene.PhysicalAtlasSize;
	CardPageData.PhysicalAtlasUVTexelScale = LumenCardScene.InvPhysicalAtlasSize;

	return CardPageData;
}


void SetCardPageUpdateData(uint CardPageId, FLumenCardPageData CardPageData)
{
	

	uint4 Vector4;
	Vector4.x = CardPageData.LastDirectLightingUpdateFrameIndex;
	Vector4.y = CardPageData.LastIndirectLightingUpdateFrameIndex;
	Vector4.z = CardPageData.IndirectLightingTemporalIndex;
	Vector4.w = 0;

	uint BaseOffset = CardPageId * 5;
	RWLumenCardPageDataBuffer[BaseOffset + 4] = asfloat(Vector4);
}

struct FCardVSToPS
{
	float2 AtlasUV : ATTRIBUTE0;
	float2 IndirectLightingAtlasUV : ATTRIBUTE1;
	float2 CardUV : ATTRIBUTE2;
	nointerpolation uint CardTileIndex : CARD_TILE_INDEX;
	nointerpolation uint CardPageIndex : CARD_PAGE_INDEX;
};







struct FLumenMeshCardsData
{
	float3 WorldOrigin;
	float3x3 WorldToLocalRotation;

	float3 MinMeshCardsPosition;
	float3 MaxMeshCardsPosition;

	uint NumCards;
	uint CardOffset;

	bool bHeightfield;
	bool bMostlyTwoSided;

	uint CardLookup[6];
};


FLumenMeshCardsData GetLumenMeshCardsData(uint MeshCardsId)
{
	uint BaseOffset = MeshCardsId * 7;

	FLumenMeshCardsData MeshCardsData;

	float4 V0 = LumenCardScene.MeshCardsData[BaseOffset + 0];
	float4 V1 = LumenCardScene.MeshCardsData[BaseOffset + 1];
	float4 V2 = LumenCardScene.MeshCardsData[BaseOffset + 2];

	MeshCardsData.WorldToLocalRotation[0] = V0.xyz;
	MeshCardsData.WorldToLocalRotation[1] = V1.xyz;
	MeshCardsData.WorldToLocalRotation[2] = V2.xyz;
	MeshCardsData.WorldOrigin = float3(V0.w, V1.w, V2.w);

	uint4 V3 = asuint(LumenCardScene.MeshCardsData[BaseOffset + 3]);
	uint4 V4 = asuint(LumenCardScene.MeshCardsData[BaseOffset + 4]);

	MeshCardsData.CardOffset = V3.x;
	MeshCardsData.NumCards = V3.y & 0xFFFF;
	MeshCardsData.bHeightfield = V3.y & 0x10000 ? true : false;
	MeshCardsData.bMostlyTwoSided = V3.y & 0x20000 ? true : false;
	MeshCardsData.CardLookup[0] = V3.z;
	MeshCardsData.CardLookup[1] = V3.w;
	MeshCardsData.CardLookup[2] = V4.x;
	MeshCardsData.CardLookup[3] = V4.y;
	MeshCardsData.CardLookup[4] = V4.z;
	MeshCardsData.CardLookup[5] = V4.w;

	float4 V5 = LumenCardScene.MeshCardsData[BaseOffset + 5];
	float4 V6 = LumenCardScene.MeshCardsData[BaseOffset + 6];

	MeshCardsData.MinMeshCardsPosition = V5.xyz;
	MeshCardsData.MaxMeshCardsPosition = V6.xyz;

	return MeshCardsData;
}




struct FLumenHeightfieldData
{
	FLWCVector3 BoundsCenter;	
	float3 BoundsExtent;		
	uint MeshCardsIndex;
	bool bValid;
};


FLumenHeightfieldData GetLumenHeightfieldData(uint HeightfieldId)
{
	uint BaseOffset = HeightfieldId * 3;

	FLumenHeightfieldData LumenHeightfield;

	float4 V0 = LumenCardScene.HeightfieldData[BaseOffset + 0];
	float4 V1 = LumenCardScene.HeightfieldData[BaseOffset + 1];
	float4 V2 = LumenCardScene.HeightfieldData[BaseOffset + 2];

	LumenHeightfield.BoundsCenter = MakeLWCVector3(V0.xyz, V1.xyz);
	LumenHeightfield.BoundsExtent = V2.xyz;

	LumenHeightfield.MeshCardsIndex = asuint(V0.w);
	LumenHeightfield.bValid = LumenHeightfield.MeshCardsIndex < LumenCardScene.NumMeshCards;

	return LumenHeightfield;
}

float3 GetCardLocalPosition(float3 CardLocalExtent, float2 CardUV, float Depth)
{
	CardUV.x = 1.0f - CardUV.x;

	float3 LocalPosition;
	LocalPosition.xy = CardLocalExtent.xy * (1.0f - 2.0f * CardUV);
	LocalPosition.z = -(2.0f * Depth - 1.0f) * CardLocalExtent.z;

	return LocalPosition;
}

void GetCardLocalBBox(FLumenCardPageData CardPage, FLumenCardData Card, float2 UVMin, float2 UVMax, out float3 CardPageLocalCenter, out float3 CardPageLocalExtent)
{
	float2 CardUVMin = lerp(CardPage.CardUVRect.xw, CardPage.CardUVRect.zy, UVMin);
	float2 CardUVMax = lerp(CardPage.CardUVRect.xw, CardPage.CardUVRect.zy, UVMax);
	float3 CardPageLocalBoxMin = GetCardLocalPosition(Card.LocalExtent, CardUVMin, 1.0f);
	float3 CardPageLocalBoxMax = GetCardLocalPosition(Card.LocalExtent, CardUVMax, 0.0f);

	CardPageLocalCenter = 0.5f * (CardPageLocalBoxMax + CardPageLocalBoxMin);
	CardPageLocalExtent = 0.5f * (CardPageLocalBoxMax - CardPageLocalBoxMin);
}

void GetCardPageLocalBBox(FLumenCardPageData CardPage, FLumenCardData Card, out float3 CardPageLocalCenter, out float3 CardPageLocalExtent)
{
	GetCardLocalBBox(CardPage, Card, 0, 1, CardPageLocalCenter, CardPageLocalExtent);
}

float3 GetCardWorldPosition(FLumenCardData Card, float2 CardUV, float Depth)
{
	float3 LocalPosition = GetCardLocalPosition(Card.LocalExtent, CardUV, Depth);
	float3 WorldPosition = mul(Card.WorldToLocalRotation, LocalPosition) + Card.Origin;
	return WorldPosition;
}

uint2 GetCardPageSizeInTexels(FLumenCardPageData CardPage, uint2 AtlasSize)
{
	float2 AtlasSizeInUV = CardPage.PhysicalAtlasUVRect.zw - CardPage.PhysicalAtlasUVRect.xy;
	return uint2(AtlasSizeInUV * AtlasSize);
}

float2 CardPageUVToCardUV(FLumenCardPageData CardPage, float2 CardPageUV)
{
	float2 CardUV = lerp(CardPage.CardUVRect.xy, CardPage.CardUVRect.zw, CardPageUV);
	return CardUV;
}

float2 CardPageUVToAtlasUV(FLumenCardPageData CardPage, float2 CardPageUV)
{
	float2 AtlasUV = lerp(CardPage.PhysicalAtlasUVRect.xy, CardPage.PhysicalAtlasUVRect.zw, CardPageUV);
	return AtlasUV;
}

float2 SamplePositonToCardUV(FLumenCardData Card, float2 LocalSamplePosition)
{
	float2 CardUV = saturate(float2(+0.5f, -0.5f) * (LocalSamplePosition / Card.LocalExtent.xy) + 0.5f);
	return CardUV;
}

uint GetMeshCardsIndexFromSceneInstanceIndex(uint SceneInstanceIndex)
{
	const uint MeshCardsIndex = LumenCardScene.SceneInstanceIndexToMeshCardsIndexBuffer.Load(4 * SceneInstanceIndex);
	return MeshCardsIndex;
}
#line  11 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   3 "/Engine/Private/Lumen/LumenTracingCommon.ush"


#line   3 "/Engine/Private/ReflectionEnvironmentShared.ush"








float GetSkyLightCubemapBrightness()
{
	return View.SkyIrradianceEnvironmentMap[7].x; 
}







float ComputeReflectionCaptureMipFromRoughness(float Roughness, float CubemapMaxMip)
{
	
	
	
	float LevelFrom1x1 = 1 - 1.2 * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

float ComputeReflectionCaptureRoughnessFromMip(float Mip, float CubemapMaxMip)
{
	float LevelFrom1x1 = CubemapMaxMip - 1 - Mip;
	return exp2( ( 1 - LevelFrom1x1 ) / 1.2 );
}



float3 GetSkyLightReflection(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, ReflectionStruct.SkyLightParameters.x);
	float3 Reflection = TextureCubeSampleLevel(ReflectionStruct.SkyLightCubemap, ReflectionStruct.SkyLightCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

	OutSkyAverageBrightness = GetSkyLightCubemapBrightness() * Luminance(View.SkyLightColor.rgb);
	return Reflection * View.SkyLightColor.rgb;
}

float3 GetSkyLightReflectionSupportingBlend(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float3 Reflection = GetSkyLightReflection(ReflectionVector, Roughness, OutSkyAverageBrightness);

	[branch]
	if (ReflectionStruct.SkyLightParameters.w > 0)
	{
		float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, ReflectionStruct.SkyLightParameters.x);
		float3 BlendDestinationReflection = TextureCubeSampleLevel(ReflectionStruct.SkyLightBlendDestinationCubemap, ReflectionStruct.SkyLightBlendDestinationCubemapSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

		Reflection = lerp(Reflection, BlendDestinationReflection * View.SkyLightColor.rgb, ReflectionStruct.SkyLightParameters.w);
	}

	return Reflection;
}

bool ShouldSkyLightApplyPrecomputedBentNormalShadowing() {
	return View.SkyLightApplyPrecomputedBentNormalShadowingFlag != 0.0f;
}

bool ShouldSkyLightAffectReflection() {
	return View.SkyLightAffectReflectionFlag != 0.0f;
}

bool ShouldSkyLightAffectGlobalIllumination() {
	return View.SkyLightAffectGlobalIlluminationFlag != 0.0f;
}





float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f); 

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot(View.SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View.SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View.SkyIrradianceEnvironmentMap[2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot(View.SkyIrradianceEnvironmentMap[3], vB);
	Intermediate1.y = dot(View.SkyIrradianceEnvironmentMap[4], vB);
	Intermediate1.z = dot(View.SkyIrradianceEnvironmentMap[5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 = View.SkyIrradianceEnvironmentMap[6].xyz * vC;

	
	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}






float3 GetSkySHDiffuseSimple(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1);

	float3 Intermediate0;
	Intermediate0.x = dot(View.SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View.SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View.SkyIrradianceEnvironmentMap[2], NormalVector);		

	
	return max(0, Intermediate0);
}



float3 GetOffSpecularPeakReflectionDir(float3 Normal, float3 ReflectionVector, float Roughness)
{
	float a = Roughness * Roughness;
	return lerp( Normal, ReflectionVector, (1 - a) * ( sqrt(1 - a) + a ) );	
}

float GetSpecularOcclusion(float NoV, float RoughnessSq, float AO)
{
	return saturate( pow( NoV + AO, RoughnessSq ) - 1 + AO );
}

float3 GetLookupVectorForBoxCapture(float3 ReflectionVector, float3 WorldPosition, float4 BoxCapturePositionAndRadius, float4x4 RelativeWorldToBox, float4 BoxScales, float3 LocalCaptureOffset, out float DistanceAlpha)
{
	
	float3 LocalRayStart		= mul(float4(WorldPosition - BoxCapturePositionAndRadius.xyz, 1), RelativeWorldToBox).xyz;
	float3 LocalRayDirection	= mul(float4(ReflectionVector,  0), RelativeWorldToBox).xyz;

	float3 InvRayDir = rcp(LocalRayDirection);
	
	
	float3 FirstPlaneIntersections = -InvRayDir - LocalRayStart * InvRayDir;
	
	float3 SecondPlaneIntersections = InvRayDir - LocalRayStart * InvRayDir;
	
	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	
	float Intersection = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	
	float3 IntersectPosition = WorldPosition + Intersection * ReflectionVector;
	float3 ProjectedCaptureVector = IntersectPosition - (BoxCapturePositionAndRadius.xyz + LocalCaptureOffset);

	
	
	
	float BoxDistance = ComputeDistanceFromBoxToPoint(-(BoxScales.xyz - .5f * BoxScales.w), BoxScales.xyz - .5f * BoxScales.w, LocalRayStart * BoxScales.xyz);

	
	DistanceAlpha = 1.0 - smoothstep(0, .7f * BoxScales.w, BoxDistance);

	return ProjectedCaptureVector;
}

float3 GetLookupVectorForSphereCapture(float3 ReflectionVector, float3 WorldPosition, float4 SphereCapturePositionAndRadius, float NormalizedDistanceToCapture, float3 LocalCaptureOffset, inout float DistanceAlpha)
{
	float3 ProjectedCaptureVector = ReflectionVector;
	float ProjectionSphereRadius = SphereCapturePositionAndRadius.w;
	float SphereRadiusSquared = ProjectionSphereRadius * ProjectionSphereRadius;

	float3 LocalPosition = WorldPosition - SphereCapturePositionAndRadius.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	
	float3 QuadraticCoef;
	QuadraticCoef.x = 1;
	QuadraticCoef.y = dot(ReflectionVector, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - SphereRadiusSquared;

	float Determinant = QuadraticCoef.y * QuadraticCoef.y - QuadraticCoef.z;

	
	[flatten]
	if (Determinant >= 0)
	{
		float FarIntersection = sqrt(Determinant) - QuadraticCoef.y;

		float3 LocalIntersectionPosition = LocalPosition + FarIntersection * ReflectionVector;
		ProjectedCaptureVector = LocalIntersectionPosition - LocalCaptureOffset;
		
		

		float x = saturate( 2.5 * NormalizedDistanceToCapture - 1.5 );
		DistanceAlpha = 1 - x*x*(3 - 2*x);
	}
	return ProjectedCaptureVector;
}

float ComputeMixingWeight(float IndirectIrradiance, float AverageBrightness, float Roughness)
{
	
	float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));

	
	
	
	
	float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}















#line   5 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   7 "/Engine/Private/BRDF.ush"


struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;

};

void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

void InitMobile(inout BxDFContext Context, float3 N, float3 V, float3 L, float NoL)
{
	Context.NoL = NoL;
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float3 H = normalize(float3(V + L));
	Context.NoH = max(0, dot(N, H));
	Context.VoH = max(0, dot(V, H));

	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}


void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
	
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{
				
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}
#line 258 "/Engine/Private/BRDF.ush"




















float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}


float3 Diffuse_Burley( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float FD90 = 0.5 + 2 * VoH * VoH * Roughness;
	float FdV = 1 + (FD90 - 1) * Pow5( 1 - NoV );
	float FdL = 1 + (FD90 - 1) * Pow5( 1 - NoL );
	return DiffuseColor * ( (1 / PI) * FdV * FdL );
}


float3 Diffuse_OrenNayar( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float s = a;
	float s2 = s * s;
	float VoL = 2 * VoH * VoH - 1;		
	float Cosri = VoL - NoV * NoL;
	float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
	float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? rcp( max( NoL, NoV ) ) : 1 );
	return DiffuseColor / PI * ( C1 + C2 ) * ( 1 + Roughness * 0.5 );
}


float3 Diffuse_Gotanda( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float a2 = a * a;
	float F0 = 0.04;
	float VoL = 2 * VoH * VoH - 1;		
	float Cosri = VoL - NoV * NoL;

	float a2_13 = a2 + 1.36053;
	float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - NoV, 1 + rcp(39*a2*a2+1) ) + 1 );
	
	float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - Pow5( 1 - NoL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (NoL - 1) ) * NoL;
	float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * NoV) ) ) * ( 1 - pow( 1 - NoL, ( 1 - 0.3726732 * NoV * NoV ) / ( 0.188566 + 0.38841 * NoV ) ) );
	float Bp = Cosri < 0 ? 1.4 * NoV * NoL * Cosri : Cosri;
	float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
	return DiffuseColor / PI * Lr;









}



float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{
	
	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);

	
	float g = saturate( (1.0 / 18.0) * log2( 2 * rcpFast(a2) - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );

	
	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );

	
	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrtFast( NoH ) );
	
	Fb *= RetroReflectivityWeight;
	
	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}


float D_Blinn( float a2, float NoH )
{
	float n = 2 / a2 - 2;
	return (n+2) / (2*PI) * PhongShadingPow( NoH, n );		
}


float D_Beckmann( float a2, float NoH )
{
	float NoH2 = NoH * NoH;
	return exp( (NoH2 - 1) / (a2 * NoH2) ) / ( PI * a2 * NoH2 * NoH2 );
}



float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}



float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);




}

float Vis_Implicit()
{
	return 0.25;
}


float Vis_Neumann( float NoV, float NoL )
{
	return 1 / ( 4 * max( NoL, NoV ) );
}


float Vis_Kelemen( float VoH )
{
	
	return rcp( 4 * VoH * VoH + 1e-5);
}



float Vis_Schlick( float a2, float NoV, float NoL )
{
	float k = sqrt(a2) * 0.5;
	float Vis_SchlickV = NoV * (1 - k) + k;
	float Vis_SchlickL = NoL * (1 - k) + k;
	return 0.25 / ( Vis_SchlickV * Vis_SchlickL );
}



float Vis_Smith( float a2, float NoV, float NoL )
{
	float Vis_SmithV = NoV + sqrt( NoV * (NoV - NoV * a2) + a2 );
	float Vis_SmithL = NoL + sqrt( NoL * (NoL - NoL * a2) + a2 );
	return rcp( Vis_SmithV * Vis_SmithL );
}



float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}


float Vis_SmithJoint(float a2, float NoV, float NoL) 
{
	float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
	float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}


float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

float3 F_None( float3 SpecularColor )
{
	return SpecularColor;
}


float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	
	
	
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

float3 F_AdobeF82(float3 F0, float3 F82, float VoH)
{
	
	
	
	const float Fc = Pow5(1 - VoH);
	const float K = 49.0 / 46656.0;
	float3 b = (K - K * F82) * (7776.0 + 9031.0 * F0);
	return saturate(F0 + Fc * ((1 - F0) - b * (VoH - VoH * VoH)));
}

float3 F_Fresnel( float3 SpecularColor, float VoH )
{
	float3 SpecularColorSqrt = sqrt( clamp(SpecularColor, float3(0, 0, 0), float3(0.99, 0.99, 0.99) ) );
	float3 n = ( 1 + SpecularColorSqrt ) / ( 1 - SpecularColorSqrt );
	float3 g = sqrt( n*n + VoH*VoH - 1 );
	return 0.5 * Square( (g - VoH) / (g + VoH) ) * ( 1 + Square( ((g+VoH)*VoH - 1) / ((g-VoH)*VoH + 1) ) );
}






void ModifyGGXAnisotropicNormalRoughness(float3 WorldTangent, float Anisotropy, inout float Roughness, inout float3 N, float3 V)
{
	if (abs(Anisotropy) > 0.0f)
	{
		float3 X = WorldTangent;
		float3 Y = normalize(cross(N, X));

		float3 AnisotropicDir = Anisotropy >= 0.0f ? Y : X;
		float3 AnisotropicT   = cross(AnisotropicDir, V); 
		float3 AnisotropicN   = cross(AnisotropicT, AnisotropicDir);

		float AnisotropicStretch = abs(Anisotropy) * saturate(5.0f * Roughness);
		N = normalize(lerp(N, AnisotropicN, AnisotropicStretch));



	}
}


void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{

	
	
	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);





}


float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{
	
	
	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}


void GetAnisotropicFactor(float RoughnessX, float RoughnessY, inout float Anisotropy, inout float OriginalRoughness)
{
	const float MinRoughness = 0.001f;
	float r = Pow2(max(RoughnessX, MinRoughness) / max(RoughnessY, MinRoughness));
	Anisotropy = (r - 1.0) / (r + 1.0);
	OriginalRoughness = (RoughnessX + RoughnessY) / (sqrt(1.0 + Anisotropy) + sqrt(1.0 - Anisotropy));
}


Texture2D		PreIntegratedGF;
SamplerState	PreIntegratedGFSampler;



float3 EnvBRDF( float3 SpecularColor, float Roughness, float NoV )
{
	
	float2 AB = Texture2DSampleLevel( PreIntegratedGF, PreIntegratedGFSampler, float2( NoV, Roughness ), 0 ).rg;

	
	float3 GF = SpecularColor * AB.x + saturate( 50.0 * SpecularColor.g ) * AB.y;
	return GF;
}

float3 EnvBRDF(float3 F0, float3 F90, float Roughness, float NoV)
{
	
	float2 AB = Texture2DSampleLevel(PreIntegratedGF, PreIntegratedGFSampler, float2(NoV, Roughness), 0).rg;
	float3 GF = F0 * AB.x + F90 * AB.y;
	return GF;
}

float2 EnvBRDFApproxLazarov(float Roughness, float NoV)
{
	
	
	const float4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const float4 c1 = { 1, 0.0425, 1.04, -0.04 };
	float4 r = Roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
	return AB;
}

float3 EnvBRDFApprox( float3 SpecularColor, float Roughness, float NoV )
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);

	
	
	float F90 = saturate( 50.0 * SpecularColor.g );

	return SpecularColor * AB.x + F90 * AB.y;
}

float3 EnvBRDFApprox(float3 F0, float3 F90, float Roughness, float NoV)
{
	float2 AB = EnvBRDFApproxLazarov(Roughness, NoV);
	return F0 * AB.x + F90 * AB.y;
}

float EnvBRDFApproxNonmetal( float Roughness, float NoV )
{
	
	const float2 c0 = { -1, -0.0275 };
	const float2 c1 = { 1, 0.0425 };
	float2 r = Roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
}

void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}


float D_InvBlinn( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;
	
	return rcp( PI * (1 + A*a2) ) * ( 1 + A * exp( -Cos2h / a2 ) );
}

float D_InvBeckmann( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;
	float Sin4h = Sin2h * Sin2h;
	return rcp( PI * (1 + A*a2) * Sin4h ) * ( Sin4h + A * exp( -Cos2h / (a2 * Sin2h) ) );
}

float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}

float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}

float D_Charlie(float Roughness, float NoH)
{
	float InvR = 1 / Roughness;
	float Cos2H = NoH * NoH;
	float Sin2H = 1 - Cos2H;
	return (2 + InvR) * pow(Sin2H, InvR * 0.5) / (2 * PI);
}


float Vis_Charlie_L(float x, float r)
{
	r = saturate(r);
	r = 1.0 - (1. - r) * (1. - r);

	float a = lerp(25.3245 , 21.5473 , r);
	float b = lerp( 3.32435,  3.82987, r);
	float c = lerp( 0.16801,  0.19823, r);
	float d = lerp(-1.27393, -1.97760, r);
	float e = lerp(-4.85967, -4.32054, r);

	return a * rcp( (1 + b * pow(x, c)) + d * x + e);
}
float Vis_Charlie(float Roughness, float NoV, float NoL)
{
	float VisV = NoV < 0.5 ? exp(Vis_Charlie_L(NoV, Roughness)) : exp(2 * Vis_Charlie_L(0.5, Roughness) - Vis_Charlie_L(1 - NoV, Roughness));
	float VisL = NoL < 0.5 ? exp(Vis_Charlie_L(NoL, Roughness)) : exp(2 * Vis_Charlie_L(0.5, Roughness) - Vis_Charlie_L(1 - NoL, Roughness));

	return rcp(((1 + VisV + VisL) * (4 * NoV * NoL)));
}

float Vis_Ashikhmin(float NoV, float NoL)
{
	return rcp(4 * (NoL + NoV - NoL * NoV));
}


float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;

	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	

		
		
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		
		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);
		
		
		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);

		
		
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);

		
		Transmittance = exp(-OpticalDepth);
		
		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}

	
	
	
	

	return Transmittance;
}
#line   6 "/Engine/Private/Lumen/LumenTracingCommon.ush"




#line   3 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"









	











    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

#line  72 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"


















struct FGlobalDistanceFieldPage
{
	uint PageIndex;
	bool bValid;
	bool bCoverage;
};

uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset;
	
	
	

	
	PageAtlasOffset.x = Page.PageIndex & 0x7F;
	PageAtlasOffset.y = (Page.PageIndex >> 7) & 0x7F;
	PageAtlasOffset.z = Page.PageIndex >> 14;

	return PageAtlasOffset;
}

uint PackGlobalDistanceFieldPage(FGlobalDistanceFieldPage Page)
{
	uint PackedPage = 0xFFFFFFFF;
	if (Page.bValid)
	{
		PackedPage = Page.PageIndex & 0x00FFFFFF;
		PackedPage |= Page.bCoverage ? 0x80000000 : 0;
	}
	return PackedPage;
}

FGlobalDistanceFieldPage UnpackGlobalDistanceFieldPage(uint PackedPage)
{
	FGlobalDistanceFieldPage Page;
	Page.PageIndex = PackedPage & 0x00FFFFFF;
	Page.bCoverage = PackedPage & 0x80000000;
	Page.bValid = PackedPage < 0xFFFFFFFF;
	return Page;
}

FGlobalDistanceFieldPage GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * View.GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * View.GlobalDistanceFieldClipmapSizeInPages), 0);
	uint PackedPage = View.GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return UnpackGlobalDistanceFieldPage(PackedPage);
}

void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View.GlobalDistanceFieldClipmapSizeInPages);

	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	OutPageUV = PageAtlasCoord * View.GlobalDistanceFieldInvPageAtlasSize;

	float3 CoveragePageAtlasCoord = PageAtlasOffset * 4 + VolumePageUV * (4 - 1) + 0.5f;
	OutCoveragePageUV = CoveragePageAtlasCoord * View.GlobalDistanceFieldInvCoverageAtlasSize;
}

float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View.GlobalDistanceFieldClipmapSizeInPages);
	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	float3 PageUV = PageAtlasCoord * View.GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

float3 ComputeGlobalDistanceFieldCoveragePageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View.GlobalDistanceFieldClipmapSizeInPages);
	float3 CoveragePageAtlasCoord = PageAtlasOffset * 4 + VolumePageUV * (4 - 1) + 0.5f;
	float3 CoveragePageUV = CoveragePageAtlasCoord * View.GlobalDistanceFieldInvCoverageAtlasSize;
	return CoveragePageUV;
}

float EncodeGlobalDistanceFieldPageDistance(float Distance, float ClipmapInfluenceRange)
{
	return saturate(Distance / (2.0f * ClipmapInfluenceRange) + 0.5f);
}

float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

float3 ComputeGlobalUV(float3 TranslatedWorldPosition, uint ClipmapIndex)
{
	
	float4 TranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul[ClipmapIndex];
	float3 UV = frac(TranslatedWorldPosition * TranslatedWorldToUVAddAndMul.www + TranslatedWorldToUVAddAndMul.xyz); 
	UV = frac(UV); 
	return UV;
}

float3 ComputeGlobalMipUV(float3 TranslatedWorldPosition, uint ClipmapIndex)
{
	float3 MipUV = saturate(TranslatedWorldPosition * View.GlobalDistanceFieldMipTranslatedWorldToUVScale[ClipmapIndex].xyz + View.GlobalDistanceFieldMipTranslatedWorldToUVBias[ClipmapIndex].xyz);

	
	float MipUVMinZ = View.GlobalDistanceFieldMipTranslatedWorldToUVScale[ClipmapIndex].w;
	float MipUVMaxZ = View.GlobalDistanceFieldMipTranslatedWorldToUVBias[ClipmapIndex].w;
	MipUV.z = clamp(MipUV.z, MipUVMinZ, MipUVMaxZ);

	return MipUV;
}

float GetDistanceToNearestSurfaceGlobal(float3 TranslatedWorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < View.NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);
		const float ClipmapVoxelExtent = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f * 4 * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);

			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View.GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

float SampleGlobalDistanceField(float3 TranslatedWorldPosition, float MaxDistance, int MinClipmapIndex)
{
	float Distance = MaxDistance;

	for (uint ClipmapIndex = MinClipmapIndex; Distance <= MaxDistance && ClipmapIndex < View.NumGlobalSDFClipmaps; ++ClipmapIndex)
	{
		const float ClipmapInfluenceRange = 4 * 2.0f * View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize;
		
		float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);
		FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

		if (Page.bValid)
		{
			float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

			float DistanceFieldValue = Texture3DSampleLevel(View.GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;

			if (DistanceFieldValue < 1.0f)
			{
				Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
				break;
			}
		}
	}

	return Distance;
}

float GlobalDistanceFieldSampleClipmap(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float DistanceFieldValue = 1.0f;

	
	ClipmapVolumeUV = frac(ClipmapVolumeUV);

	FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
	if (Page.bValid)
	{
		float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);
		DistanceFieldValue = Texture3DSampleLevel(View.GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;
	}

	return DistanceFieldValue;
}

float3 GlobalDistanceFieldPageCentralDiff(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float3 TexelOffset = 0.5f * View.GlobalVolumeTexelSize;

	float R = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(+TexelOffset.x, 0, 0), ClipmapIndex);
	float L = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(-TexelOffset.x, 0, 0), ClipmapIndex);
	float F = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, +TexelOffset.y, 0), ClipmapIndex);
	float B = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, -TexelOffset.y, 0), ClipmapIndex);
	float U = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, +TexelOffset.z), ClipmapIndex);
	float D = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, -TexelOffset.z), ClipmapIndex);

	return float3(R - L, F - B, U - D);
}

float3 ComputeGlobalDistanceFieldNormal(float3 SampleTranslatedWorldPosition, uint ClipmapIndex, float3 FallbackNormal)
{
	float3 ClipmapVolumeUV = ComputeGlobalUV(SampleTranslatedWorldPosition, ClipmapIndex);
	float3 DistanceFieldGradient = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);
	float DistanceFieldGradientLength = length(DistanceFieldGradient);
	float3 DistanceFieldNormal = DistanceFieldGradientLength > 0.001f ? DistanceFieldGradient / DistanceFieldGradientLength : FallbackNormal;
	return DistanceFieldNormal;
}



float3 GetDistanceFieldGradientGlobal(float3 TranslatedWorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex < View.NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);
			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View.GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;

				
				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);

					const float ClipmapInfluenceRange = 4 * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w;

					
					const float BackwardsCompatibilityFactor = 128.0f * View.GlobalVolumeTexelSize;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}

float CalculateDistanceFieldApproxAO(FLWCVector3 WorldPosition, float3 WorldNormal, uint NumSteps, float StepDistance, float StepScale, float DistanceBias, float MaxDistance)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	
	int MinClipmapIndex = -1;

	for (uint ClipmapIndex = 0; ClipmapIndex < View.NumGlobalSDFClipmaps; ++ClipmapIndex)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);
		if (DistanceFromClipmap > MaxDistance)
		{
			MinClipmapIndex = ClipmapIndex;
			break;
		}
	}

	if (MinClipmapIndex < 0)
	{
		return 1.0f;
	}

	float Occlusion = 0.0f;
	float W = 0.5f;
	float TotalW = 0.0f;

	for (uint StepIndex = 0; StepIndex < NumSteps; ++StepIndex)
	{
		const float CurrentDistance = StepDistance + DistanceBias;
		const float Dist = max(0.0f, SampleGlobalDistanceField(TranslatedWorldPosition + WorldNormal * CurrentDistance, CurrentDistance, MinClipmapIndex));

		Occlusion += W * Dist / CurrentDistance;
		TotalW += W;
		W *= 0.5f;

		StepDistance *= StepScale;
	}

	return saturate(Occlusion / TotalW);
}

#line 405 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"


float GetDistanceToNearestSurfaceGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceToNearestSurfaceGlobal(TranslatedWorldPosition);
}

float3 GetDistanceFieldGradientGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceFieldGradientGlobal(TranslatedWorldPosition);
}


#line  10 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   5 "/Engine/Private/DistanceField/GlobalDistanceFieldUtils.ush"






uint ComputeGlobalDistanceFieldClipmapIndex(float3 TranslatedWorldPosition)
{
	uint FoundClipmapIndex = 0;

	for (uint ClipmapIndex = 0; ClipmapIndex < View.NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);

		if (DistanceFromClipmap > View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize)
		{
			FoundClipmapIndex = ClipmapIndex;
			break;
		}
	}

	return FoundClipmapIndex;
}

struct FGlobalSDFTraceInput
{
	float3 TranslatedWorldRayStart;
	float3 WorldRayDirection;
	float MinTraceDistance;
	float MaxTraceDistance;
	float StepFactor;
	float MinStepFactor;
	
	
	
	bool bExpandSurfaceUsingRayTimeInsteadOfMaxDistance;
	float InitialMaxDistance;

	
	float VoxelSizeRelativeBias;
	
	float VoxelSizeRelativeRayEndBias;

	
	bool bDitheredTransparency;
	float2 DitherScreenCoord;
};

FGlobalSDFTraceInput SetupGlobalSDFTraceInput(float3 InTranslatedWorldRayStart, float3 InWorldRayDirection, float InMinTraceDistance, float InMaxTraceDistance, float InStepFactor, float InMinStepFactor)
{
	FGlobalSDFTraceInput TraceInput;
	TraceInput.TranslatedWorldRayStart = InTranslatedWorldRayStart;
	TraceInput.WorldRayDirection = InWorldRayDirection;
	TraceInput.MinTraceDistance = InMinTraceDistance;
	TraceInput.MaxTraceDistance = InMaxTraceDistance;
	TraceInput.StepFactor = InStepFactor;
	TraceInput.MinStepFactor = InMinStepFactor;
	TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance = true;
	TraceInput.InitialMaxDistance = 0;
	TraceInput.VoxelSizeRelativeBias = 0.0f;
	TraceInput.VoxelSizeRelativeRayEndBias = 0.0f;
	TraceInput.bDitheredTransparency = false;
	TraceInput.DitherScreenCoord = float2(0, 0);
	return TraceInput;
}

struct FGlobalSDFTraceResult
{
	float HitTime;
	uint HitClipmapIndex;
	uint TotalStepsTaken;

	
	float ExpandSurfaceAmount;
};

bool GlobalSDFTraceResultIsHit(FGlobalSDFTraceResult TraceResult)
{ 
	return TraceResult.HitTime >= 0.0f;
}

FGlobalSDFTraceResult RayTraceGlobalDistanceField(FGlobalSDFTraceInput TraceInput)
{
	FGlobalSDFTraceResult TraceResult;
	TraceResult.HitTime = -1.0f;
	TraceResult.HitClipmapIndex = 0;
	TraceResult.TotalStepsTaken = 0;
	TraceResult.ExpandSurfaceAmount = 0;

	float TraceNoise = InterleavedGradientNoise(TraceInput.DitherScreenCoord.xy, View.StateFrameIndexMod8);
	uint MinClipmapIndex = ComputeGlobalDistanceFieldClipmapIndex(TraceInput.TranslatedWorldRayStart + TraceInput.MinTraceDistance * TraceInput.WorldRayDirection);
	float MaxDistance = TraceInput.InitialMaxDistance;
	float MinRayTime = TraceInput.MinTraceDistance;

	[loop]
	for (uint ClipmapIndex = MinClipmapIndex; ClipmapIndex < View.NumGlobalSDFClipmaps && TraceResult.HitTime < 0.0f; ++ClipmapIndex)
	{
		float ClipmapVoxelExtent = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize;
		float MinStepSize = TraceInput.MinStepFactor * ClipmapVoxelExtent;
		float ExpandSurfaceDistance = ClipmapVoxelExtent;
		float ClipmapRayBias = ClipmapVoxelExtent * TraceInput.VoxelSizeRelativeBias;
		float ClipmapRayLength = TraceInput.MaxTraceDistance - ClipmapVoxelExtent * TraceInput.VoxelSizeRelativeRayEndBias;

		float3 GlobalVolumeTranslatedCenter = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz;
		float GlobalVolumeExtent = View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w - ClipmapVoxelExtent;
		float3 TranslatedWorldRayEnd = TraceInput.TranslatedWorldRayStart + TraceInput.WorldRayDirection * ClipmapRayLength;
		float2 IntersectionTimes = LineBoxIntersect(TraceInput.TranslatedWorldRayStart, TranslatedWorldRayEnd, GlobalVolumeTranslatedCenter - GlobalVolumeExtent.xxx, GlobalVolumeTranslatedCenter + GlobalVolumeExtent.xxx);
		IntersectionTimes.xy *= ClipmapRayLength;
		IntersectionTimes.x = max(IntersectionTimes.x, MinRayTime);
		IntersectionTimes.x = max(IntersectionTimes.x, ClipmapRayBias);

		if (IntersectionTimes.x < IntersectionTimes.y)
		{
			
			MinRayTime = IntersectionTimes.y;

			float SampleRayTime = IntersectionTimes.x;
			const float ClipmapInfluenceRange = 4 * 2.0f * View.GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View.GlobalVolumeTexelSize;

			uint StepIndex = 0;
			const uint MaxSteps = 256;

			[loop]
			for (; StepIndex < MaxSteps; ++StepIndex)
			{
				float3 SampleTranslatedWorldPosition = TraceInput.TranslatedWorldRayStart + TraceInput.WorldRayDirection * SampleRayTime;

				float3 ClipmapVolumeUV = ComputeGlobalUV(SampleTranslatedWorldPosition, ClipmapIndex);
				float3 MipUV = ComputeGlobalMipUV(SampleTranslatedWorldPosition, ClipmapIndex);

				float DistanceFieldMipValue = Texture3DSampleLevel(View.GlobalDistanceFieldMipTexture,  D3DStaticTrilinearClampedSampler, MipUV, 0).x;
				float DistanceField = DecodeGlobalDistanceFieldPageDistance(DistanceFieldMipValue, View.GlobalDistanceFieldMipFactor * ClipmapInfluenceRange);
				float Coverage = 1;
				FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

				if (Page.bValid && DistanceFieldMipValue < View.GlobalDistanceFieldMipTransition)
				{
					float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

					
					if (Page.bCoverage)
					{
						float3 CoveragePageUV;
						ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page, PageUV, CoveragePageUV);
						Coverage = Texture3DSampleLevel(View.GlobalDistanceFieldCoverageAtlasTexture,  D3DStaticTrilinearWrappedSampler, CoveragePageUV, 0).x;
					}
					

					float DistanceFieldValue = Texture3DSampleLevel(View.GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;
					DistanceField = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
				}

				MaxDistance = max(DistanceField, MaxDistance);

				float ExpandSurfaceTime = TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance ? SampleRayTime - ClipmapRayBias : MaxDistance;
				float ExpandSurfaceScale = lerp(View.NotCoveredExpandSurfaceScale, View.CoveredExpandSurfaceScale, Coverage);

				const float ExpandSurfaceFalloff = 2.0f * ExpandSurfaceDistance;
				const float ExpandSurfaceAmount = ExpandSurfaceDistance * saturate(ExpandSurfaceTime / ExpandSurfaceFalloff) * ExpandSurfaceScale;

				float StepNoise = InterleavedGradientNoise(TraceInput.DitherScreenCoord.xy, View.StateFrameIndexMod8 * MaxSteps + StepIndex);

				if (DistanceField < ExpandSurfaceAmount 
					&& (!TraceInput.bDitheredTransparency || (StepNoise * (1 - Coverage) <= View.DitheredTransparencyStepThreshold && TraceNoise * (1 - Coverage) <= View.DitheredTransparencyTraceThreshold)))
				{
					TraceResult.HitTime = max(SampleRayTime + DistanceField - ExpandSurfaceAmount, 0.0f);
					TraceResult.HitClipmapIndex = ClipmapIndex;
					TraceResult.ExpandSurfaceAmount = ExpandSurfaceAmount;
					break;
				}

				float LocalMinStepSize = MinStepSize * lerp(View.NotCoveredMinStepScale, 1.0f, Coverage);
				float StepDistance = max(DistanceField * TraceInput.StepFactor, LocalMinStepSize);
				SampleRayTime += StepDistance;

				
				if (SampleRayTime > IntersectionTimes.y || TraceResult.HitTime >= 0.0f)
				{
					break;
				}
			}

			TraceResult.TotalStepsTaken += StepIndex;
		}
	}

	return TraceResult;
}
#line  11 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   3 "/Engine/Private/DistanceField/GlobalDistanceFieldObjectGrid.ush"






StructuredBuffer<uint4> GlobalDistanceFieldPageObjectGridBuffer;

struct FObjectGridCell
{
	uint4 PackedIndex4;
};

FObjectGridCell InitObjectGridCell()
{
	FObjectGridCell GridCell;
	GridCell.PackedIndex4 = uint4(0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF);
	return GridCell;
}

struct FObjectGridCellIndex
{
	uint GPUSceneInstanceIndex;
	bool bValid;
};

uint PackObjectGridCellIndex(uint GPUSceneInstanceIndex, float Distance, float ObjectGridCellWorldExtent, float MaxQueryDistance)
{
	float NormalizedPackedDistance = saturate((Distance + 0.25f * ObjectGridCellWorldExtent) / (MaxQueryDistance + 0.25f * ObjectGridCellWorldExtent));
	uint PackedDistanceUInt = uint(clamp(NormalizedPackedDistance * (0xFF + 1.0f), 0, 0xFF));
	uint GridCellElement = (GPUSceneInstanceIndex & 0xFFFFFF) | (PackedDistanceUInt << 24);
	return GridCellElement;
}


FObjectGridCellIndex UnpackObjectGridCellIndex(uint PackedIndex)
{
	FObjectGridCellIndex ObjectGridCellIndex;
	ObjectGridCellIndex.bValid = PackedIndex < 0xFFFFFFFF;
	ObjectGridCellIndex.GPUSceneInstanceIndex = PackedIndex & 0xFFFFFF;
	return ObjectGridCellIndex;
}


void AddToObjectGridCell(inout FObjectGridCell ObjectGridCell, uint GPUSceneInstanceIndex, float Distance, float ObjectGridCellWorldExtent, float MaxQueryDistance)
{
	if (abs(Distance) < MaxQueryDistance)
	{
		uint PackedIndexToInsert = PackObjectGridCellIndex(GPUSceneInstanceIndex, Distance, ObjectGridCellWorldExtent, MaxQueryDistance);

		uint MaxPackedIndex = 0;
		for (uint IndexInList = 0; IndexInList < 4; ++IndexInList)
		{
			MaxPackedIndex = max(MaxPackedIndex, ObjectGridCell.PackedIndex4[IndexInList]);
		}

		if (PackedIndexToInsert < MaxPackedIndex)
		{
			for (uint IndexInList = 0; IndexInList < 4; ++IndexInList)
			{
				if (ObjectGridCell.PackedIndex4[IndexInList] == MaxPackedIndex)
				{
					ObjectGridCell.PackedIndex4[IndexInList] = PackedIndexToInsert;
					break;
				}
			}
		}
	}
}


void SortObjectGridCell(inout FObjectGridCell ObjectGridCell)
{
	for (uint PassIndex = 0; PassIndex < 4 - 1; ++PassIndex)
	{
		for (uint ElementIndex = 0; ElementIndex < 4 - PassIndex - 1; ++ElementIndex)
		{
			uint MinIndex = min(ObjectGridCell.PackedIndex4[ElementIndex], ObjectGridCell.PackedIndex4[ElementIndex + 1]);
			uint MaxIndex = max(ObjectGridCell.PackedIndex4[ElementIndex], ObjectGridCell.PackedIndex4[ElementIndex + 1]);
			ObjectGridCell.PackedIndex4[ElementIndex] = MinIndex;
			ObjectGridCell.PackedIndex4[ElementIndex + 1] = MaxIndex;
		}
	}
}
#line  12 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   8 "/Engine/Private/DistanceFieldLightingShared.ush"




































float3 DistanceFieldBrickSize;


float3 DistanceFieldUniqueDataBrickSize;


uint3 DistanceFieldBrickAtlasSizeInBricks;


uint3 DistanceFieldBrickAtlasMask;
uint3 DistanceFieldBrickAtlasSizeLog2;


float3 DistanceFieldBrickAtlasTexelSize;

float3 DistanceFieldBrickAtlasHalfTexelSize;
float3 DistanceFieldBrickOffsetToAtlasUVScale;
float3 DistanceFieldUniqueDataBrickSizeInAtlasTexels;


ByteAddressBuffer DistanceFieldIndirectionTable;
Buffer<float4> DistanceFieldIndirection2Table;
Texture3D<float4> DistanceFieldIndirectionAtlas;


Texture3D DistanceFieldBrickTexture;


struct FDFAssetData
{
	
	uint NumMips;

	
	uint3 IndirectionDimensions;

	
	uint IndirectionTableOffset;

	
	float2 DistanceFieldToVolumeScaleBias;

	
	float3 VolumeToIndirectionAdd;
	float3 VolumeToIndirectionScale;
};


StructuredBuffer<float4> SceneDistanceFieldAssetData;








FDFAssetData LoadDFAssetData(StructuredBuffer<float4> AssetDataBuffer, uint Offset)
{
	uint4 Vector0 = asuint(AssetDataBuffer[Offset + 0]);
	float4 Vector1 = AssetDataBuffer[Offset + 1];
	float4 Vector2 = AssetDataBuffer[Offset + 2];

	FDFAssetData Data;
	Data.IndirectionDimensions.x = Vector0.x & 0x3FF;
	Data.IndirectionDimensions.y = (Vector0.x >> 10) & 0x3FF;
	Data.IndirectionDimensions.z = (Vector0.x >> 20) & 0x3FF;
	Data.NumMips = Vector0.x >> 30;
	Data.IndirectionTableOffset = Vector0.y;

	Data.DistanceFieldToVolumeScaleBias = float2(Vector1.w, Vector2.w);
	Data.VolumeToIndirectionScale = Vector1.xyz;
	Data.VolumeToIndirectionAdd = Vector2.xyz;

	return Data;
}


FDFAssetData LoadDFAssetData(uint AssetIndex, uint ReversedMipIndex)
{
	return LoadDFAssetData(SceneDistanceFieldAssetData, AssetIndex * (3 * 3) + ReversedMipIndex * 3);
}



FDFAssetData LoadDFAssetDataHighestResolution(uint AssetIndex)
{
	uint NumMips = LoadDFAssetData(AssetIndex, 0).NumMips;
	return LoadDFAssetData(AssetIndex, NumMips - 1);
}

RWBuffer<uint> RWObjectIndirectArguments;
Buffer<uint> ObjectIndirectArguments;

RWStructuredBuffer<uint> RWCulledObjectIndices;
StructuredBuffer<uint> CulledObjectIndices;

uint GetCulledNumObjects()
{
	
	return ObjectIndirectArguments[1];
}







struct FDFObjectBounds
{
	FLWCVector3 Center;	
	float SphereRadius;	
	float3 BoxExtent;	
	uint OftenMoving;
	bool bVisible;
	uint bCastShadow;
	bool bIsNaniteMesh;
	uint bEmissiveLightSource;
	bool bAffectIndirectLightingWhileHidden;
};

uint NumSceneObjects;
StructuredBuffer<float4> SceneObjectBounds;

StructuredBuffer<float4> SceneHeightfieldObjectBounds;
uint NumSceneHeightfieldObjects;

SamplerState DistanceFieldSampler;

FDFObjectBounds LoadDFObjectBounds(uint ObjectIndex)
{
	FDFObjectBounds Bounds;

	float4 Vector0 = SceneObjectBounds[ObjectIndex * 3 + 0];
	float3 TilePosition = Vector0.xyz;

	float4 Vector1 = SceneObjectBounds[ObjectIndex * 3 + 1];
	float3 RelativeWorldPosition = Vector1.xyz;

	Bounds.Center = MakeLWCVector3(TilePosition, RelativeWorldPosition);
	Bounds.SphereRadius = Vector1.w;

	float4 Vector2 = SceneObjectBounds[ObjectIndex * 3 + 2];
	Bounds.BoxExtent = Vector2.xyz;

	uint Flags = asuint(Vector2.w);
	Bounds.OftenMoving = Flags & 1U;
	Bounds.bCastShadow = (Flags & 2U) != 0U;
	Bounds.bIsNaniteMesh = (Flags & 4U) != 0U;
	Bounds.bEmissiveLightSource = (Flags & 8U) != 0U;
	Bounds.bVisible = (Flags & 16U) != 0U;
	Bounds.bAffectIndirectLightingWhileHidden = (Flags & 32U) != 0U;

	return Bounds;
}

struct FHeightfieldObjectBounds
{
	FLWCVector3 BoxOrigin;	
	float3 BoxExtent;		
	bool bInAtlas;
};


FHeightfieldObjectBounds LoadHeightfieldObjectBounds(uint ObjectIndex)
{
	FHeightfieldObjectBounds Bounds;

	float4 Vector0 = SceneHeightfieldObjectBounds[ObjectIndex * 3 + 0];
	float4 Vector1 = SceneHeightfieldObjectBounds[ObjectIndex * 3 + 1];

	float3 TilePosition = Vector0.xyz;
	float3 RelativeWorldPosition = Vector1.xyz;

	Bounds.BoxOrigin = MakeLWCVector3(TilePosition, RelativeWorldPosition);

	float4 Vector2 = SceneHeightfieldObjectBounds[ObjectIndex * 3 + 2];
	Bounds.BoxExtent = Vector2.xyz;

	uint Flags = asuint(Vector2.w);
	Bounds.bInAtlas = Flags & 1U;

	return Bounds;
}

struct FDFObjectData
{
	
	float3 VolumePositionExtent;

	
	float VolumeSurfaceBias;

	
	bool bMostlyTwoSided;

	
	float VolumeScale;

	
	float SelfShadowBias;

	
	float2 MinMaxDrawDistance2;

	uint GPUSceneInstanceIndex;

	
	FLWCInverseMatrix WorldToVolume;
	FLWCMatrix VolumeToWorld;

	
	float3 VolumeToWorldScale;

	
	uint AssetIndex;
};

FDFObjectData LoadDFObjectDataFromBuffer(StructuredBuffer<float4> SourceBuffer, uint ObjectIndex)
{
	float3 TilePosition = SourceBuffer[ObjectIndex * 10 + 0].xyz;

	FDFObjectData Data;

	float4 V0 = SourceBuffer[ObjectIndex * 10 + 1];
	float4 V1 = SourceBuffer[ObjectIndex * 10 + 2];
	float4 V2 = SourceBuffer[ObjectIndex * 10 + 3];
	float4x4 RelativeWorldToVolume = transpose(float4x4(V0, V1, V2, float4(0.0f, 0.0f, 0.0f, 1.0f)));

	Data.WorldToVolume = MakeLWCInverseMatrix4x3(TilePosition, RelativeWorldToVolume);

	float4 Vector3 = SourceBuffer[ObjectIndex * 10 + 4];
	Data.VolumePositionExtent = Vector3.xyz;
	Data.VolumeSurfaceBias = abs(Vector3.w);
	Data.bMostlyTwoSided = Vector3.w < 0.0f;

	float4 Vector4 = SourceBuffer[ObjectIndex * 10 + 5];
	Data.MinMaxDrawDistance2 = Vector4.xy;
	Data.SelfShadowBias = Vector4.z;
	Data.GPUSceneInstanceIndex = asuint(Vector4.w);
	
	V0 = SourceBuffer[ObjectIndex * 10 + 6];
	V1 = SourceBuffer[ObjectIndex * 10 + 7];
	V2 = SourceBuffer[ObjectIndex * 10 + 8];
	float4x4 VolumeToRelativeWorld = transpose(float4x4(V0, V1, V2, float4(0.0f, 0.0f, 0.0f, 1.0f)));

	Data.VolumeToWorld = MakeLWCMatrix(TilePosition, VolumeToRelativeWorld);

	float4 Vector8 = SourceBuffer[ObjectIndex * 10 + 9];
	Data.VolumeToWorldScale = Vector8.xyz;
	Data.VolumeScale = min(Data.VolumeToWorldScale.x, min(Data.VolumeToWorldScale.y, Data.VolumeToWorldScale.z));
	Data.AssetIndex = asuint(Vector8.w);

	return Data;
}

struct FHeightfieldObjectData
{
	FLWCInverseMatrix WorldToLocal;
	float4 SizeScale;
	float4 AtlasUVScaleBias;
	float4 VisibilityAtlasUVScaleBias;
};

FHeightfieldObjectData LoadHeightfieldObjectDataFromBuffer(StructuredBuffer<float4> SourceBuffer, uint ObjectIndex)
{
	FHeightfieldObjectData Data;

	float3 TilePosition = SourceBuffer[ObjectIndex * 7 + 0].xyz;

	float4 V0 = SourceBuffer[ObjectIndex * 7 + 1];
	float4 V1 = SourceBuffer[ObjectIndex * 7 + 2];
	float4 V2 = SourceBuffer[ObjectIndex * 7 + 3];
	float4x4 RelativeWorldToVolume = transpose(float4x4(V0, V1, V2, float4(0.0f, 0.0f, 0.0f, 1.0f)));

	Data.WorldToLocal = MakeLWCInverseMatrix4x3(TilePosition, RelativeWorldToVolume);

	Data.SizeScale = SourceBuffer[ObjectIndex * 7 + 4];
	Data.AtlasUVScaleBias = SourceBuffer[ObjectIndex * 7 + 5];
	Data.VisibilityAtlasUVScaleBias = SourceBuffer[ObjectIndex * 7 + 6];

	return Data;
}

StructuredBuffer<float4> SceneObjectData;
StructuredBuffer<float4> SceneHeightfieldObjectData;

FDFObjectData LoadDFObjectData(uint ObjectIndex)
{
	return LoadDFObjectDataFromBuffer(SceneObjectData, ObjectIndex);
}

FHeightfieldObjectData LoadHeightfieldObjectData(uint ObjectIndex)
{
	return LoadHeightfieldObjectDataFromBuffer(SceneHeightfieldObjectData, ObjectIndex);
}

uint NumConvexHullPlanes;
float4 ViewFrustumConvexHull[6];

bool ViewFrustumIntersectSphere(float3 SphereOrigin, float SphereRadius)
{
	for (uint PlaneIndex = 0; PlaneIndex < NumConvexHullPlanes; PlaneIndex++)
	{
		float4 PlaneData = ViewFrustumConvexHull[PlaneIndex];
		float PlaneDistance = dot(PlaneData.xyz, SphereOrigin) - PlaneData.w;

		if (PlaneDistance > SphereRadius)
		{
			return false;
		}
	}
	
	return true;
}

bool ViewFrustumIntersectAABB(float3 BoxCenter, float3 BoxExtent)
{
	for (uint PlaneIndex = 0; PlaneIndex < NumConvexHullPlanes; PlaneIndex++)
	{
		float4 PlaneData = ViewFrustumConvexHull[PlaneIndex];

		float PlaneDistance = dot(PlaneData.xyz, BoxCenter) - PlaneData.w;
		float ProjectedExtent = dot(BoxExtent, abs(PlaneData.xyz));

		if (PlaneDistance > ProjectedExtent)
		{
			return false;
		}
	}
	
	return true;
}

float SampleDistanceFieldBrickTexture(float3 UV)
{

	return Texture3DSampleLevel(DistanceFieldBrickTexture,  D3DStaticBilinearWrappedSampler, UV, 0).x;



}



float SampleSparseMeshSignedDistanceField(float3 SampleVolumePosition, FDFAssetData DFAssetData)
{
	
	float3 IndirectionPos = SampleVolumePosition * DFAssetData.VolumeToIndirectionScale + DFAssetData.VolumeToIndirectionAdd;

	int3 IndirectionCoord = IndirectionPos;

	uint IndirectionIndex = (IndirectionCoord.z * DFAssetData.IndirectionDimensions.y + IndirectionCoord.y) * DFAssetData.IndirectionDimensions.x + IndirectionCoord.x;
	
	uint BrickIndex = DistanceFieldIndirectionTable.Load((DFAssetData.IndirectionTableOffset + IndirectionIndex) * 4);
	bool ValidBrick = BrickIndex != 0xFFFFFFFF;









	float MaxEncodedDistance = DFAssetData.DistanceFieldToVolumeScaleBias.x + DFAssetData.DistanceFieldToVolumeScaleBias.y;
	float DistanceField = MaxEncodedDistance;

	
	if (ValidBrick)
	{
		
		float3 BrickLocalUV = IndirectionPos - IndirectionCoord;


		
		float3 BrickOffset = uint3(
			BrickIndex & DistanceFieldBrickAtlasMask.x, 
			(BrickIndex >> DistanceFieldBrickAtlasSizeLog2.x) & DistanceFieldBrickAtlasMask.y, 
			BrickIndex >> (DistanceFieldBrickAtlasSizeLog2.x + DistanceFieldBrickAtlasSizeLog2.y));


		float3 AtlasUV = BrickOffset.xyz * DistanceFieldBrickOffsetToAtlasUVScale + BrickLocalUV * DistanceFieldUniqueDataBrickSizeInAtlasTexels + DistanceFieldBrickAtlasHalfTexelSize;
		float EncodedDistanceField = SampleDistanceFieldBrickTexture(AtlasUV);

		DistanceField = EncodedDistanceField * DFAssetData.DistanceFieldToVolumeScaleBias.x + DFAssetData.DistanceFieldToVolumeScaleBias.y;
	}

	return DistanceField;
}




float DistanceToMeshSurfaceStandaloneApproximate(float3 SampleVolumePosition, FDFObjectData DFObjectData)
{
	
	FDFAssetData DFAssetMipData = LoadDFAssetData(DFObjectData.AssetIndex, 0);
	float DistanceField = SampleSparseMeshSignedDistanceField(SampleVolumePosition, DFAssetMipData);
	return DistanceField;
}




float DistanceToMeshSurfaceStandalone(float3 SampleVolumePosition, FDFObjectData DFObjectData)
{
	uint NumMips = LoadDFAssetData(DFObjectData.AssetIndex, 0).NumMips;
	float DistanceField = 0;

	
	for (uint ReversedMipIndex = 0; ReversedMipIndex < NumMips; ReversedMipIndex++)
	{
		FDFAssetData DFAssetMipData = LoadDFAssetData(DFObjectData.AssetIndex, ReversedMipIndex);
		DistanceField = SampleSparseMeshSignedDistanceField(SampleVolumePosition, DFAssetMipData);

		float MaxEncodedDistance = DFAssetMipData.DistanceFieldToVolumeScaleBias.x + DFAssetMipData.DistanceFieldToVolumeScaleBias.y;

		if (abs(DistanceField) > .25 * MaxEncodedDistance)
		{
			break;
		}
	}

	return DistanceField;
}



float3 CalculateMeshSDFGradient(float3 SampleVolumePosition, FDFAssetData DFAssetData)
{
	float3 VirtualUVVoxelSize = 1.0f / float3(DistanceFieldUniqueDataBrickSize);
	float3 VolumeSpaceVoxelSize = VirtualUVVoxelSize / DFAssetData.VolumeToIndirectionScale;

	
	float3 VoxelOffset = 0.5f * VolumeSpaceVoxelSize;
	float R = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x + VoxelOffset.x, SampleVolumePosition.y, SampleVolumePosition.z), DFAssetData);
	float L = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x - VoxelOffset.x, SampleVolumePosition.y, SampleVolumePosition.z), DFAssetData);
	float F = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x, SampleVolumePosition.y + VoxelOffset.y, SampleVolumePosition.z), DFAssetData);
	float B = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x, SampleVolumePosition.y - VoxelOffset.y, SampleVolumePosition.z), DFAssetData);
	float U = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x, SampleVolumePosition.y, SampleVolumePosition.z + VoxelOffset.z), DFAssetData);
	float D = SampleSparseMeshSignedDistanceField(float3(SampleVolumePosition.x, SampleVolumePosition.y, SampleVolumePosition.z - VoxelOffset.z), DFAssetData);

	float3 Gradient = float3(R - L, F - B, U - D);
	return Gradient;
}

Texture2D HeightFieldTexture;
Texture2D HFVisibilityTexture;

float SampleHeightFieldAtlas(float2 UV)
{

	float4 SampleValue = Texture2DSampleLevel(HeightFieldTexture,  D3DStaticBilinearWrappedSampler, UV, 0);



	return DecodePackedHeight(SampleValue.xy);
}

float SampleHFVisibilityTexture(float2 UV)
{

	return Texture2DSampleLevel(HFVisibilityTexture,  D3DStaticBilinearWrappedSampler, UV, 0).r;



}
#line  13 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   3 "/Engine/Private/SceneData.ush"




#line   3 "/Engine/Shared/LightSceneData.h"












struct FLightSceneData
{
	
	FLWCVector3 WorldPosition;

	
	float InvRadius;

	
	float4 Color;

	
	float FalloffExponent;

	
	float3 Direction;

	
	float SpecularScale;

	
	
	float3 Tangent;

	
	float SourceRadius;

	
	float2 SpotAngles;

	
	float SoftSourceRadius;

	
	float SourceLength;

	
	float RectLightBarnCosAngle;

	
	float RectLightBarnLength;

	
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float RectLightAtlasMaxLevel;

	float InverseExposureBlend;

	
	uint LightTypeAndShadowMapChannelMaskPacked;
};





#line   7 "/Engine/Private/SceneData.ush"







	



	



	







	



	












	



	




		


	




































uint GetDefaultPrimitiveSceneDataFlags()
{
	
	return
		0x1 |
		0x200 |
		0x8000 |
		0x10000 |
		0x20000 |
		0x40000 |
		0x80000 |
		0x100000;
}



























	static const uint InstanceTransformSizeFloat4Count = 2u; 






struct FPrimitiveSceneData
{
	uint		Flags; 
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride; 
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPODisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};


FPrimitiveSceneData GetPrimitiveDataFromUniformBuffer()
{
	FPrimitiveSceneData PrimitiveData;

	PrimitiveData.Flags								= Primitive.Flags;
	PrimitiveData.InstanceSceneDataOffset			= Primitive.InstanceSceneDataOffset;
	PrimitiveData.NumInstanceSceneDataEntries		= Primitive.NumInstanceSceneDataEntries;
	PrimitiveData.SingleCaptureIndex				= Primitive.SingleCaptureIndex;
	PrimitiveData.TilePosition						= Primitive.TilePosition;
	PrimitiveData.PrimitiveComponentId				= Primitive.PrimitiveComponentId;
	PrimitiveData.LocalToWorld						= MakeLWCMatrix4x3(Primitive.TilePosition, Primitive.LocalToRelativeWorld);
	PrimitiveData.WorldToLocal						= MakeLWCInverseMatrix4x3(Primitive.TilePosition, Primitive.RelativeWorldToLocal);
	PrimitiveData.PreviousLocalToWorld				= MakeLWCMatrix4x3(Primitive.TilePosition, Primitive.PreviousLocalToRelativeWorld);
	PrimitiveData.PreviousWorldToLocal				= MakeLWCInverseMatrix4x3(Primitive.TilePosition, Primitive.PreviousRelativeWorldToLocal);
	PrimitiveData.WorldToPreviousWorld				= Primitive.WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale				= Primitive.InvNonUniformScale;
	PrimitiveData.ObjectBoundsX						= Primitive.ObjectBoundsX;
	PrimitiveData.ObjectWorldPosition				= MakeLWCVector3(Primitive.TilePosition, Primitive.ObjectRelativeWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius						= Primitive.ObjectRelativeWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition				= MakeLWCVector3(Primitive.TilePosition, Primitive.ActorRelativeWorldPosition);
	PrimitiveData.LightmapUVIndex					= Primitive.LightmapUVIndex;
	PrimitiveData.ObjectOrientation					= Primitive.ObjectOrientation;
	PrimitiveData.LightmapDataIndex					= Primitive.LightmapDataIndex;
	PrimitiveData.NonUniformScale					= Primitive.NonUniformScale;
	PrimitiveData.PreSkinnedLocalBoundsMin			= Primitive.PreSkinnedLocalBoundsMin;
	PrimitiveData.NaniteResourceID					= Primitive.NaniteResourceID;
	PrimitiveData.PreSkinnedLocalBoundsMax			= Primitive.PreSkinnedLocalBoundsMax;
	PrimitiveData.NaniteHierarchyOffset				= Primitive.NaniteHierarchyOffset;
	PrimitiveData.LocalObjectBoundsMin				= Primitive.LocalObjectBoundsMin;
	PrimitiveData.ObjectBoundsY						= Primitive.ObjectBoundsY;
	PrimitiveData.LocalObjectBoundsMax				= Primitive.LocalObjectBoundsMax;
	PrimitiveData.ObjectBoundsZ						= Primitive.ObjectBoundsZ;
	PrimitiveData.InstancePayloadDataOffset			= Primitive.InstancePayloadDataOffset;
	PrimitiveData.InstancePayloadDataStride			= Primitive.InstancePayloadDataStride;
	PrimitiveData.InstanceLocalBoundsCenter			= Primitive.InstanceLocalBoundsCenter;
	PrimitiveData.InstanceLocalBoundsExtent			= Primitive.InstanceLocalBoundsExtent;
	PrimitiveData.WireframeColor					= Primitive.WireframeColor;
	PrimitiveData.LevelColor						= Primitive.LevelColor;
	PrimitiveData.PackedNaniteFlags					= Primitive.PackedNaniteFlags;
	PrimitiveData.InstanceDrawDistanceMinMaxSquared	= Primitive.InstanceDrawDistanceMinMaxSquared;
	PrimitiveData.InstanceWPODisableDistanceSquared	= Primitive.InstanceWPODisableDistanceSquared;
	PrimitiveData.PersistentPrimitiveIndex			= Primitive.PersistentPrimitiveIndex;
	PrimitiveData.NaniteRayTracingDataOffset		= Primitive.NaniteRayTracingDataOffset;
	PrimitiveData.MaxWPODisplacement				= Primitive.MaxWPODisplacement;
	PrimitiveData.CustomStencilValueAndMask			= Primitive.CustomStencilValueAndMask;
	
	[unroll]
	for (int DataIndex = 0; DataIndex < 9; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = Primitive.CustomPrimitiveData[DataIndex];
	}

	return PrimitiveData;
}

#line 379 "/Engine/Private/SceneData.ush"


FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	return GetPrimitiveDataFromUniformBuffer();
}



float GetPrimitive_DeterminantSign_FromFlags(uint Flags)
{
	return CondMask(Flags & 0x40, -1.0f, 1.0f);
}

float GetPrimitive_DeterminantSign(uint PrimitiveId)
{
	return GetPrimitive_DeterminantSign_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}








float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}








uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags & 0x800, 1u, 0u);
	const uint Channel1 = CondMask(Flags & 0x1000, 1u, 0u);
	const uint Channel2 = CondMask(Flags & 0x2000, 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}










struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};


float3 UnpackHitProxyId(uint HitProxyPacked)
{
	
	return float3
	(
		float((HitProxyPacked       ) & 0xFF),
		float((HitProxyPacked >>  8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}

struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint CustomData;
};

struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;


	FInstanceSceneEditorData EditorData;

};


StructuredBuffer<float4> GPUSceneInstanceSceneData;
StructuredBuffer<float4> GPUSceneInstancePayloadData;
uint GPUSceneFrameNumber;






uint GetGPUSceneFrameNumber()
{

	return GPUSceneFrameNumber;



}

float4 LoadInstanceSceneDataElement(uint Index)
{

	return GPUSceneInstanceSceneData[Index];





}

float4 LoadInstancePayloadDataElement(uint Index)
{

	return GPUSceneInstancePayloadData[Index];





}

float4 LoadInstanceCustomDataElement(FInstanceSceneData SceneData, uint Float4Index)
{








	return (float4)0.0f;
}

float LoadInstanceCustomDataFloat(FInstanceSceneData SceneData, uint FloatIndex)
{






	return 0.0f;

}


void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}

uint4 EncodeScaleAndRotation(float3 Scale, float3x3 Axis)
{
	const uint ExpBits			= 8;
	const uint ExpBias			= ( 1u << (ExpBits - 1) ) - 1;
	const uint SignMantissaBits	= 16;
	const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
	const uint MantissaBits		= SignMantissaBits - 1;
	const float Sqrt2 			= 1.41421356f;

	uint4 Output;

	
	{
		if( Axis[2].z < 0.0f )
		{
			Axis[2] *= -1.0f;
			Scale.z *= -1.0f;
		}

		float2 OctZ = UnitVectorToHemiOctahedron( Axis[2] );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, Axis[2] );

		float X = dot(Axis[0], BasisX);
		float Y = dot(Axis[0], BasisY);

		float aX = abs( X );
		float aY = abs( Y );

		bool bSpinIsX = aX < aY;
		float Spin0 = bSpinIsX ? X : Y;
		float Spin1 = bSpinIsX ? Y : X;
		float Sign1 = Spin1 < 0.0f ? -1.0f : 1.0f;
	
		
		Scale.x *= Sign1;
		Spin0	*= Sign1;

		float3 GeneratedY = cross(Axis[2], Axis[0]);
		Scale.y *= dot( Axis[1], GeneratedY ) < 0.0f ? -Sign1 : Sign1;

		
		Output.x  = (((int)round( OctZ.x * 32767.0f ) + 32768) & 0xFFFF) <<  0;
		Output.x |= (((int)round( OctZ.y * 32767.0f ) + 32768) & 0xFFFF) << 16;

		
		
		Output.y  = ((int)round( Spin0 * 16383.0f * Sqrt2 ) + 16384); 
		Output.y |=	bSpinIsX ? (1u << 15) : 0;
	}

	
	{
		float MaxComponent = max3(abs(Scale.x), abs(Scale.y), abs(Scale.z));
		uint MaxComponentExponent = (asuint(MaxComponent) & 0x7f800000u) >> 23;

		
		
		
		uint SharedExp = MaxComponentExponent + 1;

		float ExpScale = asfloat(((127 + ExpBias + MantissaBits - SharedExp) & 0xFFu) << 23);

		if( (uint)round( MaxComponent * ExpScale ) == (1u << MantissaBits) )
		{
			
			SharedExp++;
			ExpScale *= 0.5f;
		}

		Output.z  = (((int)round( Scale.x * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) <<  0;
		Output.z |= (((int)round( Scale.y * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) << 16;
		Output.w  = (((int)round( Scale.z * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) <<  0;
		Output.w |= SharedExp << 16;		
	}

	return Output;
}

uint4 EncodeScaleAndRotation( float3x3 InTransform )
{
	float3 Scale = {
		length(InTransform[0]),
		length(InTransform[1]),
		length(InTransform[2])
	};
	float3x3 Axis = {
		InTransform[0] / Scale.x,
		InTransform[1] / Scale.y,
		InTransform[2] / Scale.z
	};
	return EncodeScaleAndRotation(Scale, Axis);
}

void EncodeTransform( float4x4 InTransform, inout uint4 OutRotationScale, inout float3 OutTranslation )
{
	OutRotationScale = EncodeScaleAndRotation((float3x3)InTransform);
	OutTranslation = InTransform[3].xyz;
}

float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;

	
	{
		float3 Rotation =
		{
			( RotationScale[0] >>  0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >>  0 ) & 0x7fff
		};

		float2 OctZ  = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0  = ( Rotation.z  - 16384 ) * (0.70710678f / 16383.0f);	
		bool bSpinIsX = RotationScale[1] & 0x8000;

		M[2].xyz = HemiOctahedronToUnitVector( OctZ );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );

		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;

		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}

	
	{
		const uint SignMantissaBits	= 16;
		const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
		const uint MantissaBits		= SignMantissaBits - 1;













		uint SharedExp = RotationScale[3] >> 16;

		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );

		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};
		

		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;

		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}

	return M;
}


void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId		= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (20u),  0);
	OutInstanceFlags	= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (12u), (20u));	
}

uint PackPrimitiveIdAndInstanceFlags(uint PrimitiveId, uint InstanceFlags)
{
	return (PrimitiveId & ((1u << (20u)) - 1u)) | (InstanceFlags << (20u));
}

void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}


void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId		= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (24u),  0);
	OutCustomDataCount	= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (8u), (24u));
}

uint PackInstanceRelativeIdAndCustomDataCount(uint RelativeId, uint CustomDataCount)
{
	return (RelativeId & ((1u << (24u)) - 1u)) | (CustomDataCount << (24u));
}

void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}


float GetInstanceDeterminantSignFromFlags(uint Flags)
{
	
	return CondMask(Flags & 0x1, -1.0f, 1.0f);
}

void SetInstanceDeterminantSignFlag(float Determinant, inout uint Flags)
{
	if (Determinant < 0.0f)
	{
		Flags |= 0x1;
	}
	else
	{
		Flags &= ~0x1;
	}
}


FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveId);

	const uint PayloadDataRelativeOffset	= InstanceRelativeId * PrimitiveData.InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset		= PayloadDataRelativeOffset + PrimitiveData.InstancePayloadDataOffset;

	const bool bHasHierarchyOffset			= (Flags & 0x20) != 0u;
	const bool bHasLocalBounds				= (Flags & 0x40) != 0u;
	const bool bHasDynamicData				= (Flags & 0x8) != 0u;
	const bool bHasLightShadowUVBias		= (Flags & 0x10) != 0u;
	const bool bHasCustomData				= (Flags & 0x4) != 0u;

	const bool bHasEditorData				= (Flags & 0x80) != 0u;




	uint CurOffset = PayloadDataGlobalOffset;

	
	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset 	= (0xFFFFFFFFu);
	Offsets.EditorData 			= (0xFFFFFFFFu);
	Offsets.LocalBounds 		= (0xFFFFFFFFu);
	Offsets.DynamicData 		= (0xFFFFFFFFu);
	Offsets.LightShadowUVBias 	= (0xFFFFFFFFu);
	Offsets.CustomData 			= (0xFFFFFFFFu);
	
	
	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}
	
	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}
	
	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));

	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}

	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}

	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}

	return Offsets;
}

void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 TilePosition, float4x4 LocalToRelativeWorld)
{
	
	
	












	InstanceData.NonUniformScale.w							= max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign							= GetInstanceDeterminantSignFromFlags(InstanceData.Flags);

	float4x4 RelativeWorldToLocal							= LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz							   *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz					           *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz					           *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz						        = 0.0f;
	RelativeWorldToLocal								    = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz						        = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal								= MakeLWCInverseMatrix(TilePosition, RelativeWorldToLocal);
}


FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;

	
	
	
	

	
	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId != ((1u << (20u)) - 1u);

	
	
	
	
	
	
	
	

	
	
	
	








	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);

		FInstancePayloadDataOffsets Offsets 	= GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
	
	



		InstanceData.LastUpdateSceneFrameNumber	= asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);
	



		FPrimitiveSceneData PrimitiveData		= GetPrimitiveData(InstanceData.PrimitiveId);

		float3 TilePosition 									= PrimitiveData.TilePosition;


		uint4  RotationScale									= asuint(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId));
		float3 Translation										= LoadInstanceSceneDataElement(2 * SOAStride + InstanceId).xyz;
		float3 Scale = 0;
		float4x4 LocalToRelativeWorld							= DecodeTransform( RotationScale, Translation, Scale );

		InstanceData.NonUniformScale.xyz						= abs(Scale);
		InstanceData.InvNonUniformScale							= rcp(InstanceData.NonUniformScale.xyz);








		InstanceData.LocalToWorld	= MakeLWCMatrix(TilePosition, LocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, TilePosition, LocalToRelativeWorld);

		InstanceData.NaniteRuntimeResourceID	= PrimitiveData.NaniteResourceID;
		InstanceData.NaniteHierarchyOffset		= PrimitiveData.NaniteHierarchyOffset;

		[branch]
		if (Offsets.HierarchyOffset != (0xFFFFFFFFu))
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;

			
			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}

	
		[branch]
		if (Offsets.EditorData != (0xFFFFFFFFu))
		{
			const uint PackedEditorData = asuint(LoadInstancePayloadDataElement(Offsets.EditorData)).y;

			InstanceData.EditorData.bIsSelected    = (PackedEditorData >> 24u) != 0;
			InstanceData.EditorData.HitProxyPacked =  PackedEditorData & 0x00FFFFFFu;
			InstanceData.EditorData.HitProxyId = UnpackHitProxyId(InstanceData.EditorData.HitProxyPacked);
		}
	

		[branch]
		if (Offsets.LocalBounds != (0xFFFFFFFFu))
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = PrimitiveData.InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = PrimitiveData.InstanceLocalBoundsExtent;
		}

		[branch]
		if (Offsets.DynamicData != (0xFFFFFFFFu))
		{
		
			uint4  PrevRotationScale			= asuint(LoadInstancePayloadDataElement(Offsets.DynamicData + 0));
			float3 PrevTranslation				= LoadInstancePayloadDataElement(Offsets.DynamicData + 1).xyz;
			float3 PrevScale					= 0;
			float4x4 PrevLocalToRelativeWorld	= DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
		






			float3 TilePosition 				= PrimitiveData.TilePosition;
			InstanceData.PrevLocalToWorld		= MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		}
		else
		{
			
			
			
			InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, mul(LocalToRelativeWorld, PrimitiveData.WorldToPreviousWorld));
		}

	
		[branch]
		if (Offsets.LightShadowUVBias != (0xFFFFFFFFu))
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}
	
	}

	return InstanceData;
}

struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};






#line 1222 "/Engine/Private/SceneData.ush"

FSceneDataIntermediates GetSceneDataIntermediates()
{
	FSceneDataIntermediates Intermediates = (FSceneDataIntermediates)0;
	
	Intermediates.ViewIndex = 0U;
	Intermediates.PrimitiveId = 0U;
	Intermediates.InstanceId = 0U;
	Intermediates.Primitive = GetPrimitiveDataFromUniformBuffer();
	
	Intermediates.InstanceData.LocalToWorld			= Intermediates.Primitive.LocalToWorld;
	Intermediates.InstanceData.PrevLocalToWorld		= Intermediates.Primitive.PreviousLocalToWorld;
	Intermediates.InstanceData.WorldToLocal			= Intermediates.Primitive.WorldToLocal;
	Intermediates.InstanceData.NonUniformScale		= Intermediates.Primitive.NonUniformScale;
	Intermediates.InstanceData.InvNonUniformScale	= Intermediates.Primitive.InvNonUniformScale;
	Intermediates.InstanceData.DeterminantSign		= GetPrimitive_DeterminantSign_FromFlags(Intermediates.Primitive.Flags);
	Intermediates.InstanceData.LocalBoundsCenter	= (Intermediates.Primitive.LocalObjectBoundsMax + Intermediates.Primitive.LocalObjectBoundsMin) * 0.5f;
	Intermediates.InstanceData.LocalBoundsExtent	= (Intermediates.Primitive.LocalObjectBoundsMax - Intermediates.Primitive.LocalObjectBoundsMin) * 0.5f;
	Intermediates.InstanceData.ValidInstance		= true;
	
	return Intermediates;
}







StructuredBuffer<FLightSceneData> GPUSceneLights;




FLightSceneData GetLightSceneData(int LightId)
{

	return GPUSceneLights[LightId];





}
#line  14 "/Engine/Private/Lumen/LumenTracingCommon.ush"

#line   3 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


#line   3 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCache.ush"


struct FSurfaceCacheDepthData
{
	bool bValid;
	float Depth;
};

float EncodeSurfaceCacheDepth(float Depth, bool bValid)
{
	
	float MaxValidDepth = float(0xFFFF - 1 - 0.5f) / float(0xFFFF);
	Depth = min(Depth, MaxValidDepth);
	return bValid ? Depth : 1.0f;
}

bool IsSurfaceCacheDepthValid(float Depth)
{
	return Depth < 1.0f;
}


float3 DecodeSurfaceCacheNormal(FLumenCardData Card, float2 EncodedNormal)
{
	float3 CardSpaceNormal;
	CardSpaceNormal.xy = EncodedNormal.xy * 2.0f - 1.0f;
	CardSpaceNormal.z = sqrt(max(1.0f - length2(CardSpaceNormal.xy), 0.0001f));
	return normalize(mul(Card.WorldToLocalRotation, CardSpaceNormal));
}


                        

float3 DecodeSurfaceCacheAlbedo(float3 EncodedAlbedo)
{
	float3 Albedo = EncodedAlbedo * EncodedAlbedo;

	
	Albedo = min(saturate(pow(Albedo, DiffuseColorBoost)), 0.99f);

	return Albedo;
}

struct FLumenSurfaceCacheData
{
	bool bValid;

	float Depth;
	float3 Albedo;
	float3 Emissive;

	
	float3 WorldPosition;
	float3 WorldNormal;
};


FLumenSurfaceCacheData GetSurfaceCacheData(FLumenCardData Card, float2 CardUV, float2 AtlasUV)
{
	float Depth = Texture2DSampleLevel(LumenCardScene.DepthAtlas,  D3DStaticPointClampedSampler, AtlasUV, 0).x;

	FLumenSurfaceCacheData SurfaceCacheData;
	SurfaceCacheData.Depth = Depth;
	SurfaceCacheData.bValid = IsSurfaceCacheDepthValid(Depth);
	SurfaceCacheData.Albedo = float3(0.0f, 0.0f, 0.0f);
	SurfaceCacheData.Emissive = float3(0.0f, 0.0f, 0.0f);

	float2 NormalXY = float2(0.5f, 0.5f);

	if (SurfaceCacheData.bValid)
	{
		SurfaceCacheData.Albedo = DecodeSurfaceCacheAlbedo(Texture2DSampleLevel(LumenCardScene.AlbedoAtlas,  D3DStaticPointClampedSampler, AtlasUV, 0).xyz);
		SurfaceCacheData.Emissive = Texture2DSampleLevel(LumenCardScene.EmissiveAtlas,  D3DStaticPointClampedSampler, AtlasUV, 0).x;
		NormalXY = Texture2DSampleLevel(LumenCardScene.NormalAtlas,  D3DStaticPointClampedSampler, AtlasUV, 0).xy;
	}

	SurfaceCacheData.WorldNormal = DecodeSurfaceCacheNormal(Card, NormalXY);
	SurfaceCacheData.WorldPosition = GetCardWorldPosition(Card, CardUV, SurfaceCacheData.Depth);

	return SurfaceCacheData;
}
#line   5 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


Texture2D DirectLightingAtlas;
Texture2D IndirectLightingAtlas;
Texture2D FinalLightingAtlas;





Texture2D AlbedoAtlas;
Texture2D OpacityAtlas;
Texture2D NormalAtlas;
Texture2D EmissiveAtlas;
Texture2D DepthAtlas;

#line  43 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


                                  













struct FLumenCardSample
{
	uint CardIndex;
	uint CardPageIndex;
	float2 PhysicalAtlasUV;
	float4 TexelBilinearWeights;
	float2 IndirectLightingPhysicalAtlasUV;
	uint2 PackedFeedback;
	bool bValid;
};









uint2 ResLevelXYToSizeInPages(uint2 ResLevelXY)
{
	return  select_internal( ResLevelXY > 7 , 1u << (ResLevelXY - 7) , 1 );
}

uint2 GetSizeInPages(FLumenCardData Card, uint ResLevel)
{
	uint2 ResLevelXY = ResLevel - Card.ResLevelToResLevelXYBias;
	return ResLevelXYToSizeInPages(ResLevelXY);
}

FLumenCardSample ComputeSurfaceCacheSample(FLumenCardData Card, uint CardIndex, float2 LocalSamplePosition, float SampleRadius, bool bHiResSurface)
{
	
	float2 CardUV = min(SamplePositonToCardUV(Card, LocalSamplePosition), 0.999999f);

	uint2 SizeInPages = Card.SizeInPages;
	uint PageTableOffset = Card.PageTableOffset;

	if (bHiResSurface)
	{
		SizeInPages = Card.HiResSizeInPages;
		PageTableOffset = Card.HiResPageTableOffset;
	}

	uint2 PageCoord = CardUV * SizeInPages;
	uint LinearPageCoord = PageCoord.x + PageCoord.y * SizeInPages.x;

	const uint PageTableIndex = PageTableOffset + LinearPageCoord;
	const uint2 PageTableValue = LumenCardScene.PageTableBuffer.Load2(8 * PageTableIndex);

	uint2 AtlasBias;
	AtlasBias.x = ((PageTableValue.x >> 0) & 0xFFF) * 8;
	AtlasBias.y = ((PageTableValue.x >> 12) & 0xFFF) * 8;

	uint2 ResLevelXY;
	ResLevelXY.x = (PageTableValue.x >> 24) & 0xF;
	ResLevelXY.y = (PageTableValue.x >> 28) & 0xF;

	
	const uint CardPageIndex = PageTableValue.y;

	
	SizeInPages = ResLevelXYToSizeInPages(ResLevelXY);
	PageCoord = CardUV * SizeInPages;
	uint2 AtlasScale =  select_internal( ResLevelXY > 7 , 128 , (1u << ResLevelXY) );

	float2 PageUV = frac(CardUV * SizeInPages);

	
	
	float2 MinUVBorder =  select_internal( PageCoord.xy == 0 , 0.0f , 0.5f );
	float2 MaxUVBorder =  select_internal( PageCoord.xy + 1 == SizeInPages.xy , 0.0f , 0.5f );
	float2 CoordInPage = (PageUV * (AtlasScale - MinUVBorder - MaxUVBorder)) + MinUVBorder;

	
	CoordInPage = clamp(CoordInPage, 0.5f, AtlasScale - 1.0f - 0.5f);

	float2 PhysicalAtlasUV = (CoordInPage + AtlasBias) * LumenCardScene.InvPhysicalAtlasSize;
	
	
	
	
	float2 IndirectLightingPhysicalAtlasUV = PhysicalAtlasUV;

	
	uint2 PackedFeedback = 0;
	
#line 157 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


	float2 FracUV = frac(PhysicalAtlasUV * LumenCardScene.PhysicalAtlasSize + 0.5f + 1.0f / 512.0f);

	float4 TexelBilinearWeights;
	TexelBilinearWeights.x = (1.0 - FracUV.x) * (FracUV.y);
	TexelBilinearWeights.y = (FracUV.x) * (FracUV.y);
	TexelBilinearWeights.z = (FracUV.x) * (1 - FracUV.y);
	TexelBilinearWeights.w = (1 - FracUV.x) * (1 - FracUV.y);

	FLumenCardSample CardSample;
	CardSample.CardIndex = CardIndex;
	CardSample.CardPageIndex = CardPageIndex;
	CardSample.PhysicalAtlasUV = PhysicalAtlasUV;
	CardSample.TexelBilinearWeights = TexelBilinearWeights;
	CardSample.IndirectLightingPhysicalAtlasUV = IndirectLightingPhysicalAtlasUV;
	CardSample.bValid = ResLevelXY.x > 0;
	CardSample.PackedFeedback = PackedFeedback;
	return CardSample;
}

struct FCardSampleAccumulator
{
	
	FLumenCardSample CardSample;

	float MaxSampleWeight;
	float3 LightingSum;
	float OpacitySum;
	float SampleWeightSum;
};

void InitCardSampleAccumulator(inout FCardSampleAccumulator CardSampleAccumulator)
{
	CardSampleAccumulator.MaxSampleWeight = 0.0f;
	CardSampleAccumulator.LightingSum = 0.0f;
	CardSampleAccumulator.OpacitySum = 0.0f;
	CardSampleAccumulator.SampleWeightSum = 0.0f;

	CardSampleAccumulator.CardSample = (FLumenCardSample) 0;
	CardSampleAccumulator.CardSample.bValid = false;
}

float3 SampleSurfaceCacheAtlas(Texture2D AtlasTexture, float2 AtlasUV, float4 TexelWeights)
{
	float4 SampleX4 = AtlasTexture.GatherRed( D3DStaticPointClampedSampler, AtlasUV);
	float4 SampleY4 = AtlasTexture.GatherGreen( D3DStaticPointClampedSampler, AtlasUV);
	float4 SampleZ4 = AtlasTexture.GatherBlue( D3DStaticPointClampedSampler, AtlasUV);

	float3 Sample;
	Sample.x = dot(SampleX4, TexelWeights);
	Sample.y = dot(SampleY4, TexelWeights);
	Sample.z = dot(SampleZ4, TexelWeights);
	return Sample;
}

void SampleLumenCard(
	float3 MeshCardsSpacePosition,
	float3 MeshCardsSpaceNormal,
	float SampleRadius,
	float SurfaceCacheBias,
	uint CardIndex,
	float3 AxisWeights,
	bool bHiResSurface,
	bool bHeightfield,
	uint AtlasId,
	inout FCardSampleAccumulator CardSampleAccumulator)
{
	if (CardIndex < LumenCardScene.NumCards)
	{
		FLumenCardData LumenCardData = GetLumenCardData(CardIndex);
		if (LumenCardData.bVisible)
		{
			float3 CardSpacePosition = mul(MeshCardsSpacePosition - LumenCardData.MeshCardsOrigin, LumenCardData.MeshCardsToLocalRotation);
			if (all(abs(CardSpacePosition) <= LumenCardData.LocalExtent + 0.5f * SurfaceCacheBias))
			{
				CardSpacePosition.xy = clamp(CardSpacePosition.xy, -LumenCardData.LocalExtent.xy, LumenCardData.LocalExtent.xy);

				FLumenCardSample CardSample = ComputeSurfaceCacheSample(LumenCardData, CardIndex, CardSpacePosition.xy, SampleRadius, bHiResSurface);
				if (CardSample.bValid)
				{
					
					float NormalWeight = 1.0f;
					if (!bHeightfield)
					{
						if (LumenCardData.AxisAlignedDirection < 2)
						{
							NormalWeight = AxisWeights.x;
						}
						else if (LumenCardData.AxisAlignedDirection < 4)
						{
							NormalWeight = AxisWeights.y;
						}
						else
						{
							NormalWeight = AxisWeights.z;
						}
					}

					if (NormalWeight > 0.0f)
					{
						float4 TexelDepths = DepthAtlas.Gather( D3DStaticPointClampedSampler, CardSample.PhysicalAtlasUV, 0.0f);

						float NormalizedHitDistance = -(CardSpacePosition.z / LumenCardData.LocalExtent.z) * 0.5f + 0.5f;
						float BiasTreshold = SurfaceCacheBias / LumenCardData.LocalExtent.z;
						float BiasFalloff = 0.25f * BiasTreshold;

						float4 TexelVisibility = 0.0f;
						for (uint TexelIndex = 0; TexelIndex < 4; ++TexelIndex)
						{
							
							if (IsSurfaceCacheDepthValid(TexelDepths[TexelIndex]))
							{
								
								if (bHeightfield)
								{
									TexelVisibility[TexelIndex] = 1.0f;
								}
								else
								{
									TexelVisibility[TexelIndex] = 1.0f - saturate((abs(NormalizedHitDistance - TexelDepths[TexelIndex]) - BiasTreshold) / BiasFalloff);
								}
							}
						}

						float4 TexelWeights = CardSample.TexelBilinearWeights * TexelVisibility;

						float CardSampleWeight = NormalWeight * dot(TexelWeights, 1.0f);
						if (CardSampleWeight > 0.0f)
						{
							
							float TexelWeightSum = dot(TexelWeights, 1.0f);
							TexelWeights /= TexelWeightSum;

							float Opacity = SampleSurfaceCacheAtlas(OpacityAtlas, CardSample.PhysicalAtlasUV, TexelWeights).x;
							float3 Lighting = 0.0f;

							if (AtlasId == 0)
							{
								Lighting = SampleSurfaceCacheAtlas(FinalLightingAtlas, CardSample.PhysicalAtlasUV, TexelWeights);
							}
							else if (AtlasId == 1)
							{
								float3 DirectLighting = SampleSurfaceCacheAtlas(DirectLightingAtlas, CardSample.PhysicalAtlasUV, TexelWeights);
								float3 IndirectLighting = SampleSurfaceCacheAtlas(IndirectLightingAtlas, CardSample.IndirectLightingPhysicalAtlasUV, TexelWeights);
								Lighting = DirectLighting + IndirectLighting;
							}
							else 
							{
								Lighting = SampleSurfaceCacheAtlas(IndirectLightingAtlas, CardSample.PhysicalAtlasUV, TexelWeights);
							}

							
							
#line 390 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


							CardSampleAccumulator.LightingSum += Lighting * CardSampleWeight;
							CardSampleAccumulator.OpacitySum += Opacity * CardSampleWeight;
							CardSampleAccumulator.SampleWeightSum += CardSampleWeight;

							
							if (CardSampleWeight > CardSampleAccumulator.MaxSampleWeight)
							{
								CardSampleAccumulator.CardSample = CardSample;
								CardSampleAccumulator.MaxSampleWeight = CardSampleWeight;
							}
						}
					}
				}
			}
		}
	}
}

struct FSurfaceCacheSample
{
	
	float3 Lighting;
	float Opacity;

	
	float3 LightingSum;
	float OpacitySum;
	float SampleWeightSum;

	bool bValid;
	bool bHeightfield;
};

FSurfaceCacheSample InitSurfaceCacheSample()
{
	FSurfaceCacheSample SurfaceCacheSample;

	SurfaceCacheSample.Lighting = 0.0f;
	SurfaceCacheSample.Opacity = 1.0f;

	SurfaceCacheSample.LightingSum = 0.0f;
	SurfaceCacheSample.OpacitySum = 0.0f;
	SurfaceCacheSample.SampleWeightSum = 0.0f;

	SurfaceCacheSample.bValid = false;
	SurfaceCacheSample.bHeightfield = false;

	return SurfaceCacheSample;
}




FSurfaceCacheSample SampleLumenMeshCards(
	uint2 ScreenCoord,
	uint MeshCardsIndex, 
	float3 WorldSpacePosition, 
	float3 WorldSpaceNormal, 
	float SampleRadius,		
	float SurfaceCacheBias,	
	bool bHiResSurface,		
	uint AtlasId)
{
	FSurfaceCacheSample SurfaceCacheSample = InitSurfaceCacheSample();








	if (MeshCardsIndex < LumenCardScene.NumMeshCards)
	{
		FLumenMeshCardsData MeshCardsData = GetLumenMeshCardsData(MeshCardsIndex);
		if (MeshCardsData.bMostlyTwoSided)
		{
			
			SurfaceCacheBias += 50.0f;
		}

		float3 MeshCardsSpacePosition = mul(WorldSpacePosition - MeshCardsData.WorldOrigin, MeshCardsData.WorldToLocalRotation);
		float3 MeshCardsSpaceNormal = mul(WorldSpaceNormal, MeshCardsData.WorldToLocalRotation);

		uint CardMask = 0;
		float3 AxisWeights = MeshCardsSpaceNormal * MeshCardsSpaceNormal;

		
		if (AxisWeights.x > 0.0f)
		{
			CardMask |= MeshCardsData.CardLookup[MeshCardsSpaceNormal.x < 0.0f ? 0 : 1];
		}
		if (AxisWeights.y > 0.0f)
		{
			CardMask |= MeshCardsData.CardLookup[MeshCardsSpaceNormal.y < 0.0f ? 2 : 3];
		}
		if (AxisWeights.z > 0.0f)
		{
			CardMask |= MeshCardsData.CardLookup[MeshCardsSpaceNormal.z < 0.0f ? 4 : 5];
		}

		
		{
			uint CulledCardMask = 0;
			while (CardMask != 0)
			{
				const uint NextBitIndex = firstbitlow(CardMask);
				const uint NextBitMask = 1u << NextBitIndex;
				CardMask ^= NextBitMask;

				uint CardIndex = MeshCardsData.CardOffset + NextBitIndex;
				FLumenCardData LumenCardData = GetLumenCardData(CardIndex);

				if (all(abs(MeshCardsSpacePosition - LumenCardData.MeshCardsOrigin) <= LumenCardData.MeshCardsExtent + 0.5f * SurfaceCacheBias))
				{
					CulledCardMask |= NextBitMask;
				}
			}
			CardMask = CulledCardMask;
		}

		if (MeshCardsData.bHeightfield)
		{
			CardMask = (1 << 0);
		}

		FCardSampleAccumulator CardSampleAccumulator;
		InitCardSampleAccumulator(CardSampleAccumulator);

		
		while (CardMask != 0)
		{
			const uint NextBitIndex = firstbitlow(CardMask);
			CardMask ^= 1u << NextBitIndex;

			uint CardIndex = MeshCardsData.CardOffset + NextBitIndex;
			FLumenCardData LumenCardData = GetLumenCardData(CardIndex);
			if (LumenCardData.bVisible)
			{
				SampleLumenCard(
					MeshCardsSpacePosition,
					MeshCardsSpaceNormal,
					SampleRadius,
					SurfaceCacheBias,
					CardIndex,
					AxisWeights,
					bHiResSurface,
					MeshCardsData.bHeightfield,
					AtlasId,
					CardSampleAccumulator);
			}
		}

		if (CardSampleAccumulator.SampleWeightSum > 0.0f)
		{
			SurfaceCacheSample.LightingSum = CardSampleAccumulator.LightingSum;
			SurfaceCacheSample.OpacitySum = CardSampleAccumulator.OpacitySum;
			SurfaceCacheSample.SampleWeightSum = CardSampleAccumulator.SampleWeightSum;

			SurfaceCacheSample.Lighting = CardSampleAccumulator.LightingSum / CardSampleAccumulator.SampleWeightSum;
			SurfaceCacheSample.Opacity = CardSampleAccumulator.OpacitySum / CardSampleAccumulator.SampleWeightSum;
			SurfaceCacheSample.bValid = true;
			SurfaceCacheSample.bHeightfield = MeshCardsData.bHeightfield;
		}

		
#line 583 "/Engine/Private/Lumen/SurfaceCache/LumenSurfaceCacheSampling.ush"


		
		







	}

	return SurfaceCacheSample;
}
#line  15 "/Engine/Private/Lumen/LumenTracingCommon.ush"



	







	



	



	








struct FConeTraceInput
{
	float3 ConeOrigin;
	float3 ConeTranslatedOrigin;
	float3 ConeDirection;
	
	float ConeAngle; 
	float TanConeAngle;

	float ConeStartRadius;
	float MinSampleRadius;
	float MinTraceDistance;
	float MaxTraceDistance;

	float StepFactor;
	float VoxelTraceStartDistance;
	float SDFStepFactor;
	float MinSDFStepFactor;
	bool bExpandSurfaceUsingRayTimeInsteadOfMaxDistance;
	float InitialMaxDistance;

	bool bDitheredTransparency;
	uint2 DitherScreenCoord;

	
	bool bUseEpsilonTraceForHeightfields;

	
	bool bHiResSurface;

	bool bZeroRadianceIfRayStartsInsideGeometry;
	bool bCalculateHitVelocity;

	
	uint NumMeshSDFs;
	uint MeshSDFStartOffset;
	uint MeshSDFBitmaskStartOffset;
	float CardInterpolateInfluenceRadius;

	
	uint NumHeightfields;
	uint HeightfieldStartOffset;

	void Setup(
		float3 InConeOrigin,
		float3 InConeTranslatedOrigin,
		float3 InConeDirection,
		float InConeAngle,
		float InMinSampleRadius,
		float InMinTraceDistance,
		float InMaxTraceDistance,
		float InStepFactor)
	{
		ConeOrigin = InConeOrigin;
		ConeTranslatedOrigin = InConeTranslatedOrigin;
		ConeDirection = InConeDirection;
		ConeAngle = InConeAngle;
		TanConeAngle = tan(ConeAngle);
		ConeStartRadius = 0;
		MinSampleRadius = InMinSampleRadius;
		MinTraceDistance = InMinTraceDistance;
		MaxTraceDistance = InMaxTraceDistance;
		StepFactor = InStepFactor;
		VoxelTraceStartDistance = InMaxTraceDistance;

		SDFStepFactor = 1.0f;
		MinSDFStepFactor = 1.0f;

		
		bExpandSurfaceUsingRayTimeInsteadOfMaxDistance = true;
		InitialMaxDistance = 0;

		bDitheredTransparency = false;
		DitherScreenCoord = uint2(0, 0);
		bHiResSurface = false;
		bCalculateHitVelocity = false;

		bUseEpsilonTraceForHeightfields = true;
		bZeroRadianceIfRayStartsInsideGeometry = false;
	}
};

struct FConeTraceResult
{
	float3 Lighting;
	float Transparency;
	float NumSteps;
	float NumOverlaps;
	float OpaqueHitDistance;
	float ExpandSurfaceAmount;
	float3 Debug;
	float3 GeometryWorldNormal;
	float3 WorldVelocity;
};


Buffer<uint> NumGridCulledMeshSDFObjects;
Buffer<uint> GridCulledMeshSDFObjectStartOffsetArray;
Buffer<uint> GridCulledMeshSDFObjectIndicesArray;

struct FTraceMeshSDFResult
{
	float HitDistance;
	uint HitObject;
};

float MeshSDFNotCoveredExpandSurfaceScale;
float MeshSDFNotCoveredMinStepScale;
float MeshSDFDitheredTransparencyStepThreshold;

void RayTraceSingleMeshSDF(
	float3 WorldRayStart, 
	float3 WorldRayDirection, 
	float TanConeHalfAngle,
	float MinTraceDistance,
	float MaxTraceDistance, 
	uint ObjectIndex,
	
	
	
	bool bExpandSurfaceUsingRayTimeInsteadOfMaxDistance,
	float InitialMaxDistance,
	bool bDitheredTransparency,
	float2 DitherScreenCoord,
	inout FTraceMeshSDFResult TraceResult)
{
	FDFObjectData DFObjectData = LoadDFObjectData(ObjectIndex);
	float4x4 WorldToVolume =  LWCToFloat( DFObjectData.WorldToVolume );

	if (!bDitheredTransparency || !DFObjectData.bMostlyTwoSided)
	{
		
		MaxTraceDistance = min(MaxTraceDistance, TraceResult.HitDistance + DFObjectData.VolumeSurfaceBias);
	}

	float3 WorldRayEnd = WorldRayStart + WorldRayDirection * MaxTraceDistance;
	float3 VolumeRayStart = mul(float4(WorldRayStart, 1), WorldToVolume).xyz;
	float3 VolumeRayEnd = mul(float4(WorldRayEnd, 1), WorldToVolume).xyz;
	float3 VolumeRayDirection = VolumeRayEnd - VolumeRayStart;

	float VolumeMaxTraceDistance = length(VolumeRayDirection);
	float VolumeMinTraceDistance = VolumeMaxTraceDistance * (MinTraceDistance / MaxTraceDistance);
	VolumeRayDirection /= VolumeMaxTraceDistance;

	float2 VolumeSpaceIntersectionTimes = LineBoxIntersect(VolumeRayStart, VolumeRayEnd, -DFObjectData.VolumePositionExtent, DFObjectData.VolumePositionExtent);

	VolumeSpaceIntersectionTimes *= VolumeMaxTraceDistance;
	VolumeSpaceIntersectionTimes.x = max(VolumeSpaceIntersectionTimes.x, VolumeMinTraceDistance);

	[branch]
	if (VolumeSpaceIntersectionTimes.x < VolumeSpaceIntersectionTimes.y)
	{
		uint MaxMipIndex = LoadDFAssetData(DFObjectData.AssetIndex, 0).NumMips - 1;
		
		uint ReversedMipIndex = MaxMipIndex;
		FDFAssetData DFAssetMipData = LoadDFAssetData(DFObjectData.AssetIndex, ReversedMipIndex);

		
			ReversedMipIndex = MaxMipIndex;
			DFAssetMipData = LoadDFAssetData(DFObjectData.AssetIndex, ReversedMipIndex);
		

		float Coverage = DFObjectData.bMostlyTwoSided && bDitheredTransparency ? 0.0f : 1.0f;
		float ExpandSurfaceScale = lerp(MeshSDFNotCoveredExpandSurfaceScale, 1.0f, Coverage);

		float SampleRayTime = VolumeSpaceIntersectionTimes.x;

		uint MaxSteps = 64;
		float MinStepSize = 1.0f / (16.0f * MaxSteps);
		uint StepIndex = 0;
		bool bHit = false;
		float MaxDistance = InitialMaxDistance;

		[loop]
		for (; StepIndex < MaxSteps; StepIndex++)
		{
			float3 SampleVolumePosition = VolumeRayStart + VolumeRayDirection * SampleRayTime;
			float DistanceField = SampleSparseMeshSignedDistanceField(SampleVolumePosition, DFAssetMipData);

			MaxDistance = max(DistanceField, MaxDistance);
			float ExpandSurfaceTime = bExpandSurfaceUsingRayTimeInsteadOfMaxDistance ? SampleRayTime : MaxDistance;

			
			
			float ExpandSurfaceDistance = DFObjectData.VolumeSurfaceBias;
			const float ExpandSurfaceFalloff = 2.0f * ExpandSurfaceDistance;
			const float ExpandSurfaceAmount = ExpandSurfaceDistance * saturate(ExpandSurfaceTime / ExpandSurfaceFalloff) * ExpandSurfaceScale;

			float StepNoise = InterleavedGradientNoise(DitherScreenCoord.xy, View.StateFrameIndexMod8 * MaxSteps + StepIndex);

#line 251 "/Engine/Private/Lumen/LumenTracingCommon.ush"

			if (DistanceField < ExpandSurfaceAmount 
				&& ReversedMipIndex == MaxMipIndex
				&& (!bDitheredTransparency || StepNoise * (1 - Coverage) <= MeshSDFDitheredTransparencyStepThreshold))
			{
				
				
				SampleRayTime = clamp(SampleRayTime + DistanceField - ExpandSurfaceAmount, VolumeSpaceIntersectionTimes.x, VolumeSpaceIntersectionTimes.y);
				bHit = true;
				break;
			}

			float LocalMinStepSize = MinStepSize * lerp(MeshSDFNotCoveredMinStepScale, 1.0f, Coverage);
			float StepDistance = max(DistanceField, LocalMinStepSize);
			SampleRayTime += StepDistance;		

			if (SampleRayTime > VolumeSpaceIntersectionTimes.y + ExpandSurfaceAmount)
			{
				break;
			}
		}

		if (StepIndex == MaxSteps)
		{
			bHit = true;
		}

		if (bHit)
		{
			float NewHitDistance = length(VolumeRayDirection * SampleRayTime * DFObjectData.VolumeToWorldScale);

			if (NewHitDistance < TraceResult.HitDistance)
			{
				TraceResult.HitObject = ObjectIndex;
				TraceResult.HitDistance = NewHitDistance;
			}
		}
	}
}

float3 GetPrevWorldPositionFromGPUSceneInstanceIndex(float3 WorldPosition, uint GPUSceneInstanceIndex)
{
	FInstanceSceneData InstanceSceneData = GetInstanceSceneData(GPUSceneInstanceIndex, View.InstanceSceneDataSOAStride);
	float4 LocalPosition = mul(float4(WorldPosition, 1),  LWCToFloat( InstanceSceneData.WorldToLocal ));
	float3 PrevWorldPosition = mul(LocalPosition,  LWCToFloat( InstanceSceneData.PrevLocalToWorld )).xyz;
	return PrevWorldPosition;
}

struct FTraceMeshSDFDerivedData
{
	float3 HitNormal;
	uint SceneInstanceIndex;
	uint MeshCardsIndex;
	float3 WorldVelocity;
};

FTraceMeshSDFDerivedData CalculateMeshSDFDerivedData(
	float3 WorldRayStart, 
	float3 WorldRayDirection, 
	float TraceDistance,
	bool bCalculateHitVelocity,
	FTraceMeshSDFResult TraceMeshSDFResult)
{
	FTraceMeshSDFDerivedData TraceSDFData;

	uint DFObjectIndex = TraceMeshSDFResult.HitObject;
	FDFObjectData DFObjectData = LoadDFObjectData(DFObjectIndex);
	float4x4 WorldToVolume =  LWCToFloat( DFObjectData.WorldToVolume );

	float3 HitPosition = WorldRayStart + WorldRayDirection * TraceMeshSDFResult.HitDistance;
	float3 SampleVolumePosition = mul(float4(HitPosition, 1), WorldToVolume).xyz;

	
	SampleVolumePosition = clamp(SampleVolumePosition, -DFObjectData.VolumePositionExtent, DFObjectData.VolumePositionExtent);

	FDFAssetData DFAssetData = LoadDFAssetDataHighestResolution(DFObjectData.AssetIndex);
	float3 VolumeGradient = CalculateMeshSDFGradient(SampleVolumePosition, DFAssetData);
	float VolumeGradientLength = length(VolumeGradient);
	float3 VolumeNormal = VolumeGradientLength > 0.0f ? VolumeGradient / VolumeGradientLength : 0;
	
	float3 WorldGradient = mul(VolumeNormal, transpose((float3x3)DFObjectData.WorldToVolume.M));
	float WorldGradientLength = length(WorldGradient);
	TraceSDFData.HitNormal = WorldGradientLength > 0.0f ? WorldGradient / WorldGradientLength : 0;

	if (bCalculateHitVelocity)
	{
		TraceSDFData.WorldVelocity = HitPosition - GetPrevWorldPositionFromGPUSceneInstanceIndex(HitPosition, DFObjectData.GPUSceneInstanceIndex);
	}

	TraceSDFData.SceneInstanceIndex = DFObjectData.GPUSceneInstanceIndex;
	TraceSDFData.MeshCardsIndex = GetMeshCardsIndexFromSceneInstanceIndex(TraceSDFData.SceneInstanceIndex);

	return TraceSDFData;
}

Buffer<uint> NumCulledHeightfieldObjects;
Buffer<uint> CulledHeightfieldObjectIndexBuffer;

Buffer<uint> NumGridCulledHeightfieldObjects;
Buffer<uint> GridCulledHeightfieldObjectStartOffsetArray;
Buffer<uint> GridCulledHeightfieldObjectIndicesArray;

struct FConeTraceHeightfieldSimpleResult
{
	bool bIsHit;
	bool bHitFrontFace;
	float HitDistance;
};

struct FHeightfieldRayStep
{
	float tValue;
	float3 LocalSamplePosition;
	float LocalHeightfieldDepth;
	bool bAboveHeightfield;
};

FHeightfieldRayStep HeightfieldRayStep(FLumenCardData LumenCardData, uint LocalCardIndex, FConeTraceInput TraceInput, float3 LocalConeOrigin, float3 LocalConeDirection, float tValue)
{
	float SampleRadius = max(TraceInput.ConeStartRadius + TraceInput.TanConeAngle * tValue, TraceInput.MinSampleRadius);
	float3 LocalSamplePosition = LocalConeOrigin + LocalConeDirection * tValue;
	bool bHiResSurface = false;

	FLumenCardSample CardSample = ComputeSurfaceCacheSample(LumenCardData, LocalCardIndex, LocalSamplePosition.xy, SampleRadius, bHiResSurface);

	float NormalizedDepth = Texture2DSampleLevel(LumenCardScene.DepthAtlas,  D3DStaticBilinearClampedSampler, CardSample.PhysicalAtlasUV, 0).x;

	FHeightfieldRayStep RayStep;
	RayStep.tValue = tValue;
	RayStep.LocalSamplePosition = LocalSamplePosition;
	RayStep.LocalHeightfieldDepth = -(2.0f * NormalizedDepth - 1.0f) * LumenCardData.LocalExtent.z;
	RayStep.bAboveHeightfield = RayStep.LocalSamplePosition.z > RayStep.LocalHeightfieldDepth;
	return RayStep;
}

float GetHeightfieldAlpha(FLumenCardData LumenCardData, uint LocalCardIndex, FConeTraceInput TraceInput, float3 LocalConeOrigin, float3 LocalConeDirection, float tValue)
{
	float SampleRadius = max(TraceInput.ConeStartRadius + TraceInput.TanConeAngle * tValue, TraceInput.MinSampleRadius);
	float3 LocalSamplePosition = LocalConeOrigin + LocalConeDirection * tValue;
	bool bHiResSurface = false;

	FLumenCardSample CardSample = ComputeSurfaceCacheSample(LumenCardData, LocalCardIndex, LocalSamplePosition.xy, SampleRadius, bHiResSurface);

	return Texture2DSampleLevel(LumenCardScene.OpacityAtlas,  D3DStaticBilinearClampedSampler, CardSample.PhysicalAtlasUV, 0).x;
}

bool EvaluateHeightfieldHit(
	FLumenCardData LumenCardData, 
	uint LocalCardIndex, 
	FConeTraceInput TraceInput,
	float3 LocalConeOrigin,
	float3 LocalConeDirection,
	FHeightfieldRayStep PrevStep,
	FHeightfieldRayStep Step,
	float StepSize, 
	float tMinValue,
	float tMaxValue,
	inout FConeTraceHeightfieldSimpleResult Result)
{
	
	
	float DeltaT = (PrevStep.LocalSamplePosition.z - PrevStep.LocalHeightfieldDepth) / (PrevStep.LocalSamplePosition.z - Step.LocalSamplePosition.z - PrevStep.LocalHeightfieldDepth + Step.LocalHeightfieldDepth);
	float HitDistance = clamp(PrevStep.tValue + DeltaT * StepSize, tMinValue, tMaxValue);

	float HeightfieldAlpha = GetHeightfieldAlpha(LumenCardData, LocalCardIndex, TraceInput, LocalConeOrigin, LocalConeDirection, HitDistance);
	if (HeightfieldAlpha > 0.5f)
	{
		Result.HitDistance = HitDistance;
		Result.bIsHit = true;
		Result.bHitFrontFace = !Step.bAboveHeightfield;
	}

	return Result.bIsHit;
}

int HeightfieldMaxTracingSteps;

FConeTraceHeightfieldSimpleResult ConeTraceHeightfieldSimple(
	FConeTraceInput TraceInput,
	uint HeightfieldIndex
)
{
	FConeTraceHeightfieldSimpleResult Result;
	Result.bIsHit = false;
	Result.bHitFrontFace = false;
	Result.HitDistance = TraceInput.MaxTraceDistance;

	FLumenHeightfieldData LumenHeightfield = GetLumenHeightfieldData(HeightfieldIndex);
	FLumenMeshCardsData MeshCardsData = GetLumenMeshCardsData(LumenHeightfield.MeshCardsIndex);

	
	int LocalCardIndex = 0;
	FLumenCardData LumenCardData = GetLumenCardData(MeshCardsData.CardOffset + LocalCardIndex);

	
	float3 LocalConeOrigin = mul(TraceInput.ConeOrigin - LumenCardData.Origin, LumenCardData.WorldToLocalRotation);
	float3 LocalConeDirection = mul(TraceInput.ConeDirection, LumenCardData.WorldToLocalRotation);
	float3 LocalConeEndPoint = LocalConeOrigin + LocalConeDirection * TraceInput.MaxTraceDistance;

	
	float2 HitT = LineBoxIntersect(LocalConeOrigin, LocalConeEndPoint, -LumenCardData.LocalExtent, LumenCardData.LocalExtent);
	HitT *= length(LocalConeEndPoint - LocalConeOrigin);

	
	float tMinValue = max(HitT.x, TraceInput.MinTraceDistance);
	float tMaxValue = min(HitT.y, TraceInput.MaxTraceDistance);

	
	if (tMinValue < tMaxValue && LumenCardData.bVisible)
	{
		
		FHeightfieldRayStep PrevStep = HeightfieldRayStep(LumenCardData, LocalCardIndex, TraceInput, LocalConeOrigin, LocalConeDirection, tMinValue);

		
		float EpsilonTraceLength = LumenCardData.TexelSize;
		if (TraceInput.bUseEpsilonTraceForHeightfields && tMinValue < EpsilonTraceLength)
		{
			FHeightfieldRayStep Step = HeightfieldRayStep(LumenCardData, LocalCardIndex, TraceInput, LocalConeOrigin, LocalConeDirection, EpsilonTraceLength);

			
			if (PrevStep.bAboveHeightfield && !Step.bAboveHeightfield)
			{
				EvaluateHeightfieldHit(
					LumenCardData,
					LocalCardIndex,
					TraceInput,
					LocalConeOrigin,
					LocalConeDirection,
					PrevStep,
					Step,
					 EpsilonTraceLength,
					tMinValue,
					tMaxValue,
					Result);
			}

			PrevStep = Step;
			tMinValue = EpsilonTraceLength;
		}

		if (!Result.bIsHit)
		{
			const int MaxSteps = HeightfieldMaxTracingSteps;
			float MinStepSize = (tMaxValue - tMinValue) / MaxSteps;
			float StepSize = max(LumenCardData.TexelSize * TraceInput.StepFactor, MinStepSize);

			float tValue = tMinValue;
			for (int StepIndex = 0; StepIndex < MaxSteps; ++StepIndex)
			{
				tValue = min(tValue + StepSize, tMaxValue);

				FHeightfieldRayStep Step = HeightfieldRayStep(LumenCardData, LocalCardIndex, TraceInput, LocalConeOrigin, LocalConeDirection, tValue);

				
				if (PrevStep.bAboveHeightfield != Step.bAboveHeightfield)
				{
					EvaluateHeightfieldHit(
						LumenCardData,
						LocalCardIndex,
						TraceInput,
						LocalConeOrigin,
						LocalConeDirection,
						PrevStep,
						Step,
						 StepSize,
						tMinValue,
						tMaxValue,
						Result);
				}

				PrevStep = Step;

				
				if (Result.bIsHit || tValue >= tMaxValue)
				{
					break;
				}
			}
		}
	}

	return Result;
}

struct FTraceMeshHeightfieldResult
{
	FLumenCardData LumenCardData;
	int LocalCardIndex;
	float HitDistance;
	int TotalStepCount;
	uint HeightfieldObjectIndex;
};

struct FTraceMeshHeightfieldShadedResult
{
	float3 Lighting;
	float Opacity;
};

FTraceMeshHeightfieldResult ConeTraceHeightfield(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult
)
{
	OutResult = (FConeTraceResult)0;
	FTraceMeshHeightfieldResult TraceMeshHeightfieldResult = (FTraceMeshHeightfieldResult)0;
	TraceMeshHeightfieldResult.HitDistance = TraceInput.MaxTraceDistance;

	bool bHitFrontFace = false;



	uint NumHeightfields = TraceInput.NumHeightfields;


#line 611 "/Engine/Private/Lumen/LumenTracingCommon.ush"

	OutResult.NumOverlaps = NumHeightfields;
	OutResult.OpaqueHitDistance = TraceMeshHeightfieldResult.HitDistance;
	return TraceMeshHeightfieldResult;
}

void ConeTraceMeshSDFsAndInterpolateFromCards(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{
	FTraceMeshSDFResult TraceMeshSDFResult;
	TraceMeshSDFResult.HitDistance = TraceInput.MaxTraceDistance;
	TraceMeshSDFResult.HitObject = 0;

	for (uint GridCulledMeshSDFIndex = 0; GridCulledMeshSDFIndex < TraceInput.NumMeshSDFs; GridCulledMeshSDFIndex++)
	{
		uint ObjectIndex = GridCulledMeshSDFObjectIndicesArray[TraceInput.MeshSDFStartOffset + GridCulledMeshSDFIndex];

		RayTraceSingleMeshSDF(
			TraceInput.ConeOrigin, 
			TraceInput.ConeDirection, 
			TraceInput.TanConeAngle,
			TraceInput.MinTraceDistance,
			TraceInput.MaxTraceDistance, 
			ObjectIndex, 
			TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance,
			TraceInput.InitialMaxDistance,
			TraceInput.bDitheredTransparency,
			TraceInput.DitherScreenCoord,
			TraceMeshSDFResult);
	}

	if (TraceMeshSDFResult.HitDistance < TraceInput.MaxTraceDistance)
	{
		FTraceMeshSDFDerivedData TraceSDFData = CalculateMeshSDFDerivedData(
			TraceInput.ConeOrigin, 
			TraceInput.ConeDirection, 
			TraceInput.MaxTraceDistance, 
			TraceInput.bCalculateHitVelocity,
			TraceMeshSDFResult);

		
		
		
		float3 InterpolatePosition = TraceInput.ConeOrigin + TraceInput.ConeDirection * TraceMeshSDFResult.HitDistance;
		float InterpolateRadius = TraceMeshSDFResult.HitDistance * TraceInput.TanConeAngle;

		
		
	
		uint AtlasId = 0;
		OutResult.Lighting = SampleLumenMeshCards(
			TraceInput.DitherScreenCoord,
			TraceSDFData.MeshCardsIndex,
			InterpolatePosition,
			TraceSDFData.HitNormal,
			InterpolateRadius,
			 20.0f,
			TraceInput.bHiResSurface,
			AtlasId).Lighting;
		OutResult.Transparency = 0;
		OutResult.WorldVelocity = TraceSDFData.WorldVelocity;
	}

	OutResult.OpaqueHitDistance = TraceMeshSDFResult.HitDistance;
}

void EvaluateGlobalDistanceFieldHit(FConeTraceInput TraceInput, FGlobalSDFTraceResult SDFTraceResult, inout FConeTraceResult ConeTraceResult)
{
	const float3 SampleWorldPosition = TraceInput.ConeOrigin + TraceInput.ConeDirection * SDFTraceResult.HitTime;
	const float3 SampleTranslatedWorldPosition = TraceInput.ConeTranslatedOrigin + TraceInput.ConeDirection * SDFTraceResult.HitTime;
	const float3 SampleWorldNormal = ComputeGlobalDistanceFieldNormal(SampleTranslatedWorldPosition, SDFTraceResult.HitClipmapIndex, -TraceInput.ConeDirection);
	const float ClipmapVoxelExtent = View.GlobalVolumeTranslatedCenterAndExtent[SDFTraceResult.HitClipmapIndex].w * View.GlobalVolumeTexelSize;

	float RadianceFactor = 1.0f;
	if (TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance)
	{
		
		RadianceFactor = smoothstep(1.5f * ClipmapVoxelExtent, 2.0f * ClipmapVoxelExtent, SDFTraceResult.HitTime);
	}

	if (TraceInput.bZeroRadianceIfRayStartsInsideGeometry && SDFTraceResult.HitTime <= TraceInput.MinTraceDistance)
	{
		RadianceFactor = 0.0f;
	}

	float3 LightingSum = 0.0f;
	float SampleWeightSum = 0.0f;

	float3 ClipmapVolumeUV = ComputeGlobalUV(SampleTranslatedWorldPosition, SDFTraceResult.HitClipmapIndex);
	FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, SDFTraceResult.HitClipmapIndex);
	if (RadianceFactor > 0.0f && Page.bValid)
	{
		float3 PageTableCoord = saturate(ClipmapVolumeUV) * View.GlobalDistanceFieldClipmapSizeInPages;
		uint3 CellCoordInPage = frac(frac(PageTableCoord)) * 4;
		uint CellOffsetInPage = ZOrder3DEncode(CellCoordInPage, log2(4));

		uint4 DistanceFieldObjectGridCell = GlobalDistanceFieldPageObjectGridBuffer[(4 * 4 * 4) * Page.PageIndex + CellOffsetInPage];

		for (uint ObjectIndexInList = 0; ObjectIndexInList < 4; ++ObjectIndexInList)
		{
			FObjectGridCellIndex GridCellIndex = UnpackObjectGridCellIndex(DistanceFieldObjectGridCell[ObjectIndexInList]);
			if (GridCellIndex.bValid)
			{
				uint MeshCardsIndex = GetMeshCardsIndexFromSceneInstanceIndex(GridCellIndex.GPUSceneInstanceIndex);
				if (MeshCardsIndex < LumenCardScene.NumMeshCards)
				{
					uint2 ScreenCoord = TraceInput.DitherScreenCoord;
					float SurfaceCacheBias = 2.0f * ClipmapVoxelExtent;
					float SampleRadius = TraceInput.ConeStartRadius + TraceInput.TanConeAngle * SDFTraceResult.HitTime;

					FSurfaceCacheSample SurfaceCacheSample = SampleLumenMeshCards(
						ScreenCoord,
						MeshCardsIndex,
						SampleWorldPosition,
						SampleWorldNormal,
						SampleRadius,
						SurfaceCacheBias,
						TraceInput.bHiResSurface,
						0
					);

					LightingSum += SurfaceCacheSample.LightingSum;
					SampleWeightSum += SurfaceCacheSample.SampleWeightSum;

					if (SampleWeightSum >= 0.9f)
					{
						break;	
					}
				}
			}
			else
			{
				break;
			}
		}

		
		
#line 783 "/Engine/Private/Lumen/LumenTracingCommon.ush"

	}

	float4 LightingAndAlpha = 0.0f;

	if (SampleWeightSum > 0.0f)
	{
		LightingAndAlpha.xyz = RadianceFactor * (LightingSum / SampleWeightSum);
	}

	
	








	ConeTraceResult.Lighting = LightingAndAlpha.xyz;
	ConeTraceResult.Transparency = LightingAndAlpha.w;
	ConeTraceResult.OpaqueHitDistance = SDFTraceResult.HitTime;
	ConeTraceResult.GeometryWorldNormal = SampleWorldNormal;
}




void RayTraceGlobalDistanceField(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{
	FGlobalSDFTraceResult SDFTraceResult;

	
	{
		FGlobalSDFTraceInput SDFTraceInput = SetupGlobalSDFTraceInput(TraceInput.ConeTranslatedOrigin, TraceInput.ConeDirection, TraceInput.MinTraceDistance, TraceInput.MaxTraceDistance, TraceInput.SDFStepFactor, TraceInput.MinSDFStepFactor);
		SDFTraceInput.bDitheredTransparency = TraceInput.bDitheredTransparency;
		SDFTraceInput.DitherScreenCoord = TraceInput.DitherScreenCoord;
		SDFTraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance = TraceInput.bExpandSurfaceUsingRayTimeInsteadOfMaxDistance;
		SDFTraceInput.InitialMaxDistance = TraceInput.InitialMaxDistance;

		SDFTraceResult = RayTraceGlobalDistanceField(SDFTraceInput);
	}

	OutResult = (FConeTraceResult)0;
	OutResult.Lighting = float3(0.0f, 0.0f, 0.0f);
	OutResult.Transparency = 1.0f;
	OutResult.NumSteps = SDFTraceResult.TotalStepsTaken;
	OutResult.OpaqueHitDistance = TraceInput.MaxTraceDistance;
	OutResult.ExpandSurfaceAmount = SDFTraceResult.ExpandSurfaceAmount;

	if (GlobalSDFTraceResultIsHit(SDFTraceResult))
	{
		EvaluateGlobalDistanceFieldHit(TraceInput, SDFTraceResult, OutResult);
	}
}

float ComputeSquaredDistanceBetweenAABBs(float3 CenterA, float3 ExtentA, float3 CenterB, float3 ExtentB)
{
	float3 AxisDistances = max(abs(CenterB - CenterA) - (ExtentA + ExtentB), 0);
	return dot(AxisDistances, AxisDistances);
}

float CalculateVoxelTraceStartDistance(float MinTraceDistance, float MaxTraceDistance, float MaxMeshSDFTraceDistance, bool bContinueCardTracing)
{
	float VoxelTraceStartDistance = MaxTraceDistance;

	if (View.NumGlobalSDFClipmaps > 0)
	{
		VoxelTraceStartDistance = MinTraceDistance;

		if (bContinueCardTracing)
		{
			VoxelTraceStartDistance = max(VoxelTraceStartDistance, MaxMeshSDFTraceDistance);
		}
	}

	return VoxelTraceStartDistance;
}

void ConeTraceLumenSceneCards(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{
	OutResult = (FConeTraceResult)0;
	OutResult.Transparency = 1;
	OutResult.OpaqueHitDistance = TraceInput.MaxTraceDistance;


	if (TraceInput.VoxelTraceStartDistance > TraceInput.MinTraceDistance)
	{
		FConeTraceInput CardTraceInput = TraceInput;
		CardTraceInput.MaxTraceDistance = TraceInput.VoxelTraceStartDistance;

		ConeTraceMeshSDFsAndInterpolateFromCards(CardTraceInput, OutResult);
	}

}

void ConeTraceLumenSceneHeightfields(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{
#line 903 "/Engine/Private/Lumen/LumenTracingCommon.ush"

}

void ConeTraceLumenSceneVoxels(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{

	if (TraceInput.VoxelTraceStartDistance < TraceInput.MaxTraceDistance)
	{
		FConeTraceInput VoxelTraceInput = TraceInput;
		VoxelTraceInput.MinTraceDistance = TraceInput.VoxelTraceStartDistance;
		FConeTraceResult VoxelTraceResult;
		RayTraceGlobalDistanceField(VoxelTraceInput, VoxelTraceResult);

		OutResult.Lighting += VoxelTraceResult.Lighting * OutResult.Transparency;
		OutResult.Transparency *= VoxelTraceResult.Transparency;
		OutResult.NumSteps += VoxelTraceResult.NumSteps;
		OutResult.OpaqueHitDistance = min(OutResult.OpaqueHitDistance, VoxelTraceResult.OpaqueHitDistance);
		OutResult.GeometryWorldNormal = VoxelTraceResult.GeometryWorldNormal;
		OutResult.WorldVelocity = VoxelTraceResult.WorldVelocity;
	}

}

void ConeTraceLumenScene(
	FConeTraceInput TraceInput,
	inout FConeTraceResult OutResult)
{
	ConeTraceLumenSceneCards(TraceInput, OutResult);
	ConeTraceLumenSceneHeightfields(TraceInput, OutResult);
	ConeTraceLumenSceneVoxels(TraceInput, OutResult);
}

float TanConeAngleToRoughness(float TanConeAngle)
{
	
	return sqrt(saturate(TanConeAngle / (.5f * PI)));
}

float3 EvaluateSkyRadiance(float3 Direction)
{
	float3 SkyRadiance = 0.0f;












	return SkyRadiance;
}

void ApplySkylightToTraceResult(float3 ConeDirection, inout FConeTraceResult TraceResult)
{ 











}

                      
                               
                                     
                      

float CalculateSkylightLeakingAmount(float HitDistance)
{
	return SkylightLeaking * saturate(HitDistance * InvFullSkylightLeakingDistance);
}

float3 GetSkylightLeaking(float3 ConeDirection, float HitDistance)
{
	float3 Lighting = 0;

	if (ReflectionStruct.SkyLightParameters.y > 0 && SkylightLeaking > 0.0f)
	{
		float SkyAverageBrightness = 1.0f;
		Lighting = GetSkyLightReflection(ConeDirection, SkylightLeakingRoughness, SkyAverageBrightness) * CalculateSkylightLeakingAmount(HitDistance);
	}

	return Lighting;
}
#line  12 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   7 "/Engine/Private/Lumen/LumenRadianceCacheCommon.ush"


#line   7 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"










	






#line  55 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


	Texture3D<uint> RadianceProbeIndirectionTexture;
	Texture2D<float3> RadianceCacheFinalRadianceAtlas;
	Texture2D<float3> RadianceCacheFinalIrradianceAtlas;
	Texture2D<float2> RadianceCacheProbeOcclusionAtlas;
	Texture2D<float> RadianceCacheDepthAtlas;
	StructuredBuffer<float4> ProbeWorldOffset;

	                                
	                                                      
	                                                      

	                              
	                         

	                                   
	                                            
	                                              
	                                    

	                              
	                                    
	
	                              
	
	                          

	                         
	                                
	
	                              

	                              
	                                    
	                                    

	                                    
	                                     



float GetRadianceProbeTMin(uint ClipmapIndex)
{
	return RadianceProbeSettings[ClipmapIndex].x; 
}

float GetWorldPositionToRadianceProbeCoordScale(uint ClipmapIndex)
{
	return RadianceProbeSettings[ClipmapIndex].y; 
}

float GetRadianceProbeCoordToWorldPositionScale(uint ClipmapIndex)
{
	return RadianceProbeSettings[ClipmapIndex].z; 
}

float3 GetWorldPositionToRadianceProbeCoordBias(uint ClipmapIndex)
{
	return PaddedWorldPositionToRadianceProbeCoordBias[ClipmapIndex].xyz; 
}

float3 GetRadianceProbeCoordToWorldPositionBias(uint ClipmapIndex)
{
	return PaddedRadianceProbeCoordToWorldPositionBias[ClipmapIndex].xyz; 
}

int3 GetRadianceProbeCoord(float3 ProbeWorldPosition, uint ClipmapIndex)
{
	
	return floor(ProbeWorldPosition * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex));
}

int3 GetRadianceProbeBottomCornerCoord(float3 ProbeWorldPosition, uint ClipmapIndex)
{
	
	return floor(ProbeWorldPosition * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex) - 0.5f);
}

float3 GetProbeWorldPosition(uint3 ProbeCoord, uint ClipmapIndex, uint ProbeIndex)
{
	float3 ProbeWorldPosition = ProbeCoord * GetRadianceProbeCoordToWorldPositionScale(ClipmapIndex) + GetRadianceProbeCoordToWorldPositionBias(ClipmapIndex);
	return ProbeWorldPosition + ProbeWorldOffset[ProbeIndex].xyz;
}

bool IsValidRadianceCacheClipmap(uint FRadianceCacheCoverage)
{
	return FRadianceCacheCoverage < NumRadianceProbeClipmaps;
}

uint GetRadianceProbeClipmap(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	uint ClipmapIndex = 0;

	for (; ClipmapIndex < NumRadianceProbeClipmaps; ++ClipmapIndex)
	{
		float3 ProbeCoordFloat = WorldSpacePosition * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex);
		float3 BottomEdgeFades = saturate((ProbeCoordFloat - .5f) * InvClipmapFadeSize);
		float3 TopEdgeFades = saturate(((float3)RadianceProbeClipmapResolution - .5f - ProbeCoordFloat) * InvClipmapFadeSize);
		float EdgeFade = min(min3(BottomEdgeFades.x, BottomEdgeFades.y, BottomEdgeFades.z), min3(TopEdgeFades.x, TopEdgeFades.y, TopEdgeFades.z));

		if (EdgeFade > ClipmapDitherRandom)
		{
			return ClipmapIndex;
		}
	}

	return NumRadianceProbeClipmaps;
}

struct FRadianceCacheCoverage
{
	uint ClipmapIndex;

	
	float MinTraceDistanceBeforeInterpolation;

	
	bool bValid;
};

FRadianceCacheCoverage InitRadianceCacheCoverage()
{
	FRadianceCacheCoverage Out;
	Out.ClipmapIndex = 0;
	Out.MinTraceDistanceBeforeInterpolation = 10000000.0f;
	Out.bValid = false;
	return Out;
}




FRadianceCacheCoverage GetRadianceCacheCoverage(float3 RayOrigin, float3 RayDirection, float ClipmapDitherRandom)
{
	FRadianceCacheCoverage Coverage = InitRadianceCacheCoverage();

	Coverage.ClipmapIndex = GetRadianceProbeClipmap(RayOrigin, ClipmapDitherRandom);

	if (Coverage.ClipmapIndex < NumRadianceProbeClipmaps)
	{
		Coverage.bValid = true;

		float CellOcclusionDistance = GetRadianceProbeCoordToWorldPositionScale(Coverage.ClipmapIndex) * sqrt(3.0f);
		Coverage.MinTraceDistanceBeforeInterpolation = GetRadianceProbeTMin(Coverage.ClipmapIndex) + CellOcclusionDistance;
	}

	return Coverage;
}

float3 SampleRadianceCacheProbe(uint ProbeIndex, float3 WorldSpaceDirection, float MipLevel)
{
	float2 ProbeUV = InverseEquiAreaSphericalMapping(WorldSpaceDirection);








	uint2 ProbeAtlasCoord = FinalProbeResolution * uint2(ProbeIndex & ProbeAtlasResolutionModuloMask, ProbeIndex >> ProbeAtlasResolutionDivideShift);
	float2 ProbeTexelCoord = ProbeUV * RadianceProbeResolution + (1u << FinalRadianceAtlasMaxMip);
	float2 ProbeAtlasUV = (ProbeAtlasCoord + ProbeTexelCoord) * InvProbeFinalRadianceAtlasResolution;

	float3 UnmappedDebugColor = 0.0f;
	
	
	return ProbeIndex == 0xFFFFFFFF ? UnmappedDebugColor : RadianceCacheFinalRadianceAtlas.SampleLevel( D3DStaticBilinearClampedSampler, ProbeAtlasUV, MipLevel);

}

uint GetProbeIndexFromIndirectionTexture(uint3 ProbeCoord, uint ClipmapIndex)
{
	uint3 ProbeIndirectionTextureCoord = uint3(ProbeCoord.x + ClipmapIndex * RadianceProbeClipmapResolution, ProbeCoord.yz);
	return RadianceProbeIndirectionTexture.Load(uint4(ProbeIndirectionTextureCoord, 0));
}

float3 SampleRadianceCacheProbeWithParallaxCorrection(uint3 ProbeCoord, uint ProbeClipmapIndex, float3 WorldSpacePosition, float3 WorldSpaceDirection, float MipLevel)
{
	float ProbeTMin = GetRadianceProbeTMin(ProbeClipmapIndex);
	uint ProbeIndex = GetProbeIndexFromIndirectionTexture(ProbeCoord, ProbeClipmapIndex);
	float3 ProbeWorldPosition = GetProbeWorldPosition(ProbeCoord, ProbeClipmapIndex, ProbeIndex);

	float3 ReprojectedDirection = WorldSpaceDirection;
	float CorrectionFactor = 1.0f;






	float ReprojectionRadius = ReprojectionRadiusScale * ProbeTMin;
	float T = RayIntersectSphere(WorldSpacePosition, WorldSpaceDirection, float4(ProbeWorldPosition, ReprojectionRadius)).y;
	float3 IntersectionPosition = WorldSpacePosition + WorldSpaceDirection * T;
	ReprojectedDirection = IntersectionPosition - ProbeWorldPosition;
	
	
	CorrectionFactor = T * T / (ReprojectionRadius * dot(ReprojectedDirection, WorldSpaceDirection));

	
	
#line 271 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


#line 298 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


	return SampleRadianceCacheProbe(ProbeIndex, ReprojectedDirection, MipLevel) * CorrectionFactor;
}

float3 SampleRadianceCacheInterpolated(FRadianceCacheCoverage Coverage, float3 WorldSpacePosition, float3 WorldSpaceDirection, float ConeHalfAngle)
{
	








	float3 ProbeCoordFloat = WorldSpacePosition * GetWorldPositionToRadianceProbeCoordScale(Coverage.ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(Coverage.ClipmapIndex);

	
	float NumTexels = sqrt(1.0f - cos(ConeHalfAngle)) * RadianceProbeResolution;
	float MipLevel = clamp(log2(NumTexels), 0, (float)FinalRadianceAtlasMaxMip);

	float3 CornerProbeCoordFloat = ProbeCoordFloat - 0.5f;
	int3 CornerProbeCoord = floor(CornerProbeCoordFloat);
	float3 LerpAlphas = frac(CornerProbeCoordFloat);

	float3 Lighting000 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 0, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting001 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 0, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting010 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 1, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting011 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(0, 1, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting100 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 0, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting101 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 0, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting110 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 1, 0), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);
	float3 Lighting111 = SampleRadianceCacheProbeWithParallaxCorrection(CornerProbeCoord + int3(1, 1, 1), Coverage.ClipmapIndex, WorldSpacePosition, WorldSpaceDirection, MipLevel);

	float3 ZLerp00 = lerp(Lighting000, Lighting001, LerpAlphas.z);
	float3 ZLerp01 = lerp(Lighting010, Lighting011, LerpAlphas.z);
	float3 ZLerp10 = lerp(Lighting100, Lighting101, LerpAlphas.z);
	float3 ZLerp11 = lerp(Lighting110, Lighting111, LerpAlphas.z);

	float3 YLerp0 = lerp(ZLerp00, ZLerp01, LerpAlphas.y);
	float3 YLerp1 = lerp(ZLerp10, ZLerp11, LerpAlphas.y);

	return lerp(YLerp0, YLerp1, LerpAlphas.x);
}

void SampleRadianceCacheAndApply(FRadianceCacheCoverage Coverage, float3 WorldSpacePosition, float3 WorldSpaceDirection, float ConeHalfAngle, inout float3 Lighting, inout float Transparency)
{
	float3 RadianceCacheLighting = SampleRadianceCacheInterpolated(Coverage, WorldSpacePosition, WorldSpaceDirection, ConeHalfAngle);

	if (OverrideCacheOcclusionLighting > 0)
	{
		Lighting = RadianceCacheLighting;
	}
	else if (ShowBlackRadianceCacheLighting == 0)
	{
		Lighting += RadianceCacheLighting * Transparency;
	}
	
	Transparency = 0.0f;
}

float3 SampleIrradianceCacheProbe(uint ProbeIndex, float3 WorldSpaceDirection)
{
	
	float2 ProbeUV = InverseEquiAreaSphericalMapping(WorldSpaceDirection);

	uint FinalIrradianceProbeResolution = IrradianceProbeResolution + 2 * (1u << FinalRadianceAtlasMaxMip);
	uint2 ProbeAtlasCoord = FinalIrradianceProbeResolution * uint2(ProbeIndex & ProbeAtlasResolutionModuloMask, ProbeIndex >> ProbeAtlasResolutionDivideShift);
	float2 ProbeTexelCoord = ProbeUV * IrradianceProbeResolution + (1u << FinalRadianceAtlasMaxMip);
	float2 ProbeAtlasUV = (ProbeAtlasCoord + ProbeTexelCoord) * InvProbeFinalIrradianceAtlasResolution;

	float3 UnmappedDebugColor = 0.0f;
	
	
	return ProbeIndex == 0xFFFFFFFF ? UnmappedDebugColor : RadianceCacheFinalIrradianceAtlas.SampleLevel( D3DStaticBilinearClampedSampler, ProbeAtlasUV, 0.0f);
}

float2 SampleProbeOcclusion(uint ProbeIndex, float3 WorldSpaceDirection)
{
	float2 ProbeUV = InverseEquiAreaSphericalMapping(WorldSpaceDirection);

	uint FinalOcclusionProbeResolution = OcclusionProbeResolution + 2 * (1u << FinalRadianceAtlasMaxMip);
	uint2 ProbeAtlasCoord = FinalOcclusionProbeResolution * uint2(ProbeIndex & ProbeAtlasResolutionModuloMask, ProbeIndex >> ProbeAtlasResolutionDivideShift);
	float2 ProbeTexelCoord = ProbeUV * OcclusionProbeResolution + (1u << FinalRadianceAtlasMaxMip);
	float2 ProbeAtlasUV = (ProbeAtlasCoord + ProbeTexelCoord) / float2(ProbeAtlasResolutionInProbes * FinalOcclusionProbeResolution);

	return RadianceCacheProbeOcclusionAtlas.SampleLevel( D3DStaticBilinearClampedSampler, ProbeAtlasUV, 0.0f);
}

float3 SampleIrradianceCacheProbeCoord(uint3 ProbeCoord, uint ProbeClipmapIndex, float3 WorldSpaceDirection)
{
	uint ProbeIndex = GetProbeIndexFromIndirectionTexture(ProbeCoord, ProbeClipmapIndex);
	return SampleIrradianceCacheProbe(ProbeIndex, WorldSpaceDirection);
}

float3 SampleIrradianceCacheInterpolated(float3 WorldSpacePosition, float3 WorldSpaceDirection, float3 BiasOffset, uint ClipmapIndex)
{
	float3 ProbeCoordFloat = WorldSpacePosition * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex);

	float3 CornerProbeCoordFloat = ProbeCoordFloat - .5f;
	int3 CornerProbeCoord = floor(CornerProbeCoordFloat);
	float3 LerpAlphas = frac(CornerProbeCoordFloat);

	float3 Irradiance = 0;
	float TotalWeight = 0;




	for (uint NeighborIndex = 0; NeighborIndex < 8; NeighborIndex++)
	{
		uint3 ProbeOffset = uint3((NeighborIndex & 4) >> 2, (NeighborIndex & 2) >> 1, NeighborIndex & 1);
		uint3 ProbeCoord = CornerProbeCoord + ProbeOffset;
		uint ProbeIndex = GetProbeIndexFromIndirectionTexture(ProbeCoord, ClipmapIndex);
		float3 ProbeWorldPosition = GetProbeWorldPosition(ProbeCoord, ClipmapIndex, ProbeIndex);
		float3 SamplePosition = WorldSpacePosition + BiasOffset;
		float3 SamplePositionToProbe = ProbeWorldPosition - SamplePosition;
		float DistanceToProbe = length(SamplePositionToProbe);

		float SoftFalloff = (dot(normalize(ProbeWorldPosition - WorldSpacePosition), WorldSpaceDirection) + 1) * .5f;
		float Weight = SoftFalloff * SoftFalloff + .2f;

		
		float3 TrilinearWeights = max( select_internal( ProbeOffset > 0 , LerpAlphas , 1 - LerpAlphas ), .001f);
		Weight *= TrilinearWeights.x * TrilinearWeights.y * TrilinearWeights.z;

		float2 MeanAndMeanSq = SampleProbeOcclusion(ProbeIndex, -SamplePositionToProbe);

		if (DistanceToProbe > MeanAndMeanSq.x)
		{
			float Variance = abs(Square(MeanAndMeanSq.x) - MeanAndMeanSq.y);
			float VisibilityWeight = Variance / (Variance + Square(DistanceToProbe - MeanAndMeanSq.x));
			Weight *= max(VisibilityWeight * VisibilityWeight * VisibilityWeight, 0);
		}

		float WeightThreshold = .2f;

		if (Weight < WeightThreshold)
		{
			Weight *= Square(Weight) / Square(WeightThreshold);
		}

		float3 SampleIrradiance = SampleIrradianceCacheProbe(ProbeIndex, WorldSpaceDirection);

		Irradiance += sqrt(SampleIrradiance) * Weight;
		TotalWeight += Weight;
	}

	Irradiance = Square(Irradiance / TotalWeight);

#line 468 "/Engine/Private/Lumen/LumenRadianceCacheInterpolation.ush"


	return Irradiance;
}
#line   9 "/Engine/Private/Lumen/LumenRadianceCacheCommon.ush"


FRadianceCacheCoverage GetRadianceCacheCoverageWithUncertainCoverage(float3 RayOrigin, float3 RayDirection, float ClipmapDitherRandom)
{
	FRadianceCacheCoverage Coverage;
	Coverage.bValid = false;
	Coverage.MinTraceDistanceBeforeInterpolation = 10000000.0f;

	uint ClipmapIndex = GetRadianceProbeClipmap(RayOrigin, ClipmapDitherRandom);

	if (ClipmapIndex < NumRadianceProbeClipmaps)
	{
		float3 ProbeCoordFloat = RayOrigin * GetWorldPositionToRadianceProbeCoordScale(ClipmapIndex) + GetWorldPositionToRadianceProbeCoordBias(ClipmapIndex);
		float3 CornerProbeCoordFloat = ProbeCoordFloat - .5f;
		int3 CornerProbeCoord = floor(CornerProbeCoordFloat);
		Coverage.bValid = true;

		[unroll]
		for (int Z = 0; Z < 2; Z++)
		{
			[unroll]
			for (int Y = 0; Y < 2; Y++)
			{
				[unroll]
				for (int X = 0; X < 2; X++)
				{
					int3 ProbeCoord = CornerProbeCoord + int3(X, Y, Z);
					uint ProbeIndex = GetProbeIndexFromIndirectionTexture(ProbeCoord, ClipmapIndex);

					if (ProbeIndex == 0xFFFFFFFF)
					{
						Coverage.bValid = false;
					}
				}
			}
		}
		
		float CellOcclusionDistance = GetRadianceProbeCoordToWorldPositionScale(ClipmapIndex) * sqrt(3.0f);
		Coverage.MinTraceDistanceBeforeInterpolation = GetRadianceProbeTMin(ClipmapIndex) + CellOcclusionDistance;
	}

	return Coverage;
}
#line  13 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   7 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"





	RWTexture3D<uint> RWRadianceProbeIndirectionTexture;


	
















	float4 PackedWorldPositionToRadianceProbeCoord[6];
	float4 PackedRadianceProbeCoordToWorldPosition[6];

	
	
	
	

	uint NumRadianceProbeClipmapsForMark;
	uint RadianceProbeClipmapResolutionForMark;
	float InvClipmapFadeSizeForMark;



struct FRadianceProbeCoord
{
	uint3 ProbeMinCoord;
	uint3 ProbeMaxCoord;
	uint  ClipmapIndex;
};

bool IsValidRadianceCacheClipmapForMark(uint InClipmapIndex)
{
	return InClipmapIndex < NumRadianceProbeClipmapsForMark;
}

FRadianceProbeCoord GetRadianceProbeCoord(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	FRadianceProbeCoord Out = (FRadianceProbeCoord)0;
	Out.ClipmapIndex = NumRadianceProbeClipmapsForMark;

	uint ClipmapIndex = 0;
	for (; ClipmapIndex < NumRadianceProbeClipmapsForMark; ++ClipmapIndex)
	{
		float3 ProbeCoordFloat = WorldSpacePosition *  PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].w +  PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].xyz;
		float3 BottomEdgeFades = saturate((ProbeCoordFloat - .5f) * InvClipmapFadeSizeForMark);
		float3 TopEdgeFades = saturate(((float3)RadianceProbeClipmapResolutionForMark - .5f - ProbeCoordFloat) * InvClipmapFadeSizeForMark);
		float EdgeFade = min(min3(BottomEdgeFades.x, BottomEdgeFades.y, BottomEdgeFades.z), min3(TopEdgeFades.x, TopEdgeFades.y, TopEdgeFades.z));

		int3 ProbeMinCoord;
		int3 ProbeMaxCoord;

		ProbeMinCoord = floor(ProbeCoordFloat - 0.5f);
		ProbeMaxCoord = ProbeMinCoord + 1;

		if (EdgeFade > ClipmapDitherRandom)
		{
			Out.ProbeMinCoord = ProbeMinCoord;
			Out.ProbeMaxCoord = ProbeMaxCoord;
			Out.ClipmapIndex  = ClipmapIndex;
			return Out;
		}
	}

	return Out;
}

uint GetRadianceProbeClipmapForMark(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	FRadianceProbeCoord Cell = GetRadianceProbeCoord(WorldSpacePosition, ClipmapDitherRandom);
	return Cell.ClipmapIndex;
}

uint GetRadianceProbeClipmapForMark(float3 WorldSpacePosition)
{
	return GetRadianceProbeClipmapForMark(WorldSpacePosition, .01f);
}

void MarkProbeIndirectionTextureCoord(int3 ProbeCoord, uint ClipmapIndex)
{
	if (all(ProbeCoord >= 0) && all(ProbeCoord < (int3)RadianceProbeClipmapResolutionForMark) && ClipmapIndex < NumRadianceProbeClipmapsForMark)
	{
		int3 IndirectionTextureCoord = ProbeCoord + int3(ClipmapIndex * RadianceProbeClipmapResolutionForMark, 0, 0);
		RWRadianceProbeIndirectionTexture[IndirectionTextureCoord] = 0xFFFFFFFE;
	}
}

void MarkPositionUsedInIndirectionTexture(float3 WorldPosition, uint ClipmapIndex)
{
	float3 ProbeCoordFloat = WorldPosition *  PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].w +  PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].xyz;
	int3 BottomCornerProbeCoord = floor(ProbeCoordFloat - 0.5f);

	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 1, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 1, 1), ClipmapIndex);
}
#line  14 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   7 "/Engine/Private/Lumen/LumenTranslucencyVolumeLightingShared.ush"


                                                   
                             
                                 
                                      

               
                          
                                             

float ComputeDepthFromZSlice(float ZSlice)
{
	float SliceDepth = (exp2(ZSlice / TranslucencyGIGridZParams.z) - TranslucencyGIGridZParams.y) / TranslucencyGIGridZParams.x;
	return SliceDepth;
}

float3 ComputeCellTranslatedWorldPosition(uint3 GridCoordinate, float3 CellOffset, out float SceneDepth)
{
	float2 VolumeUV = (GridCoordinate.xy + CellOffset.xy) / TranslucencyGIGridSize.xy;
	float2 VolumeNDC = (VolumeUV * 2 - 1) * float2(1, -1);

	SceneDepth = ComputeDepthFromZSlice(GridCoordinate.z + CellOffset.z);

	float TileDeviceZ = ConvertToDeviceZ(SceneDepth);
	float4 CenterPosition = mul(float4(VolumeNDC, TileDeviceZ, 1), UnjitteredClipToTranslatedWorld);
	return CenterPosition.xyz / CenterPosition.w;
}

float3 ComputeCellTranslatedWorldPosition(uint3 GridCoordinate, float3 CellOffset)
{
	float Unused;
	return ComputeCellTranslatedWorldPosition(GridCoordinate, CellOffset, Unused);
}

float3 ComputeCellWorldPosition(uint3 GridCoordinate, float3 CellOffset)
{
	return ComputeCellTranslatedWorldPosition(GridCoordinate, CellOffset) -  LWCToFloat( GetPrimaryView().PreViewTranslation );
}

float3 ComputeTranslucencyGIVolumeUV(float3 WorldPosition, float4x4 WorldToClip)
{
	float4 NDCPosition = mul(float4(WorldPosition, 1), WorldToClip);
	NDCPosition.xy /= NDCPosition.w;
	float NormalizedZSlice = log2(NDCPosition.w * TranslucencyGIGridZParams.x + TranslucencyGIGridZParams.y) * TranslucencyGIGridZParams.z / (float)TranslucencyGIGridSize.z;
	return float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, NormalizedZSlice);
}

void GetProbeTracingUV(
	float2 TracingTexelCoord,
	float2 ProbeTexelCenter,
	out float2 ProbeUV,
	out float ConeHalfAngle)
{
	ProbeUV = (TracingTexelCoord + ProbeTexelCenter) / float(TranslucencyVolumeTracingOctahedronResolution);
	
	ConeHalfAngle = acosFast(1.0f - 1.0f / (float)(TranslucencyVolumeTracingOctahedronResolution * TranslucencyVolumeTracingOctahedronResolution));
}

float2 GetProbeTexelCenter(uint3 GridCoordinate)
{
	return Rand4DPCG32(int4(GridCoordinate.xyz, UseJitter ? View.StateFrameIndex : 0)).xy / (float)0xffffffff;
}

Texture2D FurthestHZBTexture;
                  
                               

float GetMaxVisibleDepth(uint2 GridCoordinate)
{
	float2 HZBScreenUV = (GridCoordinate.xy + .5f) * (1U << TranslucencyGIGridPixelSizeShift) * View.ViewSizeAndInvSize.zw * ViewportUVToHZBBufferUV;
	float TrilinearFootprintMipBias = 1.0f;
	return ConvertFromDeviceZ(FurthestHZBTexture.SampleLevel( D3DStaticPointClampedSampler, HZBScreenUV, HZBMipLevel + TrilinearFootprintMipBias).x);
}

bool IsFroxelVisible(uint3 GridCoordinate)
{


	float MaxVisibleDepth = GetMaxVisibleDepth(GridCoordinate.xy);
	float TrilinearFootprintBias = -1.0f;
	float FroxelMinSceneDepth = ComputeDepthFromZSlice(max((float)GridCoordinate.z + TrilinearFootprintBias, 0.0f));
	return FroxelMinSceneDepth < MaxVisibleDepth;



}

                       
float MaxMeshSDFTraceDistance;
                 
                                   
                      
#line  15 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"

#line   3 "/Engine/Private/Lumen/LumenScreenProbeCommon.ush"



#line   3 "/Engine/Private/BlueNoise.ush"








float BlueNoiseScalar(uint2 ScreenCoord, uint FrameIndex)
{
	uint3 WrappedCoordinate = uint3(ScreenCoord, FrameIndex) & BlueNoise.ModuloMasks;
	uint3 TextureCoordinate = uint3(WrappedCoordinate.x, WrappedCoordinate.z * BlueNoise.Dimensions.y + WrappedCoordinate.y, 0);
	return BlueNoise.ScalarTexture.Load(TextureCoordinate, 0).x;
}






float2 BlueNoiseVec2(uint2 ScreenCoord, uint FrameIndex)
{
	uint3 WrappedCoordinate = uint3(ScreenCoord, FrameIndex) & BlueNoise.ModuloMasks;
	uint3 TextureCoordinate = uint3(WrappedCoordinate.x, WrappedCoordinate.z * BlueNoise.Dimensions.y + WrappedCoordinate.y, 0);
	return BlueNoise.Vec2Texture.Load(TextureCoordinate, 0).xy;
}
#line   6 "/Engine/Private/Lumen/LumenScreenProbeCommon.ush"

#line   3 "/Engine/Private/SceneTextureParameters.ush"


#line   7 "/Engine/Private/SceneTexturesCommon.ush"


























float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.SceneColorTexture, SceneTexturesStruct.PointClampSampler, ScreenUV, 0).rgb;

}

float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct.SceneColorTexture, SceneTexturesStruct.PointClampSampler,ScreenUV);

}


float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture, SceneTexturesStruct.PointClampSampler, ScreenUV, 0).r);

}


float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{



	
	return Texture2DSampleLevel(SceneTexturesStruct.SceneDepthTexture, SceneTexturesStruct.PointClampSampler, ScreenUV, 0).r;

}


float LookupDeviceZ(uint2 PixelPos)
{



	return SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelPos, 0)).r;

	
	return ConvertFromDeviceZ(DeviceZ);

}


float4 GatherSceneDepth(float2 UV, float2 InvBufferSize)
{



	return GatherDepth(SceneTexturesStruct.SceneDepthTexture, UV);

}


float CalcSceneCustomDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct.CustomDepthTexture, SceneTexturesStruct.PointClampSampler, ScreenUV, 0).r);

}

uint CalcSceneCustomStencil(uint2 PixelPos)
{



	return SceneTexturesStruct.CustomStencilTexture.Load(uint3(PixelPos, 0)) .g;

}

float CalcSceneAO(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct.ScreenSpaceAOTexture, SceneTexturesStruct.PointClampSampler, ScreenUV, 0).r;

}




#line 223 "/Engine/Private/SceneTexturesCommon.ush"

#line   5 "/Engine/Private/SceneTextureParameters.ush"

#line   7 "/Engine/Private/DeferredShadingCommon.ush"


#line   3 "/Engine/Private/ShadingCommon.ush"












































float3 GetShadingModelColor(uint ShadingModelID)
{
	
	
#line  66 "/Engine/Private/ShadingCommon.ush"

	switch(ShadingModelID)
	{
		case 0: return float3(0.1f, 0.1f, 0.2f); 
		case 1: return float3(0.1f, 1.0f, 0.1f); 
		case 2: return float3(1.0f, 0.1f, 0.1f); 
		case 3: return float3(0.6f, 0.4f, 0.1f); 
		case 4: return float3(0.1f, 0.4f, 0.4f); 
		case 5: return float3(0.2f, 0.6f, 0.5f); 
		case 6: return float3(0.2f, 0.2f, 0.8f); 
		case 7: return float3(0.6f, 0.1f, 0.5f);
		case 8: return float3(0.7f, 1.0f, 1.0f);
		case 9: return float3(0.3f, 1.0f, 1.0f);
		case 10: return float3(0.5f, 0.5f, 1.0f);
		case 11: return float3(1.0f, 0.8f, 0.3f);
		case 12: return float3(1.0f, 1.0f, 0.0f);
		default: return float3(1.0f, 1.0f, 1.0f); 
	}

}




bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}




float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

float F0RGBToF0(float3 F0)
{
	return dot(0.3333333.xxx, F0);
}

float F0RGBToDielectricSpecular(float3 F0)
{
	return F0ToDielectricSpecular(F0RGBToF0(F0));
}

float DielectricSpecularToF0(float Specular)
{
	return 0.08f * Specular;
}


float DielectricF0ToIor(float F0)
{
	return 2.0f / (1.0f - sqrt(min(F0,0.99))) - 1.0f;
}

float DielectricF0RGBToIor(float3 F0)
{
	return DielectricF0ToIor(F0RGBToF0(F0));
}

float DielectricIorToF0(float Ior)
{
	const float F0Sqrt = (Ior-1)/(Ior+1);
	const float F0 = F0Sqrt*F0Sqrt;
	return F0;
}


float  GetF0MicroOcclusionThreshold() { return 0.02f; }
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(max(F0.r, max(F0.g, F0.b)));
}

float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

float3 ComputeF90(float3 F0, float3 EdgeColor, float Metallic)
{
	return lerp(1.0, EdgeColor, Metallic.xxx);
}

float3 ComputeDiffuseAlbedo(float3 BaseColor, float Metallic)
{
	return BaseColor - BaseColor * Metallic;
}

float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

float F0ToMetallic(float F0)
{
	
	const float DiamondF0 = 0.24f;
	const float CondutorMinF0 = 0.4f;	
	

	return saturate((F0 - DiamondF0) / (CondutorMinF0 - DiamondF0));
}

float F0RGBToMetallic(float3 F0)
{
	return F0ToMetallic(max(F0.r, max(F0.g, F0.b)));
}





struct FVerticalLayeringInfo
{
	float TransmittanceTopAndBottom;	
	float TransmittanceOnlyBottom;		
	float TransmittanceOnlyTop;			

	float SurfaceBottom;				
	float SurfaceTop;					

	float Coverage;						
	float NoSurface;					
};



FVerticalLayeringInfo GetVerticalLayeringInfo(const float TopCoverage, const float BottomCoverage)
{
	FVerticalLayeringInfo Info;

	Info.TransmittanceTopAndBottom	= TopCoverage * BottomCoverage;
	Info.TransmittanceOnlyBottom	= (1.0f - TopCoverage) * BottomCoverage;
	Info.TransmittanceOnlyTop		= (1.0f - BottomCoverage) * TopCoverage;

	Info.SurfaceBottom				= Info.TransmittanceOnlyBottom;
	Info.SurfaceTop					= TopCoverage;								

	Info.Coverage					= Info.SurfaceTop + Info.SurfaceBottom;		
	Info.NoSurface					= 1.0f - Info.Coverage;

	return Info;
}


#line   9 "/Engine/Private/DeferredShadingCommon.ush"

#line   7 "/Engine/Private/LightAccumulator.ush"







	

 







struct FLightAccumulator
{
	float3 TotalLight;

	
	
	
	float ScatterableLightLuma;

	
	
	
	float3 ScatterableLight;

	
	
	float EstimatedCost;

	
	
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
};


void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;

	
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View.bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}




float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;

	if (0 == 1)
	{
		
		Ret = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		Ret = float4(In.TotalLight, 0);

		if (1 == 1 )
		{
			if (View.bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			Ret.a = Luminance(In.ScatterableLight);
			
		}
	}

	return Ret;
}


FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;

	if (0 == 1)
	{
		
		RetDiffuse = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
		RetSpecular = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);

		if (1 == 1 )
		{
			if (View.bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			RetDiffuse.a = Luminance(In.ScatterableLight);
			
		}
	}

	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;

	return Ret;
}

struct FStrataDeferredLighting
{
	float4 SceneColor;						




};

FStrataDeferredLighting GetInitialisedStrataDeferredLighting()
{
	FStrataDeferredLighting Result = (FStrataDeferredLighting)0;
	return Result;
}

void AccumulateStrataDeferredLighting(inout FStrataDeferredLighting StrataLighting, FLightAccumulator In, bool bDiffuseIsSubsurface, bool bIsToplayer)
{
	FDeferredLightingSplit DiffSpec = LightAccumulator_GetResultSplit(In);

#line 196 "/Engine/Private/LightAccumulator.ush"

	StrataLighting.SceneColor += DiffSpec.DiffuseLighting + DiffSpec.SpecularLighting;

}
#line  10 "/Engine/Private/DeferredShadingCommon.ush"
















uint bSceneLightingChannelsValid;


Texture2D SceneDepthTexture;
Texture2D<uint2> SceneStencilTexture;
Texture2D GBufferATexture;
Texture2D GBufferBTexture;
Texture2D GBufferCTexture;
Texture2D GBufferDTexture;
Texture2D GBufferETexture;
Texture2D GBufferVelocityTexture;
Texture2D GBufferFTexture;
Texture2D<uint> SceneLightingChannels;










float SampleDeviceZFromSceneTextures(float2 UV)
{
	return SceneDepthTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).r;
}






	


float3 RGBToYCoCg( float3 RGB )
{
	float Y  = dot( RGB, float3(  1, 2,  1 ) ) * 0.25;
	float Co = dot( RGB, float3(  2, 0, -2 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );
	float Cg = dot( RGB, float3( -1, 2, -1 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );
	
	float3 YCoCg = float3( Y, Co, Cg );
	return YCoCg;
}

float3 YCoCgToRGB( float3 YCoCg )
{
	float Y  = YCoCg.x;
	float Co = YCoCg.y - ( 0.5 * 256.0 / 255.0 );
	float Cg = YCoCg.z - ( 0.5 * 256.0 / 255.0 );

	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;

	float3 RGB = float3( R, G, B );
	return RGB;
}

float3 Pack1212To888( float2 x )
{
	







	float2 x1212 = floor( x * 4095 );
	float2 High = floor( x1212 / 256 );	
	float2 Low = x1212 - High * 256;	
	float3 x888 = float3( Low, High.x + High.y * 16 );
	return saturate( x888 / 255 );

}

float2 Pack888To1212( float3 x )
{
	







	float3 x888 = floor( x * 255 );
	float High = floor( x888.z / 16 );	
	float Low = x888.z - High * 16;		
	float2 x1212 = x888.xy + float2( Low, High ) * 256;
	return saturate( x1212 / 4095 );

}

float3 EncodeNormal( float3 N )
{
	return N * 0.5 + 0.5;
	
}

float3 DecodeNormal( float3 N )
{
	return N * 2 - 1;
	
}

void EncodeNormal( inout float3 N, out uint Face )
{

	uint Axis = 2;
	if( abs(N.x) >= abs(N.y) && abs(N.x) >= abs(N.z) )
	{
		Axis = 0;
	}
	else if( abs(N.y) > abs(N.z) )
	{
		Axis = 1;
	}
	Face = Axis * 2;






	N = Axis == 0 ? N.yzx : N;
	N = Axis == 1 ? N.xzy : N;
	
	float MaxAbs = 1.0 / sqrt(2.0);

	Face += N.z > 0 ? 0 : 1;
	N.xy *= N.z > 0 ? 1 : -1;
	N.xy = N.xy * (0.5 / MaxAbs) + 0.5;
}

void DecodeNormal( inout float3 N, in uint Face )
{
	uint Axis = Face >> 1;
	
	float MaxAbs = 1.0 / sqrt(2.0);

	N.xy = N.xy * (2 * MaxAbs) - (1 * MaxAbs);
	N.z = sqrt( 1 - dot( N.xy, N.xy ) );

	N = Axis == 0 ? N.zxy : N;
	N = Axis == 1 ? N.xzy : N;
	N *= (Face & 1) ? -1 : 1;
}

float3 EncodeBaseColor(float3 BaseColor)
{
	
	return BaseColor;
}

float3 DecodeBaseColor(float3 BaseColor)
{
	
	return BaseColor;
}

float3 EncodeSubsurfaceColor(float3 SubsurfaceColor)
{
	return sqrt(saturate(SubsurfaceColor));
}


float3 EncodeSubsurfaceProfile(float SubsurfaceProfile)
{
	return float3(SubsurfaceProfile, 0, 0);
}


float SubsurfaceDensityFromOpacity(float Opacity)
{
	return (-0.05f * log(1.0f - min(Opacity, 0.99f)));
}

float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View.PreExposure; 
	const float LogBlackPoint = 0.00390625;	
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}

float DecodeIndirectIrradiance(float IndirectIrradiance)
{
	
	float LogL = IndirectIrradiance;
	const float LogBlackPoint = 0.00390625;	
	return View.OneOverPreExposure * (exp2( LogL * 16 - 8 ) - LogBlackPoint);	
}

float4 EncodeWorldTangentAndAnisotropy(float3 WorldTangent, float Anisotropy)
{
	return float4(
		EncodeNormal(WorldTangent),
		Anisotropy * 0.5f + 0.5f
		);
}

float ComputeAngleFromRoughness( float Roughness, const float Threshold = 0.04f )
{

	float Angle = 3 * Square( Roughness );





	return Angle;
}

float ComputeRoughnessFromAngle( float Angle, const float Threshold = 0.04f )
{

	float Roughness = sqrt( 0.33333 * Angle );





	return Roughness;
}

float AddAngleToRoughness( float Angle, float Roughness )
{
	return saturate( sqrt( Square( Roughness ) + 0.33333 * Angle ) );
}




float Encode71(float Scalar, uint Mask)
{
	return
		127.0f / 255.0f * saturate(Scalar) +
		128.0f / 255.0f * Mask;
}





float Decode71(float Scalar, out uint Mask)
{
	Mask = (uint)(Scalar > 0.5f);

	return (Scalar - 0.5f * Mask) * 2.0f;
}

float EncodeShadingModelIdAndSelectiveOutputMask(uint ShadingModelId, uint SelectiveOutputMask)
{
	uint Value = (ShadingModelId & 0xF) | SelectiveOutputMask;
	return (float)Value / (float)0xFF;
}

uint DecodeShadingModelId(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & 0xF;
}

uint DecodeSelectiveOutputMask(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & ~0xF;
}

bool IsSubsurfaceModel(int ShadingModel)
{
	return ShadingModel == 2 
		|| ShadingModel == 3 
		|| ShadingModel == 5
		|| ShadingModel == 6
		|| ShadingModel == 7
		|| ShadingModel == 9;
}

bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}

bool HasCustomGBufferData(int ShadingModelID)
{
	return ShadingModelID == 2
		|| ShadingModelID == 3
		|| ShadingModelID == 4
		|| ShadingModelID == 5
		|| ShadingModelID == 6
		|| ShadingModelID == 7
		|| ShadingModelID == 8
		|| ShadingModelID == 9;
}

bool HasAnisotropy(int SelectiveOutputMask)
{
	return (SelectiveOutputMask & (1 << 4)) != 0;
}


struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;
	
	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}




bool CheckerFromPixelPos(uint2 PixelPos)
{
	
	
	uint TemporalAASampleIndex = uint(View.TemporalAAParams.x);


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;



}




bool CheckerFromSceneColorUV(float2 UVSceneColor)
{
	
	uint2 PixelPos = uint2(UVSceneColor * View.BufferSizeAndInvSize.xy);

	return CheckerFromPixelPos(PixelPos);
}


#line   3 "/Engine/Private/GBufferHelpers.ush"







float SquareInline(float X)
{
	return X * X;
}

float3 EncodeNormalHelper(float3 SrcNormal, float QuantizationBias)
{
	return SrcNormal * .5f + .5f;
}

float3 DecodeNormalHelper(float3 SrcNormal)
{
	return SrcNormal * 2.0f - 1.0f;
}


uint EncodeQuantize6(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6(uint Value)
{
	return float(Value) / 63.0f;
}

uint EncodeQuantize6Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6Sqrt(uint Value)
{
	return SquareInline(float(Value) / 63.0f);
}

uint EncodeQuantize5(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5(uint Value)
{
	return float(Value) / 31.0f;
}

uint EncodeQuantize5Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5Sqrt(uint Value)
{
	return SquareInline(float(Value) / 31.0f);
}

uint EncodeQuantize4(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4(uint Value)
{
	return float(Value) / 15.0f;
}

uint EncodeQuantize4Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4Sqrt(uint Value)
{
	return SquareInline(float(Value) / 15.0f);
}


uint EncodeQuantize3(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3(uint Value)
{
	return float(Value) / 7.0f;
}

uint EncodeQuantize3Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3Sqrt(uint Value)
{
	return SquareInline(float(Value) / 7.0f);
}

uint EncodeQuantize2(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2(uint Value)
{
	return float(Value) / 3.0f;
}

uint EncodeQuantize2Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2Sqrt(uint Value)
{
	return SquareInline(float(Value) / 3.0f);
}

uint EncodeQuantize1(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1(uint Value)
{
	return float(Value) / 1.0f;
}

uint EncodeQuantize1Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1Sqrt(uint Value)
{
	return SquareInline(float(Value) / 1.0f);
}


uint3 EncodeQuantize565(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5(Value.x);
	Ret.y = DecodeQuantize6(Value.y);
	Ret.z = DecodeQuantize5(Value.z);
	return Ret;
}

uint3 EncodeQuantize565Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5Sqrt(Value.x);
	Ret.y = DecodeQuantize6Sqrt(Value.y);
	Ret.z = DecodeQuantize5Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize444(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4(Value.x);
	Ret.y = DecodeQuantize4(Value.y);
	Ret.z = DecodeQuantize4(Value.z);
	return Ret;
}

uint3 EncodeQuantize444Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4Sqrt(Value.x);
	Ret.y = DecodeQuantize4Sqrt(Value.y);
	Ret.z = DecodeQuantize4Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize332(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3(Value.x);
	Ret.y = DecodeQuantize3(Value.y);
	Ret.z = DecodeQuantize2(Value.z);
	return Ret;
}

uint3 EncodeQuantize332Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3Sqrt(Value.x);
	Ret.y = DecodeQuantize3Sqrt(Value.y);
	Ret.z = DecodeQuantize2Sqrt(Value.z);
	return Ret;
}


void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}








void GBufferPreEncode(inout FGBufferData GBuffer, bool bChecker, float GeometricAARoughness, inout float3 OriginalBaseColor, inout float OriginalSpecular, inout float OriginalMetallic, float QuantizationBias)
{











#line 312 "/Engine/Private/GBufferHelpers.ush"


	GBuffer.DiffuseColor = OriginalBaseColor - OriginalBaseColor * OriginalMetallic;


	{
		
		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
	}


    
	if (View.RenderingReflectionCaptureMask) 
	
	{
		EnvBRDFApproxFullyRoughHelper(GBuffer.DiffuseColor, GBuffer.SpecularColor);
		
	}






		
		GBuffer.GenericAO = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);






}



void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View.bSubsurfacePostprocessEnabled > 0 && View.bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View.bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		

		
		BaseColor = bChecker;
		
		SpecularColor *= !bChecker;
		Specular *= !bChecker;
	}
}


	


void GBufferPostDecode(inout FGBufferData Ret, bool bChecker, bool bGetNormalizedNormal)
{
	Ret.CustomData = HasCustomGBufferData(Ret.ShadingModelID) ? Ret.CustomData : 0.0f;

	Ret.PrecomputedShadowFactors = !(Ret.SelectiveOutputMask & 0x2) ? Ret.PrecomputedShadowFactors : ((Ret.SelectiveOutputMask & 0x4) ? 0.0f : 1.0f);
	Ret.Velocity = !(Ret.SelectiveOutputMask & 0x8) ? Ret.Velocity : 0.0f;
	bool bHasAnisotropy = (Ret.SelectiveOutputMask & 0x1);

	Ret.StoredBaseColor = Ret.BaseColor;
	Ret.StoredMetallic = Ret.Metallic;
	Ret.StoredSpecular = Ret.Specular;






	Ret.GBufferAO = 1;
	Ret.DiffuseIndirectSampleOcclusion = 0x0;
	Ret.IndirectIrradiance = DecodeIndirectIrradiance(Ret.GenericAO.x);






	if(bGetNormalizedNormal)
	{
		Ret.WorldNormal = normalize(Ret.WorldNormal);
	}

	[flatten]
	if( Ret.ShadingModelID == 9 )
	{
		Ret.Metallic = 0.0;
	


	}
	
	
	{
		Ret.SpecularColor = ComputeF0(Ret.Specular, Ret.BaseColor, Ret.Metallic);
	
		if (UseSubsurfaceProfile(Ret.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(Ret.BaseColor, Ret.SpecularColor, Ret.Specular, bChecker);
		}
	
		Ret.DiffuseColor = Ret.BaseColor - Ret.BaseColor * Ret.Metallic;
	
		
		{
			
			Ret.DiffuseColor = Ret.DiffuseColor * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
			Ret.SpecularColor = Ret.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
		}
		
	}
	
	if (bHasAnisotropy)
	{
		Ret.WorldTangent = DecodeNormal(Ret.WorldTangent);
		Ret.Anisotropy = Ret.Anisotropy * 2.0f - 1.0f;
	
		if(bGetNormalizedNormal)
		{
			Ret.WorldTangent = normalize(Ret.WorldTangent);
		}
	}
	else
	{
		Ret.WorldTangent = 0;
		Ret.Anisotropy = 0;
	}

	
	
	Ret.SelectiveOutputMask = Ret.SelectiveOutputMask << 4;
}
#line 432 "/Engine/Private/DeferredShadingCommon.ush"


#line   3 "/ShaderAutogen/PCD3D_SM6/AutogenShaderHeaders.ush"



float SampleDeviceZFromSceneTexturesTempCopy(float2 UV)
{
	return SceneDepthTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).r;
}








void EncodeGBufferToMRT(inout FPixelShaderOut Out, FGBufferData GBuffer, float QuantizationBias)
{
	float4 MrtFloat1 = 0.0f;
	float4 MrtFloat2 = 0.0f;
	uint4 MrtUint2 = 0;
	float4 MrtFloat3 = 0.0f;
	float4 MrtFloat4 = 0.0f;
	float4 MrtFloat5 = 0.0f;
	float4 MrtFloat6 = 0.0f;

	float3 WorldNormal_Compressed = EncodeNormalHelper(GBuffer.WorldNormal, 0.0f);

	MrtFloat1.x = WorldNormal_Compressed.x;
	MrtFloat1.y = WorldNormal_Compressed.y;
	MrtFloat1.z = WorldNormal_Compressed.z;
	MrtFloat1.w = GBuffer.PerObjectGBufferData.x;
	MrtFloat2.x = GBuffer.Metallic.x;
	MrtFloat2.y = GBuffer.Specular.x;
	MrtFloat2.z = GBuffer.Roughness.x;
	MrtUint2.w |= ((((GBuffer.ShadingModelID.x) >> 0) & 0x0f) << 0);
	MrtUint2.w |= ((((GBuffer.SelectiveOutputMask.x) >> 0) & 0x0f) << 4);
	MrtFloat3.x = GBuffer.BaseColor.x;
	MrtFloat3.y = GBuffer.BaseColor.y;
	MrtFloat3.z = GBuffer.BaseColor.z;
	MrtFloat3.w = GBuffer.GenericAO.x;
	MrtFloat4.x = GBuffer.Velocity.x;
	MrtFloat4.y = GBuffer.Velocity.y;
	MrtFloat4.z = GBuffer.Velocity.z;
	MrtFloat4.w = GBuffer.Velocity.w;
	MrtFloat6.x = GBuffer.PrecomputedShadowFactors.x;
	MrtFloat6.y = GBuffer.PrecomputedShadowFactors.y;
	MrtFloat6.z = GBuffer.PrecomputedShadowFactors.z;
	MrtFloat6.w = GBuffer.PrecomputedShadowFactors.w;
	MrtFloat5.x = GBuffer.CustomData.x;
	MrtFloat5.y = GBuffer.CustomData.y;
	MrtFloat5.z = GBuffer.CustomData.z;
	MrtFloat5.w = GBuffer.CustomData.w;

	Out.MRT[1] = MrtFloat1;
	Out.MRT[2] = float4(MrtFloat2.x, MrtFloat2.y, MrtFloat2.z, float(MrtUint2.w) / 255.0f);
	Out.MRT[3] = MrtFloat3;
	Out.MRT[4] = MrtFloat4;
	Out.MRT[5] = MrtFloat5;
	Out.MRT[6] = MrtFloat6;
	Out.MRT[7] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}


FGBufferData  DecodeGBufferDataDirect(float4 InMRT1,
	float4 InMRT2,
	float4 InMRT3,
	float4 InMRT4,
	float4 InMRT5,
	float4 InMRT6,
		 
	float CustomNativeDepth,
	float4 AnisotropicData,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData Ret = (FGBufferData)0;
	float3 WorldNormal_Compressed = 0.0f;
	WorldNormal_Compressed.x = InMRT1.x;
	WorldNormal_Compressed.y = InMRT1.y;
	WorldNormal_Compressed.z = InMRT1.z;
	Ret.PerObjectGBufferData.x = InMRT1.w;
	Ret.Metallic.x = InMRT2.x;
	Ret.Specular.x = InMRT2.y;
	Ret.Roughness.x = InMRT2.z;
	Ret.ShadingModelID.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 0) & 0x0f) << 0);
	Ret.SelectiveOutputMask.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 4) & 0x0f) << 0);
	Ret.BaseColor.x = InMRT3.x;
	Ret.BaseColor.y = InMRT3.y;
	Ret.BaseColor.z = InMRT3.z;
	Ret.GenericAO.x = InMRT3.w;
	Ret.Velocity.x = InMRT4.x;
	Ret.Velocity.y = InMRT4.y;
	Ret.Velocity.z = InMRT4.z;
	Ret.Velocity.w = InMRT4.w;
	Ret.PrecomputedShadowFactors.x = InMRT6.x;
	Ret.PrecomputedShadowFactors.y = InMRT6.y;
	Ret.PrecomputedShadowFactors.z = InMRT6.z;
	Ret.PrecomputedShadowFactors.w = InMRT6.w;
	Ret.CustomData.x = InMRT5.x;
	Ret.CustomData.y = InMRT5.y;
	Ret.CustomData.z = InMRT5.z;
	Ret.CustomData.w = InMRT5.w;
	
	Ret.WorldNormal = DecodeNormalHelper(WorldNormal_Compressed);
	Ret.WorldTangent = AnisotropicData.xyz;
	Ret.Anisotropy = AnisotropicData.w;

	GBufferPostDecode(Ret,bChecker,bGetNormalizedNormal);

	Ret.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	Ret.CustomStencil = CustomStencil;
	Ret.Depth = SceneDepth;
	

	return Ret;
}





FGBufferData DecodeGBufferDataUV(float2 UV, bool bGetNormalizedNormal = true)
{
	float CustomNativeDepth = Texture2DSampleLevel(SceneTexturesStruct.CustomDepthTexture, SceneTexturesStruct.PointClampSampler, UV, 0).r;
	int2 IntUV = (int2)trunc(UV * View.BufferSizeAndInvSize.xy * View.BufferToSceneTextureScale.xy);
	uint CustomStencil = SceneTexturesStruct.CustomStencilTexture.Load(int3(IntUV, 0)) .g;
	float SceneDepth = CalcSceneDepth(UV);
	float4 AnisotropicData = Texture2DSampleLevel(SceneTexturesStruct.GBufferFTexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;

	float4 InMRT1 = Texture2DSampleLevel(SceneTexturesStruct.GBufferATexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;
	float4 InMRT2 = Texture2DSampleLevel(SceneTexturesStruct.GBufferBTexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;
	float4 InMRT3 = Texture2DSampleLevel(SceneTexturesStruct.GBufferCTexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;
	float4 InMRT4 = Texture2DSampleLevel(SceneTexturesStruct.GBufferVelocityTexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;
	float4 InMRT5 = Texture2DSampleLevel(SceneTexturesStruct.GBufferDTexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;
	float4 InMRT6 = Texture2DSampleLevel(SceneTexturesStruct.GBufferETexture, SceneTexturesStruct.PointClampSampler, UV, 0).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,
		InMRT6,
		 
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));

	return Ret;
}



FGBufferData DecodeGBufferDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
{
	float CustomNativeDepth = SceneTexturesStruct.CustomDepthTexture.Load(int3(PixelPos, 0)).r;
	uint CustomStencil = SceneTexturesStruct.CustomStencilTexture.Load(int3(PixelPos, 0)) .g;
	float SceneDepth = CalcSceneDepth(PixelPos);
	float4 AnisotropicData = SceneTexturesStruct.GBufferFTexture.Load(int3(PixelPos, 0)).xyzw;

	float4 InMRT1 = SceneTexturesStruct.GBufferATexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT2 = SceneTexturesStruct.GBufferBTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT3 = SceneTexturesStruct.GBufferCTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT4 = SceneTexturesStruct.GBufferVelocityTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT5 = SceneTexturesStruct.GBufferDTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT6 = SceneTexturesStruct.GBufferETexture.Load(int3(PixelPos, 0)).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,
		InMRT6,
		 
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromPixelPos(PixelPos));

	return Ret;
}



FGBufferData DecodeGBufferDataSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{
	uint CustomStencil = 0;
	float CustomNativeDepth = 0;
	float DeviceZ = SampleDeviceZFromSceneTexturesTempCopy(UV);
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	float4 AnisotropicData = GBufferFTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;

	float4 InMRT1 = GBufferATexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT2 = GBufferBTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT3 = GBufferCTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT4 = GBufferVelocityTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT5 = GBufferDTexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;
	float4 InMRT6 = GBufferETexture.SampleLevel( D3DStaticPointClampedSampler, UV, 0).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,
		InMRT6,
		 
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));

	return Ret;
}



FGBufferData DecodeGBufferDataSceneTexturesLoad(uint2 PixelCoord, bool bGetNormalizedNormal = true)
{
	uint CustomStencil = 0;
	float CustomNativeDepth = 0;
	float DeviceZ = SceneDepthTexture.Load(int3(PixelCoord, 0)).r;
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	float4 AnisotropicData = GBufferFTexture.Load(int3(PixelCoord, 0)).xyzw;

	float4 InMRT1 = GBufferATexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT2 = GBufferBTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT3 = GBufferCTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT4 = GBufferVelocityTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT5 = GBufferDTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT6 = GBufferETexture.Load(int3(PixelCoord, 0)).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,
		InMRT6,
		 
		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromPixelPos(PixelCoord));

	return Ret;
}






#line 510 "/ShaderAutogen/PCD3D_SM6/AutogenShaderHeaders.ush"


#line 434 "/Engine/Private/DeferredShadingCommon.ush"



struct FScreenSpaceData
{
	
	FGBufferData GBuffer;
	
	float AmbientOcclusion;
};


void SetGBufferForUnlit(out float4 OutGBufferB)
{
	OutGBufferB = 0;
	OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(0, 0);
}



float4 ComputeIndirectLightingSampleE(uint2 TracingPixelCoord, uint TracingRayIndex, uint TracingRayCount)
{
	
	uint2 Seed0 = Rand3DPCG16(int3(TracingPixelCoord, View.StateFrameIndexMod8)).xy;
	uint2 Seed1 = Rand3DPCG16(int3(TracingPixelCoord + 17, View.StateFrameIndexMod8)).xy;

	return float4(
		Hammersley16(TracingRayIndex, TracingRayCount, Seed0),
		Hammersley16(TracingRayIndex, TracingRayCount, Seed1));
}





#line 815 "/Engine/Private/DeferredShadingCommon.ush"



void EncodeGBuffer(
	FGBufferData GBuffer,
	out float4 OutGBufferA,
	out float4 OutGBufferB,
	out float4 OutGBufferC,
	out float4 OutGBufferD,
	out float4 OutGBufferE,
	out float4 OutGBufferVelocity,
	float QuantizationBias = 0		
	)
{





	if (GBuffer.ShadingModelID == 0)
	{
		OutGBufferA = 0;
		SetGBufferForUnlit(OutGBufferB);
		OutGBufferC = 0;
		OutGBufferD = 0;
		OutGBufferE = 0;
	}
	else
	{

		OutGBufferA.rgb = EncodeNormal( GBuffer.WorldNormal );
		OutGBufferA.a = GBuffer.PerObjectGBufferData;










		OutGBufferB.r = GBuffer.Metallic;
		OutGBufferB.g = GBuffer.Specular;
		OutGBufferB.b = GBuffer.Roughness;
		OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(GBuffer.ShadingModelID, GBuffer.SelectiveOutputMask);

		OutGBufferC.rgb = EncodeBaseColor( GBuffer.BaseColor );




		
		OutGBufferC.a = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);




		OutGBufferD = GBuffer.CustomData;
		OutGBufferE = GBuffer.PrecomputedShadowFactors;
	}




	OutGBufferVelocity = 0;


}




bool AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View.bSubsurfacePostprocessEnabled > 0 && View.bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View.bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{
		
		
		BaseColor = bChecker;
		Specular *= !bChecker;
	}
	return bCheckerboardRequired;
}
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{
	const bool bCheckerboardRequired = AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(BaseColor, Specular, bChecker);
	if (bCheckerboardRequired)
	{
		
		SpecularColor *= !bChecker;
	}
}



FGBufferData DecodeGBufferData(
	float4 InGBufferA,
	float4 InGBufferB,
	float4 InGBufferC,
	float4 InGBufferD,
	float4 InGBufferE,
	float4 InGBufferF,
	float4 InGBufferVelocity,
	float CustomNativeDepth,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData GBuffer;

	GBuffer.WorldNormal = DecodeNormal( InGBufferA.xyz );
	if(bGetNormalizedNormal)
	{
		GBuffer.WorldNormal = normalize(GBuffer.WorldNormal);
	}

	GBuffer.PerObjectGBufferData = InGBufferA.a;  
	GBuffer.Metallic	= InGBufferB.r;
	GBuffer.Specular	= InGBufferB.g;
	GBuffer.Roughness	= InGBufferB.b;
	
	
	
	GBuffer.ShadingModelID = DecodeShadingModelId(InGBufferB.a);
	GBuffer.SelectiveOutputMask = DecodeSelectiveOutputMask(InGBufferB.a);

	GBuffer.BaseColor = DecodeBaseColor(InGBufferC.rgb);






	GBuffer.GBufferAO = 1;
	GBuffer.DiffuseIndirectSampleOcclusion = 0x0;
	GBuffer.IndirectIrradiance = DecodeIndirectIrradiance(InGBufferC.a);






	GBuffer.CustomData = HasCustomGBufferData(GBuffer.ShadingModelID) ? InGBufferD : 0;

	GBuffer.PrecomputedShadowFactors = !(GBuffer.SelectiveOutputMask & (1 << 5)) ? InGBufferE :  ((GBuffer.SelectiveOutputMask & (1 << 6)) ? 0 :  1);
	GBuffer.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	GBuffer.CustomStencil = CustomStencil;
	GBuffer.Depth = SceneDepth;

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;

	[flatten]
	if( GBuffer.ShadingModelID == 9 )
	{
		GBuffer.Metallic = 0.0;



	}

	
	{
		GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);

		if (UseSubsurfaceProfile(GBuffer.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(GBuffer.BaseColor, GBuffer.SpecularColor, GBuffer.Specular, bChecker);
		}

		GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;

		
		{
			
			GBuffer.DiffuseColor = GBuffer.DiffuseColor * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
			GBuffer.SpecularColor = GBuffer.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
		}
		
	}

	{
		bool bHasAnisoProp = HasAnisotropy(GBuffer.SelectiveOutputMask);

		GBuffer.WorldTangent = bHasAnisoProp ? DecodeNormal(InGBufferF.rgb) : 0;
		GBuffer.Anisotropy   = bHasAnisoProp ? InGBufferF.a * 2.0f - 1.0f   : 0;

		if (bGetNormalizedNormal && bHasAnisoProp)
		{
			GBuffer.WorldTangent = normalize(GBuffer.WorldTangent);
		}
	}

	GBuffer.Velocity = !(GBuffer.SelectiveOutputMask & (1 << 7)) ? InGBufferVelocity : 0;

	return GBuffer;
}

float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}

uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}




	
	FGBufferData GetGBufferDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
	{
	
		return DecodeGBufferDataUint(PixelPos,bGetNormalizedNormal);
	
#line 1072 "/Engine/Private/DeferredShadingCommon.ush"

	}

	
	FScreenSpaceData GetScreenSpaceDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
	{
		FScreenSpaceData Out;

		Out.GBuffer = GetGBufferDataUint(PixelPos, bGetNormalizedNormal);

		float4 ScreenSpaceAO = Texture2DSampleLevel(SceneTexturesStruct.ScreenSpaceAOTexture, SceneTexturesStruct.PointClampSampler, (PixelPos + 0.5f) * View.BufferSizeAndInvSize.zw, 0);
		Out.AmbientOcclusion = ScreenSpaceAO.r;

		return Out;
	}




FGBufferData GetGBufferDataFromSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{

	return DecodeGBufferDataSceneTextures(UV,bGetNormalizedNormal);
#line 1112 "/Engine/Private/DeferredShadingCommon.ush"

}


uint GetSceneLightingChannel(uint2 PixelCoord)
{
	[branch]
	if (bSceneLightingChannelsValid)
	{
		return SceneLightingChannels.Load(uint3(PixelCoord, 0)).x;
	}
	return ~0;
}


FGBufferData GetGBufferData(float2 UV, bool bGetNormalizedNormal = true)
{

	return DecodeGBufferDataUV(UV,bGetNormalizedNormal);
#line 1160 "/Engine/Private/DeferredShadingCommon.ush"

}


uint GetShadingModelId(float2 UV)
{
	return DecodeShadingModelId(Texture2DSampleLevel(SceneTexturesStruct.GBufferBTexture, SceneTexturesStruct.PointClampSampler, UV, 0).a);
}


FScreenSpaceData GetScreenSpaceData(float2 UV, bool bGetNormalizedNormal = true)
{
	FScreenSpaceData Out;

	Out.GBuffer = GetGBufferData(UV, bGetNormalizedNormal);
	float4 ScreenSpaceAO = Texture2DSampleLevel(SceneTexturesStruct.ScreenSpaceAOTexture, SceneTexturesStruct.PointClampSampler, UV, 0);

	Out.AmbientOcclusion = ScreenSpaceAO.r;

	return Out;
}



float3 AOMultiBounce(float3 BaseColor, float AO)
{
	if (0 && !0)
	{
		return AO;
	}
	else
	{
		float3 a = 2.0404 * BaseColor - 0.3324;
		float3 b = -4.7951 * BaseColor + 0.6417;
		float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}

#line   6 "/Engine/Private/SceneTextureParameters.ush"


#line   7 "/Engine/Private/Lumen/LumenScreenProbeCommon.ush"













uint ScreenProbeTracingOctahedronResolution;

uint ScreenProbeLightSampleResolutionXY;

uint ScreenProbeGatherOctahedronResolution;
uint ScreenProbeGatherOctahedronResolutionWithBorder;


uint2 ScreenProbeViewSize;


uint2 ScreenProbeAtlasViewSize;

uint2 ScreenProbeAtlasBufferSize;

float ScreenProbeGatherMaxMip;
float RelativeSpeedDifferenceToConsiderLightingMoving;
float ScreenTraceNoFallbackThicknessScale;


float2 SampleRadianceProbeUVMul;
float2 SampleRadianceProbeUVAdd;
float2 SampleRadianceAtlasUVMul;


uint ScreenProbeDownsampleFactor;

uint NumUniformScreenProbes;
uint MaxNumAdaptiveProbes;
int FixedJitterIndex;



Texture2D<uint> ScreenProbeSceneDepth;
Texture2D<float2> ScreenProbeWorldNormal;
Texture2D<uint> ScreenProbeWorldSpeed;


StructuredBuffer<uint> NumAdaptiveScreenProbes;
StructuredBuffer<uint> AdaptiveScreenProbeData;

Texture2D<uint> ScreenTileAdaptiveProbeHeader;
Texture2D<uint> ScreenTileAdaptiveProbeIndices;






uint2 GetScreenTileJitter(uint TemporalIndex)
{
	return Hammersley16(TemporalIndex, 8, 0) * ScreenProbeDownsampleFactor;
	
}


float GetScreenProbeDepth(uint2 ScreenProbeAtlasCoord, Texture2D<uint> ProbeSceneDepthTexture)
{
	return asfloat(ScreenProbeSceneDepth[ScreenProbeAtlasCoord]);
}

float GetScreenProbeDepth(uint2 ScreenProbeAtlasCoord)
{
	return GetScreenProbeDepth(ScreenProbeAtlasCoord, ScreenProbeSceneDepth);
}

float3 GetScreenProbeNormal(uint2 ScreenProbeAtlasCoord)
{
	return OctahedronToUnitVector(ScreenProbeWorldNormal[ScreenProbeAtlasCoord] * 2.0 - 1.0);
}

uint GetNumAdaptiveScreenProbes()
{
	return min(NumAdaptiveScreenProbes[0], MaxNumAdaptiveProbes);
}

uint2 GetAdaptiveProbeCoord(uint2 ScreenTileCoord, uint AdaptiveProbeListIndex)
{
	uint2 AdaptiveProbeCoord = uint2(AdaptiveProbeListIndex % ScreenProbeDownsampleFactor, AdaptiveProbeListIndex / ScreenProbeDownsampleFactor);
	
	return AdaptiveProbeCoord * ScreenProbeViewSize + ScreenTileCoord;
}

uint GetNumScreenProbes()
{
	return NumUniformScreenProbes + GetNumAdaptiveScreenProbes();
}

uint EncodeScreenProbeData(uint2 ScreenProbeScreenPosition)
{
	return (ScreenProbeScreenPosition.x & 0xFFFF) | ((ScreenProbeScreenPosition.y & 0xFFFF) << 16);
}

uint2 DecodeScreenProbeData(uint EncodedProbeData)
{
	return uint2(EncodedProbeData & 0xFFFF, (EncodedProbeData >> 16) & 0xFFFF);
}


uint2 GetScreenProbeScreenPosition(uint ScreenProbeIndex)
{
	uint2 ScreenProbeAtlasCoord = uint2(ScreenProbeIndex % ScreenProbeViewSize.x, ScreenProbeIndex / ScreenProbeViewSize.x);
	uint2 ScreenProbeScreenPosition = ScreenProbeAtlasCoord * ScreenProbeDownsampleFactor + GetScreenTileJitter((FixedJitterIndex < 0 ? View.StateFrameIndexMod8 : FixedJitterIndex)) + View.ViewRectMinAndSize.xy;

	if (ScreenProbeIndex >= NumUniformScreenProbes)
	{
		ScreenProbeScreenPosition = DecodeScreenProbeData(AdaptiveScreenProbeData[ScreenProbeIndex - NumUniformScreenProbes]);
	}

	return ScreenProbeScreenPosition;
}

uint2 GetScreenTileCoord(uint2 ScreenProbeScreenPosition)
{
	return (ScreenProbeScreenPosition - GetScreenTileJitter((FixedJitterIndex < 0 ? View.StateFrameIndexMod8 : FixedJitterIndex)) - View.ViewRectMinAndSize.xy) / ScreenProbeDownsampleFactor;
}

uint2 GetUniformScreenProbeScreenPosition(uint2 ScreenTileCoord)
{
	uint2 ScreenJitter = GetScreenTileJitter((FixedJitterIndex < 0 ? View.StateFrameIndexMod8 : FixedJitterIndex));
	uint2 ScreenProbeScreenPosition = min((uint2)(View.ViewRectMinAndSize.xy + ScreenTileCoord * ScreenProbeDownsampleFactor + ScreenJitter), (uint2)(View.ViewRectMinAndSize.xy + View.ViewRectMinAndSize.zw) - 1);
	return ScreenProbeScreenPosition;
}

float2 GetScreenTileCoordFromScreenUV(float2 ScreenUV, uint TemporalIndex)
{
	return (ScreenUV - (View.ViewRectMin.xy + GetScreenTileJitter(TemporalIndex) + 0.5f) * View.BufferSizeAndInvSize.zw) / (ScreenProbeDownsampleFactor * View.BufferSizeAndInvSize.zw);
}

float2 GetScreenUVFromScreenTileCoord(uint2 ScreenTileCoord)
{
	uint2 ScreenProbeScreenPosition = ScreenTileCoord * ScreenProbeDownsampleFactor + GetScreenTileJitter((FixedJitterIndex < 0 ? View.StateFrameIndexMod8 : FixedJitterIndex)) + View.ViewRectMinAndSize.xy;
	return (ScreenProbeScreenPosition + .5f) * View.BufferSizeAndInvSize.zw;
}

float2 GetScreenUVFromScreenProbePosition(uint2 ScreenProbeScreenPosition)
{
	
	float2 ScreenCoord = min((float2)ScreenProbeScreenPosition, View.ViewRectMin.xy + View.ViewSizeAndInvSize.xy - 1.0f);
	return (ScreenCoord + .5f) * View.BufferSizeAndInvSize.zw;
}

float3 GetWorldPositionFromScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 ScreenPosition = (ScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float3 WorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1),  LWCToFloat( GetPrimaryView().ScreenToWorld )).xyz;
	return WorldPosition;
}

float3 GetTranslatedWorldPositionFromScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 ScreenPosition = (ScreenUV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float3 TranslatedWorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToTranslatedWorld).xyz;
	return TranslatedWorldPosition;
}


float3 GetHistoryScreenPosition(float2 ScreenPosition, float2 ScreenUV, float DeviceZ)
{
	float3 HistoryScreenPosition = float3(ScreenPosition, DeviceZ);
	bool bIsDynamicPixel = false;

	{
		float4 ThisClip = float4(HistoryScreenPosition, 1);
		float4 PrevClip = mul(ThisClip, View.ClipToPrevClip); 

		float3 PrevScreen = PrevClip.xyz / PrevClip.w;
		float3 Velocity = HistoryScreenPosition - PrevScreen;
		float4 EncodedVelocity = GBufferVelocityTexture.SampleLevel( D3DStaticPointClampedSampler, ScreenUV, 0);
		bIsDynamicPixel = EncodedVelocity.x > 0.0;

		if (bIsDynamicPixel)
		{
			
			Velocity = DecodeVelocityFromTexture(EncodedVelocity);
		}

		HistoryScreenPosition -= Velocity;
	}

	return HistoryScreenPosition;
}


float3 GetHistoryScreenPositionIncludingTAAJitter(float2 ScreenPosition, float2 ScreenUV, float DeviceZ)
{
	float3 HistoryScreenPosition = GetHistoryScreenPosition(ScreenPosition - View.TemporalAAJitter.xy, ScreenUV, DeviceZ);
	HistoryScreenPosition.xy += View.TemporalAAJitter.zw;
	return HistoryScreenPosition;
}

float3 GetPrevTranslatedWorldPosition(float3 HistoryScreenPosition)
{
	float HistorySceneDepth = ConvertFromDeviceZ(HistoryScreenPosition.z);
	float3 PrevPositionTranslatedWorld = mul(float4(HistoryScreenPosition.xy * HistorySceneDepth, HistorySceneDepth, 1), View.PrevScreenToTranslatedWorld).xyz;
	float3 PreViewTranslationOffset = LWCToFloat(LWCSubtract(GetPrimaryView().PreViewTranslation, GetPrimaryView().PrevPreViewTranslation));
	float3 PrevTranslatedWorldPosition = PrevPositionTranslatedWorld + PreViewTranslationOffset;
	return PrevTranslatedWorldPosition;
}

uint EncodeScreenProbeSpeed(float ProbeSpeed, bool bTwoSidedFoliage)
{
	return f32tof16(ProbeSpeed) | (bTwoSidedFoliage ? 0x8000 : 0);
}

bool GetScreenProbeIsTwoSidedFoliage(uint2 ScreenProbeAtlasCoord)
{
	uint Encoded = ScreenProbeWorldSpeed.Load(int3(ScreenProbeAtlasCoord, 0));
	return (Encoded & 0x8000) != 0;
}

float GetScreenProbeSpeed(uint2 ScreenProbeAtlasCoord)
{
	uint Encoded = ScreenProbeWorldSpeed.Load(int3(ScreenProbeAtlasCoord, 0));
	return f16tof32(Encoded & 0x7FFF);
}

Texture2D<float> ScreenProbeMoving;

float GetScreenProbeMoving(uint2 ScreenProbeAtlasCoord)
{
	return ScreenProbeMoving[ScreenProbeAtlasCoord];
}

StructuredBuffer<uint> CompactedTraceTexelAllocator;
StructuredBuffer<uint2> CompactedTraceTexelData;
StructuredBuffer<uint2> CompactedLightSampleTraceTexelData;

uint2 EncodeTraceTexel(uint ScreenProbeIndex, uint2 TraceTexelCoord, float TraceHitDistance)
{
	return uint2(
		(ScreenProbeIndex & 0xFFFFF) | ((TraceTexelCoord.x & 0x1F) << 20) | ((TraceTexelCoord.y & 0x1F) << 25),
		asuint(TraceHitDistance));
}

void DecodeTraceTexel(uint2 TraceTexelData, inout uint ScreenProbeIndex, inout uint2 TraceTexelCoord, inout float TraceHitDistance)
{
	ScreenProbeIndex = TraceTexelData.x & 0xFFFFF;
	TraceTexelCoord.x = (TraceTexelData.x >> 20) & 0x1F;
	TraceTexelCoord.y = (TraceTexelData.x >> 25) & 0x1F;
	TraceHitDistance = asfloat(TraceTexelData.y);
}

Texture2D<uint> LightingChannelsTexture;

bool HasDistanceFieldRepresentation(float2 ScreenUV)
{
	return (LightingChannelsTexture[(int2)(ScreenUV * View.BufferSizeAndInvSize.xy)] & (1 << 3)) != 0;
}

Texture2D ScreenProbeLightSampleDirection;
Texture2D<uint> ScreenProbeLightSampleFlags;
Texture2D<float3> ScreenProbeLightSampleRadiance;
Texture2D<uint> LightSampleTraceHit;


float GetProbeMaxHitDistance()
{
	return MaxHalfFloat;

}



uint EncodeProbeRayDistance(float HitDistance, bool bHit, bool bMoving)
{
	HitDistance = max(HitDistance, 0.0f);

	uint EncodedRay = 0;
	EncodedRay = clamp(uint(HitDistance * 0.1f + 0.5f), 0, 0x3FFFFFFF);
	EncodedRay |= bHit ? (1 << 30) : 0;
	EncodedRay |= bMoving ? (1 << 31) : 0;
	return EncodedRay;
}

float DecodeProbeRayDistance(uint Encoded, out bool bHit, out bool bMoving)
{
	bHit = (Encoded & (1 << 30)) != 0;
	bMoving = (Encoded & (1 << 31)) != 0;
	return (Encoded & 0x3FFFFFFF) / 0.1f;
}

float DecodeProbeRayDistance(uint Encoded, out bool bHit)
{
	bool bMoving;
	return DecodeProbeRayDistance(Encoded, bHit, bMoving);
}

float DecodeProbeRayDistance(uint Encoded)
{
	bool bHit;
	bool bMoving;
	return DecodeProbeRayDistance(Encoded, bHit, bMoving);
}

uint EncodeLightSampleFlags(bool bValid, bool bCastShadow)
{
	return (bValid ? 1 : 0) | (bCastShadow ? 2 : 0);
}

void DecodeLightSampleFlags(uint Encoded, out bool bValid, out bool bCastShadow)
{
	bValid = (Encoded & 1) != 0;
	bCastShadow = (Encoded & 2) != 0;
}
#line  16 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"






void LumenFrontLayerTranslucencyClearGBufferPS(
	  in  float4 SvPosition		: SV_Position
	, out float4 OutColor		: SV_Target0
	, out float  OutDepth		: SV_DEPTH)
{
	const uint2 PixelCoord = uint2(SvPosition.xy);

	OutColor = 0;
	OutDepth = SceneTexturesStruct.SceneDepthTexture.Load(int3(PixelCoord, 0)).r;
}

[numthreads(8, 8, 8)]
void MarkRadianceProbesUsedByTranslucencyVolumeCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint3 GridCoordinate = DispatchThreadId;

	if (all(GridCoordinate < TranslucencyGIGridSize))
	{
		float3 WorldPosition = ComputeCellWorldPosition(GridCoordinate, FrameJitterOffset.xyz);
		uint ClipmapIndex = GetRadianceProbeClipmapForMark(WorldPosition);

		if (IsValidRadianceCacheClipmapForMark(ClipmapIndex) && IsFroxelVisible(GridCoordinate))
		{
			MarkPositionUsedInIndirectionTexture(WorldPosition, ClipmapIndex);
		}
	}
}

RWTexture3D<float3> RWVolumeTraceRadiance;
RWTexture3D<float> RWVolumeTraceHitDistance;

[numthreads(8, 8, 1)]
void TranslucencyVolumeTraceVoxelsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{





	uint3 GridCoordinate = uint3(DispatchThreadId.xy / TranslucencyVolumeTracingOctahedronResolution, DispatchThreadId.z);
	uint2 TraceTexelCoord = DispatchThreadId.xy - GridCoordinate.xy * TranslucencyVolumeTracingOctahedronResolution;


	if (all(GridCoordinate < TranslucencyGIGridSize) && all(TraceTexelCoord < TranslucencyVolumeTracingOctahedronResolution))
	{
		float3 TraceRadiance = 0;
		float TraceHitDistance = MaxTraceDistance;

		if (IsFroxelVisible(GridCoordinate))
		{
			float3 WorldPosition = ComputeCellWorldPosition(GridCoordinate, FrameJitterOffset.xyz);
			float3 TranslatedWorldPosition = ComputeCellTranslatedWorldPosition(GridCoordinate, FrameJitterOffset.xyz);

			float2 ProbeUV;
			float ConeHalfAngle;
			GetProbeTracingUV(TraceTexelCoord, GetProbeTexelCenter(GridCoordinate), ProbeUV, ConeHalfAngle);

			float3 WorldConeDirection = EquiAreaSphericalMapping(ProbeUV);

			float TraceDistance = MaxTraceDistance;
			FRadianceCacheCoverage Coverage;
			Coverage.bValid = false;









			float VoxelTraceStartDistance = CalculateVoxelTraceStartDistance(0, MaxTraceDistance, MaxMeshSDFTraceDistance, false) * VoxelTraceStartDistanceScale;

			FConeTraceInput TraceInput;
			TraceInput.Setup(WorldPosition, TranslatedWorldPosition, WorldConeDirection, ConeHalfAngle, 0, 0, TraceDistance, StepFactor);
			TraceInput.VoxelTraceStartDistance = VoxelTraceStartDistance;
			TraceInput.SDFStepFactor = 1;

			FConeTraceResult TraceResult = (FConeTraceResult)0;
			TraceResult.Transparency = 1;


			RayTraceGlobalDistanceField(TraceInput, TraceResult);


			if (TraceResult.Transparency <= .5f)
			{
				TraceHitDistance = TraceResult.OpaqueHitDistance;
			}








			{
				ApplySkylightToTraceResult(WorldConeDirection, TraceResult);
			}

			TraceRadiance = TraceResult.Lighting;

			TraceRadiance *= View.PreExposure;

			float MaxLighting = max3(TraceRadiance.x, TraceRadiance.y, TraceRadiance.z);

			if (MaxLighting > MaxRayIntensity)
			{
				TraceRadiance *= MaxRayIntensity / MaxLighting;
			}
		}

		uint3 WriteCoord = uint3(GridCoordinate.xy * TranslucencyVolumeTracingOctahedronResolution + TraceTexelCoord, GridCoordinate.z);
		RWVolumeTraceRadiance[WriteCoord] = TraceRadiance;
		RWVolumeTraceHitDistance[WriteCoord] = min(TraceHitDistance, MaxHalfFloat);
	}
}

Texture3D<float3> VolumeTraceRadiance;
Texture3D<float> VolumeTraceHitDistance;

float3 PreviousFrameJitterOffset;
float4x4 UnjitteredPrevWorldToClip;

[numthreads(8, 8, 1)]
void TranslucencyVolumeSpatialFilterCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint3 GridCoordinate = uint3(DispatchThreadId.xy / TranslucencyVolumeTracingOctahedronResolution, DispatchThreadId.z);
	uint2 TraceTexelCoord = DispatchThreadId.xy - GridCoordinate.xy * TranslucencyVolumeTracingOctahedronResolution;

	if (all(GridCoordinate < TranslucencyGIGridSize) && all(TraceTexelCoord < TranslucencyVolumeTracingOctahedronResolution))
	{
		float3 FilteredRadiance = 0;
		float TotalWeight = 0;

		int3 Offsets[6];
		Offsets[0] = int3(-1, 0, 0);
		Offsets[1] = int3(1, 0, 0);
		Offsets[2] = int3(0, -1, 0);
		Offsets[3] = int3(0, 1, 0);
		Offsets[4] = int3(0, 0, -1);
		Offsets[5] = int3(0, 0, 1);

		[loop]
		for (uint OffsetIndex = 0; OffsetIndex < 6; OffsetIndex++)
		{
			uint3 NeighborGridCoordinate = GridCoordinate + Offsets[OffsetIndex];

			if (all( and_internal( NeighborGridCoordinate >= 0 , NeighborGridCoordinate < TranslucencyGIGridSize )))
			{
				float3 NeighborRadiance = VolumeTraceRadiance[uint3(NeighborGridCoordinate.xy * TranslucencyVolumeTracingOctahedronResolution + TraceTexelCoord, NeighborGridCoordinate.z)];
				float Weight = 1.0f;
				FilteredRadiance += NeighborRadiance * Weight;
				TotalWeight += Weight;
			}
		}


#line 225 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"


		RWVolumeTraceRadiance[DispatchThreadId] = FilteredRadiance / max(TotalWeight, .00001f);
	}
}

RWTexture3D<float4> RWTranslucencyGI0;
RWTexture3D<float4> RWTranslucencyGI1;
RWTexture3D<float4> RWTranslucencyGINewHistory0;
RWTexture3D<float4> RWTranslucencyGINewHistory1;

Texture3D TranslucencyGIHistory0;
Texture3D TranslucencyGIHistory1;
SamplerState TranslucencyGIHistorySampler;

float HistoryWeight; 

[numthreads(8, 8, 8)]
void TranslucencyVolumeIntegrateCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint3 GridCoordinate = DispatchThreadId;

	if (all(GridCoordinate < TranslucencyGIGridSize))
	{
		float3 WorldPosition = ComputeCellWorldPosition(GridCoordinate, FrameJitterOffset.xyz);

		FTwoBandSHVectorRGB Lighting = (FTwoBandSHVectorRGB)0;
		bool bNewLightingValid = false;
		float InvTracingOctahedronResolution = 1.0f / (float)TranslucencyVolumeTracingOctahedronResolution;

		if (IsFroxelVisible(GridCoordinate))
		{
			for (uint Y = 0; Y < TranslucencyVolumeTracingOctahedronResolution; Y++)
			{
				for (uint X = 0; X < TranslucencyVolumeTracingOctahedronResolution; X++)
				{
					float3 TraceRadiance = VolumeTraceRadiance[uint3(GridCoordinate.xy * TranslucencyVolumeTracingOctahedronResolution + uint2(X, Y), GridCoordinate.z)] * View.OneOverPreExposure;

					float2 ProbeTexelCenter = float2(0.5, 0.5);
					float2 ProbeUV = (float2(X, Y) + ProbeTexelCenter) * InvTracingOctahedronResolution;
					float3 WorldConeDirection = EquiAreaSphericalMapping(ProbeUV);

					Lighting = AddSH(Lighting, MulSH(SHBasisFunction(WorldConeDirection), TraceRadiance));
				}
			}

			float NormalizeFactor = PI / TranslucencyVolumeTracingOctahedronResolution / TranslucencyVolumeTracingOctahedronResolution;
			Lighting.R.V *= NormalizeFactor;
			Lighting.G.V *= NormalizeFactor;
			Lighting.B.V *= NormalizeFactor;
			bNewLightingValid = true;
		}

		
		











		
		{
			float3 AmbientLightingVector = float3(Lighting.R.V.x, Lighting.G.V.x, Lighting.B.V.x);
			RWTranslucencyGI0[GridCoordinate] = float4(AmbientLightingVector, 0);

			float3 LuminanceWeights = AmbientLightingVector.rgb / (dot(AmbientLightingVector, 1) + 0.00001f);
			
			float3 Coefficient0 = float3(Lighting.R.V.y, Lighting.G.V.y, Lighting.B.V.y);
			float3 Coefficient1 = float3(Lighting.R.V.z, Lighting.G.V.z, Lighting.B.V.z);
			float3 Coefficient2 = float3(Lighting.R.V.w, Lighting.G.V.w, Lighting.B.V.w);
			RWTranslucencyGI1[GridCoordinate] = float4(dot(Coefficient0, LuminanceWeights), dot(Coefficient1, LuminanceWeights), dot(Coefficient2, LuminanceWeights), 0);
		}

		float TranslucencyVolumeIntensityScale = 4;
		Lighting.R.V *= TranslucencyVolumeIntensityScale;
		Lighting.G.V *= TranslucencyVolumeIntensityScale;
		Lighting.B.V *= TranslucencyVolumeIntensityScale;

		FTwoBandSHVectorRGB NewHistoryLighting = Lighting;

	
#line 342 "/Engine/Private/Lumen/LumenTranslucencyVolumeLighting.usf"


		{
			RWTranslucencyGINewHistory0[GridCoordinate] = float4(NewHistoryLighting.R.V.x, NewHistoryLighting.G.V.x, NewHistoryLighting.B.V.x, 0);

			float3 LuminanceWeights = float3(.3, .59, .11);
			float3 Coefficient0 = float3(NewHistoryLighting.R.V.y, NewHistoryLighting.G.V.y, NewHistoryLighting.B.V.y);
			float3 Coefficient1 = float3(NewHistoryLighting.R.V.z, NewHistoryLighting.G.V.z, NewHistoryLighting.B.V.z);
			float3 Coefficient2 = float3(NewHistoryLighting.R.V.w, NewHistoryLighting.G.V.w, NewHistoryLighting.B.V.w);
			RWTranslucencyGINewHistory1[GridCoordinate] = float4(dot(Coefficient0, LuminanceWeights), dot(Coefficient1, LuminanceWeights), dot(Coefficient2, LuminanceWeights), 0);
		}
	}
}

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 387453108
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 446694145
LumenCardScene, 433658056
ReflectionStruct, 206569728
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
Primitive, 48234752
InstanceCulling, 3146265
BlueNoise, 3473677
MobileSceneTextures, 11010716
SceneTexturesStruct, 158928480
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 58
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 59
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 60
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 61
View_HairScatteringLUTTexture, View, 5, 62
View_HairScatteringLUTSampler, View, 8, 63
View_LTCMatTexture, View, 5, 64
View_LTCMatSampler, View, 8, 65
View_LTCAmpTexture, View, 5, 66
View_LTCAmpSampler, View, 8, 67
View_ShadingEnergyGGXSpecTexture, View, 5, 68
View_ShadingEnergyGGXGlassTexture, View, 5, 69
View_ShadingEnergyClothSpecTexture, View, 5, 70
View_ShadingEnergyDiffuseTexture, View, 5, 71
View_ShadingEnergySampler, View, 8, 72
View_SSProfilesTexture, View, 5, 73
View_SSProfilesSampler, View, 8, 74
View_SSProfilesTransmissionSampler, View, 8, 75
View_SSProfilesPreIntegratedTexture, View, 5, 76
View_SSProfilesPreIntegratedSampler, View, 8, 77
View_WaterIndirection, View, 6, 78
View_WaterData, View, 6, 79
View_RectLightAtlasTexture, View, 5, 80
View_RectLightAtlasSampler, View, 8, 81
View_IESAtlasTexture, View, 5, 82
View_IESAtlasSampler, View, 8, 83
View_LandscapeWeightmapSampler, View, 8, 84
View_LandscapeIndirection, View, 6, 85
View_LandscapePerComponentData, View, 6, 86
View_VTFeedbackBuffer, View, 7, 87
View_EditorVisualizeLevelInstanceIds, View, 6, 88
View_EditorSelectedHitProxyIds, View, 6, 89
View_PhysicsFieldClipmapBuffer, View, 6, 90
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
LumenCardScene_CardData, LumenCardScene, 16, 0
LumenCardScene_CardPageData, LumenCardScene, 16, 1
LumenCardScene_MeshCardsData, LumenCardScene, 16, 2
LumenCardScene_HeightfieldData, LumenCardScene, 16, 3
LumenCardScene_PageTableBuffer, LumenCardScene, 16, 4
LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer, LumenCardScene, 16, 5
LumenCardScene_AlbedoAtlas, LumenCardScene, 9, 6
LumenCardScene_OpacityAtlas, LumenCardScene, 9, 7
LumenCardScene_NormalAtlas, LumenCardScene, 9, 8
LumenCardScene_EmissiveAtlas, LumenCardScene, 9, 9
LumenCardScene_DepthAtlas, LumenCardScene, 9, 10
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=TranslucencyVolumeTraceVoxelsCS -shaderPlatformName=PCD3D_SM6 -cs C:/Unreal_Projects/traingame/CaelumProject/Saved/ShaderDebugInfo/PCD3D_SM6/Global/FTranslucencyVolumeTraceVoxelsCS/4/LumenTranslucencyVolumeLighting.usf -cflags=554700800 -nocrashreports
#endif /*DIRECT COMPILE*/


#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 387453108
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 446694145
LumenCardScene, 433658056
ReflectionStruct, 206569728
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
Primitive, 48234752
InstanceCulling, 3146265
BlueNoise, 3473677
MobileSceneTextures, 11010716
SceneTexturesStruct, 158928480
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 58
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 59
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 60
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 61
View_HairScatteringLUTTexture, View, 5, 62
View_HairScatteringLUTSampler, View, 8, 63
View_LTCMatTexture, View, 5, 64
View_LTCMatSampler, View, 8, 65
View_LTCAmpTexture, View, 5, 66
View_LTCAmpSampler, View, 8, 67
View_ShadingEnergyGGXSpecTexture, View, 5, 68
View_ShadingEnergyGGXGlassTexture, View, 5, 69
View_ShadingEnergyClothSpecTexture, View, 5, 70
View_ShadingEnergyDiffuseTexture, View, 5, 71
View_ShadingEnergySampler, View, 8, 72
View_SSProfilesTexture, View, 5, 73
View_SSProfilesSampler, View, 8, 74
View_SSProfilesTransmissionSampler, View, 8, 75
View_SSProfilesPreIntegratedTexture, View, 5, 76
View_SSProfilesPreIntegratedSampler, View, 8, 77
View_WaterIndirection, View, 6, 78
View_WaterData, View, 6, 79
View_RectLightAtlasTexture, View, 5, 80
View_RectLightAtlasSampler, View, 8, 81
View_IESAtlasTexture, View, 5, 82
View_IESAtlasSampler, View, 8, 83
View_LandscapeWeightmapSampler, View, 8, 84
View_LandscapeIndirection, View, 6, 85
View_LandscapePerComponentData, View, 6, 86
View_VTFeedbackBuffer, View, 7, 87
View_EditorVisualizeLevelInstanceIds, View, 6, 88
View_EditorSelectedHitProxyIds, View, 6, 89
View_PhysicsFieldClipmapBuffer, View, 6, 90
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
LumenCardScene_CardData, LumenCardScene, 16, 0
LumenCardScene_CardPageData, LumenCardScene, 16, 1
LumenCardScene_MeshCardsData, LumenCardScene, 16, 2
LumenCardScene_HeightfieldData, LumenCardScene, 16, 3
LumenCardScene_PageTableBuffer, LumenCardScene, 16, 4
LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer, LumenCardScene, 16, 5
LumenCardScene_AlbedoAtlas, LumenCardScene, 9, 6
LumenCardScene_OpacityAtlas, LumenCardScene, 9, 7
LumenCardScene_NormalAtlas, LumenCardScene, 9, 8
LumenCardScene_EmissiveAtlas, LumenCardScene, 9, 9
LumenCardScene_DepthAtlas, LumenCardScene, 9, 10
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 6
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 7
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 8
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 9
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 14
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 18
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM6 -entry=TranslucencyVolumeTraceVoxelsCS -shaderPlatformName=PCD3D_SM6 -cs C:/Unreal_Projects/traingame/CaelumProject/Saved/ShaderDebugInfo/PCD3D_SM6/Global/FTranslucencyVolumeTraceVoxelsCS/4/LumenTranslucencyVolumeLighting.usf -cflags=554700800 -nocrashreports
#endif /*DIRECT COMPILE*/
