;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: a70b21c22f94904228fa2300a356a559
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct hostlayout._RootShaderParameters
;   {
;
;       float DiffuseColorBoost;                      ; Offset:   48
;       float SkylightLeaking;                        ; Offset:   52
;       float SkylightLeakingRoughness;               ; Offset:   56
;       float InvFullSkylightLeakingDistance;         ; Offset:   60
;       uint SampleHeightFog;                         ; Offset:   64
;       uint SurfaceCacheUpdateFrameIndex;            ; Offset:  172
;       float ReprojectionRadiusScale;                ; Offset:  256
;       float InvClipmapFadeSize;                     ; Offset:  268
;       uint2 ProbeAtlasResolutionInProbes;           ; Offset:  272
;       uint RadianceProbeClipmapResolution;          ; Offset:  280
;       uint NumRadianceProbeClipmaps;                ; Offset:  284
;       uint RadianceProbeResolution;                 ; Offset:  288
;       uint FinalProbeResolution;                    ; Offset:  292
;       uint FinalRadianceAtlasMaxMip;                ; Offset:  296
;       uint CalculateIrradiance;                     ; Offset:  300
;       uint IrradianceProbeResolution;               ; Offset:  304
;       uint OcclusionProbeResolution;                ; Offset:  308
;       float4 RadianceProbeSettings[6];              ; Offset:  368
;       float4 PaddedWorldPositionToRadianceProbeCoordBias[6];; Offset:  464
;       float4 PaddedRadianceProbeCoordToWorldPositionBias[6];; Offset:  560
;       float2 InvProbeFinalRadianceAtlasResolution;  ; Offset:  656
;       float2 InvProbeFinalIrradianceAtlasResolution;; Offset:  664
;       float2 InvProbeDepthAtlasResolution;          ; Offset:  672
;       uint OverrideCacheOcclusionLighting;          ; Offset:  680
;       uint ShowBlackRadianceCacheLighting;          ; Offset:  684
;       uint ProbeAtlasResolutionModuloMask;          ; Offset:  688
;       uint ProbeAtlasResolutionDivideShift;         ; Offset:  692
;       float3 TranslucencyGIGridZParams;             ; Offset:  720
;       uint TranslucencyGIGridPixelSizeShift;        ; Offset:  732
;       uint3 TranslucencyGIGridSize;                 ; Offset:  736
;       uint UseJitter;                               ; Offset:  748
;       float3 FrameJitterOffset;                     ; Offset:  752
;       row_major float4x4 UnjitteredClipToTranslatedWorld;; Offset:  768
;       uint TranslucencyVolumeTracingOctahedronResolution;; Offset:  832
;       float HZBMipLevel;                            ; Offset:  848
;       float2 ViewportUVToHZBBufferUV;               ; Offset:  856
;       float StepFactor;                             ; Offset:  864
;       float MaxTraceDistance;                       ; Offset:  868
;       float VoxelTraceStartDistanceScale;           ; Offset:  872
;       float MaxRayIntensity;                        ; Offset:  876
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   880
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_LumenCardScene
; {
;
;   struct UniformBufferConstants_LumenCardScene
;   {
;
;       uint LumenCardScene_NumCards;                 ; Offset:    0
;       uint LumenCardScene_NumMeshCards;             ; Offset:    4
;       uint LumenCardScene_NumCardPages;             ; Offset:    8
;       uint LumenCardScene_NumHeightfields;          ; Offset:   12
;       uint LumenCardScene_MaxConeSteps;             ; Offset:   16
;       uint PrePadding_LumenCardScene_20;            ; Offset:   20
;       float2 LumenCardScene_PhysicalAtlasSize;      ; Offset:   24
;       float2 LumenCardScene_InvPhysicalAtlasSize;   ; Offset:   32
;       float LumenCardScene_IndirectLightingAtlasDownsampleFactor;; Offset:   40
;       uint LumenCardScene_NumDistantCards;          ; Offset:   44
;       float LumenCardScene_DistantSceneMaxTraceDistance;; Offset:   48
;       float PrePadding_LumenCardScene_52;           ; Offset:   52
;       float PrePadding_LumenCardScene_56;           ; Offset:   56
;       float PrePadding_LumenCardScene_60;           ; Offset:   60
;       float3 LumenCardScene_DistantSceneDirection;  ; Offset:   64
;       float PrePadding_LumenCardScene_76;           ; Offset:   76
;       uint4 LumenCardScene_DistantCardIndices[2];   ; Offset:   80
;       uint BindlessResource_LumenCardScene_CardData;; Offset:  112
;       uint PrePadding_LumenCardScene_116;           ; Offset:  116
;       uint BindlessResource_LumenCardScene_CardPageData;; Offset:  120
;       uint PrePadding_LumenCardScene_124;           ; Offset:  124
;       uint BindlessResource_LumenCardScene_MeshCardsData;; Offset:  128
;       uint PrePadding_LumenCardScene_132;           ; Offset:  132
;       uint BindlessResource_LumenCardScene_HeightfieldData;; Offset:  136
;       uint PrePadding_LumenCardScene_140;           ; Offset:  140
;       uint BindlessResource_LumenCardScene_PageTableBuffer;; Offset:  144
;       uint PrePadding_LumenCardScene_148;           ; Offset:  148
;       uint BindlessResource_LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer;; Offset:  152
;       uint PrePadding_LumenCardScene_156;           ; Offset:  156
;       uint BindlessResource_LumenCardScene_AlbedoAtlas;; Offset:  160
;       uint PrePadding_LumenCardScene_164;           ; Offset:  164
;       uint BindlessResource_LumenCardScene_OpacityAtlas;; Offset:  168
;       uint PrePadding_LumenCardScene_172;           ; Offset:  172
;       uint BindlessResource_LumenCardScene_NormalAtlas;; Offset:  176
;       uint PrePadding_LumenCardScene_180;           ; Offset:  180
;       uint BindlessResource_LumenCardScene_EmissiveAtlas;; Offset:  184
;       uint PrePadding_LumenCardScene_188;           ; Offset:  188
;       uint BindlessResource_LumenCardScene_DepthAtlas;; Offset:  192
;   
;   } UniformBufferConstants_LumenCardScene;          ; Offset:    0 Size:   196
;
; }
;
; Resource bind info for LumenCardScene_CardData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for LumenCardScene_MeshCardsData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GlobalDistanceFieldPageObjectGridBuffer
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_LumenCardScene   cbuffer      NA          NA     CB2            cb2     1
; D3DStaticPointClampedSampler      sampler      NA          NA      S0   s1,space1000     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S1   s4,space1000     1
; D3DStaticTrilinearClampedSampler   sampler      NA          NA      S2   s5,space1000     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldCoverageAtlasTexture   texture     f32          3d      T1             t1     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T2             t2     1
; View_GlobalDistanceFieldMipTexture   texture     f32          3d      T3             t3     1
; LumenCardScene_CardData           texture  struct         r/o      T4             t4     1
; LumenCardScene_MeshCardsData      texture  struct         r/o      T5             t5     1
; LumenCardScene_PageTableBuffer    texture    byte         r/o      T6             t6     1
; LumenCardScene_SceneInstanceIndexToMeshCardsIndexBuffer   texture    byte         r/o      T7             t7     1
; GlobalDistanceFieldPageObjectGridBuffer   texture  struct         r/o      T8             t8     1
; FinalLightingAtlas                texture     f32          2d      T9             t9     1
; DepthAtlas                        texture     f32          2d     T10            t10     1
; FurthestHZBTexture                texture     f32          2d     T11            t11     1
; RWVolumeTraceRadiance                 UAV     f32          3d      U0             u0     1
; RWVolumeTraceHitDistance              UAV     f32          3d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.RWTexture3D<vector<float, 3> >" = type { <3 x float> }
%"class.RWTexture3D<float>" = type { float }
%hostlayout._RootShaderParameters = type { float, float, float, float, i32, i32, float, float, <2 x i32>, i32, i32, i32, i32, i32, i32, i32, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], <2 x float>, <2 x float>, <2 x float>, i32, i32, i32, i32, <3 x float>, i32, <3 x i32>, i32, <3 x float>, [4 x <4 x float>], i32, float, <2 x float>, float, float, float, float }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_LumenCardScene = type { i32, i32, i32, i32, i32, i32, <2 x float>, <2 x float>, float, i32, float, float, float, float, <3 x float>, float, [2 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @TranslucencyVolumeTraceVoxelsCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 1000, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 1000, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 1000, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 196 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 880 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %25 = call i32 @dx.op.threadId.i32(i32 93, i32 1)  ; ThreadId(component)
  %26 = call i32 @dx.op.threadId.i32(i32 93, i32 2)  ; ThreadId(component)
  %27 = alloca [6 x i32], align 4
  %28 = alloca [4 x i32], align 4
  %29 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.i32 %29, 0
  %31 = udiv i32 %24, %30
  %32 = udiv i32 %25, %30
  %33 = mul i32 %30, %31
  %34 = mul i32 %30, %32
  %35 = sub i32 %24, %33
  %36 = sub i32 %25, %34
  %37 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %38 = extractvalue %dx.types.CBufRet.i32 %37, 0
  %39 = extractvalue %dx.types.CBufRet.i32 %37, 1
  %40 = extractvalue %dx.types.CBufRet.i32 %37, 2
  %41 = icmp ult i32 %31, %38
  %42 = icmp ult i32 %32, %39
  %43 = icmp ult i32 %26, %40
  %44 = and i1 %41, %42
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %1558

; <label>:46                                      ; preds = %0
  %47 = icmp ult i32 %35, %30
  %48 = icmp ult i32 %36, %30
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %1558

; <label>:50                                      ; preds = %46
  %51 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %52 = extractvalue %dx.types.CBufRet.f32 %51, 1
  %53 = uitofp i32 %31 to float
  %54 = uitofp i32 %32 to float
  %55 = fadd fast float %53, 5.000000e-01
  %56 = fadd fast float %54, 5.000000e-01
  %57 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %58 = extractvalue %dx.types.CBufRet.i32 %57, 3
  %59 = and i32 %58, 31
  %60 = shl i32 1, %59
  %61 = uitofp i32 %60 to float
  %62 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %63 = extractvalue %dx.types.CBufRet.f32 %62, 2
  %64 = extractvalue %dx.types.CBufRet.f32 %62, 3
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 2
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %68 = fmul fast float %63, %55
  %69 = fmul fast float %68, %66
  %70 = fmul fast float %69, %61
  %71 = fmul fast float %64, %56
  %72 = fmul fast float %71, %67
  %73 = fmul fast float %72, %61
  %74 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %75 = fadd fast float %74, 1.000000e+00
  %76 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %77 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %78 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %76, %dx.types.Handle %77, float %70, float %73, float undef, float undef, i32 0, i32 0, i32 undef, float %75)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %79 = extractvalue %dx.types.ResRet.f32 %78, 0
  %80 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.f32 %80, 0
  %82 = fmul fast float %81, %79
  %83 = extractvalue %dx.types.CBufRet.f32 %80, 1
  %84 = fadd fast float %82, %83
  %85 = extractvalue %dx.types.CBufRet.f32 %80, 2
  %86 = fmul fast float %85, %79
  %87 = extractvalue %dx.types.CBufRet.f32 %80, 3
  %88 = fsub fast float %86, %87
  %89 = fdiv fast float 1.000000e+00, %88
  %90 = fadd fast float %84, %89
  %91 = uitofp i32 %26 to float
  %92 = fadd fast float %91, -1.000000e+00
  %93 = call float @dx.op.binary.f32(i32 35, float %92, float 0.000000e+00)  ; FMax(a,b)
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %96 = fdiv fast float %93, %95
  %97 = call float @dx.op.unary.f32(i32 21, float %96)  ; Exp(value)
  %98 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %99 = fsub fast float %97, %98
  %100 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %101 = fdiv fast float %99, %100
  %102 = fcmp fast olt float %101, %90
  br i1 %102, label %103, label %1550

; <label>:103                                     ; preds = %50
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %107 = extractvalue %dx.types.CBufRet.f32 %104, 2
  %108 = fadd fast float %105, %53
  %109 = fadd fast float %106, %54
  %110 = uitofp i32 %38 to float
  %111 = uitofp i32 %39 to float
  %112 = fdiv fast float %108, %110
  %113 = fdiv fast float %109, %111
  %114 = fmul fast float %112, 2.000000e+00
  %115 = fmul fast float %113, 2.000000e+00
  %116 = fadd fast float %114, -1.000000e+00
  %117 = fadd fast float %115, -1.000000e+00
  %118 = fsub fast float -0.000000e+00, %117
  %119 = fadd fast float %107, %91
  %120 = fdiv fast float %119, %95
  %121 = call float @dx.op.unary.f32(i32 21, float %120)  ; Exp(value)
  %122 = fsub fast float %121, %98
  %123 = fdiv fast float %122, %100
  %124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %125 = extractvalue %dx.types.CBufRet.f32 %124, 3
  %126 = fcmp fast ult float %125, 1.000000e+00
  br i1 %126, label %133, label %127, !dx.controlflow.hints !36

; <label>:127                                     ; preds = %103
  %128 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.f32 %128, 2
  %130 = fmul fast float %129, %123
  %131 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %132 = fadd fast float %130, %131
  br label %137

; <label>:133                                     ; preds = %103
  %134 = fadd fast float %87, %123
  %135 = fmul fast float %134, %85
  %136 = fdiv fast float 1.000000e+00, %135
  br label %137

; <label>:137                                     ; preds = %133, %127
  %138 = phi float [ %132, %127 ], [ %136, %133 ]
  %139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %140 = extractvalue %dx.types.CBufRet.f32 %139, 0
  %141 = extractvalue %dx.types.CBufRet.f32 %139, 1
  %142 = extractvalue %dx.types.CBufRet.f32 %139, 2
  %143 = extractvalue %dx.types.CBufRet.f32 %139, 3
  %144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %145 = extractvalue %dx.types.CBufRet.f32 %144, 0
  %146 = extractvalue %dx.types.CBufRet.f32 %144, 1
  %147 = extractvalue %dx.types.CBufRet.f32 %144, 2
  %148 = extractvalue %dx.types.CBufRet.f32 %144, 3
  %149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %150 = extractvalue %dx.types.CBufRet.f32 %149, 0
  %151 = extractvalue %dx.types.CBufRet.f32 %149, 1
  %152 = extractvalue %dx.types.CBufRet.f32 %149, 2
  %153 = extractvalue %dx.types.CBufRet.f32 %149, 3
  %154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %155 = extractvalue %dx.types.CBufRet.f32 %154, 0
  %156 = extractvalue %dx.types.CBufRet.f32 %154, 1
  %157 = extractvalue %dx.types.CBufRet.f32 %154, 2
  %158 = extractvalue %dx.types.CBufRet.f32 %154, 3
  %159 = fmul fast float %140, %116
  %160 = call float @dx.op.tertiary.f32(i32 46, float %118, float %145, float %159)  ; FMad(a,b,c)
  %161 = call float @dx.op.tertiary.f32(i32 46, float %138, float %150, float %160)  ; FMad(a,b,c)
  %162 = fadd fast float %161, %155
  %163 = fmul fast float %141, %116
  %164 = call float @dx.op.tertiary.f32(i32 46, float %118, float %146, float %163)  ; FMad(a,b,c)
  %165 = call float @dx.op.tertiary.f32(i32 46, float %138, float %151, float %164)  ; FMad(a,b,c)
  %166 = fadd fast float %165, %156
  %167 = fmul fast float %142, %116
  %168 = call float @dx.op.tertiary.f32(i32 46, float %118, float %147, float %167)  ; FMad(a,b,c)
  %169 = call float @dx.op.tertiary.f32(i32 46, float %138, float %152, float %168)  ; FMad(a,b,c)
  %170 = fadd fast float %169, %157
  %171 = fmul fast float %143, %116
  %172 = call float @dx.op.tertiary.f32(i32 46, float %118, float %148, float %171)  ; FMad(a,b,c)
  %173 = call float @dx.op.tertiary.f32(i32 46, float %138, float %153, float %172)  ; FMad(a,b,c)
  %174 = fadd fast float %173, %158
  %175 = fdiv fast float %162, %174
  %176 = fdiv fast float %166, %174
  %177 = fdiv fast float %170, %174
  %178 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %179 = extractvalue %dx.types.CBufRet.f32 %178, 0
  %180 = extractvalue %dx.types.CBufRet.f32 %178, 1
  %181 = extractvalue %dx.types.CBufRet.f32 %178, 2
  %182 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %183 = extractvalue %dx.types.CBufRet.f32 %182, 0
  %184 = extractvalue %dx.types.CBufRet.f32 %182, 1
  %185 = extractvalue %dx.types.CBufRet.f32 %182, 2
  %186 = fmul fast float %179, 2.097152e+06
  %187 = fmul fast float %180, 2.097152e+06
  %188 = fmul fast float %181, 2.097152e+06
  br i1 %126, label %195, label %189, !dx.controlflow.hints !36

; <label>:189                                     ; preds = %137
  %190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %191 = extractvalue %dx.types.CBufRet.f32 %190, 2
  %192 = fmul fast float %191, %123
  %193 = extractvalue %dx.types.CBufRet.f32 %124, 2
  %194 = fadd fast float %192, %193
  br label %199

; <label>:195                                     ; preds = %137
  %196 = fadd fast float %87, %123
  %197 = fmul fast float %196, %85
  %198 = fdiv fast float 1.000000e+00, %197
  br label %199

; <label>:199                                     ; preds = %195, %189
  %200 = phi float [ %194, %189 ], [ %198, %195 ]
  %201 = call float @dx.op.tertiary.f32(i32 46, float %200, float %150, float %160)  ; FMad(a,b,c)
  %202 = fadd fast float %201, %155
  %203 = call float @dx.op.tertiary.f32(i32 46, float %200, float %151, float %164)  ; FMad(a,b,c)
  %204 = fadd fast float %203, %156
  %205 = call float @dx.op.tertiary.f32(i32 46, float %200, float %152, float %168)  ; FMad(a,b,c)
  %206 = fadd fast float %205, %157
  %207 = call float @dx.op.tertiary.f32(i32 46, float %200, float %153, float %172)  ; FMad(a,b,c)
  %208 = fadd fast float %207, %158
  %209 = fdiv fast float %202, %208
  %210 = fdiv fast float %204, %208
  %211 = fdiv fast float %206, %208
  %212 = extractvalue %dx.types.CBufRet.i32 %37, 3
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %217, label %214

; <label>:214                                     ; preds = %199
  %215 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %216 = extractvalue %dx.types.CBufRet.i32 %215, 1
  br label %217

; <label>:217                                     ; preds = %214, %199
  %218 = phi i32 [ %216, %214 ], [ 0, %199 ]
  %219 = mul i32 %31, 1664525
  %220 = mul i32 %32, 1664525
  %221 = mul i32 %26, 1664525
  %222 = mul i32 %218, 1664525
  %223 = add i32 %219, 1013904223
  %224 = add i32 %220, 1013904223
  %225 = add i32 %221, 1013904223
  %226 = add i32 %222, 1013904223
  %227 = mul i32 %226, %224
  %228 = add i32 %223, %227
  %229 = mul i32 %228, %225
  %230 = add i32 %229, %224
  %231 = mul i32 %230, %228
  %232 = add i32 %231, %225
  %233 = mul i32 %232, %230
  %234 = add i32 %233, %226
  %235 = lshr i32 %228, 16
  %236 = lshr i32 %230, 16
  %237 = lshr i32 %232, 16
  %238 = lshr i32 %234, 16
  %239 = xor i32 %235, %228
  %240 = xor i32 %236, %230
  %241 = xor i32 %237, %232
  %242 = xor i32 %238, %234
  %243 = mul i32 %242, %240
  %244 = add i32 %243, %239
  %245 = mul i32 %244, %241
  %246 = add i32 %245, %240
  %247 = uitofp i32 %244 to float
  %248 = uitofp i32 %246 to float
  %249 = fmul fast float %247, 0x3DF0000000000000
  %250 = fmul fast float %248, 0x3DF0000000000000
  %251 = uitofp i32 %35 to float
  %252 = uitofp i32 %36 to float
  %253 = fadd fast float %249, %251
  %254 = fadd fast float %250, %252
  %255 = uitofp i32 %30 to float
  %256 = fdiv fast float %253, %255
  %257 = fdiv fast float %254, %255
  %258 = fmul fast float %256, 2.000000e+00
  %259 = fmul fast float %257, 2.000000e+00
  %260 = fadd fast float %258, -1.000000e+00
  %261 = fadd fast float %259, -1.000000e+00
  %262 = call float @dx.op.unary.f32(i32 6, float %260)  ; FAbs(value)
  %263 = call float @dx.op.unary.f32(i32 6, float %261)  ; FAbs(value)
  %264 = fsub fast float 1.000000e+00, %262
  %265 = fsub fast float %264, %263
  %266 = call float @dx.op.unary.f32(i32 6, float %265)  ; FAbs(value)
  %267 = fsub fast float 1.000000e+00, %266
  %268 = fcmp fast oeq float %267, 0.000000e+00
  br i1 %268, label %274, label %269

; <label>:269                                     ; preds = %217
  %270 = fsub fast float %263, %262
  %271 = fdiv fast float %270, %267
  %272 = fadd fast float %271, 1.000000e+00
  %273 = fmul fast float %272, 0x3FE921FB60000000
  br label %274

; <label>:274                                     ; preds = %269, %217
  %275 = phi float [ %273, %269 ], [ 0.000000e+00, %217 ]
  %276 = fmul fast float %267, %267
  %277 = fsub fast float 2.000000e+00, %276
  %278 = call float @dx.op.unary.f32(i32 24, float %277)  ; Sqrt(value)
  %279 = fmul fast float %278, %267
  %280 = fcmp fast ogt float %260, 0.000000e+00
  %281 = fcmp fast olt float %260, 0.000000e+00
  %282 = zext i1 %280 to i32
  %283 = zext i1 %281 to i32
  %284 = sub nsw i32 %282, %283
  %285 = sitofp i32 %284 to float
  %286 = fmul fast float %279, %285
  %287 = call float @dx.op.unary.f32(i32 12, float %275)  ; Cos(value)
  %288 = call float @dx.op.unary.f32(i32 6, float %287)  ; FAbs(value)
  %289 = fmul fast float %286, %288
  %290 = fcmp fast ogt float %261, 0.000000e+00
  %291 = fcmp fast olt float %261, 0.000000e+00
  %292 = zext i1 %290 to i32
  %293 = zext i1 %291 to i32
  %294 = sub nsw i32 %292, %293
  %295 = sitofp i32 %294 to float
  %296 = fmul fast float %279, %295
  %297 = call float @dx.op.unary.f32(i32 13, float %275)  ; Sin(value)
  %298 = call float @dx.op.unary.f32(i32 6, float %297)  ; FAbs(value)
  %299 = fmul fast float %296, %298
  %300 = fcmp fast ogt float %265, 0.000000e+00
  %301 = fcmp fast olt float %265, 0.000000e+00
  %302 = zext i1 %300 to i32
  %303 = zext i1 %301 to i32
  %304 = sub nsw i32 %302, %303
  %305 = sitofp i32 %304 to float
  %306 = fsub fast float 1.000000e+00, %276
  %307 = fmul fast float %305, %306
  %308 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %309 = extractvalue %dx.types.CBufRet.i32 %308, 2
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %354, label %311

; <label>:311                                     ; preds = %274
  br label %312

; <label>:312                                     ; preds = %347, %311
  %313 = phi i32 [ %348, %347 ], [ 0, %311 ]
  %314 = add i32 %313, 199
  %315 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %314)  ; CBufferLoadLegacy(handle,regIndex)
  %316 = extractvalue %dx.types.CBufRet.f32 %315, 3
  %317 = extractvalue %dx.types.CBufRet.f32 %315, 0
  %318 = extractvalue %dx.types.CBufRet.f32 %315, 1
  %319 = extractvalue %dx.types.CBufRet.f32 %315, 2
  %320 = fadd fast float %316, %209
  %321 = fsub fast float %320, %317
  %322 = fadd fast float %316, %210
  %323 = fsub fast float %322, %318
  %324 = fadd fast float %316, %211
  %325 = fsub fast float %324, %319
  %326 = call float @dx.op.binary.f32(i32 35, float %321, float 0.000000e+00)  ; FMax(a,b)
  %327 = call float @dx.op.binary.f32(i32 35, float %323, float 0.000000e+00)  ; FMax(a,b)
  %328 = call float @dx.op.binary.f32(i32 35, float %325, float 0.000000e+00)  ; FMax(a,b)
  %329 = fsub fast float %316, %209
  %330 = fadd fast float %329, %317
  %331 = fsub fast float %316, %210
  %332 = fadd fast float %331, %318
  %333 = fsub fast float %316, %211
  %334 = fadd fast float %333, %319
  %335 = call float @dx.op.binary.f32(i32 35, float %330, float 0.000000e+00)  ; FMax(a,b)
  %336 = call float @dx.op.binary.f32(i32 35, float %332, float 0.000000e+00)  ; FMax(a,b)
  %337 = call float @dx.op.binary.f32(i32 35, float %334, float 0.000000e+00)  ; FMax(a,b)
  %338 = call float @dx.op.binary.f32(i32 36, float %326, float %335)  ; FMin(a,b)
  %339 = call float @dx.op.binary.f32(i32 36, float %327, float %336)  ; FMin(a,b)
  %340 = call float @dx.op.binary.f32(i32 36, float %328, float %337)  ; FMin(a,b)
  %341 = call float @dx.op.binary.f32(i32 36, float %339, float %340)  ; FMin(a,b)
  %342 = call float @dx.op.binary.f32(i32 36, float %338, float %341)  ; FMin(a,b)
  %343 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %344 = extractvalue %dx.types.CBufRet.f32 %343, 0
  %345 = fmul fast float %344, %316
  %346 = fcmp fast ogt float %342, %345
  br i1 %346, label %352, label %347

; <label>:347                                     ; preds = %312
  %348 = add i32 %313, 1
  %349 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %350 = extractvalue %dx.types.CBufRet.i32 %349, 2
  %351 = icmp ult i32 %348, %350
  br i1 %351, label %312, label %352

; <label>:352                                     ; preds = %347, %312
  %353 = phi i32 [ %313, %312 ], [ 0, %347 ]
  br label %354

; <label>:354                                     ; preds = %352, %274
  %355 = phi i32 [ 0, %274 ], [ %353, %352 ]
  %356 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %357 = extractvalue %dx.types.CBufRet.i32 %356, 2
  %358 = icmp ult i32 %355, %357
  br i1 %358, label %359, label %615

; <label>:359                                     ; preds = %354
  br label %360

; <label>:360                                     ; preds = %604, %359
  %361 = phi float [ %607, %604 ], [ -1.000000e+00, %359 ]
  %362 = phi i32 [ %606, %604 ], [ 0, %359 ]
  %363 = phi i32 [ %608, %604 ], [ %355, %359 ]
  %364 = phi float [ %605, %604 ], [ 0.000000e+00, %359 ]
  %365 = add i32 %363, 199
  %366 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %365)  ; CBufferLoadLegacy(handle,regIndex)
  %367 = extractvalue %dx.types.CBufRet.f32 %366, 3
  %368 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %369 = extractvalue %dx.types.CBufRet.f32 %368, 0
  %370 = fmul fast float %369, %367
  %371 = extractvalue %dx.types.CBufRet.f32 %366, 0
  %372 = extractvalue %dx.types.CBufRet.f32 %366, 1
  %373 = extractvalue %dx.types.CBufRet.f32 %366, 2
  %374 = fsub fast float %367, %370
  %375 = fmul fast float %52, %289
  %376 = fmul fast float %52, %299
  %377 = fmul fast float %52, %307
  %378 = fdiv fast float 1.000000e+00, %375
  %379 = fdiv fast float 1.000000e+00, %376
  %380 = fdiv fast float 1.000000e+00, %377
  %381 = fsub fast float %371, %209
  %382 = fsub fast float %381, %374
  %383 = fsub fast float %372, %210
  %384 = fsub fast float %383, %374
  %385 = fsub fast float %373, %211
  %386 = fsub fast float %385, %374
  %387 = fmul fast float %382, %378
  %388 = fmul fast float %384, %379
  %389 = fmul fast float %386, %380
  %390 = fadd fast float %381, %374
  %391 = fadd fast float %383, %374
  %392 = fadd fast float %385, %374
  %393 = fmul fast float %390, %378
  %394 = fmul fast float %391, %379
  %395 = fmul fast float %392, %380
  %396 = call float @dx.op.binary.f32(i32 36, float %387, float %393)  ; FMin(a,b)
  %397 = call float @dx.op.binary.f32(i32 36, float %388, float %394)  ; FMin(a,b)
  %398 = call float @dx.op.binary.f32(i32 36, float %389, float %395)  ; FMin(a,b)
  %399 = call float @dx.op.binary.f32(i32 35, float %387, float %393)  ; FMax(a,b)
  %400 = call float @dx.op.binary.f32(i32 35, float %388, float %394)  ; FMax(a,b)
  %401 = call float @dx.op.binary.f32(i32 35, float %389, float %395)  ; FMax(a,b)
  %402 = call float @dx.op.binary.f32(i32 35, float %397, float %398)  ; FMax(a,b)
  %403 = call float @dx.op.binary.f32(i32 35, float %396, float %402)  ; FMax(a,b)
  %404 = call float @dx.op.binary.f32(i32 36, float %400, float %401)  ; FMin(a,b)
  %405 = call float @dx.op.binary.f32(i32 36, float %399, float %404)  ; FMin(a,b)
  %406 = call float @dx.op.unary.f32(i32 7, float %403)  ; Saturate(value)
  %407 = call float @dx.op.unary.f32(i32 7, float %405)  ; Saturate(value)
  %408 = fmul fast float %406, %52
  %409 = fmul fast float %407, %52
  %410 = call float @dx.op.binary.f32(i32 35, float %408, float %364)  ; FMax(a,b)
  %411 = call float @dx.op.binary.f32(i32 35, float %410, float 0.000000e+00)  ; FMax(a,b)
  %412 = fcmp fast olt float %411, %409
  br i1 %412, label %413, label %604

; <label>:413                                     ; preds = %360
  %414 = fmul fast float %367, 8.000000e+00
  %415 = fmul fast float %414, %369
  br label %416

; <label>:416                                     ; preds = %600, %413
  %417 = phi float [ %411, %413 ], [ %596, %600 ]
  %418 = phi i32 [ 0, %413 ], [ %601, %600 ]
  %419 = fmul fast float %417, %289
  %420 = fmul fast float %417, %299
  %421 = fmul fast float %417, %307
  %422 = fadd fast float %419, %209
  %423 = fadd fast float %420, %210
  %424 = fadd fast float %421, %211
  %425 = add i32 %363, 205
  %426 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %425)  ; CBufferLoadLegacy(handle,regIndex)
  %427 = extractvalue %dx.types.CBufRet.f32 %426, 0
  %428 = extractvalue %dx.types.CBufRet.f32 %426, 1
  %429 = extractvalue %dx.types.CBufRet.f32 %426, 2
  %430 = extractvalue %dx.types.CBufRet.f32 %426, 3
  %431 = fmul fast float %430, %422
  %432 = fmul fast float %430, %423
  %433 = fmul fast float %430, %424
  %434 = fadd fast float %431, %427
  %435 = fadd fast float %432, %428
  %436 = fadd fast float %433, %429
  %437 = call float @dx.op.unary.f32(i32 22, float %434)  ; Frc(value)
  %438 = call float @dx.op.unary.f32(i32 22, float %435)  ; Frc(value)
  %439 = call float @dx.op.unary.f32(i32 22, float %436)  ; Frc(value)
  %440 = call float @dx.op.unary.f32(i32 22, float %437)  ; Frc(value)
  %441 = call float @dx.op.unary.f32(i32 22, float %438)  ; Frc(value)
  %442 = call float @dx.op.unary.f32(i32 22, float %439)  ; Frc(value)
  %443 = add i32 %363, 211
  %444 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %443)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.f32 %444, 0
  %446 = extractvalue %dx.types.CBufRet.f32 %444, 1
  %447 = extractvalue %dx.types.CBufRet.f32 %444, 2
  %448 = fmul fast float %445, %422
  %449 = fmul fast float %446, %423
  %450 = fmul fast float %447, %424
  %451 = add i32 %363, 217
  %452 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %451)  ; CBufferLoadLegacy(handle,regIndex)
  %453 = extractvalue %dx.types.CBufRet.f32 %452, 0
  %454 = extractvalue %dx.types.CBufRet.f32 %452, 1
  %455 = extractvalue %dx.types.CBufRet.f32 %452, 2
  %456 = fadd fast float %448, %453
  %457 = fadd fast float %449, %454
  %458 = fadd fast float %450, %455
  %459 = call float @dx.op.unary.f32(i32 7, float %456)  ; Saturate(value)
  %460 = call float @dx.op.unary.f32(i32 7, float %457)  ; Saturate(value)
  %461 = call float @dx.op.unary.f32(i32 7, float %458)  ; Saturate(value)
  %462 = extractvalue %dx.types.CBufRet.f32 %444, 3
  %463 = extractvalue %dx.types.CBufRet.f32 %452, 3
  %464 = call float @dx.op.binary.f32(i32 35, float %461, float %462)  ; FMax(a,b)
  %465 = call float @dx.op.binary.f32(i32 36, float %464, float %463)  ; FMin(a,b)
  %466 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %467 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %468 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %466, %dx.types.Handle %467, float %459, float %460, float %465, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %469 = extractvalue %dx.types.ResRet.f32 %468, 0
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = fmul fast float %471, %415
  %473 = fmul fast float %469, 2.000000e+00
  %474 = fadd fast float %473, -1.000000e+00
  %475 = fmul fast float %472, %474
  %476 = call float @dx.op.unary.f32(i32 7, float %440)  ; Saturate(value)
  %477 = call float @dx.op.unary.f32(i32 7, float %441)  ; Saturate(value)
  %478 = call float @dx.op.unary.f32(i32 7, float %442)  ; Saturate(value)
  %479 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %480 = extractvalue %dx.types.CBufRet.i32 %479, 2
  %481 = sitofp i32 %480 to float
  %482 = fmul fast float %481, %476
  %483 = fmul fast float %481, %477
  %484 = fmul fast float %481, %478
  %485 = mul i32 %480, %363
  %486 = sitofp i32 %485 to float
  %487 = fadd fast float %486, %484
  %488 = fptosi float %482 to i32
  %489 = fptosi float %483 to i32
  %490 = fptosi float %487 to i32
  %491 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %492 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %491, i32 0, i32 %488, i32 %489, i32 %490, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %493 = extractvalue %dx.types.ResRet.i32 %492, 0
  %494 = icmp ne i32 %493, -1
  %495 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %496 = fcmp fast olt float %469, %495
  %497 = and i1 %494, %496
  br i1 %497, label %498, label %569

; <label>:498                                     ; preds = %416
  %499 = icmp slt i32 %493, 0
  %500 = and i32 %493, 127
  %501 = lshr i32 %493, 7
  %502 = and i32 %501, 127
  %503 = lshr i32 %493, 14
  %504 = and i32 %503, 1023
  %505 = fmul fast float %481, %440
  %506 = fmul fast float %481, %441
  %507 = fmul fast float %481, %442
  %508 = call float @dx.op.unary.f32(i32 22, float %505)  ; Frc(value)
  %509 = call float @dx.op.unary.f32(i32 22, float %506)  ; Frc(value)
  %510 = call float @dx.op.unary.f32(i32 22, float %507)  ; Frc(value)
  %511 = shl nuw nsw i32 %500, 3
  %512 = shl nuw nsw i32 %502, 3
  %513 = shl nuw nsw i32 %504, 3
  %514 = uitofp i32 %511 to float
  %515 = uitofp i32 %512 to float
  %516 = uitofp i32 %513 to float
  %517 = fmul fast float %508, 7.000000e+00
  %518 = fmul fast float %509, 7.000000e+00
  %519 = fmul fast float %510, 7.000000e+00
  %520 = fadd fast float %514, 5.000000e-01
  %521 = fadd fast float %520, %517
  %522 = fadd fast float %515, 5.000000e-01
  %523 = fadd fast float %522, %518
  %524 = fadd fast float %516, 5.000000e-01
  %525 = fadd fast float %524, %519
  %526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %527 = extractvalue %dx.types.CBufRet.f32 %526, 0
  %528 = extractvalue %dx.types.CBufRet.f32 %526, 1
  %529 = extractvalue %dx.types.CBufRet.f32 %526, 2
  %530 = fmul fast float %527, %521
  %531 = fmul fast float %523, %528
  %532 = fmul fast float %525, %529
  br i1 %499, label %533, label %560

; <label>:533                                     ; preds = %498
  %534 = shl nuw nsw i32 %500, 2
  %535 = shl nuw nsw i32 %502, 2
  %536 = shl nuw nsw i32 %504, 2
  %537 = uitofp i32 %534 to float
  %538 = uitofp i32 %535 to float
  %539 = uitofp i32 %536 to float
  %540 = fmul fast float %508, 3.000000e+00
  %541 = fmul fast float %509, 3.000000e+00
  %542 = fmul fast float %510, 3.000000e+00
  %543 = fadd fast float %537, 5.000000e-01
  %544 = fadd fast float %543, %540
  %545 = fadd fast float %538, 5.000000e-01
  %546 = fadd fast float %545, %541
  %547 = fadd fast float %539, 5.000000e-01
  %548 = fadd fast float %547, %542
  %549 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 225)  ; CBufferLoadLegacy(handle,regIndex)
  %550 = extractvalue %dx.types.CBufRet.f32 %549, 0
  %551 = extractvalue %dx.types.CBufRet.f32 %549, 1
  %552 = extractvalue %dx.types.CBufRet.f32 %549, 2
  %553 = fmul fast float %550, %544
  %554 = fmul fast float %551, %546
  %555 = fmul fast float %548, %552
  %556 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %557 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %558 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %556, %dx.types.Handle %557, float %553, float %554, float %555, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %559 = extractvalue %dx.types.ResRet.f32 %558, 0
  br label %560

; <label>:560                                     ; preds = %533, %498
  %561 = phi float [ %559, %533 ], [ 1.000000e+00, %498 ]
  %562 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %563 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %564 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %562, %dx.types.Handle %563, float %530, float %531, float %532, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %565 = extractvalue %dx.types.ResRet.f32 %564, 0
  %566 = fmul fast float %565, 2.000000e+00
  %567 = fadd fast float %566, -1.000000e+00
  %568 = fmul fast float %567, %415
  br label %569

; <label>:569                                     ; preds = %560, %416
  %570 = phi float [ %568, %560 ], [ %475, %416 ]
  %571 = phi float [ %561, %560 ], [ 1.000000e+00, %416 ]
  %572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %573 = extractvalue %dx.types.CBufRet.f32 %572, 3
  %574 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 227)  ; CBufferLoadLegacy(handle,regIndex)
  %575 = extractvalue %dx.types.CBufRet.f32 %574, 0
  %576 = fsub fast float %573, %575
  %577 = fmul fast float %576, %571
  %578 = fadd fast float %577, %575
  %579 = fmul fast float %370, 2.000000e+00
  %580 = fdiv fast float %417, %579
  %581 = call float @dx.op.unary.f32(i32 7, float %580)  ; Saturate(value)
  %582 = fmul fast float %581, %370
  %583 = fmul fast float %582, %578
  %584 = fcmp fast olt float %570, %583
  br i1 %584, label %585, label %589

; <label>:585                                     ; preds = %569
  %586 = fadd fast float %570, %417
  %587 = fsub fast float %586, %583
  %588 = call float @dx.op.binary.f32(i32 35, float %587, float 0.000000e+00)  ; FMax(a,b)
  br label %604

; <label>:589                                     ; preds = %569
  %590 = extractvalue %dx.types.CBufRet.f32 %574, 1
  %591 = fsub fast float 1.000000e+00, %590
  %592 = fmul fast float %591, %571
  %593 = fadd fast float %592, %590
  %594 = fmul fast float %593, %370
  %595 = call float @dx.op.binary.f32(i32 35, float %570, float %594)  ; FMax(a,b)
  %596 = fadd fast float %595, %417
  %597 = fcmp fast ogt float %596, %409
  %598 = fcmp fast oge float %361, 0.000000e+00
  %599 = or i1 %598, %597
  br i1 %599, label %603, label %600

; <label>:600                                     ; preds = %589
  %601 = add nuw nsw i32 %418, 1
  %602 = icmp ult i32 %601, 256
  br i1 %602, label %416, label %603, !llvm.loop !37

; <label>:603                                     ; preds = %600, %589
  br label %604

; <label>:604                                     ; preds = %603, %585, %360
  %605 = phi float [ %364, %360 ], [ %409, %585 ], [ %409, %603 ]
  %606 = phi i32 [ %362, %360 ], [ %363, %585 ], [ %362, %603 ]
  %607 = phi float [ %361, %360 ], [ %588, %585 ], [ %361, %603 ]
  %608 = add i32 %363, 1
  %609 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %610 = extractvalue %dx.types.CBufRet.i32 %609, 2
  %611 = icmp ult i32 %608, %610
  %612 = fcmp fast olt float %607, 0.000000e+00
  %613 = and i1 %612, %611
  br i1 %613, label %360, label %614, !llvm.loop !39

; <label>:614                                     ; preds = %604
  br label %615

; <label>:615                                     ; preds = %614, %354
  %616 = phi float [ -1.000000e+00, %354 ], [ %607, %614 ]
  %617 = phi i32 [ 0, %354 ], [ %606, %614 ]
  %618 = fcmp fast ult float %616, 0.000000e+00
  br i1 %618, label %1531, label %619

; <label>:619                                     ; preds = %615
  %620 = fmul fast float %616, %289
  %621 = fmul fast float %616, %299
  %622 = fmul fast float %616, %307
  %623 = fadd fast float %620, %209
  %624 = fadd fast float %621, %210
  %625 = fadd fast float %622, %211
  %626 = fsub fast float -0.000000e+00, %289
  %627 = fsub fast float -0.000000e+00, %299
  %628 = fsub fast float -0.000000e+00, %307
  %629 = add i32 %617, 205
  %630 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %629)  ; CBufferLoadLegacy(handle,regIndex)
  %631 = extractvalue %dx.types.CBufRet.f32 %630, 0
  %632 = extractvalue %dx.types.CBufRet.f32 %630, 1
  %633 = extractvalue %dx.types.CBufRet.f32 %630, 2
  %634 = extractvalue %dx.types.CBufRet.f32 %630, 3
  %635 = fmul fast float %634, %623
  %636 = fmul fast float %634, %624
  %637 = fmul fast float %634, %625
  %638 = fadd fast float %635, %631
  %639 = fadd fast float %636, %632
  %640 = fadd fast float %637, %633
  %641 = call float @dx.op.unary.f32(i32 22, float %638)  ; Frc(value)
  %642 = call float @dx.op.unary.f32(i32 22, float %639)  ; Frc(value)
  %643 = call float @dx.op.unary.f32(i32 22, float %640)  ; Frc(value)
  %644 = call float @dx.op.unary.f32(i32 22, float %641)  ; Frc(value)
  %645 = call float @dx.op.unary.f32(i32 22, float %642)  ; Frc(value)
  %646 = call float @dx.op.unary.f32(i32 22, float %643)  ; Frc(value)
  %647 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %648 = extractvalue %dx.types.CBufRet.f32 %647, 0
  %649 = fmul fast float %648, 5.000000e-01
  %650 = fadd fast float %649, %644
  %651 = call float @dx.op.unary.f32(i32 22, float %650)  ; Frc(value)
  %652 = call float @dx.op.unary.f32(i32 22, float %645)  ; Frc(value)
  %653 = call float @dx.op.unary.f32(i32 22, float %646)  ; Frc(value)
  %654 = call float @dx.op.unary.f32(i32 7, float %651)  ; Saturate(value)
  %655 = call float @dx.op.unary.f32(i32 7, float %652)  ; Saturate(value)
  %656 = call float @dx.op.unary.f32(i32 7, float %653)  ; Saturate(value)
  %657 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %22, i32 223)  ; CBufferLoadLegacy(handle,regIndex)
  %658 = extractvalue %dx.types.CBufRet.i32 %657, 2
  %659 = sitofp i32 %658 to float
  %660 = fmul fast float %659, %654
  %661 = fmul fast float %659, %655
  %662 = fmul fast float %659, %656
  %663 = mul i32 %658, %617
  %664 = sitofp i32 %663 to float
  %665 = fadd fast float %664, %662
  %666 = fptosi float %660 to i32
  %667 = fptosi float %661 to i32
  %668 = fptosi float %665 to i32
  %669 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %670 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %666, i32 %667, i32 %668, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %671 = extractvalue %dx.types.ResRet.i32 %670, 0
  %672 = icmp eq i32 %671, -1
  br i1 %672, label %709, label %673

; <label>:673                                     ; preds = %619
  %674 = fmul fast float %659, %651
  %675 = fmul fast float %659, %652
  %676 = fmul fast float %659, %653
  %677 = call float @dx.op.unary.f32(i32 22, float %674)  ; Frc(value)
  %678 = call float @dx.op.unary.f32(i32 22, float %675)  ; Frc(value)
  %679 = call float @dx.op.unary.f32(i32 22, float %676)  ; Frc(value)
  %680 = shl i32 %671, 3
  %681 = and i32 %680, 1016
  %682 = lshr i32 %671, 4
  %683 = and i32 %682, 1016
  %684 = lshr i32 %671, 11
  %685 = and i32 %684, 8184
  %686 = uitofp i32 %681 to float
  %687 = uitofp i32 %683 to float
  %688 = uitofp i32 %685 to float
  %689 = fmul fast float %677, 7.000000e+00
  %690 = fmul fast float %678, 7.000000e+00
  %691 = fmul fast float %679, 7.000000e+00
  %692 = fadd fast float %686, 5.000000e-01
  %693 = fadd fast float %692, %689
  %694 = fadd fast float %687, 5.000000e-01
  %695 = fadd fast float %694, %690
  %696 = fadd fast float %688, 5.000000e-01
  %697 = fadd fast float %696, %691
  %698 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %699 = extractvalue %dx.types.CBufRet.f32 %698, 0
  %700 = extractvalue %dx.types.CBufRet.f32 %698, 1
  %701 = extractvalue %dx.types.CBufRet.f32 %698, 2
  %702 = fmul fast float %699, %693
  %703 = fmul fast float %695, %700
  %704 = fmul fast float %697, %701
  %705 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %706 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %707 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %705, %dx.types.Handle %706, float %702, float %703, float %704, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %708 = extractvalue %dx.types.ResRet.f32 %707, 0
  br label %709

; <label>:709                                     ; preds = %673, %619
  %710 = phi float [ %708, %673 ], [ 1.000000e+00, %619 ]
  %711 = fsub fast float %644, %649
  %712 = call float @dx.op.unary.f32(i32 22, float %711)  ; Frc(value)
  %713 = call float @dx.op.unary.f32(i32 7, float %712)  ; Saturate(value)
  %714 = fmul fast float %659, %713
  %715 = fptosi float %714 to i32
  %716 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %715, i32 %667, i32 %668, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %717 = extractvalue %dx.types.ResRet.i32 %716, 0
  %718 = icmp eq i32 %717, -1
  br i1 %718, label %755, label %719

; <label>:719                                     ; preds = %709
  %720 = fmul fast float %659, %712
  %721 = fmul fast float %659, %652
  %722 = fmul fast float %659, %653
  %723 = call float @dx.op.unary.f32(i32 22, float %720)  ; Frc(value)
  %724 = call float @dx.op.unary.f32(i32 22, float %721)  ; Frc(value)
  %725 = call float @dx.op.unary.f32(i32 22, float %722)  ; Frc(value)
  %726 = shl i32 %717, 3
  %727 = and i32 %726, 1016
  %728 = lshr i32 %717, 4
  %729 = and i32 %728, 1016
  %730 = lshr i32 %717, 11
  %731 = and i32 %730, 8184
  %732 = uitofp i32 %727 to float
  %733 = uitofp i32 %729 to float
  %734 = uitofp i32 %731 to float
  %735 = fmul fast float %723, 7.000000e+00
  %736 = fmul fast float %724, 7.000000e+00
  %737 = fmul fast float %725, 7.000000e+00
  %738 = fadd fast float %732, 5.000000e-01
  %739 = fadd fast float %738, %735
  %740 = fadd fast float %733, 5.000000e-01
  %741 = fadd fast float %740, %736
  %742 = fadd fast float %734, 5.000000e-01
  %743 = fadd fast float %742, %737
  %744 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %745 = extractvalue %dx.types.CBufRet.f32 %744, 0
  %746 = extractvalue %dx.types.CBufRet.f32 %744, 1
  %747 = extractvalue %dx.types.CBufRet.f32 %744, 2
  %748 = fmul fast float %745, %739
  %749 = fmul fast float %741, %746
  %750 = fmul fast float %743, %747
  %751 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %752 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %753 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %751, %dx.types.Handle %752, float %748, float %749, float %750, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %754 = extractvalue %dx.types.ResRet.f32 %753, 0
  br label %755

; <label>:755                                     ; preds = %719, %709
  %756 = phi float [ %754, %719 ], [ 1.000000e+00, %709 ]
  %757 = fadd fast float %649, %645
  %758 = call float @dx.op.unary.f32(i32 22, float %644)  ; Frc(value)
  %759 = call float @dx.op.unary.f32(i32 22, float %757)  ; Frc(value)
  %760 = call float @dx.op.unary.f32(i32 7, float %758)  ; Saturate(value)
  %761 = call float @dx.op.unary.f32(i32 7, float %759)  ; Saturate(value)
  %762 = fmul fast float %659, %760
  %763 = fmul fast float %659, %761
  %764 = fptosi float %762 to i32
  %765 = fptosi float %763 to i32
  %766 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %764, i32 %765, i32 %668, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %767 = extractvalue %dx.types.ResRet.i32 %766, 0
  %768 = icmp eq i32 %767, -1
  br i1 %768, label %805, label %769

; <label>:769                                     ; preds = %755
  %770 = fmul fast float %659, %758
  %771 = fmul fast float %659, %759
  %772 = fmul fast float %659, %653
  %773 = call float @dx.op.unary.f32(i32 22, float %770)  ; Frc(value)
  %774 = call float @dx.op.unary.f32(i32 22, float %771)  ; Frc(value)
  %775 = call float @dx.op.unary.f32(i32 22, float %772)  ; Frc(value)
  %776 = shl i32 %767, 3
  %777 = and i32 %776, 1016
  %778 = lshr i32 %767, 4
  %779 = and i32 %778, 1016
  %780 = lshr i32 %767, 11
  %781 = and i32 %780, 8184
  %782 = uitofp i32 %777 to float
  %783 = uitofp i32 %779 to float
  %784 = uitofp i32 %781 to float
  %785 = fmul fast float %773, 7.000000e+00
  %786 = fmul fast float %774, 7.000000e+00
  %787 = fmul fast float %775, 7.000000e+00
  %788 = fadd fast float %782, 5.000000e-01
  %789 = fadd fast float %788, %785
  %790 = fadd fast float %783, 5.000000e-01
  %791 = fadd fast float %790, %786
  %792 = fadd fast float %784, 5.000000e-01
  %793 = fadd fast float %792, %787
  %794 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %795 = extractvalue %dx.types.CBufRet.f32 %794, 0
  %796 = extractvalue %dx.types.CBufRet.f32 %794, 1
  %797 = extractvalue %dx.types.CBufRet.f32 %794, 2
  %798 = fmul fast float %795, %789
  %799 = fmul fast float %791, %796
  %800 = fmul fast float %793, %797
  %801 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %802 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %803 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %801, %dx.types.Handle %802, float %798, float %799, float %800, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %804 = extractvalue %dx.types.ResRet.f32 %803, 0
  br label %805

; <label>:805                                     ; preds = %769, %755
  %806 = phi float [ %804, %769 ], [ 1.000000e+00, %755 ]
  %807 = fsub fast float %645, %649
  %808 = call float @dx.op.unary.f32(i32 22, float %807)  ; Frc(value)
  %809 = call float @dx.op.unary.f32(i32 7, float %808)  ; Saturate(value)
  %810 = fmul fast float %659, %809
  %811 = fptosi float %810 to i32
  %812 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %764, i32 %811, i32 %668, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %813 = extractvalue %dx.types.ResRet.i32 %812, 0
  %814 = icmp eq i32 %813, -1
  br i1 %814, label %851, label %815

; <label>:815                                     ; preds = %805
  %816 = fmul fast float %659, %758
  %817 = fmul fast float %659, %808
  %818 = fmul fast float %659, %653
  %819 = call float @dx.op.unary.f32(i32 22, float %816)  ; Frc(value)
  %820 = call float @dx.op.unary.f32(i32 22, float %817)  ; Frc(value)
  %821 = call float @dx.op.unary.f32(i32 22, float %818)  ; Frc(value)
  %822 = shl i32 %813, 3
  %823 = and i32 %822, 1016
  %824 = lshr i32 %813, 4
  %825 = and i32 %824, 1016
  %826 = lshr i32 %813, 11
  %827 = and i32 %826, 8184
  %828 = uitofp i32 %823 to float
  %829 = uitofp i32 %825 to float
  %830 = uitofp i32 %827 to float
  %831 = fmul fast float %819, 7.000000e+00
  %832 = fmul fast float %820, 7.000000e+00
  %833 = fmul fast float %821, 7.000000e+00
  %834 = fadd fast float %828, 5.000000e-01
  %835 = fadd fast float %834, %831
  %836 = fadd fast float %829, 5.000000e-01
  %837 = fadd fast float %836, %832
  %838 = fadd fast float %830, 5.000000e-01
  %839 = fadd fast float %838, %833
  %840 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %841 = extractvalue %dx.types.CBufRet.f32 %840, 0
  %842 = extractvalue %dx.types.CBufRet.f32 %840, 1
  %843 = extractvalue %dx.types.CBufRet.f32 %840, 2
  %844 = fmul fast float %841, %835
  %845 = fmul fast float %837, %842
  %846 = fmul fast float %839, %843
  %847 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %848 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %849 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %847, %dx.types.Handle %848, float %844, float %845, float %846, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %850 = extractvalue %dx.types.ResRet.f32 %849, 0
  br label %851

; <label>:851                                     ; preds = %815, %805
  %852 = phi float [ %850, %815 ], [ 1.000000e+00, %805 ]
  %853 = fadd fast float %649, %646
  %854 = call float @dx.op.unary.f32(i32 22, float %853)  ; Frc(value)
  %855 = call float @dx.op.unary.f32(i32 7, float %854)  ; Saturate(value)
  %856 = fmul fast float %659, %855
  %857 = fadd fast float %664, %856
  %858 = fptosi float %857 to i32
  %859 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %764, i32 %667, i32 %858, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %860 = extractvalue %dx.types.ResRet.i32 %859, 0
  %861 = icmp eq i32 %860, -1
  br i1 %861, label %898, label %862

; <label>:862                                     ; preds = %851
  %863 = fmul fast float %659, %758
  %864 = fmul fast float %659, %652
  %865 = fmul fast float %659, %854
  %866 = call float @dx.op.unary.f32(i32 22, float %863)  ; Frc(value)
  %867 = call float @dx.op.unary.f32(i32 22, float %864)  ; Frc(value)
  %868 = call float @dx.op.unary.f32(i32 22, float %865)  ; Frc(value)
  %869 = shl i32 %860, 3
  %870 = and i32 %869, 1016
  %871 = lshr i32 %860, 4
  %872 = and i32 %871, 1016
  %873 = lshr i32 %860, 11
  %874 = and i32 %873, 8184
  %875 = uitofp i32 %870 to float
  %876 = uitofp i32 %872 to float
  %877 = uitofp i32 %874 to float
  %878 = fmul fast float %866, 7.000000e+00
  %879 = fmul fast float %867, 7.000000e+00
  %880 = fmul fast float %868, 7.000000e+00
  %881 = fadd fast float %875, 5.000000e-01
  %882 = fadd fast float %881, %878
  %883 = fadd fast float %876, 5.000000e-01
  %884 = fadd fast float %883, %879
  %885 = fadd fast float %877, 5.000000e-01
  %886 = fadd fast float %885, %880
  %887 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %888 = extractvalue %dx.types.CBufRet.f32 %887, 0
  %889 = extractvalue %dx.types.CBufRet.f32 %887, 1
  %890 = extractvalue %dx.types.CBufRet.f32 %887, 2
  %891 = fmul fast float %888, %882
  %892 = fmul fast float %884, %889
  %893 = fmul fast float %886, %890
  %894 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %895 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %896 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %894, %dx.types.Handle %895, float %891, float %892, float %893, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %897 = extractvalue %dx.types.ResRet.f32 %896, 0
  br label %898

; <label>:898                                     ; preds = %862, %851
  %899 = phi float [ %897, %862 ], [ 1.000000e+00, %851 ]
  %900 = fsub fast float %646, %649
  %901 = call float @dx.op.unary.f32(i32 22, float %900)  ; Frc(value)
  %902 = call float @dx.op.unary.f32(i32 7, float %901)  ; Saturate(value)
  %903 = fmul fast float %659, %902
  %904 = fadd fast float %664, %903
  %905 = fptosi float %904 to i32
  %906 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %764, i32 %667, i32 %905, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %907 = extractvalue %dx.types.ResRet.i32 %906, 0
  %908 = icmp eq i32 %907, -1
  br i1 %908, label %945, label %909

; <label>:909                                     ; preds = %898
  %910 = fmul fast float %659, %758
  %911 = fmul fast float %659, %652
  %912 = fmul fast float %659, %901
  %913 = call float @dx.op.unary.f32(i32 22, float %910)  ; Frc(value)
  %914 = call float @dx.op.unary.f32(i32 22, float %911)  ; Frc(value)
  %915 = call float @dx.op.unary.f32(i32 22, float %912)  ; Frc(value)
  %916 = shl i32 %907, 3
  %917 = and i32 %916, 1016
  %918 = lshr i32 %907, 4
  %919 = and i32 %918, 1016
  %920 = lshr i32 %907, 11
  %921 = and i32 %920, 8184
  %922 = uitofp i32 %917 to float
  %923 = uitofp i32 %919 to float
  %924 = uitofp i32 %921 to float
  %925 = fmul fast float %913, 7.000000e+00
  %926 = fmul fast float %914, 7.000000e+00
  %927 = fmul fast float %915, 7.000000e+00
  %928 = fadd fast float %922, 5.000000e-01
  %929 = fadd fast float %928, %925
  %930 = fadd fast float %923, 5.000000e-01
  %931 = fadd fast float %930, %926
  %932 = fadd fast float %924, 5.000000e-01
  %933 = fadd fast float %932, %927
  %934 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 224)  ; CBufferLoadLegacy(handle,regIndex)
  %935 = extractvalue %dx.types.CBufRet.f32 %934, 0
  %936 = extractvalue %dx.types.CBufRet.f32 %934, 1
  %937 = extractvalue %dx.types.CBufRet.f32 %934, 2
  %938 = fmul fast float %935, %929
  %939 = fmul fast float %931, %936
  %940 = fmul fast float %933, %937
  %941 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %942 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %943 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %941, %dx.types.Handle %942, float %938, float %939, float %940, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %944 = extractvalue %dx.types.ResRet.f32 %943, 0
  br label %945

; <label>:945                                     ; preds = %909, %898
  %946 = phi float [ %944, %909 ], [ 1.000000e+00, %898 ]
  %947 = fsub fast float %710, %756
  %948 = fsub fast float %806, %852
  %949 = fsub fast float %899, %946
  %950 = fmul fast float %947, %947
  %951 = fmul fast float %948, %948
  %952 = fadd fast float %951, %950
  %953 = fmul fast float %949, %949
  %954 = fadd fast float %952, %953
  %955 = call float @dx.op.unary.f32(i32 24, float %954)  ; Sqrt(value)
  %956 = fcmp fast ogt float %955, 0x3F50624DE0000000
  br i1 %956, label %957, label %961

; <label>:957                                     ; preds = %945
  %958 = fdiv fast float %947, %955
  %959 = fdiv fast float %948, %955
  %960 = fdiv fast float %949, %955
  br label %961

; <label>:961                                     ; preds = %957, %945
  %962 = phi float [ %958, %957 ], [ %626, %945 ]
  %963 = phi float [ %959, %957 ], [ %627, %945 ]
  %964 = phi float [ %960, %957 ], [ %628, %945 ]
  %965 = add i32 %617, 199
  %966 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 %965)  ; CBufferLoadLegacy(handle,regIndex)
  %967 = extractvalue %dx.types.CBufRet.f32 %966, 3
  %968 = fmul fast float %648, %967
  %969 = fmul fast float %968, 1.500000e+00
  %970 = fmul fast float %968, 5.000000e-01
  %971 = fsub fast float %616, %969
  %972 = fdiv fast float %971, %970
  %973 = call float @dx.op.unary.f32(i32 7, float %972)  ; Saturate(value)
  %974 = fmul fast float %973, 2.000000e+00
  %975 = fsub fast float 3.000000e+00, %974
  %976 = fmul fast float %973, %973
  %977 = fmul fast float %976, %975
  %978 = call float @dx.op.unary.f32(i32 7, float %644)  ; Saturate(value)
  %979 = call float @dx.op.unary.f32(i32 7, float %645)  ; Saturate(value)
  %980 = call float @dx.op.unary.f32(i32 7, float %646)  ; Saturate(value)
  %981 = fmul fast float %659, %978
  %982 = fmul fast float %659, %979
  %983 = fmul fast float %659, %980
  %984 = fadd fast float %664, %983
  %985 = fptosi float %981 to i32
  %986 = fptosi float %982 to i32
  %987 = fptosi float %984 to i32
  %988 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %669, i32 0, i32 %985, i32 %986, i32 %987, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %989 = extractvalue %dx.types.ResRet.i32 %988, 0
  %990 = fcmp ule float %977, 0.000000e+00
  %991 = icmp eq i32 %989, -1
  %992 = or i1 %990, %991
  br i1 %992, label %1518, label %993

; <label>:993                                     ; preds = %961
  %994 = call float @dx.op.unary.f32(i32 22, float %981)  ; Frc(value)
  %995 = call float @dx.op.unary.f32(i32 22, float %982)  ; Frc(value)
  %996 = call float @dx.op.unary.f32(i32 22, float %983)  ; Frc(value)
  %997 = call float @dx.op.unary.f32(i32 22, float %994)  ; Frc(value)
  %998 = call float @dx.op.unary.f32(i32 22, float %995)  ; Frc(value)
  %999 = call float @dx.op.unary.f32(i32 22, float %996)  ; Frc(value)
  %1000 = fmul fast float %997, 4.000000e+00
  %1001 = fmul fast float %998, 4.000000e+00
  %1002 = fmul fast float %999, 4.000000e+00
  %1003 = fptoui float %1000 to i32
  %1004 = fptoui float %1001 to i32
  %1005 = fptoui float %1002 to i32
  %1006 = and i32 %1003, 1
  %1007 = shl i32 %1004, 1
  %1008 = and i32 %1007, 2
  %1009 = shl i32 %1005, 2
  %1010 = and i32 %1009, 4
  %1011 = shl i32 %1003, 2
  %1012 = and i32 %1011, 8
  %1013 = shl i32 %1004, 3
  %1014 = and i32 %1013, 16
  %1015 = shl i32 %1005, 4
  %1016 = and i32 %1015, 32
  %1017 = shl i32 %989, 6
  %1018 = and i32 %1017, 1073741760
  %1019 = or i32 %1006, %1018
  %1020 = or i32 %1019, %1012
  %1021 = or i32 %1020, %1008
  %1022 = or i32 %1021, %1014
  %1023 = or i32 %1022, %1010
  %1024 = or i32 %1023, %1016
  %1025 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1026 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1025, i32 %1024, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1027 = extractvalue %dx.types.ResRet.i32 %1026, 0
  %1028 = extractvalue %dx.types.ResRet.i32 %1026, 1
  %1029 = extractvalue %dx.types.ResRet.i32 %1026, 2
  %1030 = extractvalue %dx.types.ResRet.i32 %1026, 3
  %1031 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i32 0, i32 0
  store i32 %1027, i32* %1031, align 4
  %1032 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i32 0, i32 1
  store i32 %1028, i32* %1032, align 4
  %1033 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i32 0, i32 2
  store i32 %1029, i32* %1033, align 4
  %1034 = getelementptr inbounds [4 x i32], [4 x i32]* %28, i32 0, i32 3
  store i32 %1030, i32* %1034, align 4
  %1035 = icmp eq i32 %1027, -1
  br i1 %1035, label %1518, label %1036

; <label>:1036                                    ; preds = %993
  br label %1037

; <label>:1037                                    ; preds = %1509, %1036
  %1038 = phi i32 [ %1507, %1509 ], [ 0, %1036 ]
  %1039 = phi float [ %1506, %1509 ], [ 0.000000e+00, %1036 ]
  %1040 = phi float [ %1505, %1509 ], [ 0.000000e+00, %1036 ]
  %1041 = phi float [ %1504, %1509 ], [ 0.000000e+00, %1036 ]
  %1042 = phi float [ %1503, %1509 ], [ 0.000000e+00, %1036 ]
  %1043 = phi i32 [ %1511, %1509 ], [ %1027, %1036 ]
  %1044 = shl i32 %1043, 2
  %1045 = and i32 %1044, 67108860
  %1046 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1047 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1046, i32 %1045, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1048 = extractvalue %dx.types.ResRet.i32 %1047, 0
  %1049 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1050 = extractvalue %dx.types.CBufRet.i32 %1049, 1
  %1051 = icmp ult i32 %1048, %1050
  br i1 %1051, label %1052, label %1502

; <label>:1052                                    ; preds = %1037
  %1053 = fmul fast float %968, 2.000000e+00
  %1054 = mul i32 %1048, 7
  %1055 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1056 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1055, i32 %1054, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1057 = extractvalue %dx.types.ResRet.f32 %1056, 0
  %1058 = extractvalue %dx.types.ResRet.f32 %1056, 1
  %1059 = extractvalue %dx.types.ResRet.f32 %1056, 2
  %1060 = extractvalue %dx.types.ResRet.f32 %1056, 3
  %1061 = add i32 %1054, 1
  %1062 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1055, i32 %1061, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1063 = extractvalue %dx.types.ResRet.f32 %1062, 0
  %1064 = extractvalue %dx.types.ResRet.f32 %1062, 1
  %1065 = extractvalue %dx.types.ResRet.f32 %1062, 2
  %1066 = extractvalue %dx.types.ResRet.f32 %1062, 3
  %1067 = add i32 %1054, 2
  %1068 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1055, i32 %1067, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1069 = extractvalue %dx.types.ResRet.f32 %1068, 0
  %1070 = extractvalue %dx.types.ResRet.f32 %1068, 1
  %1071 = extractvalue %dx.types.ResRet.f32 %1068, 2
  %1072 = extractvalue %dx.types.ResRet.f32 %1068, 3
  %1073 = add i32 %1054, 3
  %1074 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1055, i32 %1073, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1075 = extractvalue %dx.types.ResRet.f32 %1074, 0
  %1076 = extractvalue %dx.types.ResRet.f32 %1074, 1
  %1077 = extractvalue %dx.types.ResRet.f32 %1074, 2
  %1078 = extractvalue %dx.types.ResRet.f32 %1074, 3
  %1079 = bitcast float %1075 to i32
  %1080 = bitcast float %1076 to i32
  %1081 = add i32 %1054, 4
  %1082 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1055, i32 %1081, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1083 = extractvalue %dx.types.ResRet.f32 %1082, 0
  %1084 = extractvalue %dx.types.ResRet.f32 %1082, 1
  %1085 = extractvalue %dx.types.ResRet.f32 %1082, 2
  %1086 = extractvalue %dx.types.ResRet.f32 %1082, 3
  %1087 = and i32 %1080, 65536
  %1088 = icmp ne i32 %1087, 0
  %1089 = and i32 %1080, 131072
  %1090 = icmp ne i32 %1089, 0
  %1091 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 0
  %1092 = bitcast i32* %1091 to float*
  store float %1077, float* %1092, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1093 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 1
  %1094 = bitcast i32* %1093 to float*
  store float %1078, float* %1094, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1095 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 2
  %1096 = bitcast i32* %1095 to float*
  store float %1083, float* %1096, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1097 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 3
  %1098 = bitcast i32* %1097 to float*
  store float %1084, float* %1098, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1099 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 4
  %1100 = bitcast i32* %1099 to float*
  store float %1085, float* %1100, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1101 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 5
  %1102 = bitcast i32* %1101 to float*
  store float %1086, float* %1102, align 4, !tbaa !40, !alias.scope !44, !noalias !47
  %1103 = fadd fast float %1053, 5.000000e+01
  %1104 = select i1 %1090, float %1103, float %1053
  %1105 = fadd fast float %186, %175
  %1106 = fsub fast float %1105, %183
  %1107 = fadd fast float %1106, %620
  %1108 = fsub fast float %1107, %1060
  %1109 = fadd fast float %187, %176
  %1110 = fsub fast float %1109, %184
  %1111 = fadd fast float %1110, %621
  %1112 = fsub fast float %1111, %1066
  %1113 = fadd fast float %188, %177
  %1114 = fsub fast float %1113, %185
  %1115 = fadd fast float %1114, %622
  %1116 = fsub fast float %1115, %1072
  %1117 = fmul fast float %1108, %1057
  %1118 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1063, float %1117)  ; FMad(a,b,c)
  %1119 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1069, float %1118)  ; FMad(a,b,c)
  %1120 = fmul fast float %1108, %1058
  %1121 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1064, float %1120)  ; FMad(a,b,c)
  %1122 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1070, float %1121)  ; FMad(a,b,c)
  %1123 = fmul fast float %1108, %1059
  %1124 = call float @dx.op.tertiary.f32(i32 46, float %1112, float %1065, float %1123)  ; FMad(a,b,c)
  %1125 = call float @dx.op.tertiary.f32(i32 46, float %1116, float %1071, float %1124)  ; FMad(a,b,c)
  %1126 = fmul fast float %1057, %962
  %1127 = call float @dx.op.tertiary.f32(i32 46, float %963, float %1063, float %1126)  ; FMad(a,b,c)
  %1128 = call float @dx.op.tertiary.f32(i32 46, float %964, float %1069, float %1127)  ; FMad(a,b,c)
  %1129 = fmul fast float %1058, %962
  %1130 = call float @dx.op.tertiary.f32(i32 46, float %963, float %1064, float %1129)  ; FMad(a,b,c)
  %1131 = call float @dx.op.tertiary.f32(i32 46, float %964, float %1070, float %1130)  ; FMad(a,b,c)
  %1132 = fmul fast float %1059, %962
  %1133 = call float @dx.op.tertiary.f32(i32 46, float %963, float %1065, float %1132)  ; FMad(a,b,c)
  %1134 = call float @dx.op.tertiary.f32(i32 46, float %964, float %1071, float %1133)  ; FMad(a,b,c)
  %1135 = fmul fast float %1128, %1128
  %1136 = fmul fast float %1131, %1131
  %1137 = fmul fast float %1134, %1134
  %1138 = fcmp fast ogt float %1135, 0.000000e+00
  br i1 %1138, label %1139, label %1144

; <label>:1139                                    ; preds = %1052
  %1140 = fcmp uge float %1128, 0.000000e+00
  %1141 = zext i1 %1140 to i32
  %1142 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 %1141
  %1143 = load i32, i32* %1142, align 4, !tbaa !40, !noalias !47
  br label %1144

; <label>:1144                                    ; preds = %1139, %1052
  %1145 = phi i32 [ %1143, %1139 ], [ 0, %1052 ]
  %1146 = fcmp fast ogt float %1136, 0.000000e+00
  br i1 %1146, label %1147, label %1153

; <label>:1147                                    ; preds = %1144
  %1148 = fcmp fast olt float %1131, 0.000000e+00
  %1149 = select i1 %1148, i32 2, i32 3
  %1150 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 %1149
  %1151 = load i32, i32* %1150, align 4, !tbaa !40, !noalias !47
  %1152 = or i32 %1151, %1145
  br label %1153

; <label>:1153                                    ; preds = %1147, %1144
  %1154 = phi i32 [ %1152, %1147 ], [ %1145, %1144 ]
  %1155 = fcmp fast ogt float %1137, 0.000000e+00
  br i1 %1155, label %1156, label %1162

; <label>:1156                                    ; preds = %1153
  %1157 = fcmp fast olt float %1134, 0.000000e+00
  %1158 = select i1 %1157, i32 4, i32 5
  %1159 = getelementptr inbounds [6 x i32], [6 x i32]* %27, i32 0, i32 %1158
  %1160 = load i32, i32* %1159, align 4, !tbaa !40, !noalias !47
  %1161 = or i32 %1160, %1154
  br label %1162

; <label>:1162                                    ; preds = %1156, %1153
  %1163 = phi i32 [ %1161, %1156 ], [ %1154, %1153 ]
  %1164 = icmp eq i32 %1163, 0
  br i1 %1164, label %1209, label %1165

; <label>:1165                                    ; preds = %1162
  br label %1166

; <label>:1166                                    ; preds = %1166, %1165
  %1167 = phi i32 [ %1172, %1166 ], [ %1163, %1165 ]
  %1168 = phi i32 [ %1206, %1166 ], [ 0, %1165 ]
  %1169 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1167)  ; FirstbitLo(value)
  %1170 = and i32 %1169, 31
  %1171 = shl i32 1, %1170
  %1172 = xor i32 %1171, %1167
  %1173 = add i32 %1169, %1079
  %1174 = mul i32 %1173, 9
  %1175 = add i32 %1174, 5
  %1176 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1177 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1176, i32 %1175, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1178 = extractvalue %dx.types.ResRet.f32 %1177, 3
  %1179 = add i32 %1174, 6
  %1180 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1176, i32 %1179, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1181 = extractvalue %dx.types.ResRet.f32 %1180, 3
  %1182 = add i32 %1174, 7
  %1183 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1176, i32 %1182, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1184 = extractvalue %dx.types.ResRet.f32 %1183, 3
  %1185 = add i32 %1174, 8
  %1186 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1176, i32 %1185, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1187 = extractvalue %dx.types.ResRet.f32 %1186, 0
  %1188 = extractvalue %dx.types.ResRet.f32 %1186, 1
  %1189 = extractvalue %dx.types.ResRet.f32 %1186, 2
  %1190 = fsub fast float %1119, %1178
  %1191 = fsub fast float %1122, %1181
  %1192 = fsub fast float %1125, %1184
  %1193 = call float @dx.op.unary.f32(i32 6, float %1190)  ; FAbs(value)
  %1194 = call float @dx.op.unary.f32(i32 6, float %1191)  ; FAbs(value)
  %1195 = call float @dx.op.unary.f32(i32 6, float %1192)  ; FAbs(value)
  %1196 = fmul fast float %1104, 5.000000e-01
  %1197 = fadd fast float %1187, %1196
  %1198 = fadd fast float %1188, %1196
  %1199 = fadd fast float %1189, %1196
  %1200 = fcmp fast ole float %1193, %1197
  %1201 = fcmp fast ole float %1194, %1198
  %1202 = fcmp fast ole float %1195, %1199
  %1203 = and i1 %1200, %1201
  %1204 = and i1 %1203, %1202
  %1205 = select i1 %1204, i32 %1171, i32 0
  %1206 = or i32 %1205, %1168
  %1207 = icmp eq i32 %1167, %1171
  br i1 %1207, label %1208, label %1166

; <label>:1208                                    ; preds = %1166
  br label %1209

; <label>:1209                                    ; preds = %1208, %1162
  %1210 = phi i32 [ 0, %1162 ], [ %1206, %1208 ]
  %1211 = select i1 %1088, i32 1, i32 %1210
  %1212 = icmp eq i32 %1211, 0
  br i1 %1212, label %1485, label %1213

; <label>:1213                                    ; preds = %1209
  br label %1214

; <label>:1214                                    ; preds = %1234, %1213
  %1215 = phi float [ %1235, %1234 ], [ 0.000000e+00, %1213 ]
  %1216 = phi float [ %1236, %1234 ], [ 0.000000e+00, %1213 ]
  %1217 = phi float [ %1237, %1234 ], [ 0.000000e+00, %1213 ]
  %1218 = phi float [ %1238, %1234 ], [ 0.000000e+00, %1213 ]
  %1219 = phi float [ %1239, %1234 ], [ 0.000000e+00, %1213 ]
  %1220 = phi i32 [ %1224, %1234 ], [ %1211, %1213 ]
  %1221 = call i32 @dx.op.unaryBits.i32(i32 32, i32 %1220)  ; FirstbitLo(value)
  %1222 = and i32 %1221, 31
  %1223 = shl i32 1, %1222
  %1224 = xor i32 %1223, %1220
  %1225 = add i32 %1221, %1079
  %1226 = mul i32 %1225, 9
  %1227 = add i32 %1226, 3
  %1228 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1229 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1228, i32 %1227, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1230 = extractvalue %dx.types.ResRet.f32 %1229, 3
  %1231 = bitcast float %1230 to i32
  %1232 = and i32 %1231, 16777216
  %1233 = icmp eq i32 %1232, 0
  br i1 %1233, label %1234, label %1241

; <label>:1234                                    ; preds = %1590, %1483, %1451, %1420, %1301, %1245, %1241, %1214
  %1235 = phi float [ %1215, %1214 ], [ %1481, %1483 ], [ %1481, %1451 ], [ %1215, %1590 ], [ %1215, %1420 ], [ %1215, %1301 ], [ %1215, %1245 ], [ %1215, %1241 ]
  %1236 = phi float [ %1216, %1214 ], [ %1478, %1483 ], [ %1478, %1451 ], [ %1216, %1590 ], [ %1216, %1420 ], [ %1216, %1301 ], [ %1216, %1245 ], [ %1216, %1241 ]
  %1237 = phi float [ %1217, %1214 ], [ %1479, %1483 ], [ %1479, %1451 ], [ %1217, %1590 ], [ %1217, %1420 ], [ %1217, %1301 ], [ %1217, %1245 ], [ %1217, %1241 ]
  %1238 = phi float [ %1218, %1214 ], [ %1480, %1483 ], [ %1480, %1451 ], [ %1218, %1590 ], [ %1218, %1420 ], [ %1218, %1301 ], [ %1218, %1245 ], [ %1218, %1241 ]
  %1239 = phi float [ %1219, %1214 ], [ %1597, %1483 ], [ %1219, %1451 ], [ %1219, %1590 ], [ %1219, %1420 ], [ %1219, %1301 ], [ %1219, %1245 ], [ %1219, %1241 ]
  %1240 = icmp eq i32 %1220, %1223
  br i1 %1240, label %1484, label %1214

; <label>:1241                                    ; preds = %1214
  %1242 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %21, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1243 = extractvalue %dx.types.CBufRet.i32 %1242, 0
  %1244 = icmp ult i32 %1225, %1243
  br i1 %1244, label %1245, label %1234

; <label>:1245                                    ; preds = %1241
  %1246 = extractvalue %dx.types.ResRet.f32 %1229, 0
  %1247 = extractvalue %dx.types.ResRet.f32 %1229, 1
  %1248 = extractvalue %dx.types.ResRet.f32 %1229, 2
  %1249 = add i32 %1226, 4
  %1250 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1228, i32 %1249, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1251 = extractvalue %dx.types.ResRet.f32 %1250, 0
  %1252 = add i32 %1226, 5
  %1253 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1228, i32 %1252, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1254 = add i32 %1226, 6
  %1255 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1228, i32 %1254, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1256 = add i32 %1226, 7
  %1257 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1228, i32 %1256, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1258 = call float @dx.op.unary.f32(i32 6, float %1246)  ; FAbs(value)
  %1259 = call float @dx.op.unary.f32(i32 6, float %1247)  ; FAbs(value)
  %1260 = call float @dx.op.unary.f32(i32 6, float %1248)  ; FAbs(value)
  %1261 = lshr i32 %1231, 16
  %1262 = and i32 %1261, 15
  %1263 = bitcast float %1251 to i32
  %1264 = and i32 %1263, 65535
  %1265 = extractvalue %dx.types.ResRet.f32 %1257, 3
  %1266 = extractvalue %dx.types.ResRet.f32 %1257, 2
  %1267 = extractvalue %dx.types.ResRet.f32 %1257, 1
  %1268 = extractvalue %dx.types.ResRet.f32 %1257, 0
  %1269 = extractvalue %dx.types.ResRet.f32 %1255, 3
  %1270 = extractvalue %dx.types.ResRet.f32 %1255, 2
  %1271 = extractvalue %dx.types.ResRet.f32 %1255, 1
  %1272 = extractvalue %dx.types.ResRet.f32 %1255, 0
  %1273 = extractvalue %dx.types.ResRet.f32 %1253, 3
  %1274 = extractvalue %dx.types.ResRet.f32 %1253, 2
  %1275 = extractvalue %dx.types.ResRet.f32 %1253, 1
  %1276 = extractvalue %dx.types.ResRet.f32 %1253, 0
  %1277 = fsub fast float %1119, %1273
  %1278 = fsub fast float %1122, %1269
  %1279 = fsub fast float %1125, %1265
  %1280 = fmul fast float %1277, %1276
  %1281 = call float @dx.op.tertiary.f32(i32 46, float %1278, float %1272, float %1280)  ; FMad(a,b,c)
  %1282 = call float @dx.op.tertiary.f32(i32 46, float %1279, float %1268, float %1281)  ; FMad(a,b,c)
  %1283 = fmul fast float %1277, %1275
  %1284 = call float @dx.op.tertiary.f32(i32 46, float %1278, float %1271, float %1283)  ; FMad(a,b,c)
  %1285 = call float @dx.op.tertiary.f32(i32 46, float %1279, float %1267, float %1284)  ; FMad(a,b,c)
  %1286 = fmul fast float %1277, %1274
  %1287 = call float @dx.op.tertiary.f32(i32 46, float %1278, float %1270, float %1286)  ; FMad(a,b,c)
  %1288 = call float @dx.op.tertiary.f32(i32 46, float %1279, float %1266, float %1287)  ; FMad(a,b,c)
  %1289 = call float @dx.op.unary.f32(i32 6, float %1282)  ; FAbs(value)
  %1290 = call float @dx.op.unary.f32(i32 6, float %1285)  ; FAbs(value)
  %1291 = call float @dx.op.unary.f32(i32 6, float %1288)  ; FAbs(value)
  %1292 = fmul fast float %1104, 5.000000e-01
  %1293 = fadd fast float %1258, %1292
  %1294 = fadd fast float %1259, %1292
  %1295 = fadd fast float %1260, %1292
  %1296 = fcmp fast ole float %1289, %1293
  %1297 = fcmp fast ole float %1290, %1294
  %1298 = fcmp fast ole float %1291, %1295
  %1299 = and i1 %1296, %1297
  %1300 = and i1 %1299, %1298
  br i1 %1300, label %1301, label %1234

; <label>:1301                                    ; preds = %1245
  %1302 = extractvalue %dx.types.ResRet.f32 %1250, 1
  %1303 = bitcast float %1302 to i32
  %1304 = lshr i32 %1263, 16
  %1305 = fsub fast float -0.000000e+00, %1258
  %1306 = fsub fast float -0.000000e+00, %1259
  %1307 = call float @dx.op.binary.f32(i32 35, float %1282, float %1305)  ; FMax(a,b)
  %1308 = call float @dx.op.binary.f32(i32 35, float %1285, float %1306)  ; FMax(a,b)
  %1309 = call float @dx.op.binary.f32(i32 36, float %1307, float %1258)  ; FMin(a,b)
  %1310 = call float @dx.op.binary.f32(i32 36, float %1308, float %1259)  ; FMin(a,b)
  %1311 = fdiv fast float %1309, %1258
  %1312 = fdiv fast float %1310, %1259
  %1313 = fmul fast float %1311, 5.000000e-01
  %1314 = fmul fast float %1312, 5.000000e-01
  %1315 = fadd fast float %1313, 5.000000e-01
  %1316 = fsub fast float 5.000000e-01, %1314
  %1317 = call float @dx.op.unary.f32(i32 7, float %1315)  ; Saturate(value)
  %1318 = call float @dx.op.unary.f32(i32 7, float %1316)  ; Saturate(value)
  %1319 = call float @dx.op.binary.f32(i32 36, float %1317, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1320 = call float @dx.op.binary.f32(i32 36, float %1318, float 0x3FEFFFFDE0000000)  ; FMin(a,b)
  %1321 = uitofp i32 %1264 to float
  %1322 = uitofp i32 %1304 to float
  %1323 = fmul fast float %1319, %1321
  %1324 = fmul fast float %1320, %1322
  %1325 = fptoui float %1323 to i32
  %1326 = fptoui float %1324 to i32
  %1327 = mul i32 %1326, %1264
  %1328 = add i32 %1325, %1303
  %1329 = add i32 %1328, %1327
  %1330 = shl i32 %1329, 3
  %1331 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1332 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1331, i32 %1330, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1333 = extractvalue %dx.types.ResRet.i32 %1332, 0
  %1334 = shl i32 %1333, 3
  %1335 = and i32 %1334, 32760
  %1336 = lshr i32 %1333, 9
  %1337 = and i32 %1336, 32760
  %1338 = lshr i32 %1333, 24
  %1339 = and i32 %1338, 15
  %1340 = lshr i32 %1333, 28
  %1341 = add nuw nsw i32 %1339, 25
  %1342 = add nuw nsw i32 %1340, 25
  %1343 = and i32 %1341, 31
  %1344 = and i32 %1342, 31
  %1345 = shl i32 1, %1343
  %1346 = shl i32 1, %1344
  %1347 = icmp ugt i32 %1339, 7
  %1348 = icmp slt i32 %1333, 0
  %1349 = select i1 %1347, i32 %1345, i32 1
  %1350 = select i1 %1348, i32 %1346, i32 1
  %1351 = uitofp i32 %1349 to float
  %1352 = uitofp i32 %1350 to float
  %1353 = fmul fast float %1351, %1319
  %1354 = fmul fast float %1352, %1320
  %1355 = fptoui float %1353 to i32
  %1356 = fptoui float %1354 to i32
  %1357 = shl i32 1, %1339
  %1358 = shl i32 1, %1340
  %1359 = call float @dx.op.unary.f32(i32 22, float %1353)  ; Frc(value)
  %1360 = call float @dx.op.unary.f32(i32 22, float %1354)  ; Frc(value)
  %1361 = icmp eq i32 %1355, 0
  %1362 = icmp eq i32 %1356, 0
  %1363 = select i1 %1361, float 0.000000e+00, float 5.000000e-01
  %1364 = select i1 %1362, float 0.000000e+00, float 5.000000e-01
  %1365 = add i32 %1355, 1
  %1366 = add i32 %1356, 1
  %1367 = icmp eq i32 %1365, %1349
  %1368 = icmp eq i32 %1366, %1350
  %1369 = uitofp i32 %1357 to float
  %1370 = select i1 %1347, float 1.280000e+02, float %1369
  %1371 = uitofp i32 %1358 to float
  %1372 = select i1 %1348, float 1.280000e+02, float %1371
  %1373 = fsub fast float %1370, %1363
  %1374 = fsub fast float %1372, %1364
  %1375 = select i1 %1367, float -0.000000e+00, float -5.000000e-01
  %1376 = fadd fast float %1373, %1375
  %1377 = select i1 %1368, float -0.000000e+00, float -5.000000e-01
  %1378 = fadd fast float %1374, %1377
  %1379 = fmul fast float %1376, %1359
  %1380 = fmul fast float %1378, %1360
  %1381 = fadd fast float %1379, %1363
  %1382 = fadd fast float %1380, %1364
  %1383 = fadd fast float %1370, -1.500000e+00
  %1384 = fadd fast float %1372, -1.500000e+00
  %1385 = call float @dx.op.binary.f32(i32 35, float %1381, float 5.000000e-01)  ; FMax(a,b)
  %1386 = call float @dx.op.binary.f32(i32 35, float %1382, float 5.000000e-01)  ; FMax(a,b)
  %1387 = call float @dx.op.binary.f32(i32 36, float %1385, float %1383)  ; FMin(a,b)
  %1388 = call float @dx.op.binary.f32(i32 36, float %1386, float %1384)  ; FMin(a,b)
  %1389 = uitofp i32 %1335 to float
  %1390 = uitofp i32 %1337 to float
  %1391 = fadd fast float %1387, %1389
  %1392 = fadd fast float %1388, %1390
  %1393 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1394 = extractvalue %dx.types.CBufRet.f32 %1393, 0
  %1395 = extractvalue %dx.types.CBufRet.f32 %1393, 1
  %1396 = fmul fast float %1394, %1391
  %1397 = fmul fast float %1395, %1392
  %1398 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %21, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1399 = extractvalue %dx.types.CBufRet.f32 %1398, 2
  %1400 = extractvalue %dx.types.CBufRet.f32 %1398, 3
  %1401 = fmul fast float %1396, %1399
  %1402 = fmul fast float %1397, %1400
  %1403 = fadd fast float %1401, 0x3FE0100000000000
  %1404 = fadd fast float %1402, 0x3FE0100000000000
  %1405 = call float @dx.op.unary.f32(i32 22, float %1403)  ; Frc(value)
  %1406 = call float @dx.op.unary.f32(i32 22, float %1404)  ; Frc(value)
  %1407 = fsub fast float 1.000000e+00, %1405
  %1408 = fmul fast float %1407, %1406
  %1409 = fmul fast float %1406, %1405
  %1410 = fsub fast float 1.000000e+00, %1406
  %1411 = fmul fast float %1410, %1405
  %1412 = fmul fast float %1410, %1407
  %1413 = icmp eq i32 %1339, 0
  br i1 %1413, label %1234, label %1414

; <label>:1414                                    ; preds = %1301
  br i1 %1088, label %1420, label %1415

; <label>:1415                                    ; preds = %1414
  %1416 = icmp ult i32 %1262, 2
  br i1 %1416, label %1420, label %1417

; <label>:1417                                    ; preds = %1415
  %1418 = icmp ult i32 %1262, 4
  %1419 = select i1 %1418, float %1136, float %1137
  br label %1420

; <label>:1420                                    ; preds = %1417, %1415, %1414
  %1421 = phi float [ 1.000000e+00, %1414 ], [ %1135, %1415 ], [ %1419, %1417 ]
  %1422 = fcmp fast ogt float %1421, 0.000000e+00
  br i1 %1422, label %1423, label %1234

; <label>:1423                                    ; preds = %1420
  %1424 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1425 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1426 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1424, %dx.types.Handle %1425, float %1396, float %1397, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1427 = extractvalue %dx.types.ResRet.f32 %1426, 0
  %1428 = extractvalue %dx.types.ResRet.f32 %1426, 1
  %1429 = extractvalue %dx.types.ResRet.f32 %1426, 2
  %1430 = extractvalue %dx.types.ResRet.f32 %1426, 3
  %1431 = fdiv fast float %1288, %1260
  %1432 = fmul fast float %1431, 5.000000e-01
  %1433 = fsub fast float 5.000000e-01, %1432
  %1434 = fdiv fast float %1104, %1260
  %1435 = fmul fast float %1434, 2.500000e-01
  %1436 = fcmp uge float %1427, 1.000000e+00
  %1437 = or i1 %1088, %1436
  %1438 = select i1 %1436, float 0.000000e+00, float 1.000000e+00
  br i1 %1437, label %1446, label %1439

; <label>:1439                                    ; preds = %1423
  %1440 = fsub fast float %1433, %1427
  %1441 = call float @dx.op.unary.f32(i32 6, float %1440)  ; FAbs(value)
  %1442 = fsub fast float %1441, %1434
  %1443 = fdiv fast float %1442, %1435
  %1444 = call float @dx.op.unary.f32(i32 7, float %1443)  ; Saturate(value)
  %1445 = fsub fast float 1.000000e+00, %1444
  br label %1446

; <label>:1446                                    ; preds = %1439, %1423
  %1447 = phi float [ %1445, %1439 ], [ %1438, %1423 ]
  %1448 = fcmp uge float %1428, 1.000000e+00
  %1449 = or i1 %1088, %1448
  %1450 = select i1 %1448, float 0.000000e+00, float 1.000000e+00
  br i1 %1449, label %1566, label %1559

; <label>:1451                                    ; preds = %1590
  %1452 = fdiv fast float %1592, %1596
  %1453 = fdiv fast float %1593, %1596
  %1454 = fdiv fast float %1594, %1596
  %1455 = fdiv fast float %1595, %1596
  %1456 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1457 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1456, %dx.types.Handle %1425, float %1396, float %1397, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1458 = extractvalue %dx.types.ResRet.f32 %1457, 0
  %1459 = extractvalue %dx.types.ResRet.f32 %1457, 1
  %1460 = extractvalue %dx.types.ResRet.f32 %1457, 2
  %1461 = extractvalue %dx.types.ResRet.f32 %1457, 3
  %1462 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1456, %dx.types.Handle %1425, float %1396, float %1397, float undef, float undef, i32 0, i32 0, i32 1)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1463 = extractvalue %dx.types.ResRet.f32 %1462, 0
  %1464 = extractvalue %dx.types.ResRet.f32 %1462, 1
  %1465 = extractvalue %dx.types.ResRet.f32 %1462, 2
  %1466 = extractvalue %dx.types.ResRet.f32 %1462, 3
  %1467 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %1456, %dx.types.Handle %1425, float %1396, float %1397, float undef, float undef, i32 0, i32 0, i32 2)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %1468 = extractvalue %dx.types.ResRet.f32 %1467, 0
  %1469 = extractvalue %dx.types.ResRet.f32 %1467, 1
  %1470 = extractvalue %dx.types.ResRet.f32 %1467, 2
  %1471 = extractvalue %dx.types.ResRet.f32 %1467, 3
  %1472 = call float @dx.op.dot4.f32(i32 56, float %1458, float %1459, float %1460, float %1461, float %1452, float %1453, float %1454, float %1455)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1473 = call float @dx.op.dot4.f32(i32 56, float %1463, float %1464, float %1465, float %1466, float %1452, float %1453, float %1454, float %1455)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1474 = call float @dx.op.dot4.f32(i32 56, float %1468, float %1469, float %1470, float %1471, float %1452, float %1453, float %1454, float %1455)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1475 = fmul fast float %1472, %1597
  %1476 = fmul fast float %1473, %1597
  %1477 = fmul fast float %1474, %1597
  %1478 = fadd fast float %1475, %1216
  %1479 = fadd fast float %1476, %1217
  %1480 = fadd fast float %1477, %1218
  %1481 = fadd fast float %1597, %1215
  %1482 = fcmp fast ogt float %1597, %1219
  br i1 %1482, label %1483, label %1234

; <label>:1483                                    ; preds = %1451
  br label %1234

; <label>:1484                                    ; preds = %1234
  br label %1485

; <label>:1485                                    ; preds = %1484, %1209
  %1486 = phi float [ 0.000000e+00, %1209 ], [ %1235, %1484 ]
  %1487 = phi float [ 0.000000e+00, %1209 ], [ %1236, %1484 ]
  %1488 = phi float [ 0.000000e+00, %1209 ], [ %1237, %1484 ]
  %1489 = phi float [ 0.000000e+00, %1209 ], [ %1238, %1484 ]
  %1490 = fcmp fast ogt float %1486, 0.000000e+00
  br i1 %1490, label %1491, label %1492

; <label>:1491                                    ; preds = %1485
  br label %1492

; <label>:1492                                    ; preds = %1491, %1485
  %1493 = phi float [ %1486, %1491 ], [ 0.000000e+00, %1485 ]
  %1494 = phi float [ %1487, %1491 ], [ 0.000000e+00, %1485 ]
  %1495 = phi float [ %1488, %1491 ], [ 0.000000e+00, %1485 ]
  %1496 = phi float [ %1489, %1491 ], [ 0.000000e+00, %1485 ]
  %1497 = fadd fast float %1494, %1042
  %1498 = fadd fast float %1495, %1041
  %1499 = fadd fast float %1496, %1040
  %1500 = fadd fast float %1493, %1039
  %1501 = fcmp fast ult float %1500, 0x3FECCCCCC0000000
  br i1 %1501, label %1502, label %1513

; <label>:1502                                    ; preds = %1492, %1037
  %1503 = phi float [ %1497, %1492 ], [ %1042, %1037 ]
  %1504 = phi float [ %1498, %1492 ], [ %1041, %1037 ]
  %1505 = phi float [ %1499, %1492 ], [ %1040, %1037 ]
  %1506 = phi float [ %1500, %1492 ], [ %1039, %1037 ]
  %1507 = add nuw nsw i32 %1038, 1
  %1508 = icmp ult i32 %1507, 4
  br i1 %1508, label %1509, label %1513

; <label>:1509                                    ; preds = %1502
  %1510 = getelementptr [4 x i32], [4 x i32]* %28, i32 0, i32 %1507
  %1511 = load i32, i32* %1510, align 4, !tbaa !40, !noalias !54
  %1512 = icmp eq i32 %1511, -1
  br i1 %1512, label %1513, label %1037

; <label>:1513                                    ; preds = %1509, %1502, %1492
  %1514 = phi float [ %1503, %1502 ], [ %1503, %1509 ], [ %1497, %1492 ]
  %1515 = phi float [ %1504, %1502 ], [ %1504, %1509 ], [ %1498, %1492 ]
  %1516 = phi float [ %1505, %1502 ], [ %1505, %1509 ], [ %1499, %1492 ]
  %1517 = phi float [ %1506, %1502 ], [ %1506, %1509 ], [ %1500, %1492 ]
  br label %1518

; <label>:1518                                    ; preds = %1513, %993, %961
  %1519 = phi float [ 0.000000e+00, %961 ], [ 0.000000e+00, %993 ], [ %1514, %1513 ]
  %1520 = phi float [ 0.000000e+00, %961 ], [ 0.000000e+00, %993 ], [ %1515, %1513 ]
  %1521 = phi float [ 0.000000e+00, %961 ], [ 0.000000e+00, %993 ], [ %1516, %1513 ]
  %1522 = phi float [ 0.000000e+00, %961 ], [ 0.000000e+00, %993 ], [ %1517, %1513 ]
  %1523 = fcmp fast ogt float %1522, 0.000000e+00
  br i1 %1523, label %1524, label %1531

; <label>:1524                                    ; preds = %1518
  %1525 = fdiv fast float %1519, %1522
  %1526 = fdiv fast float %1520, %1522
  %1527 = fdiv fast float %1521, %1522
  %1528 = fmul fast float %1525, %977
  %1529 = fmul fast float %1526, %977
  %1530 = fmul fast float %1527, %977
  br label %1531

; <label>:1531                                    ; preds = %1524, %1518, %615
  %1532 = phi float [ %52, %615 ], [ %616, %1524 ], [ %616, %1518 ]
  %1533 = phi float [ 0.000000e+00, %615 ], [ %1528, %1524 ], [ 0.000000e+00, %1518 ]
  %1534 = phi float [ 0.000000e+00, %615 ], [ %1529, %1524 ], [ 0.000000e+00, %1518 ]
  %1535 = phi float [ 0.000000e+00, %615 ], [ %1530, %1524 ], [ 0.000000e+00, %1518 ]
  %1536 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %22, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %1537 = extractvalue %dx.types.CBufRet.f32 %1536, 1
  %1538 = fmul fast float %1537, %1533
  %1539 = fmul fast float %1537, %1534
  %1540 = fmul fast float %1537, %1535
  %1541 = call float @dx.op.binary.f32(i32 35, float %1539, float %1540)  ; FMax(a,b)
  %1542 = call float @dx.op.binary.f32(i32 35, float %1538, float %1541)  ; FMax(a,b)
  %1543 = extractvalue %dx.types.CBufRet.f32 %51, 3
  %1544 = fcmp fast ogt float %1542, %1543
  br i1 %1544, label %1545, label %1550

; <label>:1545                                    ; preds = %1531
  %1546 = fdiv fast float %1543, %1542
  %1547 = fmul fast float %1546, %1538
  %1548 = fmul fast float %1546, %1539
  %1549 = fmul fast float %1546, %1540
  br label %1550

; <label>:1550                                    ; preds = %1545, %1531, %50
  %1551 = phi float [ %1547, %1545 ], [ %1538, %1531 ], [ 0.000000e+00, %50 ]
  %1552 = phi float [ %1548, %1545 ], [ %1539, %1531 ], [ 0.000000e+00, %50 ]
  %1553 = phi float [ %1549, %1545 ], [ %1540, %1531 ], [ 0.000000e+00, %50 ]
  %1554 = phi float [ %1532, %1545 ], [ %1532, %1531 ], [ %52, %50 ]
  %1555 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4100, i32 777 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<3xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1555, i32 %24, i32 %25, i32 %26, float %1551, float %1552, float %1553, float %1551, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %1556 = call float @dx.op.binary.f32(i32 36, float %1554, float 6.550400e+04)  ; FMin(a,b)
  %1557 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4100, i32 265 })  ; AnnotateHandle(res,props)  resource: RWTexture3D<F32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1557, i32 %24, i32 %25, i32 %26, float %1556, float %1556, float %1556, float %1556, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1558

; <label>:1558                                    ; preds = %1550, %46, %0
  ret void

; <label>:1559                                    ; preds = %1446
  %1560 = fsub fast float %1433, %1428
  %1561 = call float @dx.op.unary.f32(i32 6, float %1560)  ; FAbs(value)
  %1562 = fsub fast float %1561, %1434
  %1563 = fdiv fast float %1562, %1435
  %1564 = call float @dx.op.unary.f32(i32 7, float %1563)  ; Saturate(value)
  %1565 = fsub fast float 1.000000e+00, %1564
  br label %1566

; <label>:1566                                    ; preds = %1559, %1446
  %1567 = phi float [ %1565, %1559 ], [ %1450, %1446 ]
  %1568 = fcmp uge float %1429, 1.000000e+00
  %1569 = or i1 %1088, %1568
  %1570 = select i1 %1568, float 0.000000e+00, float 1.000000e+00
  br i1 %1569, label %1578, label %1571

; <label>:1571                                    ; preds = %1566
  %1572 = fsub fast float %1433, %1429
  %1573 = call float @dx.op.unary.f32(i32 6, float %1572)  ; FAbs(value)
  %1574 = fsub fast float %1573, %1434
  %1575 = fdiv fast float %1574, %1435
  %1576 = call float @dx.op.unary.f32(i32 7, float %1575)  ; Saturate(value)
  %1577 = fsub fast float 1.000000e+00, %1576
  br label %1578

; <label>:1578                                    ; preds = %1571, %1566
  %1579 = phi float [ %1577, %1571 ], [ %1570, %1566 ]
  %1580 = fcmp uge float %1430, 1.000000e+00
  %1581 = or i1 %1088, %1580
  %1582 = select i1 %1580, float 0.000000e+00, float 1.000000e+00
  br i1 %1581, label %1590, label %1583

; <label>:1583                                    ; preds = %1578
  %1584 = fsub fast float %1433, %1430
  %1585 = call float @dx.op.unary.f32(i32 6, float %1584)  ; FAbs(value)
  %1586 = fsub fast float %1585, %1434
  %1587 = fdiv fast float %1586, %1435
  %1588 = call float @dx.op.unary.f32(i32 7, float %1587)  ; Saturate(value)
  %1589 = fsub fast float 1.000000e+00, %1588
  br label %1590

; <label>:1590                                    ; preds = %1583, %1578
  %1591 = phi float [ %1589, %1583 ], [ %1582, %1578 ]
  %1592 = fmul fast float %1447, %1408
  %1593 = fmul fast float %1567, %1409
  %1594 = fmul fast float %1579, %1411
  %1595 = fmul fast float %1591, %1412
  %1596 = call float @dx.op.dot4.f32(i32 56, float %1592, float %1593, float %1594, float %1595, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1597 = fmul fast float %1596, %1421
  %1598 = fcmp fast ogt float %1597, 0.000000e+00
  br i1 %1598, label %1451, label %1234
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!32}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !21, !24, !28}
!5 = !{!6, !8, !9, !11, !12, !14, !15, !16, !17, !18, !19, !20}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 4, i32 0, !7}
!9 = !{i32 2, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 4, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 4, i32 0, !7}
!12 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 16}
!14 = !{i32 5, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!15 = !{i32 6, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 6, i32 1, i32 11, i32 0, null}
!16 = !{i32 7, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 7, i32 1, i32 11, i32 0, null}
!17 = !{i32 8, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 12, i32 0, !13}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !7}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 11, i32 1, i32 2, i32 0, !7}
!21 = !{!22, !23}
!22 = !{i32 0, %"class.RWTexture3D<vector<float, 3> >"* undef, !"", i32 0, i32 0, i32 1, i32 4, i1 false, i1 false, i1 false, !7}
!23 = !{i32 1, %"class.RWTexture3D<float>"* undef, !"", i32 0, i32 1, i32 1, i32 4, i1 false, i1 false, i1 false, !7}
!24 = !{!25, !26, !27}
!25 = !{i32 0, %hostlayout._RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 880, null}
!26 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!27 = !{i32 2, %UniformBufferConstants_LumenCardScene* undef, !"", i32 0, i32 2, i32 1, i32 196, null}
!28 = !{!29, !30, !31}
!29 = !{i32 0, %struct.SamplerState* undef, !"", i32 1000, i32 1, i32 1, i32 0, null}
!30 = !{i32 1, %struct.SamplerState* undef, !"", i32 1000, i32 4, i32 1, i32 0, null}
!31 = !{i32 2, %struct.SamplerState* undef, !"", i32 1000, i32 5, i32 1, i32 0, null}
!32 = !{void ()* @TranslucencyVolumeTraceVoxelsCS, !"TranslucencyVolumeTraceVoxelsCS", null, !4, !33}
!33 = !{i32 0, i64 16, i32 4, !34, i32 5, !35}
!34 = !{i32 8, i32 8, i32 1}
!35 = !{i32 0}
!36 = distinct !{!36, !"dx.controlflow.hints", i32 2}
!37 = distinct !{!37, !38}
!38 = !{!"llvm.loop.unroll.disable"}
!39 = distinct !{!39, !38}
!40 = !{!41, !41, i64 0}
!41 = !{!"int", !42, i64 0}
!42 = !{!"omnipotent char", !43, i64 0}
!43 = !{!"Simple C/C++ TBAA"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z: %agg.result"}
!46 = distinct !{!46, !"\01?GetLumenMeshCardsData@@YA?AUFLumenMeshCardsData@@I@Z"}
!47 = !{!48, !50, !52}
!48 = distinct !{!48, !49, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z: %agg.result"}
!49 = distinct !{!49, !"\01?SampleLumenMeshCards@@YA?AUFSurfaceCacheSample@@V?$vector@I$01@@IV?$vector@M$02@@1MM_NI@Z"}
!50 = distinct !{!50, !51, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z: %ConeTraceResult"}
!51 = distinct !{!51, !"\01?EvaluateGlobalDistanceFieldHit@@YAXUFConeTraceInput@@UFGlobalSDFTraceResult@@UFConeTraceResult@@@Z"}
!52 = distinct !{!52, !53, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z: %OutResult"}
!53 = distinct !{!53, !"\01?RayTraceGlobalDistanceField@@YAXUFConeTraceInput@@UFConeTraceResult@@@Z"}
!54 = !{!50, !52}
