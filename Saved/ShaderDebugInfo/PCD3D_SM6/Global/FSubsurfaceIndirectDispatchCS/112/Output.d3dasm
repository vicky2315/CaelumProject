;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: f61e7910fbfc8f2bffb019835389989e
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float4 SubsurfaceParams;                      ; Offset:   16
;       float2 Output_Extent;                         ; Offset:   64
;       float2 Output_ExtentInverse;                  ; Offset:   72
;       float2 Output_ScreenPosToViewportScale;       ; Offset:   80
;       float2 Output_ScreenPosToViewportBias;        ; Offset:   88
;       uint2 Output_ViewportMin;                     ; Offset:   96
;       uint2 Output_ViewportMax;                     ; Offset:  104
;       float2 Output_ViewportSize;                   ; Offset:  112
;       float2 Output_ViewportSizeInverse;            ; Offset:  120
;       float2 Output_UVViewportMin;                  ; Offset:  128
;       float2 Output_UVViewportMax;                  ; Offset:  136
;       float2 Output_UVViewportSize;                 ; Offset:  144
;       float2 Output_UVViewportSizeInverse;          ; Offset:  152
;       float2 Output_UVViewportBilinearMin;          ; Offset:  160
;       float2 Output_UVViewportBilinearMax;          ; Offset:  168
;       float2 SubsurfaceInput0_Extent;               ; Offset:  224
;       float2 SubsurfaceInput0_ExtentInverse;        ; Offset:  232
;       float2 SubsurfaceInput0_ScreenPosToViewportScale;; Offset:  240
;       float2 SubsurfaceInput0_ScreenPosToViewportBias;; Offset:  248
;       uint2 SubsurfaceInput0_ViewportMin;           ; Offset:  256
;       uint2 SubsurfaceInput0_ViewportMax;           ; Offset:  264
;       float2 SubsurfaceInput0_ViewportSize;         ; Offset:  272
;       float2 SubsurfaceInput0_ViewportSizeInverse;  ; Offset:  280
;       float2 SubsurfaceInput0_UVViewportMin;        ; Offset:  288
;       float2 SubsurfaceInput0_UVViewportMax;        ; Offset:  296
;       float2 SubsurfaceInput0_UVViewportSize;       ; Offset:  304
;       float2 SubsurfaceInput0_UVViewportSizeInverse;; Offset:  312
;       float2 SubsurfaceInput0_UVViewportBilinearMin;; Offset:  320
;       float2 SubsurfaceInput0_UVViewportBilinearMax;; Offset:  328
;       float2 SubsurfaceInput1_Extent;               ; Offset:  368
;       float2 SubsurfaceInput1_ExtentInverse;        ; Offset:  376
;       float2 SubsurfaceInput1_ScreenPosToViewportScale;; Offset:  384
;       float2 SubsurfaceInput1_ScreenPosToViewportBias;; Offset:  392
;       uint2 SubsurfaceInput1_ViewportMin;           ; Offset:  400
;       uint2 SubsurfaceInput1_ViewportMax;           ; Offset:  408
;       float2 SubsurfaceInput1_ViewportSize;         ; Offset:  416
;       float2 SubsurfaceInput1_ViewportSizeInverse;  ; Offset:  424
;       float2 SubsurfaceInput1_UVViewportMin;        ; Offset:  432
;       float2 SubsurfaceInput1_UVViewportMax;        ; Offset:  440
;       float2 SubsurfaceInput1_UVViewportSize;       ; Offset:  448
;       float2 SubsurfaceInput1_UVViewportSizeInverse;; Offset:  456
;       float2 SubsurfaceInput1_UVViewportBilinearMin;; Offset:  464
;       float2 SubsurfaceInput1_UVViewportBilinearMax;; Offset:  472
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   480
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SubsurfaceSampler0                sampler      NA          NA      S1             s1     1
; View_SSProfilesTexture            texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T2             t2     1
; SubsurfaceInput0_Texture          texture     f32          2d      T3             t3     1
; GroupBuffer                       texture     u32         buf      T4             t4     1
; SSSColorUAV                           UAV     f32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { <4 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x i32>, <2 x i32>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float> }
%struct.SamplerState = type { i32 }

define void @MainIndirectDispatchCS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 13, i32 480 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %11 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %12 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %13 = shl i32 %11, 1
  %14 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %15 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %13, i32 undef)  ; BufferLoad(srv,index,wot)
  %16 = extractvalue %dx.types.ResRet.i32 %15, 0
  %17 = or i32 %13, 1
  %18 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %14, i32 %17, i32 undef)  ; BufferLoad(srv,index,wot)
  %19 = extractvalue %dx.types.ResRet.i32 %18, 0
  %20 = uitofp i32 %16 to float
  %21 = uitofp i32 %19 to float
  %22 = fmul fast float %20, 8.000000e+00
  %23 = fmul fast float %21, 8.000000e+00
  %24 = and i32 %12, 7
  %25 = uitofp i32 %24 to float
  %26 = lshr i32 %12, 3
  %27 = uitofp i32 %26 to float
  %28 = fadd fast float %22, %25
  %29 = fadd fast float %23, %27
  %30 = fptoui float %28 to i32
  %31 = fptoui float %29 to i32
  %32 = and i32 %30, 536870911
  %33 = and i32 %31, 536870911
  %34 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.i32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.i32 %34, 1
  %37 = add i32 %32, %35
  %38 = add i32 %33, %36
  %39 = uitofp i32 %37 to float
  %40 = uitofp i32 %38 to float
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 3
  %44 = fadd fast float %39, 5.000000e-01
  %45 = fadd fast float %40, 5.000000e-01
  %46 = fmul fast float %44, %42
  %47 = fmul fast float %45, %43
  %48 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %50 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %46, float %47, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %51 = extractvalue %dx.types.ResRet.f32 %50, 3
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %53 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %46, float %47, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %54 = extractvalue %dx.types.ResRet.f32 %53, 0
  %55 = fmul fast float %51, 2.550000e+02
  %56 = fadd fast float %55, 5.000000e-01
  %57 = fptoui float %56 to i32
  %58 = and i32 %57, 14
  %59 = icmp eq i32 %58, 2
  %60 = and i32 %57, 12
  %61 = icmp eq i32 %60, 4
  %62 = or i1 %61, %59
  %63 = icmp eq i32 %58, 8
  %64 = or i1 %63, %62
  %65 = fmul fast float %54, 2.550000e+02
  %66 = fadd fast float %65, 5.000000e-01
  %67 = fptoui float %66 to i32
  %68 = select i1 %64, i32 %67, i32 0
  %69 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %70 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 4, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %71 = extractvalue %dx.types.ResRet.f32 %70, 3
  %72 = call float @dx.op.unary.f32(i32 6, float %71)  ; FAbs(value)
  %73 = fcmp fast olt float %72, 0x3F847AE140000000
  br i1 %73, label %1498, label %74, !dx.controlflow.hints !24

; <label>:74                                      ; preds = %0
  %75 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.f32 %75, 2
  %77 = extractvalue %dx.types.CBufRet.f32 %75, 3
  %78 = extractvalue %dx.types.CBufRet.f32 %75, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %75, 1
  %80 = call float @dx.op.binary.f32(i32 35, float %46, float %78)  ; FMax(a,b)
  %81 = call float @dx.op.binary.f32(i32 35, float %47, float %79)  ; FMax(a,b)
  %82 = call float @dx.op.binary.f32(i32 36, float %80, float %76)  ; FMin(a,b)
  %83 = call float @dx.op.binary.f32(i32 36, float %81, float %77)  ; FMin(a,b)
  %84 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %85 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %86 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %82, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %87 = extractvalue %dx.types.ResRet.f32 %86, 3
  %88 = fcmp fast ogt float %87, 0.000000e+00
  br i1 %88, label %89, label %1485, !dx.controlflow.hints !25

; <label>:89                                      ; preds = %74
  %90 = extractvalue %dx.types.ResRet.f32 %86, 2
  %91 = extractvalue %dx.types.ResRet.f32 %86, 1
  %92 = extractvalue %dx.types.ResRet.f32 %86, 0
  %93 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %94 = extractvalue %dx.types.CBufRet.f32 %93, 0
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 2
  %97 = extractvalue %dx.types.ResRet.f32 %53, 3
  %98 = and i32 %57, 15
  %99 = select i1 %64, float %97, float 0.000000e+00
  %100 = icmp eq i32 %98, 5
  %101 = icmp eq i32 %98, 9
  %102 = or i1 %100, %101
  %103 = select i1 %102, float 1.000000e+00, float 0.000000e+00
  %104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.f32 %104, 0
  %106 = fdiv fast float %105, %87
  %107 = fmul fast float %94, 1.024000e+03
  %108 = fmul fast float %107, %96
  %109 = fmul fast float %108, %106
  %110 = fmul fast float %109, %103
  %111 = fmul fast float %110, %99
  %112 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 6, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %113 = extractvalue %dx.types.ResRet.f32 %112, 0
  %114 = extractvalue %dx.types.ResRet.f32 %112, 1
  %115 = extractvalue %dx.types.ResRet.f32 %112, 2
  %116 = fadd fast float %113, 0x3EE4F8B580000000
  %117 = fadd fast float %114, 0x3EE4F8B580000000
  %118 = fadd fast float %115, 0x3EE4F8B580000000
  %119 = fmul fast float %113, %92
  %120 = fmul fast float %114, %91
  %121 = fmul fast float %115, %90
  %122 = extractvalue %dx.types.ResRet.f32 %70, 0
  %123 = extractvalue %dx.types.ResRet.f32 %70, 1
  %124 = extractvalue %dx.types.ResRet.f32 %70, 2
  %125 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 7, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %126 = extractvalue %dx.types.ResRet.f32 %125, 0
  %127 = extractvalue %dx.types.ResRet.f32 %125, 1
  %128 = extractvalue %dx.types.ResRet.f32 %125, 2
  %129 = extractvalue %dx.types.ResRet.f32 %125, 3
  %130 = fmul fast float %111, 3.000000e+00
  %131 = fmul fast float %130, %129
  %132 = fsub fast float %46, %131
  %133 = call float @dx.op.binary.f32(i32 35, float %132, float %78)  ; FMax(a,b)
  %134 = call float @dx.op.binary.f32(i32 36, float %133, float %76)  ; FMin(a,b)
  %135 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %134, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %136 = extractvalue %dx.types.ResRet.f32 %135, 0
  %137 = extractvalue %dx.types.ResRet.f32 %135, 1
  %138 = extractvalue %dx.types.ResRet.f32 %135, 2
  %139 = extractvalue %dx.types.ResRet.f32 %135, 3
  %140 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %134, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %141 = extractvalue %dx.types.ResRet.f32 %140, 3
  %142 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %134, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %143 = extractvalue %dx.types.ResRet.f32 %142, 0
  %144 = fmul fast float %141, 2.550000e+02
  %145 = fadd fast float %144, 5.000000e-01
  %146 = fptoui float %145 to i32
  %147 = and i32 %146, 14
  %148 = icmp eq i32 %147, 2
  %149 = and i32 %146, 12
  %150 = icmp eq i32 %149, 4
  %151 = or i1 %150, %148
  %152 = icmp eq i32 %147, 8
  %153 = or i1 %152, %151
  %154 = fmul fast float %143, 2.550000e+02
  %155 = fadd fast float %154, 5.000000e-01
  %156 = fptoui float %155 to i32
  %157 = select i1 %153, i32 %156, i32 0
  %158 = icmp eq i32 %157, %68
  %159 = select i1 %158, float 1.000000e+00, float %122
  %160 = select i1 %158, float 1.000000e+00, float %123
  %161 = select i1 %158, float 1.000000e+00, float %124
  %162 = fcmp fast ogt float %139, 0.000000e+00
  %163 = uitofp i1 %162 to float
  %164 = extractvalue %dx.types.CBufRet.f32 %104, 1
  %165 = fmul fast float %164, 0x3F9EB851E0000000
  %166 = fsub fast float %87, %139
  %167 = call float @dx.op.unary.f32(i32 6, float %166)  ; FAbs(value)
  %168 = fmul fast float %165, %167
  %169 = call float @dx.op.unary.f32(i32 7, float %168)  ; Saturate(value)
  %170 = fsub fast float 1.000000e+00, %169
  %171 = fmul fast float %170, %163
  %172 = fmul fast float %171, %136
  %173 = fmul fast float %172, %159
  %174 = fmul fast float %171, %137
  %175 = fmul fast float %174, %160
  %176 = fmul fast float %171, %138
  %177 = fmul fast float %176, %161
  %178 = fadd fast float %131, %46
  %179 = call float @dx.op.binary.f32(i32 35, float %178, float %78)  ; FMax(a,b)
  %180 = call float @dx.op.binary.f32(i32 36, float %179, float %76)  ; FMin(a,b)
  %181 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %180, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = extractvalue %dx.types.ResRet.f32 %181, 3
  %186 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %180, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 3
  %188 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %180, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %189 = extractvalue %dx.types.ResRet.f32 %188, 0
  %190 = fmul fast float %187, 2.550000e+02
  %191 = fadd fast float %190, 5.000000e-01
  %192 = fptoui float %191 to i32
  %193 = and i32 %192, 14
  %194 = icmp eq i32 %193, 2
  %195 = and i32 %192, 12
  %196 = icmp eq i32 %195, 4
  %197 = or i1 %196, %194
  %198 = icmp eq i32 %193, 8
  %199 = or i1 %198, %197
  %200 = fmul fast float %189, 2.550000e+02
  %201 = fadd fast float %200, 5.000000e-01
  %202 = fptoui float %201 to i32
  %203 = select i1 %199, i32 %202, i32 0
  %204 = icmp eq i32 %203, %68
  %205 = select i1 %204, float 1.000000e+00, float %122
  %206 = select i1 %204, float 1.000000e+00, float %123
  %207 = select i1 %204, float 1.000000e+00, float %124
  %208 = fcmp fast ogt float %185, 0.000000e+00
  %209 = uitofp i1 %208 to float
  %210 = fsub fast float %87, %185
  %211 = call float @dx.op.unary.f32(i32 6, float %210)  ; FAbs(value)
  %212 = fmul fast float %165, %211
  %213 = call float @dx.op.unary.f32(i32 7, float %212)  ; Saturate(value)
  %214 = fsub fast float 1.000000e+00, %213
  %215 = fmul fast float %214, %209
  %216 = fmul fast float %215, %182
  %217 = fmul fast float %216, %205
  %218 = fmul fast float %215, %183
  %219 = fmul fast float %218, %206
  %220 = fmul fast float %215, %184
  %221 = fmul fast float %220, %207
  %222 = fadd fast float %217, %173
  %223 = fadd fast float %219, %175
  %224 = fadd fast float %221, %177
  %225 = fadd fast float %215, %171
  %226 = fmul fast float %222, %126
  %227 = fmul fast float %223, %127
  %228 = fmul fast float %224, %128
  %229 = fadd fast float %226, %119
  %230 = fadd fast float %227, %120
  %231 = fadd fast float %228, %121
  %232 = fmul fast float %225, %126
  %233 = fmul fast float %225, %127
  %234 = fmul fast float %225, %128
  %235 = fadd fast float %116, %232
  %236 = fadd fast float %117, %233
  %237 = fadd fast float %118, %234
  %238 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 8, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %239 = extractvalue %dx.types.ResRet.f32 %238, 0
  %240 = extractvalue %dx.types.ResRet.f32 %238, 1
  %241 = extractvalue %dx.types.ResRet.f32 %238, 2
  %242 = extractvalue %dx.types.ResRet.f32 %238, 3
  %243 = fmul fast float %130, %242
  %244 = fsub fast float %46, %243
  %245 = call float @dx.op.binary.f32(i32 35, float %244, float %78)  ; FMax(a,b)
  %246 = call float @dx.op.binary.f32(i32 36, float %245, float %76)  ; FMin(a,b)
  %247 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %246, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %248 = extractvalue %dx.types.ResRet.f32 %247, 0
  %249 = extractvalue %dx.types.ResRet.f32 %247, 1
  %250 = extractvalue %dx.types.ResRet.f32 %247, 2
  %251 = extractvalue %dx.types.ResRet.f32 %247, 3
  %252 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %246, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %253 = extractvalue %dx.types.ResRet.f32 %252, 3
  %254 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %246, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %255 = extractvalue %dx.types.ResRet.f32 %254, 0
  %256 = fmul fast float %253, 2.550000e+02
  %257 = fadd fast float %256, 5.000000e-01
  %258 = fptoui float %257 to i32
  %259 = and i32 %258, 14
  %260 = icmp eq i32 %259, 2
  %261 = and i32 %258, 12
  %262 = icmp eq i32 %261, 4
  %263 = or i1 %262, %260
  %264 = icmp eq i32 %259, 8
  %265 = or i1 %264, %263
  %266 = fmul fast float %255, 2.550000e+02
  %267 = fadd fast float %266, 5.000000e-01
  %268 = fptoui float %267 to i32
  %269 = select i1 %265, i32 %268, i32 0
  %270 = icmp eq i32 %269, %68
  %271 = select i1 %270, float 1.000000e+00, float %122
  %272 = select i1 %270, float 1.000000e+00, float %123
  %273 = select i1 %270, float 1.000000e+00, float %124
  %274 = fcmp fast ogt float %251, 0.000000e+00
  %275 = uitofp i1 %274 to float
  %276 = fsub fast float %87, %251
  %277 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %278 = fmul fast float %165, %277
  %279 = call float @dx.op.unary.f32(i32 7, float %278)  ; Saturate(value)
  %280 = fsub fast float 1.000000e+00, %279
  %281 = fmul fast float %280, %275
  %282 = fmul fast float %281, %248
  %283 = fmul fast float %282, %271
  %284 = fmul fast float %281, %249
  %285 = fmul fast float %284, %272
  %286 = fmul fast float %281, %250
  %287 = fmul fast float %286, %273
  %288 = fadd fast float %243, %46
  %289 = call float @dx.op.binary.f32(i32 35, float %288, float %78)  ; FMax(a,b)
  %290 = call float @dx.op.binary.f32(i32 36, float %289, float %76)  ; FMin(a,b)
  %291 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %290, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %292 = extractvalue %dx.types.ResRet.f32 %291, 0
  %293 = extractvalue %dx.types.ResRet.f32 %291, 1
  %294 = extractvalue %dx.types.ResRet.f32 %291, 2
  %295 = extractvalue %dx.types.ResRet.f32 %291, 3
  %296 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %290, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %297 = extractvalue %dx.types.ResRet.f32 %296, 3
  %298 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %290, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %299 = extractvalue %dx.types.ResRet.f32 %298, 0
  %300 = fmul fast float %297, 2.550000e+02
  %301 = fadd fast float %300, 5.000000e-01
  %302 = fptoui float %301 to i32
  %303 = and i32 %302, 14
  %304 = icmp eq i32 %303, 2
  %305 = and i32 %302, 12
  %306 = icmp eq i32 %305, 4
  %307 = or i1 %306, %304
  %308 = icmp eq i32 %303, 8
  %309 = or i1 %308, %307
  %310 = fmul fast float %299, 2.550000e+02
  %311 = fadd fast float %310, 5.000000e-01
  %312 = fptoui float %311 to i32
  %313 = select i1 %309, i32 %312, i32 0
  %314 = icmp eq i32 %313, %68
  %315 = select i1 %314, float 1.000000e+00, float %122
  %316 = select i1 %314, float 1.000000e+00, float %123
  %317 = select i1 %314, float 1.000000e+00, float %124
  %318 = fcmp fast ogt float %295, 0.000000e+00
  %319 = uitofp i1 %318 to float
  %320 = fsub fast float %87, %295
  %321 = call float @dx.op.unary.f32(i32 6, float %320)  ; FAbs(value)
  %322 = fmul fast float %165, %321
  %323 = call float @dx.op.unary.f32(i32 7, float %322)  ; Saturate(value)
  %324 = fsub fast float 1.000000e+00, %323
  %325 = fmul fast float %324, %319
  %326 = fmul fast float %325, %292
  %327 = fmul fast float %326, %315
  %328 = fmul fast float %325, %293
  %329 = fmul fast float %328, %316
  %330 = fmul fast float %325, %294
  %331 = fmul fast float %330, %317
  %332 = fadd fast float %327, %283
  %333 = fadd fast float %329, %285
  %334 = fadd fast float %331, %287
  %335 = fadd fast float %325, %281
  %336 = fmul fast float %332, %239
  %337 = fmul fast float %333, %240
  %338 = fmul fast float %334, %241
  %339 = fadd fast float %229, %336
  %340 = fadd fast float %230, %337
  %341 = fadd fast float %231, %338
  %342 = fmul fast float %335, %239
  %343 = fmul fast float %335, %240
  %344 = fmul fast float %335, %241
  %345 = fadd fast float %235, %342
  %346 = fadd fast float %236, %343
  %347 = fadd fast float %237, %344
  %348 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 9, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %349 = extractvalue %dx.types.ResRet.f32 %348, 0
  %350 = extractvalue %dx.types.ResRet.f32 %348, 1
  %351 = extractvalue %dx.types.ResRet.f32 %348, 2
  %352 = extractvalue %dx.types.ResRet.f32 %348, 3
  %353 = fmul fast float %130, %352
  %354 = fsub fast float %46, %353
  %355 = call float @dx.op.binary.f32(i32 35, float %354, float %78)  ; FMax(a,b)
  %356 = call float @dx.op.binary.f32(i32 36, float %355, float %76)  ; FMin(a,b)
  %357 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %356, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %358 = extractvalue %dx.types.ResRet.f32 %357, 0
  %359 = extractvalue %dx.types.ResRet.f32 %357, 1
  %360 = extractvalue %dx.types.ResRet.f32 %357, 2
  %361 = extractvalue %dx.types.ResRet.f32 %357, 3
  %362 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %356, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %363 = extractvalue %dx.types.ResRet.f32 %362, 3
  %364 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %356, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %365 = extractvalue %dx.types.ResRet.f32 %364, 0
  %366 = fmul fast float %363, 2.550000e+02
  %367 = fadd fast float %366, 5.000000e-01
  %368 = fptoui float %367 to i32
  %369 = and i32 %368, 14
  %370 = icmp eq i32 %369, 2
  %371 = and i32 %368, 12
  %372 = icmp eq i32 %371, 4
  %373 = or i1 %372, %370
  %374 = icmp eq i32 %369, 8
  %375 = or i1 %374, %373
  %376 = fmul fast float %365, 2.550000e+02
  %377 = fadd fast float %376, 5.000000e-01
  %378 = fptoui float %377 to i32
  %379 = select i1 %375, i32 %378, i32 0
  %380 = icmp eq i32 %379, %68
  %381 = select i1 %380, float 1.000000e+00, float %122
  %382 = select i1 %380, float 1.000000e+00, float %123
  %383 = select i1 %380, float 1.000000e+00, float %124
  %384 = fcmp fast ogt float %361, 0.000000e+00
  %385 = uitofp i1 %384 to float
  %386 = fsub fast float %87, %361
  %387 = call float @dx.op.unary.f32(i32 6, float %386)  ; FAbs(value)
  %388 = fmul fast float %165, %387
  %389 = call float @dx.op.unary.f32(i32 7, float %388)  ; Saturate(value)
  %390 = fsub fast float 1.000000e+00, %389
  %391 = fmul fast float %390, %385
  %392 = fmul fast float %391, %358
  %393 = fmul fast float %392, %381
  %394 = fmul fast float %391, %359
  %395 = fmul fast float %394, %382
  %396 = fmul fast float %391, %360
  %397 = fmul fast float %396, %383
  %398 = fadd fast float %353, %46
  %399 = call float @dx.op.binary.f32(i32 35, float %398, float %78)  ; FMax(a,b)
  %400 = call float @dx.op.binary.f32(i32 36, float %399, float %76)  ; FMin(a,b)
  %401 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %400, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %402 = extractvalue %dx.types.ResRet.f32 %401, 0
  %403 = extractvalue %dx.types.ResRet.f32 %401, 1
  %404 = extractvalue %dx.types.ResRet.f32 %401, 2
  %405 = extractvalue %dx.types.ResRet.f32 %401, 3
  %406 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %400, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %407 = extractvalue %dx.types.ResRet.f32 %406, 3
  %408 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %400, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %409 = extractvalue %dx.types.ResRet.f32 %408, 0
  %410 = fmul fast float %407, 2.550000e+02
  %411 = fadd fast float %410, 5.000000e-01
  %412 = fptoui float %411 to i32
  %413 = and i32 %412, 14
  %414 = icmp eq i32 %413, 2
  %415 = and i32 %412, 12
  %416 = icmp eq i32 %415, 4
  %417 = or i1 %416, %414
  %418 = icmp eq i32 %413, 8
  %419 = or i1 %418, %417
  %420 = fmul fast float %409, 2.550000e+02
  %421 = fadd fast float %420, 5.000000e-01
  %422 = fptoui float %421 to i32
  %423 = select i1 %419, i32 %422, i32 0
  %424 = icmp eq i32 %423, %68
  %425 = select i1 %424, float 1.000000e+00, float %122
  %426 = select i1 %424, float 1.000000e+00, float %123
  %427 = select i1 %424, float 1.000000e+00, float %124
  %428 = fcmp fast ogt float %405, 0.000000e+00
  %429 = uitofp i1 %428 to float
  %430 = fsub fast float %87, %405
  %431 = call float @dx.op.unary.f32(i32 6, float %430)  ; FAbs(value)
  %432 = fmul fast float %165, %431
  %433 = call float @dx.op.unary.f32(i32 7, float %432)  ; Saturate(value)
  %434 = fsub fast float 1.000000e+00, %433
  %435 = fmul fast float %434, %429
  %436 = fmul fast float %435, %402
  %437 = fmul fast float %436, %425
  %438 = fmul fast float %435, %403
  %439 = fmul fast float %438, %426
  %440 = fmul fast float %435, %404
  %441 = fmul fast float %440, %427
  %442 = fadd fast float %437, %393
  %443 = fadd fast float %439, %395
  %444 = fadd fast float %441, %397
  %445 = fadd fast float %435, %391
  %446 = fmul fast float %442, %349
  %447 = fmul fast float %443, %350
  %448 = fmul fast float %444, %351
  %449 = fadd fast float %339, %446
  %450 = fadd fast float %340, %447
  %451 = fadd fast float %341, %448
  %452 = fmul fast float %445, %349
  %453 = fmul fast float %445, %350
  %454 = fmul fast float %445, %351
  %455 = fadd fast float %345, %452
  %456 = fadd fast float %346, %453
  %457 = fadd fast float %347, %454
  %458 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 10, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %459 = extractvalue %dx.types.ResRet.f32 %458, 0
  %460 = extractvalue %dx.types.ResRet.f32 %458, 1
  %461 = extractvalue %dx.types.ResRet.f32 %458, 2
  %462 = extractvalue %dx.types.ResRet.f32 %458, 3
  %463 = fmul fast float %130, %462
  %464 = fsub fast float %46, %463
  %465 = call float @dx.op.binary.f32(i32 35, float %464, float %78)  ; FMax(a,b)
  %466 = call float @dx.op.binary.f32(i32 36, float %465, float %76)  ; FMin(a,b)
  %467 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %466, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %468 = extractvalue %dx.types.ResRet.f32 %467, 0
  %469 = extractvalue %dx.types.ResRet.f32 %467, 1
  %470 = extractvalue %dx.types.ResRet.f32 %467, 2
  %471 = extractvalue %dx.types.ResRet.f32 %467, 3
  %472 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %466, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %473 = extractvalue %dx.types.ResRet.f32 %472, 3
  %474 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %466, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %475 = extractvalue %dx.types.ResRet.f32 %474, 0
  %476 = fmul fast float %473, 2.550000e+02
  %477 = fadd fast float %476, 5.000000e-01
  %478 = fptoui float %477 to i32
  %479 = and i32 %478, 14
  %480 = icmp eq i32 %479, 2
  %481 = and i32 %478, 12
  %482 = icmp eq i32 %481, 4
  %483 = or i1 %482, %480
  %484 = icmp eq i32 %479, 8
  %485 = or i1 %484, %483
  %486 = fmul fast float %475, 2.550000e+02
  %487 = fadd fast float %486, 5.000000e-01
  %488 = fptoui float %487 to i32
  %489 = select i1 %485, i32 %488, i32 0
  %490 = icmp eq i32 %489, %68
  %491 = select i1 %490, float 1.000000e+00, float %122
  %492 = select i1 %490, float 1.000000e+00, float %123
  %493 = select i1 %490, float 1.000000e+00, float %124
  %494 = fcmp fast ogt float %471, 0.000000e+00
  %495 = uitofp i1 %494 to float
  %496 = fsub fast float %87, %471
  %497 = call float @dx.op.unary.f32(i32 6, float %496)  ; FAbs(value)
  %498 = fmul fast float %165, %497
  %499 = call float @dx.op.unary.f32(i32 7, float %498)  ; Saturate(value)
  %500 = fsub fast float 1.000000e+00, %499
  %501 = fmul fast float %500, %495
  %502 = fmul fast float %501, %468
  %503 = fmul fast float %502, %491
  %504 = fmul fast float %501, %469
  %505 = fmul fast float %504, %492
  %506 = fmul fast float %501, %470
  %507 = fmul fast float %506, %493
  %508 = fadd fast float %463, %46
  %509 = call float @dx.op.binary.f32(i32 35, float %508, float %78)  ; FMax(a,b)
  %510 = call float @dx.op.binary.f32(i32 36, float %509, float %76)  ; FMin(a,b)
  %511 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %510, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %512 = extractvalue %dx.types.ResRet.f32 %511, 0
  %513 = extractvalue %dx.types.ResRet.f32 %511, 1
  %514 = extractvalue %dx.types.ResRet.f32 %511, 2
  %515 = extractvalue %dx.types.ResRet.f32 %511, 3
  %516 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %48, %dx.types.Handle %49, float %510, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %517 = extractvalue %dx.types.ResRet.f32 %516, 3
  %518 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %52, %dx.types.Handle %49, float %510, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %519 = extractvalue %dx.types.ResRet.f32 %518, 0
  %520 = fmul fast float %517, 2.550000e+02
  %521 = fadd fast float %520, 5.000000e-01
  %522 = fptoui float %521 to i32
  %523 = and i32 %522, 14
  %524 = icmp eq i32 %523, 2
  %525 = and i32 %522, 12
  %526 = icmp eq i32 %525, 4
  %527 = or i1 %526, %524
  %528 = icmp eq i32 %523, 8
  %529 = or i1 %528, %527
  %530 = fmul fast float %519, 2.550000e+02
  %531 = fadd fast float %530, 5.000000e-01
  %532 = fptoui float %531 to i32
  %533 = select i1 %529, i32 %532, i32 0
  %534 = icmp eq i32 %533, %68
  %535 = select i1 %534, float 1.000000e+00, float %122
  %536 = select i1 %534, float 1.000000e+00, float %123
  %537 = select i1 %534, float 1.000000e+00, float %124
  %538 = fcmp fast ogt float %515, 0.000000e+00
  %539 = uitofp i1 %538 to float
  %540 = fsub fast float %87, %515
  %541 = call float @dx.op.unary.f32(i32 6, float %540)  ; FAbs(value)
  %542 = fmul fast float %165, %541
  %543 = call float @dx.op.unary.f32(i32 7, float %542)  ; Saturate(value)
  %544 = fsub fast float 1.000000e+00, %543
  %545 = fmul fast float %544, %539
  %546 = fmul fast float %545, %512
  %547 = fmul fast float %546, %535
  %548 = fmul fast float %545, %513
  %549 = fmul fast float %548, %536
  %550 = fmul fast float %545, %514
  %551 = fmul fast float %550, %537
  %552 = fadd fast float %547, %503
  %553 = fadd fast float %549, %505
  %554 = fadd fast float %551, %507
  %555 = fadd fast float %545, %501
  %556 = fmul fast float %552, %459
  %557 = fmul fast float %553, %460
  %558 = fmul fast float %554, %461
  %559 = fadd fast float %449, %556
  %560 = fadd fast float %450, %557
  %561 = fadd fast float %451, %558
  %562 = fmul fast float %555, %459
  %563 = fmul fast float %555, %460
  %564 = fmul fast float %555, %461
  %565 = fadd fast float %455, %562
  %566 = fadd fast float %456, %563
  %567 = fadd fast float %457, %564
  %568 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %69, i32 0, i32 11, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %569 = extractvalue %dx.types.ResRet.f32 %568, 0
  %570 = extractvalue %dx.types.ResRet.f32 %568, 1
  %571 = extractvalue %dx.types.ResRet.f32 %568, 2
  %572 = extractvalue %dx.types.ResRet.f32 %568, 3
  %573 = fmul fast float %130, %572
  %574 = fsub fast float %46, %573
  %575 = call float @dx.op.binary.f32(i32 35, float %574, float %78)  ; FMax(a,b)
  %576 = call float @dx.op.binary.f32(i32 36, float %575, float %76)  ; FMin(a,b)
  %577 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %84, %dx.types.Handle %85, float %576, float %83, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %578 = extractvalue %dx.types.ResRet.f32 %577, 0
  %579 = extractvalue %dx.types.ResRet.f32 %577, 1
  %580 = extractvalue %dx.types.ResRet.f32 %577, 2
  %581 = extractvalue %dx.types.ResRet.f32 %577, 3
  %582 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %583 = extractvalue %dx.types.CBufRet.f32 %582, 2
  %584 = extractvalue %dx.types.CBufRet.f32 %582, 3
  %585 = extractvalue %dx.types.CBufRet.f32 %582, 0
  %586 = extractvalue %dx.types.CBufRet.f32 %582, 1
  %587 = call float @dx.op.binary.f32(i32 35, float %574, float %585)  ; FMax(a,b)
  %588 = call float @dx.op.binary.f32(i32 35, float %47, float %586)  ; FMax(a,b)
  %589 = call float @dx.op.binary.f32(i32 36, float %587, float %583)  ; FMin(a,b)
  %590 = call float @dx.op.binary.f32(i32 36, float %588, float %584)  ; FMin(a,b)
  %591 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %592 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %593 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %589, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %594 = extractvalue %dx.types.ResRet.f32 %593, 3
  %595 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %596 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %589, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %597 = extractvalue %dx.types.ResRet.f32 %596, 0
  %598 = fmul fast float %594, 2.550000e+02
  %599 = fadd fast float %598, 5.000000e-01
  %600 = fptoui float %599 to i32
  %601 = and i32 %600, 14
  %602 = icmp eq i32 %601, 2
  %603 = and i32 %600, 12
  %604 = icmp eq i32 %603, 4
  %605 = or i1 %604, %602
  %606 = icmp eq i32 %601, 8
  %607 = or i1 %606, %605
  %608 = fmul fast float %597, 2.550000e+02
  %609 = fadd fast float %608, 5.000000e-01
  %610 = fptoui float %609 to i32
  %611 = select i1 %607, i32 %610, i32 0
  %612 = icmp eq i32 %611, %68
  %613 = select i1 %612, float 1.000000e+00, float %122
  %614 = select i1 %612, float 1.000000e+00, float %123
  %615 = select i1 %612, float 1.000000e+00, float %124
  %616 = fcmp fast ogt float %581, 0.000000e+00
  %617 = uitofp i1 %616 to float
  %618 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %619 = extractvalue %dx.types.CBufRet.f32 %618, 1
  %620 = fmul fast float %619, 0x3F9EB851E0000000
  %621 = fsub fast float %87, %581
  %622 = call float @dx.op.unary.f32(i32 6, float %621)  ; FAbs(value)
  %623 = fmul fast float %620, %622
  %624 = call float @dx.op.unary.f32(i32 7, float %623)  ; Saturate(value)
  %625 = fsub fast float 1.000000e+00, %624
  %626 = fmul fast float %625, %617
  %627 = fmul fast float %626, %578
  %628 = fmul fast float %627, %613
  %629 = fmul fast float %626, %579
  %630 = fmul fast float %629, %614
  %631 = fmul fast float %626, %580
  %632 = fmul fast float %631, %615
  %633 = fadd fast float %573, %46
  %634 = call float @dx.op.binary.f32(i32 35, float %633, float %585)  ; FMax(a,b)
  %635 = call float @dx.op.binary.f32(i32 36, float %634, float %583)  ; FMin(a,b)
  %636 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %637 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %638 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %635, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %639 = extractvalue %dx.types.ResRet.f32 %638, 0
  %640 = extractvalue %dx.types.ResRet.f32 %638, 1
  %641 = extractvalue %dx.types.ResRet.f32 %638, 2
  %642 = extractvalue %dx.types.ResRet.f32 %638, 3
  %643 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %635, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %644 = extractvalue %dx.types.ResRet.f32 %643, 3
  %645 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %635, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %646 = extractvalue %dx.types.ResRet.f32 %645, 0
  %647 = fmul fast float %644, 2.550000e+02
  %648 = fadd fast float %647, 5.000000e-01
  %649 = fptoui float %648 to i32
  %650 = and i32 %649, 14
  %651 = icmp eq i32 %650, 2
  %652 = and i32 %649, 12
  %653 = icmp eq i32 %652, 4
  %654 = or i1 %653, %651
  %655 = icmp eq i32 %650, 8
  %656 = or i1 %655, %654
  %657 = fmul fast float %646, 2.550000e+02
  %658 = fadd fast float %657, 5.000000e-01
  %659 = fptoui float %658 to i32
  %660 = select i1 %656, i32 %659, i32 0
  %661 = icmp eq i32 %660, %68
  %662 = select i1 %661, float 1.000000e+00, float %122
  %663 = select i1 %661, float 1.000000e+00, float %123
  %664 = select i1 %661, float 1.000000e+00, float %124
  %665 = fcmp fast ogt float %642, 0.000000e+00
  %666 = uitofp i1 %665 to float
  %667 = fsub fast float %87, %642
  %668 = call float @dx.op.unary.f32(i32 6, float %667)  ; FAbs(value)
  %669 = fmul fast float %620, %668
  %670 = call float @dx.op.unary.f32(i32 7, float %669)  ; Saturate(value)
  %671 = fsub fast float 1.000000e+00, %670
  %672 = fmul fast float %671, %666
  %673 = fmul fast float %672, %639
  %674 = fmul fast float %673, %662
  %675 = fmul fast float %672, %640
  %676 = fmul fast float %675, %663
  %677 = fmul fast float %672, %641
  %678 = fmul fast float %677, %664
  %679 = fadd fast float %674, %628
  %680 = fadd fast float %676, %630
  %681 = fadd fast float %678, %632
  %682 = fadd fast float %672, %626
  %683 = fmul fast float %679, %569
  %684 = fmul fast float %680, %570
  %685 = fmul fast float %681, %571
  %686 = fadd fast float %559, %683
  %687 = fadd fast float %560, %684
  %688 = fadd fast float %561, %685
  %689 = fmul fast float %682, %569
  %690 = fmul fast float %682, %570
  %691 = fmul fast float %682, %571
  %692 = fadd fast float %565, %689
  %693 = fadd fast float %566, %690
  %694 = fadd fast float %567, %691
  %695 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %696 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %695, i32 0, i32 12, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %697 = extractvalue %dx.types.ResRet.f32 %696, 0
  %698 = extractvalue %dx.types.ResRet.f32 %696, 1
  %699 = extractvalue %dx.types.ResRet.f32 %696, 2
  %700 = extractvalue %dx.types.ResRet.f32 %696, 3
  %701 = fmul fast float %130, %700
  %702 = fsub fast float %46, %701
  %703 = call float @dx.op.binary.f32(i32 35, float %702, float %585)  ; FMax(a,b)
  %704 = call float @dx.op.binary.f32(i32 36, float %703, float %583)  ; FMin(a,b)
  %705 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %704, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %706 = extractvalue %dx.types.ResRet.f32 %705, 0
  %707 = extractvalue %dx.types.ResRet.f32 %705, 1
  %708 = extractvalue %dx.types.ResRet.f32 %705, 2
  %709 = extractvalue %dx.types.ResRet.f32 %705, 3
  %710 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %704, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %711 = extractvalue %dx.types.ResRet.f32 %710, 3
  %712 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %704, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %713 = extractvalue %dx.types.ResRet.f32 %712, 0
  %714 = fmul fast float %711, 2.550000e+02
  %715 = fadd fast float %714, 5.000000e-01
  %716 = fptoui float %715 to i32
  %717 = and i32 %716, 14
  %718 = icmp eq i32 %717, 2
  %719 = and i32 %716, 12
  %720 = icmp eq i32 %719, 4
  %721 = or i1 %720, %718
  %722 = icmp eq i32 %717, 8
  %723 = or i1 %722, %721
  %724 = fmul fast float %713, 2.550000e+02
  %725 = fadd fast float %724, 5.000000e-01
  %726 = fptoui float %725 to i32
  %727 = select i1 %723, i32 %726, i32 0
  %728 = icmp eq i32 %727, %68
  %729 = select i1 %728, float 1.000000e+00, float %122
  %730 = select i1 %728, float 1.000000e+00, float %123
  %731 = select i1 %728, float 1.000000e+00, float %124
  %732 = fcmp fast ogt float %709, 0.000000e+00
  %733 = uitofp i1 %732 to float
  %734 = fsub fast float %87, %709
  %735 = call float @dx.op.unary.f32(i32 6, float %734)  ; FAbs(value)
  %736 = fmul fast float %620, %735
  %737 = call float @dx.op.unary.f32(i32 7, float %736)  ; Saturate(value)
  %738 = fsub fast float 1.000000e+00, %737
  %739 = fmul fast float %738, %733
  %740 = fmul fast float %739, %706
  %741 = fmul fast float %740, %729
  %742 = fmul fast float %739, %707
  %743 = fmul fast float %742, %730
  %744 = fmul fast float %739, %708
  %745 = fmul fast float %744, %731
  %746 = fadd fast float %701, %46
  %747 = call float @dx.op.binary.f32(i32 35, float %746, float %585)  ; FMax(a,b)
  %748 = call float @dx.op.binary.f32(i32 36, float %747, float %583)  ; FMin(a,b)
  %749 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %748, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %750 = extractvalue %dx.types.ResRet.f32 %749, 0
  %751 = extractvalue %dx.types.ResRet.f32 %749, 1
  %752 = extractvalue %dx.types.ResRet.f32 %749, 2
  %753 = extractvalue %dx.types.ResRet.f32 %749, 3
  %754 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %748, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %755 = extractvalue %dx.types.ResRet.f32 %754, 3
  %756 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %748, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %757 = extractvalue %dx.types.ResRet.f32 %756, 0
  %758 = fmul fast float %755, 2.550000e+02
  %759 = fadd fast float %758, 5.000000e-01
  %760 = fptoui float %759 to i32
  %761 = and i32 %760, 14
  %762 = icmp eq i32 %761, 2
  %763 = and i32 %760, 12
  %764 = icmp eq i32 %763, 4
  %765 = or i1 %764, %762
  %766 = icmp eq i32 %761, 8
  %767 = or i1 %766, %765
  %768 = fmul fast float %757, 2.550000e+02
  %769 = fadd fast float %768, 5.000000e-01
  %770 = fptoui float %769 to i32
  %771 = select i1 %767, i32 %770, i32 0
  %772 = icmp eq i32 %771, %68
  %773 = select i1 %772, float 1.000000e+00, float %122
  %774 = select i1 %772, float 1.000000e+00, float %123
  %775 = select i1 %772, float 1.000000e+00, float %124
  %776 = fcmp fast ogt float %753, 0.000000e+00
  %777 = uitofp i1 %776 to float
  %778 = fsub fast float %87, %753
  %779 = call float @dx.op.unary.f32(i32 6, float %778)  ; FAbs(value)
  %780 = fmul fast float %620, %779
  %781 = call float @dx.op.unary.f32(i32 7, float %780)  ; Saturate(value)
  %782 = fsub fast float 1.000000e+00, %781
  %783 = fmul fast float %782, %777
  %784 = fmul fast float %783, %750
  %785 = fmul fast float %784, %773
  %786 = fmul fast float %783, %751
  %787 = fmul fast float %786, %774
  %788 = fmul fast float %783, %752
  %789 = fmul fast float %788, %775
  %790 = fadd fast float %785, %741
  %791 = fadd fast float %787, %743
  %792 = fadd fast float %789, %745
  %793 = fadd fast float %783, %739
  %794 = fmul fast float %790, %697
  %795 = fmul fast float %791, %698
  %796 = fmul fast float %792, %699
  %797 = fadd fast float %686, %794
  %798 = fadd fast float %687, %795
  %799 = fadd fast float %688, %796
  %800 = fmul fast float %793, %697
  %801 = fmul fast float %793, %698
  %802 = fmul fast float %793, %699
  %803 = fadd fast float %692, %800
  %804 = fadd fast float %693, %801
  %805 = fadd fast float %694, %802
  %806 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %695, i32 0, i32 13, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %807 = extractvalue %dx.types.ResRet.f32 %806, 0
  %808 = extractvalue %dx.types.ResRet.f32 %806, 1
  %809 = extractvalue %dx.types.ResRet.f32 %806, 2
  %810 = extractvalue %dx.types.ResRet.f32 %806, 3
  %811 = fmul fast float %130, %810
  %812 = fsub fast float %46, %811
  %813 = call float @dx.op.binary.f32(i32 35, float %812, float %585)  ; FMax(a,b)
  %814 = call float @dx.op.binary.f32(i32 36, float %813, float %583)  ; FMin(a,b)
  %815 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %814, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %816 = extractvalue %dx.types.ResRet.f32 %815, 0
  %817 = extractvalue %dx.types.ResRet.f32 %815, 1
  %818 = extractvalue %dx.types.ResRet.f32 %815, 2
  %819 = extractvalue %dx.types.ResRet.f32 %815, 3
  %820 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %814, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %821 = extractvalue %dx.types.ResRet.f32 %820, 3
  %822 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %814, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %823 = extractvalue %dx.types.ResRet.f32 %822, 0
  %824 = fmul fast float %821, 2.550000e+02
  %825 = fadd fast float %824, 5.000000e-01
  %826 = fptoui float %825 to i32
  %827 = and i32 %826, 14
  %828 = icmp eq i32 %827, 2
  %829 = and i32 %826, 12
  %830 = icmp eq i32 %829, 4
  %831 = or i1 %830, %828
  %832 = icmp eq i32 %827, 8
  %833 = or i1 %832, %831
  %834 = fmul fast float %823, 2.550000e+02
  %835 = fadd fast float %834, 5.000000e-01
  %836 = fptoui float %835 to i32
  %837 = select i1 %833, i32 %836, i32 0
  %838 = icmp eq i32 %837, %68
  %839 = select i1 %838, float 1.000000e+00, float %122
  %840 = select i1 %838, float 1.000000e+00, float %123
  %841 = select i1 %838, float 1.000000e+00, float %124
  %842 = fcmp fast ogt float %819, 0.000000e+00
  %843 = uitofp i1 %842 to float
  %844 = fsub fast float %87, %819
  %845 = call float @dx.op.unary.f32(i32 6, float %844)  ; FAbs(value)
  %846 = fmul fast float %620, %845
  %847 = call float @dx.op.unary.f32(i32 7, float %846)  ; Saturate(value)
  %848 = fsub fast float 1.000000e+00, %847
  %849 = fmul fast float %848, %843
  %850 = fmul fast float %849, %816
  %851 = fmul fast float %850, %839
  %852 = fmul fast float %849, %817
  %853 = fmul fast float %852, %840
  %854 = fmul fast float %849, %818
  %855 = fmul fast float %854, %841
  %856 = fadd fast float %811, %46
  %857 = call float @dx.op.binary.f32(i32 35, float %856, float %585)  ; FMax(a,b)
  %858 = call float @dx.op.binary.f32(i32 36, float %857, float %583)  ; FMin(a,b)
  %859 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %858, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %860 = extractvalue %dx.types.ResRet.f32 %859, 0
  %861 = extractvalue %dx.types.ResRet.f32 %859, 1
  %862 = extractvalue %dx.types.ResRet.f32 %859, 2
  %863 = extractvalue %dx.types.ResRet.f32 %859, 3
  %864 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %858, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %865 = extractvalue %dx.types.ResRet.f32 %864, 3
  %866 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %858, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %867 = extractvalue %dx.types.ResRet.f32 %866, 0
  %868 = fmul fast float %865, 2.550000e+02
  %869 = fadd fast float %868, 5.000000e-01
  %870 = fptoui float %869 to i32
  %871 = and i32 %870, 14
  %872 = icmp eq i32 %871, 2
  %873 = and i32 %870, 12
  %874 = icmp eq i32 %873, 4
  %875 = or i1 %874, %872
  %876 = icmp eq i32 %871, 8
  %877 = or i1 %876, %875
  %878 = fmul fast float %867, 2.550000e+02
  %879 = fadd fast float %878, 5.000000e-01
  %880 = fptoui float %879 to i32
  %881 = select i1 %877, i32 %880, i32 0
  %882 = icmp eq i32 %881, %68
  %883 = select i1 %882, float 1.000000e+00, float %122
  %884 = select i1 %882, float 1.000000e+00, float %123
  %885 = select i1 %882, float 1.000000e+00, float %124
  %886 = fcmp fast ogt float %863, 0.000000e+00
  %887 = uitofp i1 %886 to float
  %888 = fsub fast float %87, %863
  %889 = call float @dx.op.unary.f32(i32 6, float %888)  ; FAbs(value)
  %890 = fmul fast float %620, %889
  %891 = call float @dx.op.unary.f32(i32 7, float %890)  ; Saturate(value)
  %892 = fsub fast float 1.000000e+00, %891
  %893 = fmul fast float %892, %887
  %894 = fmul fast float %893, %860
  %895 = fmul fast float %894, %883
  %896 = fmul fast float %893, %861
  %897 = fmul fast float %896, %884
  %898 = fmul fast float %893, %862
  %899 = fmul fast float %898, %885
  %900 = fadd fast float %895, %851
  %901 = fadd fast float %897, %853
  %902 = fadd fast float %899, %855
  %903 = fadd fast float %893, %849
  %904 = fmul fast float %900, %807
  %905 = fmul fast float %901, %808
  %906 = fmul fast float %902, %809
  %907 = fadd fast float %797, %904
  %908 = fadd fast float %798, %905
  %909 = fadd fast float %799, %906
  %910 = fmul fast float %903, %807
  %911 = fmul fast float %903, %808
  %912 = fmul fast float %903, %809
  %913 = fadd fast float %803, %910
  %914 = fadd fast float %804, %911
  %915 = fadd fast float %805, %912
  %916 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %695, i32 0, i32 14, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %917 = extractvalue %dx.types.ResRet.f32 %916, 0
  %918 = extractvalue %dx.types.ResRet.f32 %916, 1
  %919 = extractvalue %dx.types.ResRet.f32 %916, 2
  %920 = extractvalue %dx.types.ResRet.f32 %916, 3
  %921 = fmul fast float %130, %920
  %922 = fsub fast float %46, %921
  %923 = call float @dx.op.binary.f32(i32 35, float %922, float %585)  ; FMax(a,b)
  %924 = call float @dx.op.binary.f32(i32 36, float %923, float %583)  ; FMin(a,b)
  %925 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %924, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %926 = extractvalue %dx.types.ResRet.f32 %925, 0
  %927 = extractvalue %dx.types.ResRet.f32 %925, 1
  %928 = extractvalue %dx.types.ResRet.f32 %925, 2
  %929 = extractvalue %dx.types.ResRet.f32 %925, 3
  %930 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %924, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %931 = extractvalue %dx.types.ResRet.f32 %930, 3
  %932 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %924, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %933 = extractvalue %dx.types.ResRet.f32 %932, 0
  %934 = fmul fast float %931, 2.550000e+02
  %935 = fadd fast float %934, 5.000000e-01
  %936 = fptoui float %935 to i32
  %937 = and i32 %936, 14
  %938 = icmp eq i32 %937, 2
  %939 = and i32 %936, 12
  %940 = icmp eq i32 %939, 4
  %941 = or i1 %940, %938
  %942 = icmp eq i32 %937, 8
  %943 = or i1 %942, %941
  %944 = fmul fast float %933, 2.550000e+02
  %945 = fadd fast float %944, 5.000000e-01
  %946 = fptoui float %945 to i32
  %947 = select i1 %943, i32 %946, i32 0
  %948 = icmp eq i32 %947, %68
  %949 = select i1 %948, float 1.000000e+00, float %122
  %950 = select i1 %948, float 1.000000e+00, float %123
  %951 = select i1 %948, float 1.000000e+00, float %124
  %952 = fcmp fast ogt float %929, 0.000000e+00
  %953 = uitofp i1 %952 to float
  %954 = fsub fast float %87, %929
  %955 = call float @dx.op.unary.f32(i32 6, float %954)  ; FAbs(value)
  %956 = fmul fast float %620, %955
  %957 = call float @dx.op.unary.f32(i32 7, float %956)  ; Saturate(value)
  %958 = fsub fast float 1.000000e+00, %957
  %959 = fmul fast float %958, %953
  %960 = fmul fast float %959, %926
  %961 = fmul fast float %960, %949
  %962 = fmul fast float %959, %927
  %963 = fmul fast float %962, %950
  %964 = fmul fast float %959, %928
  %965 = fmul fast float %964, %951
  %966 = fadd fast float %921, %46
  %967 = call float @dx.op.binary.f32(i32 35, float %966, float %585)  ; FMax(a,b)
  %968 = call float @dx.op.binary.f32(i32 36, float %967, float %583)  ; FMin(a,b)
  %969 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %968, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %970 = extractvalue %dx.types.ResRet.f32 %969, 0
  %971 = extractvalue %dx.types.ResRet.f32 %969, 1
  %972 = extractvalue %dx.types.ResRet.f32 %969, 2
  %973 = extractvalue %dx.types.ResRet.f32 %969, 3
  %974 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %968, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %975 = extractvalue %dx.types.ResRet.f32 %974, 3
  %976 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %968, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %977 = extractvalue %dx.types.ResRet.f32 %976, 0
  %978 = fmul fast float %975, 2.550000e+02
  %979 = fadd fast float %978, 5.000000e-01
  %980 = fptoui float %979 to i32
  %981 = and i32 %980, 14
  %982 = icmp eq i32 %981, 2
  %983 = and i32 %980, 12
  %984 = icmp eq i32 %983, 4
  %985 = or i1 %984, %982
  %986 = icmp eq i32 %981, 8
  %987 = or i1 %986, %985
  %988 = fmul fast float %977, 2.550000e+02
  %989 = fadd fast float %988, 5.000000e-01
  %990 = fptoui float %989 to i32
  %991 = select i1 %987, i32 %990, i32 0
  %992 = icmp eq i32 %991, %68
  %993 = select i1 %992, float 1.000000e+00, float %122
  %994 = select i1 %992, float 1.000000e+00, float %123
  %995 = select i1 %992, float 1.000000e+00, float %124
  %996 = fcmp fast ogt float %973, 0.000000e+00
  %997 = uitofp i1 %996 to float
  %998 = fsub fast float %87, %973
  %999 = call float @dx.op.unary.f32(i32 6, float %998)  ; FAbs(value)
  %1000 = fmul fast float %620, %999
  %1001 = call float @dx.op.unary.f32(i32 7, float %1000)  ; Saturate(value)
  %1002 = fsub fast float 1.000000e+00, %1001
  %1003 = fmul fast float %1002, %997
  %1004 = fmul fast float %1003, %970
  %1005 = fmul fast float %1004, %993
  %1006 = fmul fast float %1003, %971
  %1007 = fmul fast float %1006, %994
  %1008 = fmul fast float %1003, %972
  %1009 = fmul fast float %1008, %995
  %1010 = fadd fast float %1005, %961
  %1011 = fadd fast float %1007, %963
  %1012 = fadd fast float %1009, %965
  %1013 = fadd fast float %1003, %959
  %1014 = fmul fast float %1010, %917
  %1015 = fmul fast float %1011, %918
  %1016 = fmul fast float %1012, %919
  %1017 = fadd fast float %907, %1014
  %1018 = fadd fast float %908, %1015
  %1019 = fadd fast float %909, %1016
  %1020 = fmul fast float %1013, %917
  %1021 = fmul fast float %1013, %918
  %1022 = fmul fast float %1013, %919
  %1023 = fadd fast float %913, %1020
  %1024 = fadd fast float %914, %1021
  %1025 = fadd fast float %915, %1022
  %1026 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %695, i32 0, i32 15, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1027 = extractvalue %dx.types.ResRet.f32 %1026, 0
  %1028 = extractvalue %dx.types.ResRet.f32 %1026, 1
  %1029 = extractvalue %dx.types.ResRet.f32 %1026, 2
  %1030 = extractvalue %dx.types.ResRet.f32 %1026, 3
  %1031 = fmul fast float %130, %1030
  %1032 = fsub fast float %46, %1031
  %1033 = call float @dx.op.binary.f32(i32 35, float %1032, float %585)  ; FMax(a,b)
  %1034 = call float @dx.op.binary.f32(i32 36, float %1033, float %583)  ; FMin(a,b)
  %1035 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %1034, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1036 = extractvalue %dx.types.ResRet.f32 %1035, 0
  %1037 = extractvalue %dx.types.ResRet.f32 %1035, 1
  %1038 = extractvalue %dx.types.ResRet.f32 %1035, 2
  %1039 = extractvalue %dx.types.ResRet.f32 %1035, 3
  %1040 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %591, %dx.types.Handle %592, float %1034, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1041 = extractvalue %dx.types.ResRet.f32 %1040, 3
  %1042 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %595, %dx.types.Handle %592, float %1034, float %590, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1043 = extractvalue %dx.types.ResRet.f32 %1042, 0
  %1044 = fmul fast float %1041, 2.550000e+02
  %1045 = fadd fast float %1044, 5.000000e-01
  %1046 = fptoui float %1045 to i32
  %1047 = and i32 %1046, 14
  %1048 = icmp eq i32 %1047, 2
  %1049 = and i32 %1046, 12
  %1050 = icmp eq i32 %1049, 4
  %1051 = or i1 %1050, %1048
  %1052 = icmp eq i32 %1047, 8
  %1053 = or i1 %1052, %1051
  %1054 = fmul fast float %1043, 2.550000e+02
  %1055 = fadd fast float %1054, 5.000000e-01
  %1056 = fptoui float %1055 to i32
  %1057 = select i1 %1053, i32 %1056, i32 0
  %1058 = icmp eq i32 %1057, %68
  %1059 = select i1 %1058, float 1.000000e+00, float %122
  %1060 = select i1 %1058, float 1.000000e+00, float %123
  %1061 = select i1 %1058, float 1.000000e+00, float %124
  %1062 = fcmp fast ogt float %1039, 0.000000e+00
  %1063 = uitofp i1 %1062 to float
  %1064 = fsub fast float %87, %1039
  %1065 = call float @dx.op.unary.f32(i32 6, float %1064)  ; FAbs(value)
  %1066 = fmul fast float %620, %1065
  %1067 = call float @dx.op.unary.f32(i32 7, float %1066)  ; Saturate(value)
  %1068 = fsub fast float 1.000000e+00, %1067
  %1069 = fmul fast float %1068, %1063
  %1070 = fmul fast float %1069, %1036
  %1071 = fmul fast float %1070, %1059
  %1072 = fmul fast float %1069, %1037
  %1073 = fmul fast float %1072, %1060
  %1074 = fmul fast float %1069, %1038
  %1075 = fmul fast float %1074, %1061
  %1076 = fadd fast float %1031, %46
  %1077 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %1078 = extractvalue %dx.types.CBufRet.f32 %1077, 2
  %1079 = extractvalue %dx.types.CBufRet.f32 %1077, 3
  %1080 = extractvalue %dx.types.CBufRet.f32 %1077, 0
  %1081 = extractvalue %dx.types.CBufRet.f32 %1077, 1
  %1082 = call float @dx.op.binary.f32(i32 35, float %1076, float %1080)  ; FMax(a,b)
  %1083 = call float @dx.op.binary.f32(i32 35, float %47, float %1081)  ; FMax(a,b)
  %1084 = call float @dx.op.binary.f32(i32 36, float %1082, float %1078)  ; FMin(a,b)
  %1085 = call float @dx.op.binary.f32(i32 36, float %1083, float %1079)  ; FMin(a,b)
  %1086 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %636, %dx.types.Handle %637, float %1084, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1087 = extractvalue %dx.types.ResRet.f32 %1086, 0
  %1088 = extractvalue %dx.types.ResRet.f32 %1086, 1
  %1089 = extractvalue %dx.types.ResRet.f32 %1086, 2
  %1090 = extractvalue %dx.types.ResRet.f32 %1086, 3
  %1091 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1092 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1093 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1084, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1094 = extractvalue %dx.types.ResRet.f32 %1093, 3
  %1095 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1096 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1084, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1097 = extractvalue %dx.types.ResRet.f32 %1096, 0
  %1098 = fmul fast float %1094, 2.550000e+02
  %1099 = fadd fast float %1098, 5.000000e-01
  %1100 = fptoui float %1099 to i32
  %1101 = and i32 %1100, 14
  %1102 = icmp eq i32 %1101, 2
  %1103 = and i32 %1100, 12
  %1104 = icmp eq i32 %1103, 4
  %1105 = or i1 %1104, %1102
  %1106 = icmp eq i32 %1101, 8
  %1107 = or i1 %1106, %1105
  %1108 = fmul fast float %1097, 2.550000e+02
  %1109 = fadd fast float %1108, 5.000000e-01
  %1110 = fptoui float %1109 to i32
  %1111 = select i1 %1107, i32 %1110, i32 0
  %1112 = icmp eq i32 %1111, %68
  %1113 = select i1 %1112, float 1.000000e+00, float %122
  %1114 = select i1 %1112, float 1.000000e+00, float %123
  %1115 = select i1 %1112, float 1.000000e+00, float %124
  %1116 = fcmp fast ogt float %1090, 0.000000e+00
  %1117 = uitofp i1 %1116 to float
  %1118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %10, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1119 = extractvalue %dx.types.CBufRet.f32 %1118, 1
  %1120 = fmul fast float %1119, 0x3F9EB851E0000000
  %1121 = fsub fast float %87, %1090
  %1122 = call float @dx.op.unary.f32(i32 6, float %1121)  ; FAbs(value)
  %1123 = fmul fast float %1120, %1122
  %1124 = call float @dx.op.unary.f32(i32 7, float %1123)  ; Saturate(value)
  %1125 = fsub fast float 1.000000e+00, %1124
  %1126 = fmul fast float %1125, %1117
  %1127 = fmul fast float %1126, %1087
  %1128 = fmul fast float %1127, %1113
  %1129 = fmul fast float %1126, %1088
  %1130 = fmul fast float %1129, %1114
  %1131 = fmul fast float %1126, %1089
  %1132 = fmul fast float %1131, %1115
  %1133 = fadd fast float %1128, %1071
  %1134 = fadd fast float %1130, %1073
  %1135 = fadd fast float %1132, %1075
  %1136 = fadd fast float %1126, %1069
  %1137 = fmul fast float %1133, %1027
  %1138 = fmul fast float %1134, %1028
  %1139 = fmul fast float %1135, %1029
  %1140 = fadd fast float %1017, %1137
  %1141 = fadd fast float %1018, %1138
  %1142 = fadd fast float %1019, %1139
  %1143 = fmul fast float %1136, %1027
  %1144 = fmul fast float %1136, %1028
  %1145 = fmul fast float %1136, %1029
  %1146 = fadd fast float %1023, %1143
  %1147 = fadd fast float %1024, %1144
  %1148 = fadd fast float %1025, %1145
  %1149 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %695, i32 0, i32 16, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1150 = extractvalue %dx.types.ResRet.f32 %1149, 0
  %1151 = extractvalue %dx.types.ResRet.f32 %1149, 1
  %1152 = extractvalue %dx.types.ResRet.f32 %1149, 2
  %1153 = extractvalue %dx.types.ResRet.f32 %1149, 3
  %1154 = fmul fast float %130, %1153
  %1155 = fsub fast float %46, %1154
  %1156 = call float @dx.op.binary.f32(i32 35, float %1155, float %1080)  ; FMax(a,b)
  %1157 = call float @dx.op.binary.f32(i32 36, float %1156, float %1078)  ; FMin(a,b)
  %1158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1159 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1160 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1157, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1161 = extractvalue %dx.types.ResRet.f32 %1160, 0
  %1162 = extractvalue %dx.types.ResRet.f32 %1160, 1
  %1163 = extractvalue %dx.types.ResRet.f32 %1160, 2
  %1164 = extractvalue %dx.types.ResRet.f32 %1160, 3
  %1165 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1157, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1166 = extractvalue %dx.types.ResRet.f32 %1165, 3
  %1167 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1157, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1168 = extractvalue %dx.types.ResRet.f32 %1167, 0
  %1169 = fmul fast float %1166, 2.550000e+02
  %1170 = fadd fast float %1169, 5.000000e-01
  %1171 = fptoui float %1170 to i32
  %1172 = and i32 %1171, 14
  %1173 = icmp eq i32 %1172, 2
  %1174 = and i32 %1171, 12
  %1175 = icmp eq i32 %1174, 4
  %1176 = or i1 %1175, %1173
  %1177 = icmp eq i32 %1172, 8
  %1178 = or i1 %1177, %1176
  %1179 = fmul fast float %1168, 2.550000e+02
  %1180 = fadd fast float %1179, 5.000000e-01
  %1181 = fptoui float %1180 to i32
  %1182 = select i1 %1178, i32 %1181, i32 0
  %1183 = icmp eq i32 %1182, %68
  %1184 = select i1 %1183, float 1.000000e+00, float %122
  %1185 = select i1 %1183, float 1.000000e+00, float %123
  %1186 = select i1 %1183, float 1.000000e+00, float %124
  %1187 = fcmp fast ogt float %1164, 0.000000e+00
  %1188 = uitofp i1 %1187 to float
  %1189 = fsub fast float %87, %1164
  %1190 = call float @dx.op.unary.f32(i32 6, float %1189)  ; FAbs(value)
  %1191 = fmul fast float %1120, %1190
  %1192 = call float @dx.op.unary.f32(i32 7, float %1191)  ; Saturate(value)
  %1193 = fsub fast float 1.000000e+00, %1192
  %1194 = fmul fast float %1193, %1188
  %1195 = fmul fast float %1194, %1161
  %1196 = fmul fast float %1195, %1184
  %1197 = fmul fast float %1194, %1162
  %1198 = fmul fast float %1197, %1185
  %1199 = fmul fast float %1194, %1163
  %1200 = fmul fast float %1199, %1186
  %1201 = fadd fast float %1154, %46
  %1202 = call float @dx.op.binary.f32(i32 35, float %1201, float %1080)  ; FMax(a,b)
  %1203 = call float @dx.op.binary.f32(i32 36, float %1202, float %1078)  ; FMin(a,b)
  %1204 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1203, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1205 = extractvalue %dx.types.ResRet.f32 %1204, 0
  %1206 = extractvalue %dx.types.ResRet.f32 %1204, 1
  %1207 = extractvalue %dx.types.ResRet.f32 %1204, 2
  %1208 = extractvalue %dx.types.ResRet.f32 %1204, 3
  %1209 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1203, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1210 = extractvalue %dx.types.ResRet.f32 %1209, 3
  %1211 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1203, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1212 = extractvalue %dx.types.ResRet.f32 %1211, 0
  %1213 = fmul fast float %1210, 2.550000e+02
  %1214 = fadd fast float %1213, 5.000000e-01
  %1215 = fptoui float %1214 to i32
  %1216 = and i32 %1215, 14
  %1217 = icmp eq i32 %1216, 2
  %1218 = and i32 %1215, 12
  %1219 = icmp eq i32 %1218, 4
  %1220 = or i1 %1219, %1217
  %1221 = icmp eq i32 %1216, 8
  %1222 = or i1 %1221, %1220
  %1223 = fmul fast float %1212, 2.550000e+02
  %1224 = fadd fast float %1223, 5.000000e-01
  %1225 = fptoui float %1224 to i32
  %1226 = select i1 %1222, i32 %1225, i32 0
  %1227 = icmp eq i32 %1226, %68
  %1228 = select i1 %1227, float 1.000000e+00, float %122
  %1229 = select i1 %1227, float 1.000000e+00, float %123
  %1230 = select i1 %1227, float 1.000000e+00, float %124
  %1231 = fcmp fast ogt float %1208, 0.000000e+00
  %1232 = uitofp i1 %1231 to float
  %1233 = fsub fast float %87, %1208
  %1234 = call float @dx.op.unary.f32(i32 6, float %1233)  ; FAbs(value)
  %1235 = fmul fast float %1120, %1234
  %1236 = call float @dx.op.unary.f32(i32 7, float %1235)  ; Saturate(value)
  %1237 = fsub fast float 1.000000e+00, %1236
  %1238 = fmul fast float %1237, %1232
  %1239 = fmul fast float %1238, %1205
  %1240 = fmul fast float %1239, %1228
  %1241 = fmul fast float %1238, %1206
  %1242 = fmul fast float %1241, %1229
  %1243 = fmul fast float %1238, %1207
  %1244 = fmul fast float %1243, %1230
  %1245 = fadd fast float %1240, %1196
  %1246 = fadd fast float %1242, %1198
  %1247 = fadd fast float %1244, %1200
  %1248 = fadd fast float %1238, %1194
  %1249 = fmul fast float %1245, %1150
  %1250 = fmul fast float %1246, %1151
  %1251 = fmul fast float %1247, %1152
  %1252 = fadd fast float %1140, %1249
  %1253 = fadd fast float %1141, %1250
  %1254 = fadd fast float %1142, %1251
  %1255 = fmul fast float %1248, %1150
  %1256 = fmul fast float %1248, %1151
  %1257 = fmul fast float %1248, %1152
  %1258 = fadd fast float %1146, %1255
  %1259 = fadd fast float %1147, %1256
  %1260 = fadd fast float %1148, %1257
  %1261 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1262 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1261, i32 0, i32 17, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1263 = extractvalue %dx.types.ResRet.f32 %1262, 0
  %1264 = extractvalue %dx.types.ResRet.f32 %1262, 1
  %1265 = extractvalue %dx.types.ResRet.f32 %1262, 2
  %1266 = extractvalue %dx.types.ResRet.f32 %1262, 3
  %1267 = fmul fast float %130, %1266
  %1268 = fsub fast float %46, %1267
  %1269 = call float @dx.op.binary.f32(i32 35, float %1268, float %1080)  ; FMax(a,b)
  %1270 = call float @dx.op.binary.f32(i32 36, float %1269, float %1078)  ; FMin(a,b)
  %1271 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1270, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1272 = extractvalue %dx.types.ResRet.f32 %1271, 0
  %1273 = extractvalue %dx.types.ResRet.f32 %1271, 1
  %1274 = extractvalue %dx.types.ResRet.f32 %1271, 2
  %1275 = extractvalue %dx.types.ResRet.f32 %1271, 3
  %1276 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1270, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1277 = extractvalue %dx.types.ResRet.f32 %1276, 3
  %1278 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1270, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1279 = extractvalue %dx.types.ResRet.f32 %1278, 0
  %1280 = fmul fast float %1277, 2.550000e+02
  %1281 = fadd fast float %1280, 5.000000e-01
  %1282 = fptoui float %1281 to i32
  %1283 = and i32 %1282, 14
  %1284 = icmp eq i32 %1283, 2
  %1285 = and i32 %1282, 12
  %1286 = icmp eq i32 %1285, 4
  %1287 = or i1 %1286, %1284
  %1288 = icmp eq i32 %1283, 8
  %1289 = or i1 %1288, %1287
  %1290 = fmul fast float %1279, 2.550000e+02
  %1291 = fadd fast float %1290, 5.000000e-01
  %1292 = fptoui float %1291 to i32
  %1293 = select i1 %1289, i32 %1292, i32 0
  %1294 = icmp eq i32 %1293, %68
  %1295 = select i1 %1294, float 1.000000e+00, float %122
  %1296 = select i1 %1294, float 1.000000e+00, float %123
  %1297 = select i1 %1294, float 1.000000e+00, float %124
  %1298 = fcmp fast ogt float %1275, 0.000000e+00
  %1299 = uitofp i1 %1298 to float
  %1300 = fsub fast float %87, %1275
  %1301 = call float @dx.op.unary.f32(i32 6, float %1300)  ; FAbs(value)
  %1302 = fmul fast float %1120, %1301
  %1303 = call float @dx.op.unary.f32(i32 7, float %1302)  ; Saturate(value)
  %1304 = fsub fast float 1.000000e+00, %1303
  %1305 = fmul fast float %1304, %1299
  %1306 = fmul fast float %1305, %1272
  %1307 = fmul fast float %1306, %1295
  %1308 = fmul fast float %1305, %1273
  %1309 = fmul fast float %1308, %1296
  %1310 = fmul fast float %1305, %1274
  %1311 = fmul fast float %1310, %1297
  %1312 = fadd fast float %1267, %46
  %1313 = call float @dx.op.binary.f32(i32 35, float %1312, float %1080)  ; FMax(a,b)
  %1314 = call float @dx.op.binary.f32(i32 36, float %1313, float %1078)  ; FMin(a,b)
  %1315 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1314, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1316 = extractvalue %dx.types.ResRet.f32 %1315, 0
  %1317 = extractvalue %dx.types.ResRet.f32 %1315, 1
  %1318 = extractvalue %dx.types.ResRet.f32 %1315, 2
  %1319 = extractvalue %dx.types.ResRet.f32 %1315, 3
  %1320 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1314, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1321 = extractvalue %dx.types.ResRet.f32 %1320, 3
  %1322 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1314, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1323 = extractvalue %dx.types.ResRet.f32 %1322, 0
  %1324 = fmul fast float %1321, 2.550000e+02
  %1325 = fadd fast float %1324, 5.000000e-01
  %1326 = fptoui float %1325 to i32
  %1327 = and i32 %1326, 14
  %1328 = icmp eq i32 %1327, 2
  %1329 = and i32 %1326, 12
  %1330 = icmp eq i32 %1329, 4
  %1331 = or i1 %1330, %1328
  %1332 = icmp eq i32 %1327, 8
  %1333 = or i1 %1332, %1331
  %1334 = fmul fast float %1323, 2.550000e+02
  %1335 = fadd fast float %1334, 5.000000e-01
  %1336 = fptoui float %1335 to i32
  %1337 = select i1 %1333, i32 %1336, i32 0
  %1338 = icmp eq i32 %1337, %68
  %1339 = select i1 %1338, float 1.000000e+00, float %122
  %1340 = select i1 %1338, float 1.000000e+00, float %123
  %1341 = select i1 %1338, float 1.000000e+00, float %124
  %1342 = fcmp fast ogt float %1319, 0.000000e+00
  %1343 = uitofp i1 %1342 to float
  %1344 = fsub fast float %87, %1319
  %1345 = call float @dx.op.unary.f32(i32 6, float %1344)  ; FAbs(value)
  %1346 = fmul fast float %1120, %1345
  %1347 = call float @dx.op.unary.f32(i32 7, float %1346)  ; Saturate(value)
  %1348 = fsub fast float 1.000000e+00, %1347
  %1349 = fmul fast float %1348, %1343
  %1350 = fmul fast float %1349, %1316
  %1351 = fmul fast float %1350, %1339
  %1352 = fmul fast float %1349, %1317
  %1353 = fmul fast float %1352, %1340
  %1354 = fmul fast float %1349, %1318
  %1355 = fmul fast float %1354, %1341
  %1356 = fadd fast float %1351, %1307
  %1357 = fadd fast float %1353, %1309
  %1358 = fadd fast float %1355, %1311
  %1359 = fadd fast float %1349, %1305
  %1360 = fmul fast float %1356, %1263
  %1361 = fmul fast float %1357, %1264
  %1362 = fmul fast float %1358, %1265
  %1363 = fadd fast float %1252, %1360
  %1364 = fadd fast float %1253, %1361
  %1365 = fadd fast float %1254, %1362
  %1366 = fmul fast float %1359, %1263
  %1367 = fmul fast float %1359, %1264
  %1368 = fmul fast float %1359, %1265
  %1369 = fadd fast float %1258, %1366
  %1370 = fadd fast float %1259, %1367
  %1371 = fadd fast float %1260, %1368
  %1372 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1261, i32 0, i32 18, i32 %68, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1373 = extractvalue %dx.types.ResRet.f32 %1372, 0
  %1374 = extractvalue %dx.types.ResRet.f32 %1372, 1
  %1375 = extractvalue %dx.types.ResRet.f32 %1372, 2
  %1376 = extractvalue %dx.types.ResRet.f32 %1372, 3
  %1377 = fmul fast float %130, %1376
  %1378 = fsub fast float %46, %1377
  %1379 = call float @dx.op.binary.f32(i32 35, float %1378, float %1080)  ; FMax(a,b)
  %1380 = call float @dx.op.binary.f32(i32 36, float %1379, float %1078)  ; FMin(a,b)
  %1381 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1380, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1382 = extractvalue %dx.types.ResRet.f32 %1381, 0
  %1383 = extractvalue %dx.types.ResRet.f32 %1381, 1
  %1384 = extractvalue %dx.types.ResRet.f32 %1381, 2
  %1385 = extractvalue %dx.types.ResRet.f32 %1381, 3
  %1386 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1380, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1387 = extractvalue %dx.types.ResRet.f32 %1386, 3
  %1388 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1380, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1389 = extractvalue %dx.types.ResRet.f32 %1388, 0
  %1390 = fmul fast float %1387, 2.550000e+02
  %1391 = fadd fast float %1390, 5.000000e-01
  %1392 = fptoui float %1391 to i32
  %1393 = and i32 %1392, 14
  %1394 = icmp eq i32 %1393, 2
  %1395 = and i32 %1392, 12
  %1396 = icmp eq i32 %1395, 4
  %1397 = or i1 %1396, %1394
  %1398 = icmp eq i32 %1393, 8
  %1399 = or i1 %1398, %1397
  %1400 = fmul fast float %1389, 2.550000e+02
  %1401 = fadd fast float %1400, 5.000000e-01
  %1402 = fptoui float %1401 to i32
  %1403 = select i1 %1399, i32 %1402, i32 0
  %1404 = icmp eq i32 %1403, %68
  %1405 = select i1 %1404, float 1.000000e+00, float %122
  %1406 = select i1 %1404, float 1.000000e+00, float %123
  %1407 = select i1 %1404, float 1.000000e+00, float %124
  %1408 = fcmp fast ogt float %1385, 0.000000e+00
  %1409 = uitofp i1 %1408 to float
  %1410 = fsub fast float %87, %1385
  %1411 = call float @dx.op.unary.f32(i32 6, float %1410)  ; FAbs(value)
  %1412 = fmul fast float %1120, %1411
  %1413 = call float @dx.op.unary.f32(i32 7, float %1412)  ; Saturate(value)
  %1414 = fsub fast float 1.000000e+00, %1413
  %1415 = fmul fast float %1414, %1409
  %1416 = fmul fast float %1415, %1382
  %1417 = fmul fast float %1416, %1405
  %1418 = fmul fast float %1415, %1383
  %1419 = fmul fast float %1418, %1406
  %1420 = fmul fast float %1415, %1384
  %1421 = fmul fast float %1420, %1407
  %1422 = fadd fast float %1377, %46
  %1423 = call float @dx.op.binary.f32(i32 35, float %1422, float %1080)  ; FMax(a,b)
  %1424 = call float @dx.op.binary.f32(i32 36, float %1423, float %1078)  ; FMin(a,b)
  %1425 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1158, %dx.types.Handle %1159, float %1424, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1426 = extractvalue %dx.types.ResRet.f32 %1425, 0
  %1427 = extractvalue %dx.types.ResRet.f32 %1425, 1
  %1428 = extractvalue %dx.types.ResRet.f32 %1425, 2
  %1429 = extractvalue %dx.types.ResRet.f32 %1425, 3
  %1430 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1091, %dx.types.Handle %1092, float %1424, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1431 = extractvalue %dx.types.ResRet.f32 %1430, 3
  %1432 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1095, %dx.types.Handle %1092, float %1424, float %1085, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1433 = extractvalue %dx.types.ResRet.f32 %1432, 0
  %1434 = fmul fast float %1431, 2.550000e+02
  %1435 = fadd fast float %1434, 5.000000e-01
  %1436 = fptoui float %1435 to i32
  %1437 = and i32 %1436, 14
  %1438 = icmp eq i32 %1437, 2
  %1439 = and i32 %1436, 12
  %1440 = icmp eq i32 %1439, 4
  %1441 = or i1 %1440, %1438
  %1442 = icmp eq i32 %1437, 8
  %1443 = or i1 %1442, %1441
  %1444 = fmul fast float %1433, 2.550000e+02
  %1445 = fadd fast float %1444, 5.000000e-01
  %1446 = fptoui float %1445 to i32
  %1447 = select i1 %1443, i32 %1446, i32 0
  %1448 = icmp eq i32 %1447, %68
  %1449 = select i1 %1448, float 1.000000e+00, float %122
  %1450 = select i1 %1448, float 1.000000e+00, float %123
  %1451 = select i1 %1448, float 1.000000e+00, float %124
  %1452 = fcmp fast ogt float %1429, 0.000000e+00
  %1453 = uitofp i1 %1452 to float
  %1454 = fsub fast float %87, %1429
  %1455 = call float @dx.op.unary.f32(i32 6, float %1454)  ; FAbs(value)
  %1456 = fmul fast float %1120, %1455
  %1457 = call float @dx.op.unary.f32(i32 7, float %1456)  ; Saturate(value)
  %1458 = fsub fast float 1.000000e+00, %1457
  %1459 = fmul fast float %1458, %1453
  %1460 = fmul fast float %1459, %1426
  %1461 = fmul fast float %1460, %1449
  %1462 = fmul fast float %1459, %1427
  %1463 = fmul fast float %1462, %1450
  %1464 = fmul fast float %1459, %1428
  %1465 = fmul fast float %1464, %1451
  %1466 = fadd fast float %1461, %1417
  %1467 = fadd fast float %1463, %1419
  %1468 = fadd fast float %1465, %1421
  %1469 = fadd fast float %1459, %1415
  %1470 = fmul fast float %1466, %1373
  %1471 = fmul fast float %1467, %1374
  %1472 = fmul fast float %1468, %1375
  %1473 = fadd fast float %1363, %1470
  %1474 = fadd fast float %1364, %1471
  %1475 = fadd fast float %1365, %1472
  %1476 = fmul fast float %1469, %1373
  %1477 = fmul fast float %1469, %1374
  %1478 = fmul fast float %1469, %1375
  %1479 = fadd fast float %1369, %1476
  %1480 = fadd fast float %1370, %1477
  %1481 = fadd fast float %1371, %1478
  %1482 = fdiv fast float %1473, %1479
  %1483 = fdiv fast float %1474, %1480
  %1484 = fdiv fast float %1475, %1481
  br label %1485

; <label>:1485                                    ; preds = %89, %74
  %1486 = phi float [ %1482, %89 ], [ 0.000000e+00, %74 ]
  %1487 = phi float [ %1483, %89 ], [ 0.000000e+00, %74 ]
  %1488 = phi float [ %1484, %89 ], [ 0.000000e+00, %74 ]
  %1489 = phi float [ %87, %89 ], [ 0.000000e+00, %74 ]
  %1490 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %10, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1491 = extractvalue %dx.types.CBufRet.i32 %1490, 2
  %1492 = extractvalue %dx.types.CBufRet.i32 %1490, 3
  %1493 = icmp ult i32 %37, %1491
  %1494 = icmp ult i32 %38, %1492
  %1495 = and i1 %1493, %1494
  br i1 %1495, label %1496, label %1498

; <label>:1496                                    ; preds = %1485
  %1497 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %1497, i32 %37, i32 %38, i32 undef, float %1486, float %1487, float %1488, float %1489, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %1498

; <label>:1498                                    ; preds = %1496, %1485, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!20}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !13, !15, !17}
!5 = !{!6, !8, !9, !10, !11}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 4, i32 1, i32 10, i32 0, !12}
!12 = !{i32 0, i32 5}
!13 = !{!14}
!14 = !{i32 0, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!15 = !{!16}
!16 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 480, null}
!17 = !{!18, !19}
!18 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!19 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!20 = !{void ()* @MainIndirectDispatchCS, !"MainIndirectDispatchCS", null, !4, !21}
!21 = !{i32 4, !22, i32 5, !23}
!22 = !{i32 64, i32 1, i32 1}
!23 = !{i32 0}
!24 = distinct !{!24, !"dx.controlflow.hints", i32 1}
!25 = distinct !{!25, !"dx.controlflow.hints", i32 1}
