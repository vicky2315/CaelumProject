;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 80dcc81d549ab5cddcc9c53b04d70875
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float ScreenRayLength;                        ; Offset:  112
;       int SMRTRayCount;                             ; Offset:  116
;       int SMRTSamplesPerRay;                        ; Offset:  120
;       float SMRTRayLengthScale;                     ; Offset:  124
;       float SMRTCotMaxRayAngleFromLight;            ; Offset:  128
;       float SMRTTexelDitherScale;                   ; Offset:  132
;       float SMRTExtrapolateSlope;                   ; Offset:  136
;       float SMRTMaxSlopeBias;                       ; Offset:  140
;       uint SMRTAdaptiveRayCount;                    ; Offset:  144
;       int4 ProjectionRect;                          ; Offset:  160
;       float NormalBias;                             ; Offset:  176
;       float SubsurfaceMinSourceRadius;              ; Offset:  180
;       uint InputType;                               ; Offset:  184
;       uint bCullBackfacingPixels;                   ; Offset:  188
;       float3 Light_TranslatedWorldPosition;         ; Offset:  224
;       float Light_InvRadius;                        ; Offset:  236
;       float3 Light_Color;                           ; Offset:  240
;       float Light_FalloffExponent;                  ; Offset:  252
;       float3 Light_Direction;                       ; Offset:  256
;       float Light_SpecularScale;                    ; Offset:  268
;       float3 Light_Tangent;                         ; Offset:  272
;       float Light_SourceRadius;                     ; Offset:  284
;       float2 Light_SpotAngles;                      ; Offset:  288
;       float Light_SoftSourceRadius;                 ; Offset:  296
;       float Light_SourceLength;                     ; Offset:  300
;       float Light_RectLightBarnCosAngle;            ; Offset:  304
;       float Light_RectLightBarnLength;              ; Offset:  308
;       float2 Light_RectLightAtlasUVOffset;          ; Offset:  312
;       float2 Light_RectLightAtlasUVScale;           ; Offset:  320
;       float Light_RectLightAtlasMaxLevel;           ; Offset:  328
;       int LightUniformVirtualShadowMapId;           ; Offset:  336
;       int VisualizeModeId;                          ; Offset:  360
;       int VisualizeVirtualShadowMapId;              ; Offset:  364
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   368
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_VirtualShadowMap
; {
;
;   struct UniformBufferConstants_VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   24
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   28
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   32
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   56
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   64
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   68
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   72
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;       uint BindlessResource_VirtualShadowMap_ProjectionData;; Offset:   80
;       uint PrePadding_VirtualShadowMap_84;          ; Offset:   84
;       uint BindlessResource_VirtualShadowMap_PageTable;; Offset:   88
;       uint PrePadding_VirtualShadowMap_92;          ; Offset:   92
;       uint BindlessResource_VirtualShadowMap_PageFlags;; Offset:   96
;       uint PrePadding_VirtualShadowMap_100;         ; Offset:  100
;       uint BindlessResource_VirtualShadowMap_PageRectBounds;; Offset:  104
;       uint PrePadding_VirtualShadowMap_108;         ; Offset:  108
;       uint BindlessResource_VirtualShadowMap_PhysicalPagePool;; Offset:  112
;   
;   } UniformBufferConstants_VirtualShadowMap;        ; Offset:    0 Size:   116
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  200
;       float PrePadding_VirtualVoxel_204;            ; Offset:  204
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  208
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   212
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
; Resource bind info for PhysicalPageMetaData
; {
;
;   struct struct.FPhysicalPageMetaData
;   {
;
;       uint Flags;                                   ; Offset:    0
;       uint Age;                                     ; Offset:    4
;       uint VirtualPageOffset;                       ; Offset:    8
;       uint VirtualShadowMapId;                      ; Offset:   12
;   
;   } $Element;                                       ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_VirtualShadowMap   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB4            cb4     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T3             t3     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T4             t4     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T5             t5     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T6             t6     1
; BlueNoise_ScalarTexture           texture     f32          2d      T7             t7     1
; BlueNoise_Vec2Texture             texture     f32          2d      T8             t8     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf      T9             t9     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T10            t10     1
; VirtualVoxel_PageTexture          texture     u32          3d     T11            t11     1
; HairStrands_HairOnlyDepthTexture   texture     f32          2d     T12            t12     1
; PhysicalPageMetaData              texture  struct         r/o     T13            t13     1
; OutShadowFactor                       UAV     f32          2d      U0             u0     1
; OutVisualize                          UAV     f32          2d      U1             u1     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<FPhysicalPageMetaData>" = type { %struct.FPhysicalPageMetaData }
%struct.FPhysicalPageMetaData = type { i32, i32, i32, i32 }
%"class.RWTexture2D<vector<float, 2> >" = type { <2 x float> }
%"class.RWTexture2D<vector<float, 4> >" = type { <4 x float> }
%_RootShaderParameters = type { float, i32, i32, float, float, float, float, float, i32, <4 x i32>, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32 }
%struct.SamplerState = type { i32 }

define void @VirtualShadowMapProjection() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 212 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 116 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 368 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %29 = call i32 @dx.op.groupId.i32(i32 94, i32 1)  ; GroupId(component)
  %30 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %31 = shl i32 %28, 3
  %32 = shl i32 %29, 3
  %33 = and i32 %30, 1431655765
  %34 = lshr i32 %33, 1
  %35 = or i32 %34, %33
  %36 = and i32 %35, 858993459
  %37 = lshr i32 %36, 2
  %38 = or i32 %37, %36
  %39 = and i32 %38, 252645135
  %40 = lshr i32 %39, 4
  %41 = or i32 %40, %39
  %42 = lshr i32 %41, 8
  %43 = and i32 %42, 65280
  %44 = and i32 %41, 255
  %45 = or i32 %43, %44
  %46 = lshr i32 %30, 1
  %47 = and i32 %46, 1431655765
  %48 = lshr i32 %47, 1
  %49 = or i32 %48, %47
  %50 = and i32 %49, 858993459
  %51 = lshr i32 %50, 2
  %52 = or i32 %51, %50
  %53 = and i32 %52, 252645135
  %54 = lshr i32 %53, 4
  %55 = or i32 %54, %53
  %56 = lshr i32 %55, 8
  %57 = and i32 %56, 65280
  %58 = and i32 %55, 255
  %59 = or i32 %57, %58
  %60 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.i32 %60, 0
  %62 = extractvalue %dx.types.CBufRet.i32 %60, 1
  %63 = add i32 %61, %31
  %64 = add i32 %63, %45
  %65 = add i32 %62, %32
  %66 = add i32 %65, %59
  %67 = extractvalue %dx.types.CBufRet.i32 %60, 2
  %68 = extractvalue %dx.types.CBufRet.i32 %60, 3
  %69 = icmp uge i32 %64, %67
  %70 = icmp uge i32 %66, %68
  %71 = or i1 %69, %70
  br i1 %71, label %2655, label %72

; <label>:72                                      ; preds = %0
  %73 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %74 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %73, i32 0, i32 %64, i32 %66, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %75 = extractvalue %dx.types.ResRet.f32 %74, 0
  %76 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %77 = extractvalue %dx.types.CBufRet.i32 %76, 2
  %78 = icmp eq i32 %77, 1
  br i1 %78, label %79, label %84

; <label>:79                                      ; preds = %72
  %80 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %81 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %80, i32 0, i32 %64, i32 %66, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %82 = extractvalue %dx.types.ResRet.f32 %81, 0
  %83 = fcmp fast oeq float %82, 0.000000e+00
  br i1 %83, label %2655, label %84

; <label>:84                                      ; preds = %79, %72
  %85 = phi float [ %82, %79 ], [ %75, %72 ]
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = fmul fast float %87, %85
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %90 = fadd fast float %88, %89
  %91 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %92 = fmul fast float %91, %85
  %93 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %94 = fsub fast float %92, %93
  %95 = fdiv fast float 1.000000e+00, %94
  %96 = fadd fast float %90, %95
  %97 = uitofp i32 %64 to float
  %98 = uitofp i32 %66 to float
  %99 = fadd fast float %97, 5.000000e-01
  %100 = fadd fast float %98, 5.000000e-01
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = extractvalue %dx.types.CBufRet.f32 %101, 3
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = extractvalue %dx.types.CBufRet.f32 %106, 2
  %110 = extractvalue %dx.types.CBufRet.f32 %106, 3
  %111 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %112 = extractvalue %dx.types.CBufRet.f32 %111, 0
  %113 = extractvalue %dx.types.CBufRet.f32 %111, 1
  %114 = extractvalue %dx.types.CBufRet.f32 %111, 2
  %115 = extractvalue %dx.types.CBufRet.f32 %111, 3
  %116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.f32 %116, 0
  %118 = extractvalue %dx.types.CBufRet.f32 %116, 1
  %119 = extractvalue %dx.types.CBufRet.f32 %116, 2
  %120 = extractvalue %dx.types.CBufRet.f32 %116, 3
  %121 = fmul fast float %102, %99
  %122 = call float @dx.op.tertiary.f32(i32 46, float %100, float %107, float %121)  ; FMad(a,b,c)
  %123 = call float @dx.op.tertiary.f32(i32 46, float %85, float %112, float %122)  ; FMad(a,b,c)
  %124 = fadd fast float %123, %117
  %125 = fmul fast float %103, %99
  %126 = call float @dx.op.tertiary.f32(i32 46, float %100, float %108, float %125)  ; FMad(a,b,c)
  %127 = call float @dx.op.tertiary.f32(i32 46, float %85, float %113, float %126)  ; FMad(a,b,c)
  %128 = fadd fast float %127, %118
  %129 = fmul fast float %104, %99
  %130 = call float @dx.op.tertiary.f32(i32 46, float %100, float %109, float %129)  ; FMad(a,b,c)
  %131 = call float @dx.op.tertiary.f32(i32 46, float %85, float %114, float %130)  ; FMad(a,b,c)
  %132 = fadd fast float %131, %119
  %133 = fmul fast float %105, %99
  %134 = call float @dx.op.tertiary.f32(i32 46, float %100, float %110, float %133)  ; FMad(a,b,c)
  %135 = call float @dx.op.tertiary.f32(i32 46, float %85, float %115, float %134)  ; FMad(a,b,c)
  %136 = fadd fast float %135, %120
  %137 = fdiv fast float %124, %136
  %138 = fdiv fast float %128, %136
  %139 = fdiv fast float %132, %136
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %143 = extractvalue %dx.types.CBufRet.f32 %142, 1
  %144 = fmul fast float %141, %96
  %145 = fmul fast float %144, %143
  %146 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %147 = extractvalue %dx.types.CBufRet.i32 %146, 0
  %148 = uitofp i32 %147 to float
  %149 = fmul fast float %148, 0x4040551EC0000000
  %150 = fmul fast float %148, 0x4027A147A0000000
  %151 = fadd fast float %149, %99
  %152 = fadd fast float %150, %100
  %153 = call float @dx.op.dot2.f32(i32 54, float %151, float %152, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %154 = call float @dx.op.unary.f32(i32 22, float %153)  ; Frc(value)
  %155 = fmul fast float %154, 0x404A7DD040000000
  %156 = call float @dx.op.unary.f32(i32 22, float %155)  ; Frc(value)
  %157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %158 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %157, i32 0, i32 %64, i32 %66, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %159 = extractvalue %dx.types.ResRet.f32 %158, 0
  %160 = extractvalue %dx.types.ResRet.f32 %158, 1
  %161 = extractvalue %dx.types.ResRet.f32 %158, 2
  %162 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %163 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %162, i32 0, i32 %64, i32 %66, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %164 = extractvalue %dx.types.ResRet.f32 %163, 3
  %165 = fmul fast float %164, 2.550000e+02
  %166 = fadd fast float %165, 5.000000e-01
  %167 = fptoui float %166 to i32
  %168 = and i32 %167, 15
  %169 = fmul fast float %159, 2.000000e+00
  %170 = fmul fast float %160, 2.000000e+00
  %171 = fmul fast float %161, 2.000000e+00
  %172 = fadd fast float %169, -1.000000e+00
  %173 = fadd fast float %170, -1.000000e+00
  %174 = fadd fast float %171, -1.000000e+00
  %175 = call float @dx.op.dot3.f32(i32 55, float %172, float %173, float %174, float %172, float %173, float %174)  ; Dot3(ax,ay,az,bx,by,bz)
  %176 = call float @dx.op.unary.f32(i32 25, float %175)  ; Rsqrt(value)
  %177 = fmul fast float %176, %172
  %178 = fmul fast float %176, %173
  %179 = fmul fast float %176, %174
  %180 = icmp ne i32 %168, 0
  %181 = icmp eq i32 %168, 7
  %182 = and i32 %167, 14
  %183 = icmp eq i32 %182, 2
  %184 = add nsw i32 %168, -5
  %185 = icmp ult i32 %184, 3
  %186 = or i1 %183, %185
  %187 = icmp eq i32 %168, 9
  %188 = or i1 %187, %186
  %189 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %190 = extractvalue %dx.types.CBufRet.i32 %189, 0
  %191 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %192 = extractvalue %dx.types.CBufRet.f32 %191, 0
  %193 = extractvalue %dx.types.CBufRet.f32 %191, 1
  %194 = extractvalue %dx.types.CBufRet.f32 %191, 2
  %195 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %196 = extractvalue %dx.types.CBufRet.f32 %195, 3
  %197 = xor i1 %78, true
  %198 = icmp eq i32 %168, 6
  %199 = or i1 %183, %198
  %200 = and i1 %199, %197
  br i1 %200, label %201, label %212

; <label>:201                                     ; preds = %84
  %202 = icmp eq i32 %182, 8
  %203 = and i32 %167, 12
  %204 = icmp eq i32 %203, 4
  %205 = or i1 %204, %183
  %206 = or i1 %202, %205
  %207 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %208 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %207, i32 0, i32 %64, i32 %66, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %209 = extractvalue %dx.types.ResRet.f32 %208, 3
  %210 = select i1 %206, float %209, float 0.000000e+00
  %211 = call float @dx.op.binary.f32(i32 36, float %210, float 0x3FEFAE1480000000)  ; FMin(a,b)
  br label %212

; <label>:212                                     ; preds = %201, %84
  %213 = phi float [ 1.000000e+00, %84 ], [ %211, %201 ]
  %214 = fcmp fast olt float %213, 1.000000e+00
  br i1 %214, label %215, label %221

; <label>:215                                     ; preds = %212
  %216 = fsub fast float 1.000000e+00, %213
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %219 = fmul fast float %218, %216
  %220 = call float @dx.op.binary.f32(i32 35, float %196, float %219)  ; FMax(a,b)
  br label %221

; <label>:221                                     ; preds = %215, %212
  %222 = phi float [ %220, %215 ], [ %196, %212 ]
  %223 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %224 = extractvalue %dx.types.CBufRet.f32 %223, 0
  %225 = extractvalue %dx.types.CBufRet.f32 %223, 1
  %226 = extractvalue %dx.types.CBufRet.f32 %223, 2
  %227 = fsub fast float %137, %224
  %228 = fsub fast float %138, %225
  %229 = fsub fast float %139, %226
  %230 = fmul fast float %227, %227
  %231 = fmul fast float %228, %228
  %232 = fadd fast float %230, %231
  %233 = fmul fast float %229, %229
  %234 = fadd fast float %232, %233
  %235 = call float @dx.op.unary.f32(i32 24, float %234)  ; Sqrt(value)
  %236 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %237 = extractvalue %dx.types.CBufRet.f32 %236, 0
  %238 = fmul fast float %237, %235
  %239 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %240 = extractvalue %dx.types.CBufRet.f32 %239, 0
  %241 = fdiv fast float %238, %240
  %242 = call float @dx.op.binary.f32(i32 35, float 0x3F947AE140000000, float %241)  ; FMax(a,b)
  %243 = or i1 %180, %78
  br i1 %243, label %244, label %2288

; <label>:244                                     ; preds = %221
  %245 = extractvalue %dx.types.CBufRet.i32 %76, 3
  %246 = icmp eq i32 %245, 0
  %247 = or i1 %78, %246
  %248 = or i1 %188, %247
  %249 = or i1 %181, %78
  %250 = select i1 %249, float %192, float %177
  %251 = select i1 %249, float %193, float %178
  %252 = select i1 %249, float %194, float %179
  %253 = fmul fast float %242, %250
  %254 = fmul fast float %242, %251
  %255 = fmul fast float %242, %252
  %256 = fadd fast float %253, %137
  %257 = fadd fast float %254, %138
  %258 = fadd fast float %255, %139
  %259 = xor i1 %78, true
  %260 = fcmp fast ogt float %145, 0.000000e+00
  %261 = and i1 %260, %259
  br i1 %261, label %262, label %399

; <label>:262                                     ; preds = %244
  %263 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %264 = extractvalue %dx.types.CBufRet.f32 %263, 0
  %265 = extractvalue %dx.types.CBufRet.f32 %263, 1
  %266 = extractvalue %dx.types.CBufRet.f32 %263, 2
  %267 = extractvalue %dx.types.CBufRet.f32 %263, 3
  %268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %269 = extractvalue %dx.types.CBufRet.f32 %268, 0
  %270 = extractvalue %dx.types.CBufRet.f32 %268, 1
  %271 = extractvalue %dx.types.CBufRet.f32 %268, 2
  %272 = extractvalue %dx.types.CBufRet.f32 %268, 3
  %273 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %274 = extractvalue %dx.types.CBufRet.f32 %273, 0
  %275 = extractvalue %dx.types.CBufRet.f32 %273, 1
  %276 = extractvalue %dx.types.CBufRet.f32 %273, 2
  %277 = extractvalue %dx.types.CBufRet.f32 %273, 3
  %278 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %279 = extractvalue %dx.types.CBufRet.f32 %278, 0
  %280 = extractvalue %dx.types.CBufRet.f32 %278, 1
  %281 = extractvalue %dx.types.CBufRet.f32 %278, 2
  %282 = extractvalue %dx.types.CBufRet.f32 %278, 3
  %283 = fmul fast float %264, %256
  %284 = call float @dx.op.tertiary.f32(i32 46, float %257, float %269, float %283)  ; FMad(a,b,c)
  %285 = call float @dx.op.tertiary.f32(i32 46, float %258, float %274, float %284)  ; FMad(a,b,c)
  %286 = fadd fast float %285, %279
  %287 = fmul fast float %265, %256
  %288 = call float @dx.op.tertiary.f32(i32 46, float %257, float %270, float %287)  ; FMad(a,b,c)
  %289 = call float @dx.op.tertiary.f32(i32 46, float %258, float %275, float %288)  ; FMad(a,b,c)
  %290 = fadd fast float %289, %280
  %291 = fmul fast float %266, %256
  %292 = call float @dx.op.tertiary.f32(i32 46, float %257, float %271, float %291)  ; FMad(a,b,c)
  %293 = call float @dx.op.tertiary.f32(i32 46, float %258, float %276, float %292)  ; FMad(a,b,c)
  %294 = fadd fast float %293, %281
  %295 = fmul fast float %267, %256
  %296 = call float @dx.op.tertiary.f32(i32 46, float %257, float %272, float %295)  ; FMad(a,b,c)
  %297 = call float @dx.op.tertiary.f32(i32 46, float %258, float %277, float %296)  ; FMad(a,b,c)
  %298 = fadd fast float %297, %282
  %299 = fmul fast float %192, %145
  %300 = fmul fast float %193, %145
  %301 = fmul fast float %194, %145
  %302 = fmul fast float %264, %299
  %303 = call float @dx.op.tertiary.f32(i32 46, float %300, float %269, float %302)  ; FMad(a,b,c)
  %304 = call float @dx.op.tertiary.f32(i32 46, float %301, float %274, float %303)  ; FMad(a,b,c)
  %305 = fmul fast float %265, %299
  %306 = call float @dx.op.tertiary.f32(i32 46, float %300, float %270, float %305)  ; FMad(a,b,c)
  %307 = call float @dx.op.tertiary.f32(i32 46, float %301, float %275, float %306)  ; FMad(a,b,c)
  %308 = fmul fast float %266, %299
  %309 = call float @dx.op.tertiary.f32(i32 46, float %300, float %271, float %308)  ; FMad(a,b,c)
  %310 = call float @dx.op.tertiary.f32(i32 46, float %301, float %276, float %309)  ; FMad(a,b,c)
  %311 = fmul fast float %267, %299
  %312 = call float @dx.op.tertiary.f32(i32 46, float %300, float %272, float %311)  ; FMad(a,b,c)
  %313 = call float @dx.op.tertiary.f32(i32 46, float %301, float %277, float %312)  ; FMad(a,b,c)
  %314 = fadd fast float %304, %286
  %315 = fadd fast float %307, %290
  %316 = fadd fast float %310, %294
  %317 = fadd fast float %313, %298
  %318 = fdiv fast float %286, %298
  %319 = fdiv fast float %290, %298
  %320 = fdiv fast float %294, %298
  %321 = fdiv fast float %314, %317
  %322 = fdiv fast float %315, %317
  %323 = fdiv fast float %316, %317
  %324 = fsub fast float %321, %318
  %325 = fsub fast float %322, %319
  %326 = fsub fast float %323, %320
  %327 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %328 = extractvalue %dx.types.CBufRet.f32 %327, 0
  %329 = extractvalue %dx.types.CBufRet.f32 %327, 1
  %330 = fmul fast float %328, %318
  %331 = fmul fast float %329, %319
  %332 = extractvalue %dx.types.CBufRet.f32 %327, 2
  %333 = extractvalue %dx.types.CBufRet.f32 %327, 3
  %334 = fadd fast float %330, %333
  %335 = fadd fast float %331, %332
  %336 = fmul fast float %328, %324
  %337 = fmul fast float %329, %325
  %338 = fadd fast float %156, -5.000000e-01
  %339 = fmul fast float %338, 2.500000e-01
  %340 = fadd fast float %339, 2.500000e-01
  %341 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %342 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %73, %dx.types.Handle %341, float %334, float %335, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %343 = extractvalue %dx.types.ResRet.f32 %342, 0
  %344 = fmul fast float %336, %340
  %345 = fmul fast float %337, %340
  %346 = fmul fast float %326, %340
  %347 = fadd fast float %344, %334
  %348 = fadd fast float %345, %335
  %349 = fadd fast float %346, %320
  %350 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %73, %dx.types.Handle %341, float %347, float %348, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %351 = extractvalue %dx.types.ResRet.f32 %350, 0
  %352 = fcmp fast une float %351, %343
  %353 = fcmp fast olt float %349, %351
  %354 = and i1 %352, %353
  br i1 %354, label %394, label %355

; <label>:355                                     ; preds = %262
  %356 = fadd fast float %339, 5.000000e-01
  %357 = fmul fast float %336, %356
  %358 = fmul fast float %337, %356
  %359 = fmul fast float %326, %356
  %360 = fadd fast float %357, %334
  %361 = fadd fast float %358, %335
  %362 = fadd fast float %359, %320
  %363 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %73, %dx.types.Handle %341, float %360, float %361, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %364 = extractvalue %dx.types.ResRet.f32 %363, 0
  %365 = fcmp fast une float %364, %343
  %366 = fcmp fast olt float %362, %364
  %367 = and i1 %365, %366
  br i1 %367, label %394, label %368

; <label>:368                                     ; preds = %355
  %369 = fadd fast float %339, 7.500000e-01
  %370 = fmul fast float %336, %369
  %371 = fmul fast float %337, %369
  %372 = fmul fast float %326, %369
  %373 = fadd fast float %370, %334
  %374 = fadd fast float %371, %335
  %375 = fadd fast float %372, %320
  %376 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %73, %dx.types.Handle %341, float %373, float %374, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %377 = extractvalue %dx.types.ResRet.f32 %376, 0
  %378 = fcmp fast une float %377, %343
  %379 = fcmp fast olt float %375, %377
  %380 = and i1 %378, %379
  br i1 %380, label %394, label %381

; <label>:381                                     ; preds = %368
  %382 = fadd fast float %339, 1.000000e+00
  %383 = fmul fast float %336, %382
  %384 = fmul fast float %337, %382
  %385 = fmul fast float %326, %382
  %386 = fadd fast float %383, %334
  %387 = fadd fast float %384, %335
  %388 = fadd fast float %385, %320
  %389 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %73, %dx.types.Handle %341, float %386, float %387, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %390 = extractvalue %dx.types.ResRet.f32 %389, 0
  %391 = fcmp fast une float %390, %343
  %392 = fcmp fast olt float %388, %390
  %393 = and i1 %391, %392
  br i1 %393, label %394, label %399

; <label>:394                                     ; preds = %381, %368, %355, %262
  %395 = phi float [ %340, %262 ], [ %356, %355 ], [ %369, %368 ], [ %382, %381 ]
  %396 = fadd fast float %395, -3.750000e-01
  %397 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %396)  ; FMax(a,b)
  %398 = fmul fast float %397, %145
  br label %399

; <label>:399                                     ; preds = %394, %381, %244
  %400 = phi float [ %145, %244 ], [ %398, %394 ], [ %145, %381 ]
  %401 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %402 = extractvalue %dx.types.CBufRet.i32 %401, 1
  %403 = icmp sgt i32 %402, 0
  %404 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %405 = extractvalue %dx.types.CBufRet.f32 %404, 0
  %406 = extractvalue %dx.types.CBufRet.f32 %404, 1
  %407 = extractvalue %dx.types.CBufRet.f32 %404, 2
  %408 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %409 = extractvalue %dx.types.CBufRet.f32 %408, 0
  %410 = extractvalue %dx.types.CBufRet.f32 %408, 1
  %411 = extractvalue %dx.types.CBufRet.f32 %408, 2
  %412 = fsub fast float %256, %409
  %413 = fsub fast float %257, %410
  %414 = fsub fast float %258, %411
  br i1 %403, label %415, label %1118

; <label>:415                                     ; preds = %399
  %416 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %417 = extractvalue %dx.types.CBufRet.i32 %416, 0
  %418 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %419 = extractvalue %dx.types.CBufRet.f32 %418, 1
  %420 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %421 = extractvalue %dx.types.CBufRet.f32 %420, 0
  %422 = extractvalue %dx.types.CBufRet.f32 %420, 1
  %423 = extractvalue %dx.types.CBufRet.f32 %420, 2
  %424 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %425 = extractvalue %dx.types.CBufRet.f32 %424, 0
  %426 = extractvalue %dx.types.CBufRet.f32 %424, 1
  %427 = extractvalue %dx.types.CBufRet.f32 %424, 2
  %428 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %429 = extractvalue %dx.types.CBufRet.f32 %428, 0
  %430 = extractvalue %dx.types.CBufRet.f32 %428, 1
  %431 = extractvalue %dx.types.CBufRet.f32 %428, 2
  %432 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %433 = extractvalue %dx.types.CBufRet.f32 %432, 0
  %434 = extractvalue %dx.types.CBufRet.f32 %432, 1
  %435 = extractvalue %dx.types.CBufRet.f32 %432, 2
  %436 = fmul fast float %421, %256
  %437 = call float @dx.op.tertiary.f32(i32 46, float %257, float %425, float %436)  ; FMad(a,b,c)
  %438 = call float @dx.op.tertiary.f32(i32 46, float %258, float %429, float %437)  ; FMad(a,b,c)
  %439 = fadd fast float %438, %433
  %440 = fmul fast float %422, %256
  %441 = call float @dx.op.tertiary.f32(i32 46, float %257, float %426, float %440)  ; FMad(a,b,c)
  %442 = call float @dx.op.tertiary.f32(i32 46, float %258, float %430, float %441)  ; FMad(a,b,c)
  %443 = fadd fast float %442, %434
  %444 = fmul fast float %423, %256
  %445 = call float @dx.op.tertiary.f32(i32 46, float %257, float %427, float %444)  ; FMad(a,b,c)
  %446 = call float @dx.op.tertiary.f32(i32 46, float %258, float %431, float %445)  ; FMad(a,b,c)
  %447 = fadd fast float %446, %435
  %448 = fmul fast float %439, %439
  %449 = fmul fast float %443, %443
  %450 = fadd fast float %449, %448
  %451 = fmul fast float %447, %447
  %452 = fadd fast float %450, %451
  %453 = call float @dx.op.unary.f32(i32 24, float %452)  ; Sqrt(value)
  br i1 %248, label %460, label %454

; <label>:454                                     ; preds = %415
  %455 = call float @dx.op.unary.f32(i32 6, float %222)  ; FAbs(value)
  %456 = call float @dx.op.binary.f32(i32 35, float %455, float 0x3FB99999A0000000)  ; FMax(a,b)
  %457 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %192, float %193, float %194)  ; Dot3(ax,ay,az,bx,by,bz)
  %458 = fsub fast float -0.000000e+00, %456
  %459 = fcmp fast olt float %457, %458
  br i1 %459, label %1782, label %460

; <label>:460                                     ; preds = %454, %415
  %461 = mul i32 %190, 336
  %462 = add i32 %461, 256
  %463 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %464 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %462, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %465 = extractvalue %dx.types.ResRet.i32 %464, 0
  %466 = extractvalue %dx.types.ResRet.i32 %464, 1
  %467 = extractvalue %dx.types.ResRet.i32 %464, 2
  %468 = bitcast i32 %465 to float
  %469 = bitcast i32 %466 to float
  %470 = bitcast i32 %467 to float
  %471 = add i32 %461, 288
  %472 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %471, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %473 = extractvalue %dx.types.ResRet.i32 %472, 0
  %474 = extractvalue %dx.types.ResRet.i32 %472, 1
  %475 = extractvalue %dx.types.ResRet.i32 %472, 2
  %476 = bitcast i32 %473 to float
  %477 = bitcast i32 %474 to float
  %478 = bitcast i32 %475 to float
  %479 = add i32 %461, 316
  %480 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %479, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %481 = extractvalue %dx.types.ResRet.i32 %480, 0
  %482 = fadd fast float %468, %405
  %483 = fadd fast float %469, %406
  %484 = fadd fast float %470, %407
  %485 = fmul fast float %482, 2.097152e+06
  %486 = fmul fast float %483, 2.097152e+06
  %487 = fmul fast float %484, 2.097152e+06
  %488 = fadd fast float %485, %412
  %489 = fadd fast float %488, %476
  %490 = fadd fast float %486, %413
  %491 = fadd fast float %490, %477
  %492 = fadd fast float %487, %414
  %493 = fadd fast float %492, %478
  %494 = fmul fast float %489, %489
  %495 = fmul fast float %491, %491
  %496 = fadd fast float %494, %495
  %497 = fmul fast float %493, %493
  %498 = fadd fast float %496, %497
  %499 = call float @dx.op.unary.f32(i32 24, float %498)  ; Sqrt(value)
  %500 = call float @dx.op.unary.f32(i32 23, float %499)  ; Log(value)
  %501 = call float @dx.op.unary.f32(i32 27, float %500)  ; Round_ni(value)
  %502 = fptosi float %501 to i32
  %503 = sub nsw i32 %502, %481
  %504 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %503)  ; IMax(a,b)
  %505 = add i32 %504, %190
  %506 = mul i32 %505, 336
  %507 = add i32 %506, 128
  %508 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %507, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %509 = extractvalue %dx.types.ResRet.i32 %508, 0
  %510 = extractvalue %dx.types.ResRet.i32 %508, 1
  %511 = bitcast i32 %509 to float
  %512 = bitcast i32 %510 to float
  %513 = add i32 %506, 144
  %514 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %513, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %515 = extractvalue %dx.types.ResRet.i32 %514, 0
  %516 = extractvalue %dx.types.ResRet.i32 %514, 1
  %517 = bitcast i32 %515 to float
  %518 = bitcast i32 %516 to float
  %519 = add i32 %506, 160
  %520 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %519, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %521 = extractvalue %dx.types.ResRet.i32 %520, 0
  %522 = extractvalue %dx.types.ResRet.i32 %520, 1
  %523 = bitcast i32 %521 to float
  %524 = bitcast i32 %522 to float
  %525 = add i32 %506, 176
  %526 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %525, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %527 = extractvalue %dx.types.ResRet.i32 %526, 0
  %528 = extractvalue %dx.types.ResRet.i32 %526, 1
  %529 = bitcast i32 %527 to float
  %530 = bitcast i32 %528 to float
  %531 = add i32 %506, 256
  %532 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %531, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %533 = extractvalue %dx.types.ResRet.i32 %532, 0
  %534 = extractvalue %dx.types.ResRet.i32 %532, 1
  %535 = extractvalue %dx.types.ResRet.i32 %532, 2
  %536 = bitcast i32 %533 to float
  %537 = bitcast i32 %534 to float
  %538 = bitcast i32 %535 to float
  %539 = add i32 %506, 272
  %540 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %539, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %541 = extractvalue %dx.types.ResRet.i32 %540, 0
  %542 = extractvalue %dx.types.ResRet.i32 %540, 1
  %543 = extractvalue %dx.types.ResRet.i32 %540, 2
  %544 = bitcast i32 %541 to float
  %545 = bitcast i32 %542 to float
  %546 = bitcast i32 %543 to float
  %547 = fadd fast float %536, %405
  %548 = fadd fast float %537, %406
  %549 = fadd fast float %538, %407
  %550 = fmul fast float %547, 2.097152e+06
  %551 = fmul fast float %548, 2.097152e+06
  %552 = fmul fast float %549, 2.097152e+06
  %553 = fadd fast float %550, %412
  %554 = fadd fast float %553, %544
  %555 = fadd fast float %551, %413
  %556 = fadd fast float %555, %545
  %557 = fadd fast float %552, %414
  %558 = fadd fast float %557, %546
  %559 = fmul fast float %554, %511
  %560 = call float @dx.op.tertiary.f32(i32 46, float %556, float %517, float %559)  ; FMad(a,b,c)
  %561 = call float @dx.op.tertiary.f32(i32 46, float %558, float %523, float %560)  ; FMad(a,b,c)
  %562 = fadd fast float %561, %529
  %563 = fmul fast float %554, %512
  %564 = call float @dx.op.tertiary.f32(i32 46, float %556, float %518, float %563)  ; FMad(a,b,c)
  %565 = call float @dx.op.tertiary.f32(i32 46, float %558, float %524, float %564)  ; FMad(a,b,c)
  %566 = fadd fast float %565, %530
  %567 = fmul fast float %562, 1.280000e+02
  %568 = fmul fast float %566, 1.280000e+02
  %569 = fptoui float %567 to i32
  %570 = fptoui float %568 to i32
  %571 = icmp ult i32 %505, 8192
  br i1 %571, label %578, label %572

; <label>:572                                     ; preds = %460
  %573 = mul i32 %505, 21845
  %574 = shl i32 %570, 7
  %575 = add i32 %573, -178946048
  %576 = add i32 %575, %569
  %577 = add i32 %576, %574
  br label %578

; <label>:578                                     ; preds = %572, %460
  %579 = phi i32 [ %577, %572 ], [ %505, %460 ]
  %580 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %581 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %580, i32 %579, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %582 = extractvalue %dx.types.ResRet.i32 %581, 0
  %583 = lshr i32 %582, 20
  %584 = and i32 %583, 63
  %585 = and i32 %582, 134217728
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %632, label %587

; <label>:587                                     ; preds = %578
  %588 = icmp eq i32 %584, 0
  %589 = zext i1 %588 to i32
  %590 = add i32 %584, %505
  br i1 %588, label %628, label %591

; <label>:591                                     ; preds = %587
  %592 = add i32 %506, 304
  %593 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %592, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %594 = mul i32 %590, 336
  %595 = add i32 %594, 304
  %596 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %595, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %597 = icmp ult i32 %590, 8192
  br i1 %597, label %621, label %598

; <label>:598                                     ; preds = %591
  %599 = extractvalue %dx.types.ResRet.i32 %593, 1
  %600 = shl i32 %599, 5
  %601 = sub i32 %570, %600
  %602 = extractvalue %dx.types.ResRet.i32 %596, 1
  %603 = shl i32 %602, 5
  %604 = and i32 %583, 31
  %605 = shl i32 %603, %604
  %606 = add i32 %601, %605
  %607 = lshr i32 %606, %604
  %608 = extractvalue %dx.types.ResRet.i32 %593, 0
  %609 = shl i32 %608, 5
  %610 = sub i32 %569, %609
  %611 = extractvalue %dx.types.ResRet.i32 %596, 0
  %612 = shl i32 %611, 5
  %613 = shl i32 %612, %604
  %614 = add i32 %610, %613
  %615 = lshr i32 %614, %604
  %616 = mul i32 %590, 21845
  %617 = shl i32 %607, 7
  %618 = add i32 %616, -178946048
  %619 = add i32 %618, %615
  %620 = add i32 %619, %617
  br label %621

; <label>:621                                     ; preds = %598, %591
  %622 = phi i32 [ %620, %598 ], [ %590, %591 ]
  %623 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %580, i32 %622, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %624 = extractvalue %dx.types.ResRet.i32 %623, 0
  %625 = and i32 %624, 200278016
  %626 = icmp eq i32 %625, 134217728
  %627 = zext i1 %626 to i32
  br label %628

; <label>:628                                     ; preds = %621, %587
  %629 = phi i32 [ %627, %621 ], [ %589, %587 ]
  %630 = icmp ne i32 %629, 0
  %631 = select i1 %630, i32 %590, i32 -1
  br label %632

; <label>:632                                     ; preds = %628, %578
  %633 = phi i32 [ -1, %578 ], [ %631, %628 ]
  %634 = phi i32 [ 0, %578 ], [ %629, %628 ]
  %635 = icmp ne i32 %634, 0
  %636 = icmp sgt i32 %633, %505
  %637 = and i1 %636, %635
  %638 = select i1 %637, i32 %633, i32 %505
  %639 = mul i32 %638, 336
  %640 = add i32 %639, 96
  %641 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %640, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %642 = extractvalue %dx.types.ResRet.i32 %641, 2
  %643 = bitcast i32 %642 to float
  %644 = add i32 %639, 128
  %645 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %644, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %646 = extractvalue %dx.types.ResRet.i32 %645, 0
  %647 = extractvalue %dx.types.ResRet.i32 %645, 1
  %648 = extractvalue %dx.types.ResRet.i32 %645, 2
  %649 = bitcast i32 %646 to float
  %650 = bitcast i32 %647 to float
  %651 = bitcast i32 %648 to float
  %652 = add i32 %639, 144
  %653 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %652, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %654 = extractvalue %dx.types.ResRet.i32 %653, 0
  %655 = extractvalue %dx.types.ResRet.i32 %653, 1
  %656 = extractvalue %dx.types.ResRet.i32 %653, 2
  %657 = bitcast i32 %654 to float
  %658 = bitcast i32 %655 to float
  %659 = bitcast i32 %656 to float
  %660 = add i32 %639, 160
  %661 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %660, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %662 = extractvalue %dx.types.ResRet.i32 %661, 0
  %663 = extractvalue %dx.types.ResRet.i32 %661, 1
  %664 = extractvalue %dx.types.ResRet.i32 %661, 2
  %665 = bitcast i32 %662 to float
  %666 = bitcast i32 %663 to float
  %667 = bitcast i32 %664 to float
  %668 = add i32 %639, 176
  %669 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %668, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %670 = extractvalue %dx.types.ResRet.i32 %669, 0
  %671 = extractvalue %dx.types.ResRet.i32 %669, 1
  %672 = extractvalue %dx.types.ResRet.i32 %669, 2
  %673 = bitcast i32 %670 to float
  %674 = bitcast i32 %671 to float
  %675 = bitcast i32 %672 to float
  %676 = add i32 %639, 192
  %677 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %676, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %678 = extractvalue %dx.types.ResRet.i32 %677, 0
  %679 = extractvalue %dx.types.ResRet.i32 %677, 1
  %680 = extractvalue %dx.types.ResRet.i32 %677, 2
  %681 = bitcast i32 %678 to float
  %682 = bitcast i32 %679 to float
  %683 = bitcast i32 %680 to float
  %684 = add i32 %639, 208
  %685 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %684, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %686 = extractvalue %dx.types.ResRet.i32 %685, 0
  %687 = extractvalue %dx.types.ResRet.i32 %685, 1
  %688 = extractvalue %dx.types.ResRet.i32 %685, 2
  %689 = bitcast i32 %686 to float
  %690 = bitcast i32 %687 to float
  %691 = bitcast i32 %688 to float
  %692 = add i32 %639, 224
  %693 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %692, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %694 = extractvalue %dx.types.ResRet.i32 %693, 0
  %695 = extractvalue %dx.types.ResRet.i32 %693, 1
  %696 = extractvalue %dx.types.ResRet.i32 %693, 2
  %697 = bitcast i32 %694 to float
  %698 = bitcast i32 %695 to float
  %699 = bitcast i32 %696 to float
  %700 = add i32 %639, 256
  %701 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %700, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %702 = extractvalue %dx.types.ResRet.i32 %701, 0
  %703 = extractvalue %dx.types.ResRet.i32 %701, 1
  %704 = extractvalue %dx.types.ResRet.i32 %701, 2
  %705 = bitcast i32 %702 to float
  %706 = bitcast i32 %703 to float
  %707 = bitcast i32 %704 to float
  %708 = add i32 %639, 272
  %709 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %708, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %710 = extractvalue %dx.types.ResRet.i32 %709, 0
  %711 = extractvalue %dx.types.ResRet.i32 %709, 1
  %712 = extractvalue %dx.types.ResRet.i32 %709, 2
  %713 = bitcast i32 %710 to float
  %714 = bitcast i32 %711 to float
  %715 = bitcast i32 %712 to float
  %716 = fcmp fast ogt float %419, 0.000000e+00
  br i1 %716, label %717, label %731

; <label>:717                                     ; preds = %632
  %718 = add i32 %639, 316
  %719 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %718, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %720 = extractvalue %dx.types.ResRet.i32 %719, 0
  %721 = add i32 %639, 300
  %722 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %721, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = bitcast i32 %723 to float
  %725 = fmul fast float %419, 0x3F00000000000000
  %726 = fmul fast float %725, %453
  %727 = sitofp i32 %720 to float
  %728 = fsub fast float %727, %724
  %729 = call float @dx.op.unary.f32(i32 21, float %728)  ; Exp(value)
  %730 = fdiv fast float %726, %729
  br label %731

; <label>:731                                     ; preds = %717, %632
  %732 = phi float [ %730, %717 ], [ 0.000000e+00, %632 ]
  %733 = fmul fast float %681, %250
  %734 = call float @dx.op.tertiary.f32(i32 46, float %251, float %689, float %733)  ; FMad(a,b,c)
  %735 = call float @dx.op.tertiary.f32(i32 46, float %252, float %697, float %734)  ; FMad(a,b,c)
  %736 = fmul fast float %682, %250
  %737 = call float @dx.op.tertiary.f32(i32 46, float %251, float %690, float %736)  ; FMad(a,b,c)
  %738 = call float @dx.op.tertiary.f32(i32 46, float %252, float %698, float %737)  ; FMad(a,b,c)
  %739 = fmul fast float %683, %250
  %740 = call float @dx.op.tertiary.f32(i32 46, float %251, float %691, float %739)  ; FMad(a,b,c)
  %741 = call float @dx.op.tertiary.f32(i32 46, float %252, float %699, float %740)  ; FMad(a,b,c)
  %742 = fsub fast float -0.000000e+00, %735
  %743 = fsub fast float -0.000000e+00, %738
  %744 = fdiv fast float %742, %741
  %745 = fdiv fast float %743, %741
  %746 = call float @dx.op.binary.f32(i32 35, float %744, float 0xBFA99999A0000000)  ; FMax(a,b)
  %747 = call float @dx.op.binary.f32(i32 35, float %745, float 0xBFA99999A0000000)  ; FMax(a,b)
  %748 = call float @dx.op.binary.f32(i32 36, float %746, float 0x3FA99999A0000000)  ; FMin(a,b)
  %749 = call float @dx.op.binary.f32(i32 36, float %747, float 0x3FA99999A0000000)  ; FMin(a,b)
  %750 = fadd fast float %705, %405
  %751 = fadd fast float %706, %406
  %752 = fadd fast float %707, %407
  %753 = fmul fast float %750, 2.097152e+06
  %754 = fmul fast float %751, 2.097152e+06
  %755 = fmul fast float %752, 2.097152e+06
  %756 = icmp eq i32 %402, 0
  br i1 %756, label %1100, label %757

; <label>:757                                     ; preds = %731
  br label %758

; <label>:758                                     ; preds = %1095, %757
  %759 = phi i32 [ %1064, %1095 ], [ undef, %757 ]
  %760 = phi i32 [ %1082, %1095 ], [ 0, %757 ]
  %761 = phi i32 [ %1096, %1095 ], [ 0, %757 ]
  %762 = phi float [ %1083, %1095 ], [ 0.000000e+00, %757 ]
  %763 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %764 = extractvalue %dx.types.CBufRet.i32 %763, 1
  %765 = uitofp i32 %761 to float
  %766 = fmul fast float %765, 0x3FE827F520000000
  %767 = fmul fast float %765, 0x3FE23C21A0000000
  %768 = call float @dx.op.unary.f32(i32 22, float %766)  ; Frc(value)
  %769 = call float @dx.op.unary.f32(i32 22, float %767)  ; Frc(value)
  %770 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %771 = extractvalue %dx.types.CBufRet.i32 %770, 0
  %772 = extractvalue %dx.types.CBufRet.i32 %770, 1
  %773 = sitofp i32 %771 to float
  %774 = sitofp i32 %772 to float
  %775 = fmul fast float %773, %768
  %776 = fmul fast float %774, %769
  %777 = fptosi float %775 to i32
  %778 = fptosi float %776 to i32
  %779 = add i32 %761, %402
  %780 = uitofp i32 %779 to float
  %781 = fmul fast float %780, 0x3FE827F520000000
  %782 = fmul fast float %780, 0x3FE23C21A0000000
  %783 = call float @dx.op.unary.f32(i32 22, float %781)  ; Frc(value)
  %784 = call float @dx.op.unary.f32(i32 22, float %782)  ; Frc(value)
  %785 = fmul fast float %773, %783
  %786 = fmul fast float %774, %784
  %787 = fptosi float %785 to i32
  %788 = fptosi float %786 to i32
  %789 = add i32 %777, %64
  %790 = add i32 %778, %66
  %791 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %792 = extractvalue %dx.types.CBufRet.i32 %791, 0
  %793 = extractvalue %dx.types.CBufRet.i32 %791, 1
  %794 = extractvalue %dx.types.CBufRet.i32 %791, 2
  %795 = and i32 %789, %792
  %796 = and i32 %790, %793
  %797 = and i32 %794, %764
  %798 = mul i32 %797, %772
  %799 = add i32 %798, %796
  %800 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %801 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %800, i32 0, i32 %795, i32 %799, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %802 = extractvalue %dx.types.ResRet.f32 %801, 0
  %803 = extractvalue %dx.types.ResRet.f32 %801, 1
  %804 = add i32 %787, %64
  %805 = add i32 %788, %66
  %806 = and i32 %792, %804
  %807 = and i32 %793, %805
  %808 = add i32 %798, %807
  %809 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %800, i32 0, i32 %806, i32 %808, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %810 = extractvalue %dx.types.ResRet.f32 %809, 0
  %811 = extractvalue %dx.types.ResRet.f32 %809, 1
  %812 = fmul fast float %802, 2.000000e+00
  %813 = fmul fast float %803, 2.000000e+00
  %814 = fadd fast float %812, 0xBFEFFFFFE0000000
  %815 = fadd fast float %813, 0xBFEFFFFFE0000000
  %816 = call float @dx.op.unary.f32(i32 6, float %814)  ; FAbs(value)
  %817 = call float @dx.op.unary.f32(i32 6, float %815)  ; FAbs(value)
  %818 = call float @dx.op.binary.f32(i32 36, float %816, float %817)  ; FMin(a,b)
  %819 = call float @dx.op.binary.f32(i32 35, float %816, float %817)  ; FMax(a,b)
  %820 = fadd fast float %819, 0x3BF0000000000000
  %821 = fdiv fast float %818, %820
  %822 = fcmp fast oge float %817, %816
  %823 = uitofp i1 %822 to float
  %824 = fmul fast float %823, 2.000000e+00
  %825 = fadd fast float %821, %824
  %826 = fmul fast float %825, 0x3FE921FB60000000
  %827 = call float @dx.op.unary.f32(i32 12, float %826)  ; Cos(value)
  %828 = call float @dx.op.unary.f32(i32 13, float %826)  ; Sin(value)
  %829 = bitcast float %827 to i32
  %830 = bitcast float %828 to i32
  %831 = and i32 %829, 2147483647
  %832 = and i32 %830, 2147483647
  %833 = bitcast float %814 to i32
  %834 = bitcast float %815 to i32
  %835 = and i32 %833, -2147483648
  %836 = and i32 %834, -2147483648
  %837 = or i32 %831, %835
  %838 = or i32 %832, %836
  %839 = bitcast i32 %837 to float
  %840 = bitcast i32 %838 to float
  %841 = fmul fast float %819, %222
  %842 = fmul fast float %841, %839
  %843 = fmul fast float %841, %840
  %844 = call float @dx.op.unary.f32(i32 6, float %192)  ; FAbs(value)
  %845 = fcmp fast ogt float %844, 0x3EB0C6F7A0000000
  %846 = select i1 %845, float 1.000000e+00, float 0.000000e+00
  %847 = select i1 %845, float 0.000000e+00, float 1.000000e+00
  %848 = fmul fast float %194, %847
  %849 = fsub fast float -0.000000e+00, %848
  %850 = fmul fast float %846, %194
  %851 = fmul fast float %847, %192
  %852 = fmul fast float %846, %193
  %853 = fsub fast float %851, %852
  %854 = fmul fast float %850, %194
  %855 = fmul fast float %853, %193
  %856 = fsub fast float %854, %855
  %857 = fmul fast float %853, %192
  %858 = fmul fast float %194, %849
  %859 = fsub fast float %857, %858
  %860 = fmul fast float %193, %849
  %861 = fmul fast float %850, %192
  %862 = fsub fast float %860, %861
  %863 = fmul fast float %842, %849
  %864 = fmul fast float %842, %850
  %865 = fmul fast float %853, %842
  %866 = fmul fast float %856, %843
  %867 = fmul fast float %859, %843
  %868 = fmul fast float %862, %843
  %869 = fadd fast float %863, %192
  %870 = fadd fast float %869, %866
  %871 = fadd fast float %864, %193
  %872 = fadd fast float %871, %867
  %873 = fadd fast float %865, %194
  %874 = fadd fast float %873, %868
  %875 = call float @dx.op.dot3.f32(i32 55, float %870, float %872, float %874, float %870, float %872, float %874)  ; Dot3(ax,ay,az,bx,by,bz)
  %876 = call float @dx.op.unary.f32(i32 25, float %875)  ; Rsqrt(value)
  %877 = fadd fast float %810, -5.000000e-01
  %878 = fadd fast float %811, -5.000000e-01
  %879 = fmul fast float %877, %732
  %880 = fmul fast float %878, %732
  %881 = fmul fast float %876, %400
  %882 = fmul fast float %881, %870
  %883 = fmul fast float %881, %872
  %884 = fmul fast float %881, %874
  %885 = fadd fast float %753, %412
  %886 = fadd fast float %885, %713
  %887 = fadd fast float %886, %882
  %888 = fadd fast float %754, %413
  %889 = fadd fast float %888, %714
  %890 = fadd fast float %889, %883
  %891 = fadd fast float %755, %414
  %892 = fadd fast float %891, %715
  %893 = fadd fast float %892, %884
  %894 = fmul fast float %887, %649
  %895 = call float @dx.op.tertiary.f32(i32 46, float %890, float %657, float %894)  ; FMad(a,b,c)
  %896 = call float @dx.op.tertiary.f32(i32 46, float %893, float %665, float %895)  ; FMad(a,b,c)
  %897 = fmul fast float %887, %650
  %898 = call float @dx.op.tertiary.f32(i32 46, float %890, float %658, float %897)  ; FMad(a,b,c)
  %899 = call float @dx.op.tertiary.f32(i32 46, float %893, float %666, float %898)  ; FMad(a,b,c)
  %900 = fmul fast float %887, %651
  %901 = call float @dx.op.tertiary.f32(i32 46, float %890, float %659, float %900)  ; FMad(a,b,c)
  %902 = call float @dx.op.tertiary.f32(i32 46, float %893, float %667, float %901)  ; FMad(a,b,c)
  %903 = fadd fast float %902, %675
  %904 = call float @dx.op.dot2.f32(i32 54, float %748, float %749, float %879, float %880)  ; Dot2(ax,ay,bx,by)
  %905 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %904)  ; FMax(a,b)
  %906 = fmul fast float %905, 2.000000e+00
  %907 = fmul fast float %643, %400
  %908 = call float @dx.op.unary.f32(i32 6, float %907)  ; FAbs(value)
  %909 = fsub fast float %906, %908
  %910 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %909)  ; FMax(a,b)
  %911 = fadd fast float %910, %903
  %912 = fadd fast float %879, %673
  %913 = fadd fast float %912, %896
  %914 = fadd fast float %880, %674
  %915 = fadd fast float %914, %899
  %916 = fmul fast float %913, 1.280000e+02
  %917 = fmul fast float %915, 1.280000e+02
  %918 = fptoui float %916 to i32
  %919 = fptoui float %917 to i32
  %920 = icmp ult i32 %638, 8192
  br i1 %920, label %927, label %921

; <label>:921                                     ; preds = %758
  %922 = mul i32 %638, 21845
  %923 = shl i32 %919, 7
  %924 = add i32 %922, -178946048
  %925 = add i32 %924, %918
  %926 = add i32 %925, %923
  br label %927

; <label>:927                                     ; preds = %921, %758
  %928 = phi i32 [ %926, %921 ], [ %638, %758 ]
  %929 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %930 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %929, i32 %928, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %931 = extractvalue %dx.types.ResRet.i32 %930, 0
  %932 = lshr i32 %931, 20
  %933 = and i32 %932, 63
  %934 = and i32 %931, 134217728
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %1043, label %936

; <label>:936                                     ; preds = %927
  %937 = icmp eq i32 %933, 0
  %938 = zext i1 %937 to i32
  %939 = add i32 %933, %638
  %940 = fmul fast float %913, 1.638400e+04
  %941 = fmul fast float %915, 1.638400e+04
  %942 = fptoui float %940 to i32
  %943 = fptoui float %941 to i32
  br i1 %937, label %1020, label %944

; <label>:944                                     ; preds = %936
  %945 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %946 = add i32 %639, 112
  %947 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %945, i32 %946, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %948 = extractvalue %dx.types.ResRet.i32 %947, 2
  %949 = bitcast i32 %948 to float
  %950 = add i32 %639, 304
  %951 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %945, i32 %950, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %952 = extractvalue %dx.types.ResRet.i32 %951, 0
  %953 = extractvalue %dx.types.ResRet.i32 %951, 1
  %954 = mul i32 %939, 336
  %955 = add i32 %954, 112
  %956 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %945, i32 %955, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %957 = extractvalue %dx.types.ResRet.i32 %956, 2
  %958 = bitcast i32 %957 to float
  %959 = add i32 %954, 304
  %960 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %945, i32 %959, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %961 = extractvalue %dx.types.ResRet.i32 %960, 0
  %962 = extractvalue %dx.types.ResRet.i32 %960, 1
  %963 = shl i32 %952, 5
  %964 = shl i32 %953, 5
  %965 = shl i32 %961, 5
  %966 = shl i32 %962, 5
  %967 = sub i32 %918, %963
  %968 = sub i32 %919, %964
  %969 = and i32 %932, 31
  %970 = shl i32 %965, %969
  %971 = shl i32 %966, %969
  %972 = add i32 %967, %970
  %973 = add i32 %968, %971
  %974 = lshr i32 %972, %969
  %975 = lshr i32 %973, %969
  %976 = shl i32 %974, 7
  %977 = shl i32 %975, 7
  %978 = or i32 %976, 127
  %979 = or i32 %977, 127
  %980 = sitofp i32 %952 to float
  %981 = sitofp i32 %953 to float
  %982 = sitofp i32 %961 to float
  %983 = sitofp i32 %962 to float
  %984 = shl i32 1, %969
  %985 = uitofp i32 %984 to float
  %986 = fdiv fast float 1.000000e+00, %985
  %987 = fmul fast float %986, %980
  %988 = fmul fast float %986, %981
  %989 = fsub fast float %982, %987
  %990 = fsub fast float %983, %988
  %991 = fmul fast float %989, 2.500000e-01
  %992 = fmul fast float %990, 2.500000e-01
  %993 = fmul fast float %986, %949
  %994 = fsub fast float %958, %993
  %995 = fmul fast float %986, %913
  %996 = fmul fast float %986, %915
  %997 = fadd fast float %991, %995
  %998 = fadd fast float %992, %996
  %999 = fmul fast float %997, 1.638400e+04
  %1000 = fmul fast float %998, 1.638400e+04
  %1001 = fptoui float %999 to i32
  %1002 = fptoui float %1000 to i32
  %1003 = call i32 @dx.op.binary.i32(i32 39, i32 %1001, i32 %976)  ; UMax(a,b)
  %1004 = call i32 @dx.op.binary.i32(i32 39, i32 %1002, i32 %977)  ; UMax(a,b)
  %1005 = call i32 @dx.op.binary.i32(i32 40, i32 %1003, i32 %978)  ; UMin(a,b)
  %1006 = call i32 @dx.op.binary.i32(i32 40, i32 %1004, i32 %979)  ; UMin(a,b)
  %1007 = icmp ult i32 %939, 8192
  br i1 %1007, label %1013, label %1008

; <label>:1008                                    ; preds = %944
  %1009 = mul i32 %939, 21845
  %1010 = add i32 %1009, -178946048
  %1011 = add i32 %1010, %974
  %1012 = add i32 %1011, %977
  br label %1013

; <label>:1013                                    ; preds = %1008, %944
  %1014 = phi i32 [ %1012, %1008 ], [ %939, %944 ]
  %1015 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %929, i32 %1014, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1016 = extractvalue %dx.types.ResRet.i32 %1015, 0
  %1017 = and i32 %1016, 200278016
  %1018 = icmp eq i32 %1017, 134217728
  %1019 = zext i1 %1018 to i32
  br label %1020

; <label>:1020                                    ; preds = %1013, %936
  %1021 = phi i32 [ %1005, %1013 ], [ %942, %936 ]
  %1022 = phi i32 [ %1006, %1013 ], [ %943, %936 ]
  %1023 = phi float [ %986, %1013 ], [ 1.000000e+00, %936 ]
  %1024 = phi float [ %994, %1013 ], [ 0.000000e+00, %936 ]
  %1025 = phi i32 [ %1019, %1013 ], [ %938, %936 ]
  %1026 = phi i32 [ %1016, %1013 ], [ %931, %936 ]
  %1027 = icmp eq i32 %1025, 0
  br i1 %1027, label %1043, label %1028

; <label>:1028                                    ; preds = %1020
  %1029 = shl i32 %1026, 7
  %1030 = and i32 %1029, 130944
  %1031 = lshr i32 %1026, 3
  %1032 = and i32 %1031, 130944
  %1033 = and i32 %1021, 127
  %1034 = and i32 %1022, 127
  %1035 = or i32 %1030, %1033
  %1036 = or i32 %1032, %1034
  %1037 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1038 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1037, i32 0, i32 %1035, i32 %1036, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1039 = extractvalue %dx.types.ResRet.i32 %1038, 0
  %1040 = bitcast i32 %1039 to float
  %1041 = fsub fast float %1040, %1024
  %1042 = fdiv fast float %1041, %1023
  br label %1043

; <label>:1043                                    ; preds = %1028, %1020, %927
  %1044 = phi i32 [ %1035, %1028 ], [ 0, %1020 ], [ 0, %927 ]
  %1045 = phi i32 [ %1036, %1028 ], [ 0, %1020 ], [ 0, %927 ]
  %1046 = phi i32 [ %1021, %1028 ], [ %1021, %1020 ], [ 0, %927 ]
  %1047 = phi i32 [ %1022, %1028 ], [ %1022, %1020 ], [ 0, %927 ]
  %1048 = phi i1 [ true, %1028 ], [ false, %1020 ], [ false, %927 ]
  %1049 = phi i32 [ %939, %1028 ], [ -1, %1020 ], [ -1, %927 ]
  %1050 = phi float [ %1042, %1028 ], [ 0.000000e+00, %1020 ], [ 0.000000e+00, %927 ]
  %1051 = select i1 %1048, i32 %1044, i32 -1
  %1052 = select i1 %1048, i32 %1045, i32 -1
  %1053 = select i1 %1048, i32 %1046, i32 -1
  %1054 = select i1 %1048, i32 %1047, i32 -1
  %1055 = select i1 %1048, i32 %1049, i32 %759
  %1056 = select i1 %1048, float %1050, float 0.000000e+00
  %1057 = fcmp fast ogt float %1056, %911
  %1058 = and i1 %1048, %1057
  %1059 = select i1 %1048, i32 %1044, i32 0
  %1060 = select i1 %1048, i32 %1045, i32 0
  %1061 = select i1 %1048, i32 %1046, i32 0
  %1062 = select i1 %1048, i32 %1047, i32 0
  %1063 = select i1 %1048, i32 %1049, i32 0
  %1064 = select i1 %1058, i32 %1063, i32 %1055
  %1065 = select i1 %1058, i32 %1062, i32 %1054
  %1066 = select i1 %1058, i32 %1061, i32 %1053
  %1067 = select i1 %1058, i32 %1060, i32 %1052
  %1068 = select i1 %1058, i32 %1059, i32 %1051
  %1069 = sub nsw i32 %1064, %190
  br i1 %1058, label %1070, label %1079

; <label>:1070                                    ; preds = %1043
  %1071 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1072 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1071, i32 %640, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1073 = extractvalue %dx.types.ResRet.i32 %1072, 2
  %1074 = bitcast i32 %1073 to float
  %1075 = fsub fast float %911, %1050
  %1076 = fdiv fast float %1075, %1074
  %1077 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1076)  ; FMax(a,b)
  %1078 = fadd fast float %1077, %762
  br label %1081

; <label>:1079                                    ; preds = %1043
  %1080 = add i32 %760, 1
  br label %1081

; <label>:1081                                    ; preds = %1079, %1070
  %1082 = phi i32 [ %760, %1070 ], [ %1080, %1079 ]
  %1083 = phi float [ %1078, %1070 ], [ %762, %1079 ]
  %1084 = icmp eq i32 %417, 0
  br i1 %1084, label %1095, label %1085

; <label>:1085                                    ; preds = %1081
  %1086 = icmp eq i32 %761, 0
  br i1 %1086, label %1087, label %1090

; <label>:1087                                    ; preds = %1085
  %1088 = xor i1 %1058, true
  %1089 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1088)  ; WaveAllTrue(cond)
  br i1 %1089, label %1098, label %1095

; <label>:1090                                    ; preds = %1085
  %1091 = icmp ult i32 %761, %417
  br i1 %1091, label %1095, label %1092

; <label>:1092                                    ; preds = %1090
  %1093 = icmp eq i32 %1082, 0
  %1094 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1093)  ; WaveAllTrue(cond)
  br i1 %1094, label %1098, label %1095

; <label>:1095                                    ; preds = %1092, %1090, %1087, %1081
  %1096 = add nuw i32 %761, 1
  %1097 = icmp ult i32 %1096, %402
  br i1 %1097, label %758, label %1098

; <label>:1098                                    ; preds = %1095, %1092, %1087
  %1099 = phi i32 [ %1096, %1095 ], [ 0, %1087 ], [ %761, %1092 ]
  br label %1100

; <label>:1100                                    ; preds = %1098, %731
  %1101 = phi i32 [ 0, %731 ], [ %1069, %1098 ]
  %1102 = phi i32 [ -1, %731 ], [ %1066, %1098 ]
  %1103 = phi i32 [ -1, %731 ], [ %1065, %1098 ]
  %1104 = phi i32 [ -1, %731 ], [ %1068, %1098 ]
  %1105 = phi i32 [ -1, %731 ], [ %1067, %1098 ]
  %1106 = phi i32 [ 0, %731 ], [ %1082, %1098 ]
  %1107 = phi i32 [ 0, %731 ], [ %1099, %1098 ]
  %1108 = phi float [ 0.000000e+00, %731 ], [ %1083, %1098 ]
  %1109 = add i32 %1107, 1
  %1110 = call i32 @dx.op.binary.i32(i32 40, i32 %1109, i32 %402)  ; UMin(a,b)
  %1111 = sub i32 %1110, %1106
  %1112 = call i32 @dx.op.binary.i32(i32 39, i32 1, i32 %1111)  ; UMax(a,b)
  %1113 = uitofp i32 %1112 to float
  %1114 = fdiv fast float %1108, %1113
  %1115 = uitofp i32 %1106 to float
  %1116 = uitofp i32 %1110 to float
  %1117 = fdiv fast float %1115, %1116
  br label %1782

; <label>:1118                                    ; preds = %399
  %1119 = call float @dx.op.binary.f32(i32 35, float %400, float 0.000000e+00)  ; FMax(a,b)
  %1120 = mul i32 %190, 336
  %1121 = add i32 %1120, 128
  %1122 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1123 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1121, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1124 = add i32 %1120, 144
  %1125 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1124, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1126 = add i32 %1120, 160
  %1127 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1126, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1128 = add i32 %1120, 176
  %1129 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1128, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1130 = add i32 %1120, 256
  %1131 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1130, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1132 = extractvalue %dx.types.ResRet.i32 %1131, 0
  %1133 = extractvalue %dx.types.ResRet.i32 %1131, 1
  %1134 = extractvalue %dx.types.ResRet.i32 %1131, 2
  %1135 = bitcast i32 %1132 to float
  %1136 = bitcast i32 %1133 to float
  %1137 = bitcast i32 %1134 to float
  %1138 = add i32 %1120, 268
  %1139 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1138, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1140 = extractvalue %dx.types.ResRet.i32 %1139, 0
  %1141 = add i32 %1120, 272
  %1142 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1141, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1143 = add i32 %1120, 288
  %1144 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1143, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1145 = icmp eq i32 %1140, 0
  %1146 = fadd fast float %1135, %405
  %1147 = fadd fast float %1136, %406
  %1148 = fadd fast float %1137, %407
  %1149 = fmul fast float %1146, 2.097152e+06
  %1150 = fmul fast float %1147, 2.097152e+06
  %1151 = fmul fast float %1148, 2.097152e+06
  %1152 = fadd fast float %1149, %412
  %1153 = fadd fast float %1150, %413
  %1154 = fadd fast float %1151, %414
  br i1 %1145, label %1155, label %1488

; <label>:1155                                    ; preds = %1118
  %1156 = extractvalue %dx.types.ResRet.i32 %1144, 2
  %1157 = bitcast i32 %1156 to float
  %1158 = extractvalue %dx.types.ResRet.i32 %1144, 1
  %1159 = bitcast i32 %1158 to float
  %1160 = extractvalue %dx.types.ResRet.i32 %1144, 0
  %1161 = bitcast i32 %1160 to float
  %1162 = add i32 %1120, 320
  %1163 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1162, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1164 = extractvalue %dx.types.ResRet.i32 %1163, 0
  %1165 = add i32 %1120, 316
  %1166 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1165, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1167 = extractvalue %dx.types.ResRet.i32 %1166, 0
  %1168 = add i32 %1120, 300
  %1169 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1168, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1170 = extractvalue %dx.types.ResRet.i32 %1169, 0
  %1171 = bitcast i32 %1170 to float
  %1172 = fadd fast float %1152, %1161
  %1173 = fadd fast float %1153, %1159
  %1174 = fadd fast float %1154, %1157
  %1175 = fmul fast float %1172, %1172
  %1176 = fmul fast float %1173, %1173
  %1177 = fadd fast float %1175, %1176
  %1178 = fmul fast float %1174, %1174
  %1179 = fadd fast float %1177, %1178
  %1180 = call float @dx.op.unary.f32(i32 24, float %1179)  ; Sqrt(value)
  %1181 = call float @dx.op.unary.f32(i32 23, float %1180)  ; Log(value)
  %1182 = fadd fast float %1181, %1171
  %1183 = call float @dx.op.unary.f32(i32 27, float %1182)  ; Round_ni(value)
  %1184 = fptosi float %1183 to i32
  %1185 = sub nsw i32 %1184, %1167
  %1186 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1185)  ; IMax(a,b)
  %1187 = icmp slt i32 %1186, %1164
  br i1 %1187, label %1188, label %1782

; <label>:1188                                    ; preds = %1155
  %1189 = add nsw i32 %1186, %190
  %1190 = mul i32 %1189, 336
  %1191 = add i32 %1190, 96
  %1192 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1191, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1193 = extractvalue %dx.types.ResRet.i32 %1192, 2
  %1194 = bitcast i32 %1193 to float
  %1195 = add i32 %1190, 128
  %1196 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1195, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1197 = extractvalue %dx.types.ResRet.i32 %1196, 0
  %1198 = extractvalue %dx.types.ResRet.i32 %1196, 1
  %1199 = extractvalue %dx.types.ResRet.i32 %1196, 2
  %1200 = bitcast i32 %1197 to float
  %1201 = bitcast i32 %1198 to float
  %1202 = bitcast i32 %1199 to float
  %1203 = add i32 %1190, 144
  %1204 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1203, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1205 = extractvalue %dx.types.ResRet.i32 %1204, 0
  %1206 = extractvalue %dx.types.ResRet.i32 %1204, 1
  %1207 = extractvalue %dx.types.ResRet.i32 %1204, 2
  %1208 = bitcast i32 %1205 to float
  %1209 = bitcast i32 %1206 to float
  %1210 = bitcast i32 %1207 to float
  %1211 = add i32 %1190, 160
  %1212 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1211, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1213 = extractvalue %dx.types.ResRet.i32 %1212, 0
  %1214 = extractvalue %dx.types.ResRet.i32 %1212, 1
  %1215 = extractvalue %dx.types.ResRet.i32 %1212, 2
  %1216 = bitcast i32 %1213 to float
  %1217 = bitcast i32 %1214 to float
  %1218 = bitcast i32 %1215 to float
  %1219 = add i32 %1190, 176
  %1220 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1219, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1221 = extractvalue %dx.types.ResRet.i32 %1220, 0
  %1222 = extractvalue %dx.types.ResRet.i32 %1220, 1
  %1223 = extractvalue %dx.types.ResRet.i32 %1220, 2
  %1224 = bitcast i32 %1221 to float
  %1225 = bitcast i32 %1222 to float
  %1226 = bitcast i32 %1223 to float
  %1227 = add i32 %1190, 256
  %1228 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1227, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1229 = extractvalue %dx.types.ResRet.i32 %1228, 0
  %1230 = extractvalue %dx.types.ResRet.i32 %1228, 1
  %1231 = extractvalue %dx.types.ResRet.i32 %1228, 2
  %1232 = bitcast i32 %1229 to float
  %1233 = bitcast i32 %1230 to float
  %1234 = bitcast i32 %1231 to float
  %1235 = add i32 %1190, 272
  %1236 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1235, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1237 = extractvalue %dx.types.ResRet.i32 %1236, 0
  %1238 = extractvalue %dx.types.ResRet.i32 %1236, 1
  %1239 = extractvalue %dx.types.ResRet.i32 %1236, 2
  %1240 = bitcast i32 %1237 to float
  %1241 = bitcast i32 %1238 to float
  %1242 = bitcast i32 %1239 to float
  %1243 = fadd fast float %1232, %405
  %1244 = fadd fast float %1233, %406
  %1245 = fadd fast float %1234, %407
  %1246 = fmul fast float %1243, 2.097152e+06
  %1247 = fmul fast float %1244, 2.097152e+06
  %1248 = fmul fast float %1245, 2.097152e+06
  %1249 = fadd fast float %1246, %412
  %1250 = fadd fast float %1249, %1240
  %1251 = fadd fast float %1247, %413
  %1252 = fadd fast float %1251, %1241
  %1253 = fadd fast float %1248, %414
  %1254 = fadd fast float %1253, %1242
  %1255 = fmul fast float %1250, %1200
  %1256 = call float @dx.op.tertiary.f32(i32 46, float %1252, float %1208, float %1255)  ; FMad(a,b,c)
  %1257 = call float @dx.op.tertiary.f32(i32 46, float %1254, float %1216, float %1256)  ; FMad(a,b,c)
  %1258 = fadd fast float %1257, %1224
  %1259 = fmul fast float %1250, %1201
  %1260 = call float @dx.op.tertiary.f32(i32 46, float %1252, float %1209, float %1259)  ; FMad(a,b,c)
  %1261 = call float @dx.op.tertiary.f32(i32 46, float %1254, float %1217, float %1260)  ; FMad(a,b,c)
  %1262 = fadd fast float %1261, %1225
  %1263 = fmul fast float %1250, %1202
  %1264 = call float @dx.op.tertiary.f32(i32 46, float %1252, float %1210, float %1263)  ; FMad(a,b,c)
  %1265 = call float @dx.op.tertiary.f32(i32 46, float %1254, float %1218, float %1264)  ; FMad(a,b,c)
  %1266 = fadd fast float %1265, %1226
  %1267 = fmul fast float %1258, 1.280000e+02
  %1268 = fmul fast float %1262, 1.280000e+02
  %1269 = fptoui float %1267 to i32
  %1270 = fptoui float %1268 to i32
  %1271 = icmp ult i32 %1189, 8192
  br i1 %1271, label %1278, label %1272

; <label>:1272                                    ; preds = %1188
  %1273 = mul i32 %1189, 21845
  %1274 = shl i32 %1270, 7
  %1275 = add i32 %1273, -178946048
  %1276 = add i32 %1275, %1269
  %1277 = add i32 %1276, %1274
  br label %1278

; <label>:1278                                    ; preds = %1272, %1188
  %1279 = phi i32 [ %1277, %1272 ], [ %1189, %1188 ]
  %1280 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1281 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1280, i32 %1279, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1282 = extractvalue %dx.types.ResRet.i32 %1281, 0
  %1283 = lshr i32 %1282, 20
  %1284 = and i32 %1283, 63
  %1285 = and i32 %1282, 134217728
  %1286 = icmp eq i32 %1285, 0
  br i1 %1286, label %1395, label %1287

; <label>:1287                                    ; preds = %1278
  %1288 = icmp eq i32 %1284, 0
  %1289 = zext i1 %1288 to i32
  %1290 = add i32 %1284, %1189
  %1291 = fmul fast float %1258, 1.638400e+04
  %1292 = fmul fast float %1262, 1.638400e+04
  %1293 = fptoui float %1291 to i32
  %1294 = fptoui float %1292 to i32
  br i1 %1288, label %1370, label %1295

; <label>:1295                                    ; preds = %1287
  %1296 = add i32 %1190, 304
  %1297 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1296, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1298 = extractvalue %dx.types.ResRet.i32 %1297, 0
  %1299 = extractvalue %dx.types.ResRet.i32 %1297, 1
  %1300 = mul i32 %1290, 336
  %1301 = add i32 %1300, 304
  %1302 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1301, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1303 = extractvalue %dx.types.ResRet.i32 %1302, 0
  %1304 = extractvalue %dx.types.ResRet.i32 %1302, 1
  %1305 = shl i32 %1298, 5
  %1306 = shl i32 %1299, 5
  %1307 = shl i32 %1303, 5
  %1308 = shl i32 %1304, 5
  %1309 = sub i32 %1269, %1305
  %1310 = sub i32 %1270, %1306
  %1311 = and i32 %1283, 31
  %1312 = shl i32 %1307, %1311
  %1313 = shl i32 %1308, %1311
  %1314 = add i32 %1309, %1312
  %1315 = add i32 %1310, %1313
  %1316 = lshr i32 %1314, %1311
  %1317 = lshr i32 %1315, %1311
  %1318 = shl i32 %1316, 7
  %1319 = shl i32 %1317, 7
  %1320 = or i32 %1318, 127
  %1321 = or i32 %1319, 127
  %1322 = add i32 %1190, 112
  %1323 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1322, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1324 = extractvalue %dx.types.ResRet.i32 %1323, 2
  %1325 = bitcast i32 %1324 to float
  %1326 = add i32 %1300, 112
  %1327 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1326, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1328 = extractvalue %dx.types.ResRet.i32 %1327, 2
  %1329 = bitcast i32 %1328 to float
  %1330 = sitofp i32 %1298 to float
  %1331 = sitofp i32 %1299 to float
  %1332 = sitofp i32 %1303 to float
  %1333 = sitofp i32 %1304 to float
  %1334 = shl i32 1, %1311
  %1335 = uitofp i32 %1334 to float
  %1336 = fdiv fast float 1.000000e+00, %1335
  %1337 = fmul fast float %1336, %1330
  %1338 = fmul fast float %1336, %1331
  %1339 = fsub fast float %1332, %1337
  %1340 = fsub fast float %1333, %1338
  %1341 = fmul fast float %1339, 2.500000e-01
  %1342 = fmul fast float %1340, 2.500000e-01
  %1343 = fmul fast float %1336, %1325
  %1344 = fsub fast float %1329, %1343
  %1345 = fmul fast float %1336, %1258
  %1346 = fmul fast float %1336, %1262
  %1347 = fadd fast float %1341, %1345
  %1348 = fadd fast float %1342, %1346
  %1349 = fmul fast float %1347, 1.638400e+04
  %1350 = fmul fast float %1348, 1.638400e+04
  %1351 = fptoui float %1349 to i32
  %1352 = fptoui float %1350 to i32
  %1353 = call i32 @dx.op.binary.i32(i32 39, i32 %1351, i32 %1318)  ; UMax(a,b)
  %1354 = call i32 @dx.op.binary.i32(i32 39, i32 %1352, i32 %1319)  ; UMax(a,b)
  %1355 = call i32 @dx.op.binary.i32(i32 40, i32 %1353, i32 %1320)  ; UMin(a,b)
  %1356 = call i32 @dx.op.binary.i32(i32 40, i32 %1354, i32 %1321)  ; UMin(a,b)
  %1357 = icmp ult i32 %1290, 8192
  br i1 %1357, label %1363, label %1358

; <label>:1358                                    ; preds = %1295
  %1359 = mul i32 %1290, 21845
  %1360 = add i32 %1359, -178946048
  %1361 = add i32 %1360, %1316
  %1362 = add i32 %1361, %1319
  br label %1363

; <label>:1363                                    ; preds = %1358, %1295
  %1364 = phi i32 [ %1362, %1358 ], [ %1290, %1295 ]
  %1365 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1280, i32 %1364, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1366 = extractvalue %dx.types.ResRet.i32 %1365, 0
  %1367 = and i32 %1366, 200278016
  %1368 = icmp eq i32 %1367, 134217728
  %1369 = zext i1 %1368 to i32
  br label %1370

; <label>:1370                                    ; preds = %1363, %1287
  %1371 = phi i32 [ %1355, %1363 ], [ %1293, %1287 ]
  %1372 = phi i32 [ %1356, %1363 ], [ %1294, %1287 ]
  %1373 = phi float [ %1349, %1363 ], [ %1291, %1287 ]
  %1374 = phi float [ %1350, %1363 ], [ %1292, %1287 ]
  %1375 = phi float [ %1336, %1363 ], [ 1.000000e+00, %1287 ]
  %1376 = phi float [ %1344, %1363 ], [ 0.000000e+00, %1287 ]
  %1377 = phi i32 [ %1369, %1363 ], [ %1289, %1287 ]
  %1378 = phi i32 [ %1366, %1363 ], [ %1282, %1287 ]
  %1379 = icmp eq i32 %1377, 0
  br i1 %1379, label %1395, label %1380

; <label>:1380                                    ; preds = %1370
  %1381 = shl i32 %1378, 7
  %1382 = and i32 %1381, 130944
  %1383 = lshr i32 %1378, 3
  %1384 = and i32 %1383, 130944
  %1385 = and i32 %1371, 127
  %1386 = and i32 %1372, 127
  %1387 = or i32 %1382, %1385
  %1388 = or i32 %1384, %1386
  %1389 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1390 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1389, i32 0, i32 %1387, i32 %1388, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1391 = extractvalue %dx.types.ResRet.i32 %1390, 0
  %1392 = bitcast i32 %1391 to float
  %1393 = fsub fast float %1392, %1376
  %1394 = fdiv fast float %1393, %1375
  br label %1395

; <label>:1395                                    ; preds = %1380, %1370, %1278
  %1396 = phi i32 [ %1371, %1380 ], [ %1371, %1370 ], [ 0, %1278 ]
  %1397 = phi i32 [ %1372, %1380 ], [ %1372, %1370 ], [ 0, %1278 ]
  %1398 = phi i1 [ true, %1380 ], [ false, %1370 ], [ false, %1278 ]
  %1399 = phi i32 [ %1290, %1380 ], [ -1, %1370 ], [ -1, %1278 ]
  %1400 = phi float [ %1394, %1380 ], [ 0.000000e+00, %1370 ], [ 0.000000e+00, %1278 ]
  %1401 = phi float [ %1373, %1380 ], [ %1373, %1370 ], [ 0.000000e+00, %1278 ]
  %1402 = phi float [ %1374, %1380 ], [ %1374, %1370 ], [ 0.000000e+00, %1278 ]
  %1403 = phi i32 [ %1387, %1380 ], [ 0, %1370 ], [ 0, %1278 ]
  %1404 = phi i32 [ %1388, %1380 ], [ 0, %1370 ], [ 0, %1278 ]
  br i1 %1398, label %1405, label %1782

; <label>:1405                                    ; preds = %1395
  %1406 = mul i32 %1399, 336
  %1407 = add i32 %1406, 96
  %1408 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1407, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1409 = extractvalue %dx.types.ResRet.i32 %1408, 2
  %1410 = bitcast i32 %1409 to float
  %1411 = add i32 %1406, 192
  %1412 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1411, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1413 = extractvalue %dx.types.ResRet.i32 %1412, 0
  %1414 = extractvalue %dx.types.ResRet.i32 %1412, 1
  %1415 = extractvalue %dx.types.ResRet.i32 %1412, 2
  %1416 = bitcast i32 %1413 to float
  %1417 = bitcast i32 %1414 to float
  %1418 = bitcast i32 %1415 to float
  %1419 = add i32 %1406, 208
  %1420 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1419, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1421 = extractvalue %dx.types.ResRet.i32 %1420, 0
  %1422 = extractvalue %dx.types.ResRet.i32 %1420, 1
  %1423 = extractvalue %dx.types.ResRet.i32 %1420, 2
  %1424 = bitcast i32 %1421 to float
  %1425 = bitcast i32 %1422 to float
  %1426 = bitcast i32 %1423 to float
  %1427 = add i32 %1406, 224
  %1428 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1427, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1429 = extractvalue %dx.types.ResRet.i32 %1428, 0
  %1430 = extractvalue %dx.types.ResRet.i32 %1428, 1
  %1431 = extractvalue %dx.types.ResRet.i32 %1428, 2
  %1432 = bitcast i32 %1429 to float
  %1433 = bitcast i32 %1430 to float
  %1434 = bitcast i32 %1431 to float
  %1435 = add i32 %1406, 240
  %1436 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1435, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1437 = extractvalue %dx.types.ResRet.i32 %1436, 0
  %1438 = extractvalue %dx.types.ResRet.i32 %1436, 1
  %1439 = extractvalue %dx.types.ResRet.i32 %1436, 2
  %1440 = bitcast i32 %1437 to float
  %1441 = bitcast i32 %1438 to float
  %1442 = bitcast i32 %1439 to float
  %1443 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %1250, float %1252, float %1254)  ; Dot3(ax,ay,az,bx,by,bz)
  %1444 = fsub fast float -0.000000e+00, %1443
  %1445 = fmul fast float %1416, %250
  %1446 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1424, float %1445)  ; FMad(a,b,c)
  %1447 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1432, float %1446)  ; FMad(a,b,c)
  %1448 = call float @dx.op.tertiary.f32(i32 46, float %1444, float %1440, float %1447)  ; FMad(a,b,c)
  %1449 = fmul fast float %1417, %250
  %1450 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1425, float %1449)  ; FMad(a,b,c)
  %1451 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1433, float %1450)  ; FMad(a,b,c)
  %1452 = call float @dx.op.tertiary.f32(i32 46, float %1444, float %1441, float %1451)  ; FMad(a,b,c)
  %1453 = fmul fast float %1418, %250
  %1454 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1426, float %1453)  ; FMad(a,b,c)
  %1455 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1434, float %1454)  ; FMad(a,b,c)
  %1456 = call float @dx.op.tertiary.f32(i32 46, float %1444, float %1442, float %1455)  ; FMad(a,b,c)
  %1457 = fsub fast float -0.000000e+00, %1448
  %1458 = fsub fast float -0.000000e+00, %1452
  %1459 = fdiv fast float %1457, %1456
  %1460 = fdiv fast float %1458, %1456
  %1461 = uitofp i32 %1396 to float
  %1462 = uitofp i32 %1397 to float
  %1463 = fadd fast float %1461, 5.000000e-01
  %1464 = fadd fast float %1462, 5.000000e-01
  %1465 = fsub fast float %1463, %1401
  %1466 = fsub fast float %1464, %1402
  %1467 = fmul fast float %1465, 0x3F10000000000000
  %1468 = fmul fast float %1466, 0x3F10000000000000
  %1469 = call float @dx.op.dot2.f32(i32 54, float %1459, float %1460, float %1467, float %1468)  ; Dot2(ax,ay,bx,by)
  %1470 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1469)  ; FMax(a,b)
  %1471 = fmul fast float %1470, 2.000000e+00
  %1472 = fmul fast float %1410, 1.000000e+02
  %1473 = call float @dx.op.unary.f32(i32 6, float %1472)  ; FAbs(value)
  %1474 = call float @dx.op.binary.f32(i32 36, float %1471, float %1473)  ; FMin(a,b)
  %1475 = sub nsw i32 %1399, %1189
  %1476 = and i32 %1475, 31
  %1477 = shl i32 1, %1476
  %1478 = uitofp i32 %1477 to float
  %1479 = fmul fast float %1474, %1478
  %1480 = fmul fast float %1194, %1119
  %1481 = fadd fast float %1400, %1480
  %1482 = fsub fast float %1481, %1479
  %1483 = fcmp fast ogt float %1482, %1266
  br i1 %1483, label %1484, label %1782

; <label>:1484                                    ; preds = %1405
  %1485 = fsub fast float %1266, %1400
  %1486 = fdiv fast float %1485, %1194
  %1487 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1486)  ; FMax(a,b)
  br label %1782

; <label>:1488                                    ; preds = %1118
  %1489 = extractvalue %dx.types.ResRet.i32 %1142, 2
  %1490 = bitcast i32 %1489 to float
  %1491 = extractvalue %dx.types.ResRet.i32 %1142, 1
  %1492 = bitcast i32 %1491 to float
  %1493 = extractvalue %dx.types.ResRet.i32 %1142, 0
  %1494 = bitcast i32 %1493 to float
  %1495 = extractvalue %dx.types.ResRet.i32 %1129, 3
  %1496 = extractvalue %dx.types.ResRet.i32 %1129, 2
  %1497 = extractvalue %dx.types.ResRet.i32 %1129, 1
  %1498 = extractvalue %dx.types.ResRet.i32 %1129, 0
  %1499 = extractvalue %dx.types.ResRet.i32 %1127, 3
  %1500 = extractvalue %dx.types.ResRet.i32 %1127, 2
  %1501 = extractvalue %dx.types.ResRet.i32 %1127, 1
  %1502 = extractvalue %dx.types.ResRet.i32 %1127, 0
  %1503 = extractvalue %dx.types.ResRet.i32 %1125, 3
  %1504 = extractvalue %dx.types.ResRet.i32 %1125, 2
  %1505 = extractvalue %dx.types.ResRet.i32 %1125, 1
  %1506 = extractvalue %dx.types.ResRet.i32 %1125, 0
  %1507 = extractvalue %dx.types.ResRet.i32 %1123, 3
  %1508 = extractvalue %dx.types.ResRet.i32 %1123, 2
  %1509 = extractvalue %dx.types.ResRet.i32 %1123, 1
  %1510 = extractvalue %dx.types.ResRet.i32 %1123, 0
  %1511 = add i32 %1120, 112
  %1512 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1511, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1513 = extractvalue %dx.types.ResRet.i32 %1512, 2
  %1514 = add i32 %1120, 96
  %1515 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1514, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1516 = extractvalue %dx.types.ResRet.i32 %1515, 2
  %1517 = fadd fast float %1152, %1494
  %1518 = fadd fast float %1153, %1492
  %1519 = fadd fast float %1154, %1490
  %1520 = icmp eq i32 %1140, 2
  br i1 %1520, label %1573, label %1521

; <label>:1521                                    ; preds = %1488
  %1522 = call float @dx.op.unary.f32(i32 6, float %1517)  ; FAbs(value)
  %1523 = call float @dx.op.unary.f32(i32 6, float %1518)  ; FAbs(value)
  %1524 = fcmp fast ult float %1522, %1523
  %1525 = call float @dx.op.unary.f32(i32 6, float %1519)  ; FAbs(value)
  %1526 = fcmp fast ult float %1522, %1525
  %1527 = or i1 %1524, %1526
  br i1 %1527, label %1531, label %1528

; <label>:1528                                    ; preds = %1521
  %1529 = fcmp ule float %1517, 0.000000e+00
  %1530 = zext i1 %1529 to i32
  br label %1539

; <label>:1531                                    ; preds = %1521
  %1532 = fcmp fast ogt float %1523, %1525
  br i1 %1532, label %1533, label %1536

; <label>:1533                                    ; preds = %1531
  %1534 = fcmp fast ogt float %1518, 0.000000e+00
  %1535 = select i1 %1534, i32 2, i32 3
  br label %1539

; <label>:1536                                    ; preds = %1531
  %1537 = fcmp fast ogt float %1519, 0.000000e+00
  %1538 = select i1 %1537, i32 4, i32 5
  br label %1539

; <label>:1539                                    ; preds = %1536, %1533, %1528
  %1540 = phi i32 [ %1530, %1528 ], [ %1535, %1533 ], [ %1538, %1536 ]
  %1541 = add i32 %1540, %190
  %1542 = mul i32 %1541, 336
  %1543 = add i32 %1542, 96
  %1544 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1543, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1545 = extractvalue %dx.types.ResRet.i32 %1544, 2
  %1546 = add i32 %1542, 112
  %1547 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1546, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1548 = extractvalue %dx.types.ResRet.i32 %1547, 2
  %1549 = add i32 %1542, 128
  %1550 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1549, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1551 = extractvalue %dx.types.ResRet.i32 %1550, 0
  %1552 = extractvalue %dx.types.ResRet.i32 %1550, 1
  %1553 = extractvalue %dx.types.ResRet.i32 %1550, 2
  %1554 = extractvalue %dx.types.ResRet.i32 %1550, 3
  %1555 = add i32 %1542, 144
  %1556 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1555, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1557 = extractvalue %dx.types.ResRet.i32 %1556, 0
  %1558 = extractvalue %dx.types.ResRet.i32 %1556, 1
  %1559 = extractvalue %dx.types.ResRet.i32 %1556, 2
  %1560 = extractvalue %dx.types.ResRet.i32 %1556, 3
  %1561 = add i32 %1542, 160
  %1562 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1561, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1563 = extractvalue %dx.types.ResRet.i32 %1562, 0
  %1564 = extractvalue %dx.types.ResRet.i32 %1562, 1
  %1565 = extractvalue %dx.types.ResRet.i32 %1562, 2
  %1566 = extractvalue %dx.types.ResRet.i32 %1562, 3
  %1567 = add i32 %1542, 176
  %1568 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1567, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1569 = extractvalue %dx.types.ResRet.i32 %1568, 0
  %1570 = extractvalue %dx.types.ResRet.i32 %1568, 1
  %1571 = extractvalue %dx.types.ResRet.i32 %1568, 2
  %1572 = extractvalue %dx.types.ResRet.i32 %1568, 3
  br label %1573

; <label>:1573                                    ; preds = %1539, %1488
  %1574 = phi i32 [ %1545, %1539 ], [ %1516, %1488 ]
  %1575 = phi i32 [ %1548, %1539 ], [ %1513, %1488 ]
  %1576 = phi i32 [ %1551, %1539 ], [ %1510, %1488 ]
  %1577 = phi i32 [ %1552, %1539 ], [ %1509, %1488 ]
  %1578 = phi i32 [ %1553, %1539 ], [ %1508, %1488 ]
  %1579 = phi i32 [ %1554, %1539 ], [ %1507, %1488 ]
  %1580 = phi i32 [ %1557, %1539 ], [ %1506, %1488 ]
  %1581 = phi i32 [ %1558, %1539 ], [ %1505, %1488 ]
  %1582 = phi i32 [ %1559, %1539 ], [ %1504, %1488 ]
  %1583 = phi i32 [ %1560, %1539 ], [ %1503, %1488 ]
  %1584 = phi i32 [ %1563, %1539 ], [ %1502, %1488 ]
  %1585 = phi i32 [ %1564, %1539 ], [ %1501, %1488 ]
  %1586 = phi i32 [ %1565, %1539 ], [ %1500, %1488 ]
  %1587 = phi i32 [ %1566, %1539 ], [ %1499, %1488 ]
  %1588 = phi i32 [ %1569, %1539 ], [ %1498, %1488 ]
  %1589 = phi i32 [ %1570, %1539 ], [ %1497, %1488 ]
  %1590 = phi i32 [ %1571, %1539 ], [ %1496, %1488 ]
  %1591 = phi i32 [ %1572, %1539 ], [ %1495, %1488 ]
  %1592 = phi i32 [ %1541, %1539 ], [ %190, %1488 ]
  %1593 = bitcast i32 %1591 to float
  %1594 = bitcast i32 %1590 to float
  %1595 = bitcast i32 %1589 to float
  %1596 = bitcast i32 %1588 to float
  %1597 = bitcast i32 %1587 to float
  %1598 = bitcast i32 %1586 to float
  %1599 = bitcast i32 %1585 to float
  %1600 = bitcast i32 %1584 to float
  %1601 = bitcast i32 %1583 to float
  %1602 = bitcast i32 %1582 to float
  %1603 = bitcast i32 %1581 to float
  %1604 = bitcast i32 %1580 to float
  %1605 = bitcast i32 %1579 to float
  %1606 = bitcast i32 %1578 to float
  %1607 = bitcast i32 %1577 to float
  %1608 = bitcast i32 %1576 to float
  %1609 = bitcast i32 %1575 to float
  %1610 = bitcast i32 %1574 to float
  %1611 = fmul fast float %1608, %1517
  %1612 = call float @dx.op.tertiary.f32(i32 46, float %1518, float %1604, float %1611)  ; FMad(a,b,c)
  %1613 = call float @dx.op.tertiary.f32(i32 46, float %1519, float %1600, float %1612)  ; FMad(a,b,c)
  %1614 = fadd fast float %1613, %1596
  %1615 = fmul fast float %1607, %1517
  %1616 = call float @dx.op.tertiary.f32(i32 46, float %1518, float %1603, float %1615)  ; FMad(a,b,c)
  %1617 = call float @dx.op.tertiary.f32(i32 46, float %1519, float %1599, float %1616)  ; FMad(a,b,c)
  %1618 = fadd fast float %1617, %1595
  %1619 = fmul fast float %1606, %1517
  %1620 = call float @dx.op.tertiary.f32(i32 46, float %1518, float %1602, float %1619)  ; FMad(a,b,c)
  %1621 = call float @dx.op.tertiary.f32(i32 46, float %1519, float %1598, float %1620)  ; FMad(a,b,c)
  %1622 = fadd fast float %1621, %1594
  %1623 = fmul fast float %1605, %1517
  %1624 = call float @dx.op.tertiary.f32(i32 46, float %1518, float %1601, float %1623)  ; FMad(a,b,c)
  %1625 = call float @dx.op.tertiary.f32(i32 46, float %1519, float %1597, float %1624)  ; FMad(a,b,c)
  %1626 = fadd fast float %1625, %1593
  %1627 = fdiv fast float %1614, %1626
  %1628 = fdiv fast float %1618, %1626
  %1629 = fdiv fast float %1622, %1626
  %1630 = icmp ult i32 %1592, 8192
  br i1 %1630, label %1641, label %1631

; <label>:1631                                    ; preds = %1573
  %1632 = fmul fast float %1628, 1.280000e+02
  %1633 = fptoui float %1632 to i32
  %1634 = fmul fast float %1627, 1.280000e+02
  %1635 = fptoui float %1634 to i32
  %1636 = mul i32 %1592, 21845
  %1637 = shl i32 %1633, 7
  %1638 = add i32 %1636, -178946048
  %1639 = add i32 %1638, %1635
  %1640 = add i32 %1639, %1637
  br label %1641

; <label>:1641                                    ; preds = %1631, %1573
  %1642 = phi i32 [ %1640, %1631 ], [ %1592, %1573 ]
  %1643 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1644 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1643, i32 %1642, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1645 = extractvalue %dx.types.ResRet.i32 %1644, 0
  %1646 = lshr i32 %1645, 20
  %1647 = and i32 %1646, 63
  %1648 = and i32 %1645, 134217728
  %1649 = icmp eq i32 %1648, 0
  %1650 = select i1 %1630, i32 7, i32 %1647
  %1651 = and i32 %1650, 31
  %1652 = lshr i32 16384, %1651
  %1653 = uitofp i32 %1652 to float
  %1654 = fmul fast float %1653, %1627
  %1655 = fmul fast float %1653, %1628
  %1656 = fptoui float %1654 to i32
  %1657 = fptoui float %1655 to i32
  %1658 = shl i32 %1645, 7
  %1659 = and i32 %1658, 130944
  %1660 = lshr i32 %1645, 3
  %1661 = and i32 %1660, 130944
  %1662 = and i32 %1656, 127
  %1663 = and i32 %1657, 127
  %1664 = or i32 %1662, %1659
  %1665 = or i32 %1663, %1661
  br i1 %1649, label %1671, label %1666

; <label>:1666                                    ; preds = %1641
  %1667 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1668 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1667, i32 0, i32 %1664, i32 %1665, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1669 = extractvalue %dx.types.ResRet.i32 %1668, 0
  %1670 = bitcast i32 %1669 to float
  br label %1671

; <label>:1671                                    ; preds = %1666, %1641
  %1672 = phi i32 [ %1664, %1666 ], [ 0, %1641 ]
  %1673 = phi i32 [ %1665, %1666 ], [ 0, %1641 ]
  %1674 = phi float [ %1654, %1666 ], [ 0.000000e+00, %1641 ]
  %1675 = phi float [ %1655, %1666 ], [ 0.000000e+00, %1641 ]
  %1676 = phi i32 [ %1656, %1666 ], [ 0, %1641 ]
  %1677 = phi i32 [ %1657, %1666 ], [ 0, %1641 ]
  %1678 = phi i1 [ true, %1666 ], [ false, %1641 ]
  %1679 = phi i32 [ %1592, %1666 ], [ -1, %1641 ]
  %1680 = phi i32 [ %1650, %1666 ], [ 0, %1641 ]
  %1681 = phi float [ %1670, %1666 ], [ 0.000000e+00, %1641 ]
  br i1 %1678, label %1682, label %1782

; <label>:1682                                    ; preds = %1671
  %1683 = mul i32 %1679, 336
  %1684 = add i32 %1683, 96
  %1685 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1684, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1686 = extractvalue %dx.types.ResRet.i32 %1685, 2
  %1687 = bitcast i32 %1686 to float
  %1688 = add i32 %1683, 192
  %1689 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1688, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1690 = extractvalue %dx.types.ResRet.i32 %1689, 0
  %1691 = extractvalue %dx.types.ResRet.i32 %1689, 1
  %1692 = extractvalue %dx.types.ResRet.i32 %1689, 2
  %1693 = bitcast i32 %1690 to float
  %1694 = bitcast i32 %1691 to float
  %1695 = bitcast i32 %1692 to float
  %1696 = add i32 %1683, 208
  %1697 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1696, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1698 = extractvalue %dx.types.ResRet.i32 %1697, 0
  %1699 = extractvalue %dx.types.ResRet.i32 %1697, 1
  %1700 = extractvalue %dx.types.ResRet.i32 %1697, 2
  %1701 = bitcast i32 %1698 to float
  %1702 = bitcast i32 %1699 to float
  %1703 = bitcast i32 %1700 to float
  %1704 = add i32 %1683, 224
  %1705 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1704, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1706 = extractvalue %dx.types.ResRet.i32 %1705, 0
  %1707 = extractvalue %dx.types.ResRet.i32 %1705, 1
  %1708 = extractvalue %dx.types.ResRet.i32 %1705, 2
  %1709 = bitcast i32 %1706 to float
  %1710 = bitcast i32 %1707 to float
  %1711 = bitcast i32 %1708 to float
  %1712 = add i32 %1683, 240
  %1713 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1122, i32 %1712, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1714 = extractvalue %dx.types.ResRet.i32 %1713, 0
  %1715 = extractvalue %dx.types.ResRet.i32 %1713, 1
  %1716 = extractvalue %dx.types.ResRet.i32 %1713, 2
  %1717 = bitcast i32 %1714 to float
  %1718 = bitcast i32 %1715 to float
  %1719 = bitcast i32 %1716 to float
  %1720 = call float @dx.op.dot3.f32(i32 55, float %250, float %251, float %252, float %1517, float %1518, float %1519)  ; Dot3(ax,ay,az,bx,by,bz)
  %1721 = fsub fast float -0.000000e+00, %1720
  %1722 = fmul fast float %1693, %250
  %1723 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1701, float %1722)  ; FMad(a,b,c)
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1709, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.tertiary.f32(i32 46, float %1721, float %1717, float %1724)  ; FMad(a,b,c)
  %1726 = fmul fast float %1694, %250
  %1727 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1702, float %1726)  ; FMad(a,b,c)
  %1728 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1710, float %1727)  ; FMad(a,b,c)
  %1729 = call float @dx.op.tertiary.f32(i32 46, float %1721, float %1718, float %1728)  ; FMad(a,b,c)
  %1730 = fmul fast float %1695, %250
  %1731 = call float @dx.op.tertiary.f32(i32 46, float %251, float %1703, float %1730)  ; FMad(a,b,c)
  %1732 = call float @dx.op.tertiary.f32(i32 46, float %252, float %1711, float %1731)  ; FMad(a,b,c)
  %1733 = call float @dx.op.tertiary.f32(i32 46, float %1721, float %1719, float %1732)  ; FMad(a,b,c)
  %1734 = fsub fast float -0.000000e+00, %1725
  %1735 = fsub fast float -0.000000e+00, %1729
  %1736 = fdiv fast float %1734, %1733
  %1737 = fdiv fast float %1735, %1733
  %1738 = and i32 %1680, 31
  %1739 = lshr i32 16384, %1738
  %1740 = uitofp i32 %1739 to float
  %1741 = uitofp i32 %1676 to float
  %1742 = uitofp i32 %1677 to float
  %1743 = fsub fast float 5.000000e-01, %1674
  %1744 = fadd fast float %1743, %1741
  %1745 = fsub fast float 5.000000e-01, %1675
  %1746 = fadd fast float %1745, %1742
  %1747 = fdiv fast float %1744, %1740
  %1748 = fdiv fast float %1746, %1740
  %1749 = call float @dx.op.dot2.f32(i32 54, float %1736, float %1737, float %1747, float %1748)  ; Dot2(ax,ay,bx,by)
  %1750 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1749)  ; FMax(a,b)
  %1751 = fmul fast float %1750, 2.000000e+00
  %1752 = fmul fast float %1687, 1.000000e+02
  %1753 = call float @dx.op.unary.f32(i32 6, float %1752)  ; FAbs(value)
  %1754 = call float @dx.op.binary.f32(i32 36, float %1751, float %1753)  ; FMin(a,b)
  %1755 = sub nsw i32 %1679, %1592
  %1756 = and i32 %1755, 31
  %1757 = shl i32 1, %1756
  %1758 = uitofp i32 %1757 to float
  %1759 = fmul fast float %1754, %1758
  %1760 = fmul fast float %1119, %1610
  %1761 = fsub fast float -0.000000e+00, %1760
  %1762 = fdiv fast float %1761, %1626
  %1763 = fsub fast float %1681, %1759
  %1764 = fsub fast float %1763, %1762
  %1765 = fcmp fast ogt float %1764, %1629
  br i1 %1765, label %1766, label %1782

; <label>:1766                                    ; preds = %1682
  %1767 = fmul fast float %1517, %1517
  %1768 = fmul fast float %1518, %1518
  %1769 = fadd fast float %1767, %1768
  %1770 = fmul fast float %1519, %1519
  %1771 = fadd fast float %1769, %1770
  %1772 = call float @dx.op.unary.f32(i32 24, float %1771)  ; Sqrt(value)
  %1773 = fsub fast float %1681, %1610
  %1774 = fdiv fast float %1609, %1773
  %1775 = fsub fast float %1629, %1610
  %1776 = fmul fast float %1772, %1775
  %1777 = fdiv fast float %1776, %1609
  %1778 = fmul fast float %1777, %1774
  %1779 = fsub fast float %1772, %1778
  %1780 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1779)  ; FMax(a,b)
  %1781 = fadd fast float %1780, %1119
  br label %1782

; <label>:1782                                    ; preds = %1766, %1682, %1671, %1484, %1405, %1395, %1155, %1100, %454
  %1783 = phi i32 [ 1, %1100 ], [ 1, %454 ], [ 1, %1484 ], [ 1, %1405 ], [ 1, %1766 ], [ 1, %1682 ], [ 0, %1671 ], [ 0, %1395 ], [ 0, %1155 ]
  %1784 = phi float [ %1117, %1100 ], [ 0.000000e+00, %454 ], [ 0.000000e+00, %1484 ], [ 1.000000e+00, %1405 ], [ 0.000000e+00, %1766 ], [ 1.000000e+00, %1682 ], [ 1.000000e+00, %1671 ], [ 1.000000e+00, %1395 ], [ 1.000000e+00, %1155 ]
  %1785 = phi float [ %1114, %1100 ], [ -1.000000e+00, %454 ], [ %1487, %1484 ], [ -1.000000e+00, %1405 ], [ %1781, %1766 ], [ -1.000000e+00, %1682 ], [ -1.000000e+00, %1671 ], [ -1.000000e+00, %1395 ], [ -1.000000e+00, %1155 ]
  %1786 = phi i32 [ %1101, %1100 ], [ 0, %454 ], [ %1186, %1484 ], [ %1186, %1405 ], [ %1680, %1766 ], [ %1680, %1682 ], [ 0, %1671 ], [ 0, %1395 ], [ 0, %1155 ]
  %1787 = phi i32 [ %1110, %1100 ], [ 0, %454 ], [ 1, %1484 ], [ 1, %1405 ], [ 1, %1766 ], [ 1, %1682 ], [ 0, %1671 ], [ 0, %1395 ], [ 0, %1155 ]
  %1788 = phi i32 [ %1102, %1100 ], [ -1, %454 ], [ %1396, %1484 ], [ %1396, %1405 ], [ %1676, %1766 ], [ %1676, %1682 ], [ -1, %1671 ], [ -1, %1395 ], [ -1, %1155 ]
  %1789 = phi i32 [ %1103, %1100 ], [ -1, %454 ], [ %1397, %1484 ], [ %1397, %1405 ], [ %1677, %1766 ], [ %1677, %1682 ], [ -1, %1671 ], [ -1, %1395 ], [ -1, %1155 ]
  %1790 = phi i32 [ %1104, %1100 ], [ -1, %454 ], [ %1403, %1484 ], [ %1403, %1405 ], [ %1672, %1766 ], [ %1672, %1682 ], [ -1, %1671 ], [ -1, %1395 ], [ -1, %1155 ]
  %1791 = phi i32 [ %1105, %1100 ], [ -1, %454 ], [ %1404, %1484 ], [ %1404, %1405 ], [ %1673, %1766 ], [ %1673, %1682 ], [ -1, %1671 ], [ -1, %1395 ], [ -1, %1155 ]
  %1792 = fcmp fast olt float %1784, 1.000000e+00
  %1793 = and i1 %214, %1792
  br i1 %1793, label %1794, label %1806

; <label>:1794                                    ; preds = %1782
  %1795 = call float @dx.op.binary.f32(i32 36, float %213, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1796 = fsub fast float 1.000000e+00, %1795
  %1797 = call float @dx.op.unary.f32(i32 23, float %1796)  ; Log(value)
  %1798 = fmul fast float %1785, 0x3FA99999A0000000
  %1799 = fmul fast float %1798, %1797
  %1800 = call float @dx.op.unary.f32(i32 21, float %1799)  ; Exp(value)
  %1801 = call float @dx.op.unary.f32(i32 7, float %1800)  ; Saturate(value)
  %1802 = fsub fast float 1.000000e+00, %1801
  %1803 = fmul fast float %1802, %1784
  %1804 = fadd fast float %1803, %1801
  %1805 = fmul fast float %1804, %1804
  br label %1806

; <label>:1806                                    ; preds = %1794, %1782
  %1807 = phi float [ %1784, %1782 ], [ %1805, %1794 ]
  br i1 %78, label %2288, label %1808

; <label>:1808                                    ; preds = %1806
  %1809 = fcmp fast ogt float %1807, 0.000000e+00
  br i1 %1809, label %1810, label %2007

; <label>:1810                                    ; preds = %1808
  %1811 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %1812 = extractvalue %dx.types.CBufRet.i32 %1811, 0
  %1813 = mul i32 %64, 1664525
  %1814 = mul i32 %66, 1664525
  %1815 = mul i32 %1812, 1664525
  %1816 = add i32 %1813, 1013904223
  %1817 = add i32 %1814, 1013904223
  %1818 = add i32 %1815, 1013904223
  %1819 = mul i32 %1818, %1817
  %1820 = add i32 %1816, %1819
  %1821 = mul i32 %1820, %1818
  %1822 = add i32 %1821, %1817
  %1823 = mul i32 %1822, %1820
  %1824 = add i32 %1823, %1818
  %1825 = mul i32 %1824, %1822
  %1826 = add i32 %1825, %1820
  %1827 = mul i32 %1826, %1824
  %1828 = add i32 %1827, %1822
  %1829 = lshr i32 %1826, 16
  %1830 = add i32 %1813, 1042201148
  %1831 = add i32 %1814, 1042201148
  %1832 = mul i32 %1818, %1831
  %1833 = add i32 %1830, %1832
  %1834 = mul i32 %1833, %1818
  %1835 = add i32 %1834, %1831
  %1836 = mul i32 %1835, %1833
  %1837 = add i32 %1836, %1818
  %1838 = mul i32 %1837, %1835
  %1839 = add i32 %1838, %1833
  %1840 = mul i32 %1839, %1837
  %1841 = add i32 %1840, %1835
  %1842 = lshr i32 %1839, 16
  %1843 = uitofp i32 %1812 to float
  %1844 = fmul fast float %1843, 1.250000e-01
  %1845 = uitofp i32 %1829 to float
  %1846 = fmul fast float %1845, 0x3EF0000000000000
  %1847 = fadd fast float %1846, %1844
  %1848 = call float @dx.op.unary.f32(i32 22, float %1847)  ; Frc(value)
  %1849 = call i32 @dx.op.unary.i32(i32 30, i32 %1812)  ; Bfrev(value)
  %1850 = xor i32 %1828, %1849
  %1851 = lshr i32 %1850, 16
  %1852 = uitofp i32 %1851 to float
  %1853 = fmul fast float %1852, 0x3EF0000000000000
  %1854 = uitofp i32 %1842 to float
  %1855 = fmul fast float %1854, 0x3EF0000000000000
  %1856 = fadd fast float %1855, %1844
  %1857 = call float @dx.op.unary.f32(i32 22, float %1856)  ; Frc(value)
  %1858 = xor i32 %1841, %1849
  %1859 = lshr i32 %1858, 16
  %1860 = uitofp i32 %1859 to float
  %1861 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1862 = extractvalue %dx.types.CBufRet.i32 %1861, 1
  %1863 = add nsw i32 %1862, -1
  %1864 = sitofp i32 %1863 to float
  %1865 = sitofp i32 %1862 to float
  %1866 = fmul fast float %1865, 0x3EF0000000000000
  %1867 = fmul fast float %1866, %1860
  %1868 = call float @dx.op.binary.f32(i32 36, float %1867, float %1864)  ; FMin(a,b)
  %1869 = fptoui float %1868 to i32
  %1870 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %1871 = extractvalue %dx.types.CBufRet.f32 %1870, 0
  %1872 = extractvalue %dx.types.CBufRet.f32 %1870, 1
  %1873 = extractvalue %dx.types.CBufRet.f32 %1870, 2
  %1874 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %1875 = extractvalue %dx.types.CBufRet.f32 %1874, 0
  %1876 = extractvalue %dx.types.CBufRet.f32 %1874, 1
  %1877 = extractvalue %dx.types.CBufRet.f32 %1874, 2
  %1878 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %1879 = extractvalue %dx.types.CBufRet.f32 %1878, 0
  %1880 = extractvalue %dx.types.CBufRet.f32 %1878, 1
  %1881 = extractvalue %dx.types.CBufRet.f32 %1878, 2
  %1882 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 19)  ; CBufferLoadLegacy(handle,regIndex)
  %1883 = extractvalue %dx.types.CBufRet.f32 %1882, 0
  %1884 = extractvalue %dx.types.CBufRet.f32 %1882, 1
  %1885 = extractvalue %dx.types.CBufRet.f32 %1882, 2
  %1886 = fmul fast float %1871, %256
  %1887 = call float @dx.op.tertiary.f32(i32 46, float %257, float %1875, float %1886)  ; FMad(a,b,c)
  %1888 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1879, float %1887)  ; FMad(a,b,c)
  %1889 = fadd fast float %1888, %1883
  %1890 = fmul fast float %1872, %256
  %1891 = call float @dx.op.tertiary.f32(i32 46, float %257, float %1876, float %1890)  ; FMad(a,b,c)
  %1892 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1880, float %1891)  ; FMad(a,b,c)
  %1893 = fadd fast float %1892, %1884
  %1894 = fmul fast float %1873, %256
  %1895 = call float @dx.op.tertiary.f32(i32 46, float %257, float %1877, float %1894)  ; FMad(a,b,c)
  %1896 = call float @dx.op.tertiary.f32(i32 46, float %258, float %1881, float %1895)  ; FMad(a,b,c)
  %1897 = fadd fast float %1896, %1885
  %1898 = fmul fast float %1889, %1889
  %1899 = fmul fast float %1893, %1893
  %1900 = fadd fast float %1899, %1898
  %1901 = fmul fast float %1897, %1897
  %1902 = fadd fast float %1900, %1901
  %1903 = call float @dx.op.unary.f32(i32 24, float %1902)  ; Sqrt(value)
  %1904 = fmul fast float %1903, %400
  %1905 = extractvalue %dx.types.CBufRet.i32 %1811, 1
  %1906 = uitofp i32 %1869 to float
  %1907 = fmul fast float %1906, 0x3FE827F520000000
  %1908 = fmul fast float %1906, 0x3FE23C21A0000000
  %1909 = call float @dx.op.unary.f32(i32 22, float %1907)  ; Frc(value)
  %1910 = call float @dx.op.unary.f32(i32 22, float %1908)  ; Frc(value)
  %1911 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1912 = extractvalue %dx.types.CBufRet.i32 %1911, 0
  %1913 = extractvalue %dx.types.CBufRet.i32 %1911, 1
  %1914 = sitofp i32 %1912 to float
  %1915 = sitofp i32 %1913 to float
  %1916 = fmul fast float %1914, %1909
  %1917 = fmul fast float %1915, %1910
  %1918 = fptosi float %1916 to i32
  %1919 = fptosi float %1917 to i32
  %1920 = add i32 %1918, %64
  %1921 = add i32 %1919, %66
  %1922 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1923 = extractvalue %dx.types.CBufRet.i32 %1922, 0
  %1924 = extractvalue %dx.types.CBufRet.i32 %1922, 1
  %1925 = extractvalue %dx.types.CBufRet.i32 %1922, 2
  %1926 = and i32 %1920, %1923
  %1927 = and i32 %1921, %1924
  %1928 = and i32 %1925, %1905
  %1929 = mul i32 %1928, %1913
  %1930 = add i32 %1927, %1929
  %1931 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1932 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %1931, i32 0, i32 %1926, i32 %1930, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1933 = extractvalue %dx.types.ResRet.f32 %1932, 0
  %1934 = extractvalue %dx.types.ResRet.f32 %1932, 1
  %1935 = fmul fast float %1933, 2.000000e+00
  %1936 = fmul fast float %1934, 2.000000e+00
  %1937 = fadd fast float %1935, 0xBFEFFFFFE0000000
  %1938 = fadd fast float %1936, 0xBFEFFFFFE0000000
  %1939 = call float @dx.op.unary.f32(i32 6, float %1937)  ; FAbs(value)
  %1940 = call float @dx.op.unary.f32(i32 6, float %1938)  ; FAbs(value)
  %1941 = call float @dx.op.binary.f32(i32 36, float %1939, float %1940)  ; FMin(a,b)
  %1942 = call float @dx.op.binary.f32(i32 35, float %1939, float %1940)  ; FMax(a,b)
  %1943 = fadd fast float %1942, 0x3BF0000000000000
  %1944 = fdiv fast float %1941, %1943
  %1945 = fcmp fast oge float %1940, %1939
  %1946 = uitofp i1 %1945 to float
  %1947 = fmul fast float %1946, 2.000000e+00
  %1948 = fadd fast float %1944, %1947
  %1949 = fmul fast float %1948, 0x3FE921FB60000000
  %1950 = call float @dx.op.unary.f32(i32 12, float %1949)  ; Cos(value)
  %1951 = call float @dx.op.unary.f32(i32 13, float %1949)  ; Sin(value)
  %1952 = bitcast float %1950 to i32
  %1953 = bitcast float %1951 to i32
  %1954 = and i32 %1952, 2147483647
  %1955 = and i32 %1953, 2147483647
  %1956 = bitcast float %1937 to i32
  %1957 = bitcast float %1938 to i32
  %1958 = and i32 %1956, -2147483648
  %1959 = and i32 %1957, -2147483648
  %1960 = or i32 %1954, %1958
  %1961 = or i32 %1955, %1959
  %1962 = bitcast i32 %1960 to float
  %1963 = bitcast i32 %1961 to float
  %1964 = fmul fast float %1942, %222
  %1965 = fmul fast float %1964, %1962
  %1966 = fmul fast float %1964, %1963
  %1967 = call float @dx.op.unary.f32(i32 6, float %192)  ; FAbs(value)
  %1968 = fcmp fast ogt float %1967, 0x3EB0C6F7A0000000
  %1969 = select i1 %1968, float 1.000000e+00, float 0.000000e+00
  %1970 = select i1 %1968, float 0.000000e+00, float 1.000000e+00
  %1971 = fmul fast float %194, %1970
  %1972 = fsub fast float -0.000000e+00, %1971
  %1973 = fmul fast float %1969, %194
  %1974 = fmul fast float %1970, %192
  %1975 = fmul fast float %1969, %193
  %1976 = fsub fast float %1974, %1975
  %1977 = fmul fast float %1973, %194
  %1978 = fmul fast float %1976, %193
  %1979 = fsub fast float %1977, %1978
  %1980 = fmul fast float %1976, %192
  %1981 = fmul fast float %194, %1972
  %1982 = fsub fast float %1980, %1981
  %1983 = fmul fast float %193, %1972
  %1984 = fmul fast float %1973, %192
  %1985 = fsub fast float %1983, %1984
  %1986 = fmul fast float %1965, %1972
  %1987 = fmul fast float %1965, %1973
  %1988 = fmul fast float %1976, %1965
  %1989 = fmul fast float %1979, %1966
  %1990 = fmul fast float %1982, %1966
  %1991 = fmul fast float %1985, %1966
  %1992 = fadd fast float %1986, %192
  %1993 = fadd fast float %1992, %1989
  %1994 = fadd fast float %1987, %193
  %1995 = fadd fast float %1994, %1990
  %1996 = fadd fast float %1988, %194
  %1997 = fadd fast float %1996, %1991
  %1998 = call float @dx.op.dot3.f32(i32 55, float %1993, float %1995, float %1997, float %1993, float %1995, float %1997)  ; Dot3(ax,ay,az,bx,by,bz)
  %1999 = call float @dx.op.unary.f32(i32 25, float %1998)  ; Rsqrt(value)
  %2000 = fmul fast float %1999, %1904
  %2001 = fmul fast float %2000, %1993
  %2002 = fmul fast float %2000, %1995
  %2003 = fmul fast float %2000, %1997
  %2004 = fadd fast float %2001, %256
  %2005 = fadd fast float %2002, %257
  %2006 = fadd fast float %2003, %258
  br label %2007

; <label>:2007                                    ; preds = %1810, %1808
  %2008 = phi float [ %256, %1810 ], [ 0.000000e+00, %1808 ]
  %2009 = phi float [ %257, %1810 ], [ 0.000000e+00, %1808 ]
  %2010 = phi float [ %258, %1810 ], [ 0.000000e+00, %1808 ]
  %2011 = phi float [ %2004, %1810 ], [ 0.000000e+00, %1808 ]
  %2012 = phi float [ %2005, %1810 ], [ 0.000000e+00, %1808 ]
  %2013 = phi float [ %2006, %1810 ], [ 0.000000e+00, %1808 ]
  %2014 = phi i1 [ true, %1810 ], [ false, %1808 ]
  %2015 = phi float [ %1848, %1810 ], [ 0.000000e+00, %1808 ]
  %2016 = phi float [ %1853, %1810 ], [ 0.000000e+00, %1808 ]
  %2017 = phi float [ %1857, %1810 ], [ 0.000000e+00, %1808 ]
  br i1 %2014, label %2018, label %2288

; <label>:2018                                    ; preds = %2007
  %2019 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2020 = extractvalue %dx.types.CBufRet.f32 %2019, 0
  %2021 = fmul fast float %2020, %192
  %2022 = fmul fast float %2020, %193
  %2023 = fmul fast float %2020, %194
  %2024 = fadd fast float %2015, -5.000000e-01
  %2025 = fadd fast float %2016, -5.000000e-01
  %2026 = fadd fast float %2017, -5.000000e-01
  %2027 = fadd fast float %2024, %2021
  %2028 = fadd fast float %2025, %2022
  %2029 = fadd fast float %2026, %2023
  %2030 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2031 = extractvalue %dx.types.CBufRet.i32 %2030, 0
  %2032 = extractvalue %dx.types.CBufRet.i32 %2030, 1
  %2033 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2034 = extractvalue %dx.types.CBufRet.i32 %2033, 0
  %2035 = extractvalue %dx.types.CBufRet.i32 %2033, 1
  %2036 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %23, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2037 = extractvalue %dx.types.CBufRet.f32 %2036, 0
  %2038 = extractvalue %dx.types.CBufRet.f32 %2019, 3
  %2039 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2040 = extractvalue %dx.types.CBufRet.i32 %2039, 0
  %2041 = icmp eq i32 %2040, 0
  br i1 %2041, label %2288, label %2042

; <label>:2042                                    ; preds = %2018
  br label %2043

; <label>:2043                                    ; preds = %2280, %2042
  %2044 = phi float [ %2284, %2280 ], [ %1807, %2042 ]
  %2045 = phi i32 [ %2285, %2280 ], [ 0, %2042 ]
  %2046 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %2047 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2046, i32 %2045, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2048 = extractvalue %dx.types.ResRet.f32 %2047, 0
  %2049 = extractvalue %dx.types.ResRet.f32 %2047, 1
  %2050 = extractvalue %dx.types.ResRet.f32 %2047, 2
  %2051 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2046, i32 %2045, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2052 = extractvalue %dx.types.ResRet.i32 %2051, 0
  %2053 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2046, i32 %2045, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2054 = extractvalue %dx.types.ResRet.f32 %2053, 0
  %2055 = extractvalue %dx.types.ResRet.f32 %2053, 1
  %2056 = extractvalue %dx.types.ResRet.f32 %2053, 2
  %2057 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2046, i32 %2045, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2058 = extractvalue %dx.types.ResRet.i32 %2057, 0
  %2059 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %23, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2060 = extractvalue %dx.types.CBufRet.i32 %2059, 0
  %2061 = and i32 %2052, 255
  %2062 = lshr i32 %2052, 8
  %2063 = and i32 %2062, 255
  %2064 = lshr i32 %2052, 16
  %2065 = and i32 %2064, 255
  %2066 = mul i32 %2060, %2061
  %2067 = mul i32 %2060, %2063
  %2068 = mul i32 %2060, %2065
  %2069 = and i32 %2058, 4194303
  %2070 = lshr i32 %2058, 22
  %2071 = uitofp i32 %2070 to float
  %2072 = fmul fast float %2071, 0x3F84050140000000
  %2073 = icmp ne i32 %2061, 0
  %2074 = icmp ne i32 %2063, 0
  %2075 = icmp ne i32 %2065, 0
  %2076 = and i1 %2073, %2074
  %2077 = and i1 %2075, %2076
  %2078 = fmul fast float %2072, %2027
  %2079 = fmul fast float %2072, %2028
  %2080 = fmul fast float %2072, %2029
  %2081 = fadd fast float %2078, %2008
  %2082 = fadd fast float %2079, %2009
  %2083 = fadd fast float %2080, %2010
  %2084 = fdiv fast float 0x4059933340000000, %2071
  br i1 %2077, label %2085, label %2280

; <label>:2085                                    ; preds = %2043
  %2086 = fsub fast float %2011, %2081
  %2087 = fsub fast float %2012, %2082
  %2088 = fsub fast float %2013, %2083
  %2089 = fdiv fast float 1.000000e+00, %2086
  %2090 = fdiv fast float 1.000000e+00, %2087
  %2091 = fdiv fast float 1.000000e+00, %2088
  %2092 = fsub fast float %2048, %2081
  %2093 = fsub fast float %2049, %2082
  %2094 = fsub fast float %2050, %2083
  %2095 = fmul fast float %2089, %2092
  %2096 = fmul fast float %2090, %2093
  %2097 = fmul fast float %2091, %2094
  %2098 = fsub fast float %2054, %2081
  %2099 = fsub fast float %2055, %2082
  %2100 = fsub fast float %2056, %2083
  %2101 = fmul fast float %2089, %2098
  %2102 = fmul fast float %2090, %2099
  %2103 = fmul fast float %2091, %2100
  %2104 = call float @dx.op.binary.f32(i32 36, float %2095, float %2101)  ; FMin(a,b)
  %2105 = call float @dx.op.binary.f32(i32 36, float %2096, float %2102)  ; FMin(a,b)
  %2106 = call float @dx.op.binary.f32(i32 36, float %2097, float %2103)  ; FMin(a,b)
  %2107 = call float @dx.op.binary.f32(i32 35, float %2095, float %2101)  ; FMax(a,b)
  %2108 = call float @dx.op.binary.f32(i32 35, float %2096, float %2102)  ; FMax(a,b)
  %2109 = call float @dx.op.binary.f32(i32 35, float %2097, float %2103)  ; FMax(a,b)
  %2110 = call float @dx.op.binary.f32(i32 35, float %2105, float %2106)  ; FMax(a,b)
  %2111 = call float @dx.op.binary.f32(i32 35, float %2104, float %2110)  ; FMax(a,b)
  %2112 = call float @dx.op.binary.f32(i32 36, float %2108, float %2109)  ; FMin(a,b)
  %2113 = call float @dx.op.binary.f32(i32 36, float %2107, float %2112)  ; FMin(a,b)
  %2114 = call float @dx.op.unary.f32(i32 7, float %2111)  ; Saturate(value)
  %2115 = call float @dx.op.unary.f32(i32 7, float %2113)  ; Saturate(value)
  %2116 = fcmp fast olt float %2114, %2115
  br i1 %2116, label %2117, label %2280

; <label>:2117                                    ; preds = %2085
  %2118 = fmul fast float %2114, %2086
  %2119 = fmul fast float %2114, %2087
  %2120 = fmul fast float %2114, %2088
  %2121 = fsub fast float %2115, %2114
  %2122 = fmul fast float %2086, %2121
  %2123 = fsub fast float %2115, %2114
  %2124 = fmul fast float %2087, %2123
  %2125 = fsub fast float %2115, %2114
  %2126 = fmul fast float %2088, %2125
  %2127 = fmul fast float %2122, %2122
  %2128 = fmul fast float %2124, %2124
  %2129 = fadd fast float %2127, %2128
  %2130 = fmul fast float %2126, %2126
  %2131 = fadd fast float %2129, %2130
  %2132 = call float @dx.op.unary.f32(i32 24, float %2131)  ; Sqrt(value)
  %2133 = call float @dx.op.binary.f32(i32 36, float %2132, float 1.000000e+05)  ; FMin(a,b)
  %2134 = call float @dx.op.dot3.f32(i32 55, float %2122, float %2124, float %2126, float %2122, float %2124, float %2126)  ; Dot3(ax,ay,az,bx,by,bz)
  %2135 = call float @dx.op.unary.f32(i32 25, float %2134)  ; Rsqrt(value)
  %2136 = fdiv fast float %2133, %2072
  %2137 = call float @dx.op.unary.f32(i32 28, float %2136)  ; Round_pi(value)
  %2138 = call float @dx.op.binary.f32(i32 36, float %2137, float 1.024000e+03)  ; FMin(a,b)
  %2139 = fdiv fast float %2133, %2138
  %2140 = fcmp fast ogt float %2138, 0.000000e+00
  br i1 %2140, label %2141, label %2280

; <label>:2141                                    ; preds = %2117
  br label %2142

; <label>:2142                                    ; preds = %2271, %2141
  %2143 = phi i32 [ %2229, %2271 ], [ 9999, %2141 ]
  %2144 = phi i32 [ %2230, %2271 ], [ 9999, %2141 ]
  %2145 = phi i32 [ %2231, %2271 ], [ 9999, %2141 ]
  %2146 = phi i32 [ %2232, %2271 ], [ 0, %2141 ]
  %2147 = phi i32 [ %2233, %2271 ], [ 0, %2141 ]
  %2148 = phi i32 [ %2234, %2271 ], [ 0, %2141 ]
  %2149 = phi i32 [ %2235, %2271 ], [ 0, %2141 ]
  %2150 = phi float [ %2275, %2271 ], [ 1.000000e+00, %2141 ]
  %2151 = phi float [ %2276, %2271 ], [ 0.000000e+00, %2141 ]
  %2152 = phi float [ %2272, %2271 ], [ 0.000000e+00, %2141 ]
  %2153 = fmul fast float %2150, %2139
  %2154 = call float @dx.op.binary.f32(i32 35, float %2153, float 0.000000e+00)  ; FMax(a,b)
  %2155 = fmul fast float %2122, %2072
  %2156 = fmul fast float %2155, %2135
  %2157 = fmul fast float %2156, %2151
  %2158 = fmul fast float %2124, %2072
  %2159 = fmul fast float %2158, %2135
  %2160 = fmul fast float %2159, %2151
  %2161 = fmul fast float %2126, %2072
  %2162 = fmul fast float %2161, %2135
  %2163 = fmul fast float %2162, %2151
  %2164 = fmul fast float %2024, %2154
  %2165 = fmul fast float %2025, %2154
  %2166 = fmul fast float %2026, %2154
  %2167 = add i32 %2066, -1
  %2168 = add i32 %2067, -1
  %2169 = add i32 %2068, -1
  %2170 = fsub fast float %2081, %2048
  %2171 = fadd fast float %2170, %2118
  %2172 = fadd fast float %2171, %2157
  %2173 = fadd fast float %2172, %2164
  %2174 = fsub fast float %2082, %2049
  %2175 = fadd fast float %2174, %2119
  %2176 = fadd fast float %2175, %2160
  %2177 = fadd fast float %2176, %2165
  %2178 = fsub fast float %2083, %2050
  %2179 = fadd fast float %2178, %2120
  %2180 = fadd fast float %2179, %2163
  %2181 = fadd fast float %2180, %2166
  %2182 = fsub fast float %2054, %2048
  %2183 = fsub fast float %2055, %2049
  %2184 = fsub fast float %2056, %2050
  %2185 = fdiv fast float %2173, %2182
  %2186 = fdiv fast float %2177, %2183
  %2187 = fdiv fast float %2181, %2184
  %2188 = call float @dx.op.unary.f32(i32 7, float %2185)  ; Saturate(value)
  %2189 = call float @dx.op.unary.f32(i32 7, float %2186)  ; Saturate(value)
  %2190 = call float @dx.op.unary.f32(i32 7, float %2187)  ; Saturate(value)
  %2191 = uitofp i32 %2066 to float
  %2192 = uitofp i32 %2067 to float
  %2193 = uitofp i32 %2068 to float
  %2194 = fmul fast float %2188, %2191
  %2195 = fmul fast float %2189, %2192
  %2196 = fmul fast float %2190, %2193
  %2197 = fptoui float %2194 to i32
  %2198 = fptoui float %2195 to i32
  %2199 = fptoui float %2196 to i32
  %2200 = call i32 @dx.op.binary.i32(i32 40, i32 %2197, i32 %2167)  ; UMin(a,b)
  %2201 = call i32 @dx.op.binary.i32(i32 40, i32 %2198, i32 %2168)  ; UMin(a,b)
  %2202 = call i32 @dx.op.binary.i32(i32 40, i32 %2199, i32 %2169)  ; UMin(a,b)
  %2203 = and i32 %2035, 31
  %2204 = lshr i32 %2200, %2203
  %2205 = lshr i32 %2201, %2203
  %2206 = lshr i32 %2202, %2203
  %2207 = icmp ne i32 %2204, %2143
  %2208 = icmp ne i32 %2205, %2144
  %2209 = icmp ne i32 %2206, %2145
  %2210 = or i1 %2207, %2208
  %2211 = or i1 %2210, %2209
  br i1 %2211, label %2212, label %2228

; <label>:2212                                    ; preds = %2142
  %2213 = mul i32 %2206, %2063
  %2214 = add i32 %2213, %2205
  %2215 = mul i32 %2214, %2061
  %2216 = add i32 %2204, %2069
  %2217 = add i32 %2216, %2215
  %2218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %2219 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %2218, i32 %2217, i32 undef)  ; BufferLoad(srv,index,wot)
  %2220 = extractvalue %dx.types.ResRet.i32 %2219, 0
  %2221 = icmp ne i32 %2220, -1
  %2222 = zext i1 %2221 to i32
  %2223 = mul i32 %2031, %2032
  %2224 = urem i32 %2220, %2223
  %2225 = urem i32 %2224, %2031
  %2226 = udiv i32 %2224, %2031
  %2227 = udiv i32 %2220, %2223
  br label %2228

; <label>:2228                                    ; preds = %2212, %2142
  %2229 = phi i32 [ %2204, %2212 ], [ %2143, %2142 ]
  %2230 = phi i32 [ %2205, %2212 ], [ %2144, %2142 ]
  %2231 = phi i32 [ %2206, %2212 ], [ %2145, %2142 ]
  %2232 = phi i32 [ %2222, %2212 ], [ %2146, %2142 ]
  %2233 = phi i32 [ %2225, %2212 ], [ %2147, %2142 ]
  %2234 = phi i32 [ %2226, %2212 ], [ %2148, %2142 ]
  %2235 = phi i32 [ %2227, %2212 ], [ %2149, %2142 ]
  %2236 = icmp eq i32 %2232, 0
  br i1 %2236, label %2271, label %2237

; <label>:2237                                    ; preds = %2228
  %2238 = shl i32 %2233, %2203
  %2239 = shl i32 %2234, %2203
  %2240 = shl i32 %2235, %2203
  %2241 = shl i32 %2204, %2203
  %2242 = shl i32 %2205, %2203
  %2243 = shl i32 %2206, %2203
  %2244 = sub i32 %2200, %2241
  %2245 = sub i32 %2201, %2242
  %2246 = sub i32 %2202, %2243
  %2247 = add i32 %2244, %2238
  %2248 = add i32 %2245, %2239
  %2249 = add i32 %2246, %2240
  %2250 = fmul fast float %2154, %2084
  %2251 = call float @dx.op.unary.f32(i32 23, float %2250)  ; Log(value)
  %2252 = fptoui float %2251 to i32
  %2253 = and i32 %2252, 31
  %2254 = lshr i32 %2247, %2253
  %2255 = lshr i32 %2248, %2253
  %2256 = lshr i32 %2249, %2253
  %2257 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %2258 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2257, i32 %2252, i32 %2254, i32 %2255, i32 %2256, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2259 = extractvalue %dx.types.ResRet.i32 %2258, 0
  %2260 = icmp sgt i32 %2259, -1
  br i1 %2260, label %2261, label %2267

; <label>:2261                                    ; preds = %2237
  %2262 = and i32 %2259, 16777215
  %2263 = uitofp i32 %2262 to float
  %2264 = fmul fast float %2037, 0x3F50624DE0000000
  %2265 = fmul fast float %2264, %2250
  %2266 = fmul fast float %2265, %2263
  br label %2267

; <label>:2267                                    ; preds = %2261, %2237
  %2268 = phi float [ %2266, %2261 ], [ 0.000000e+00, %2237 ]
  %2269 = fadd fast float %2268, %2152
  %2270 = fcmp fast ogt float %2269, 1.000000e+00
  br i1 %2270, label %2278, label %2271

; <label>:2271                                    ; preds = %2267, %2228
  %2272 = phi float [ %2269, %2267 ], [ %2152, %2228 ]
  %2273 = fmul fast float %2150, %2038
  %2274 = uitofp i32 %2034 to float
  %2275 = call float @dx.op.binary.f32(i32 36, float %2274, float %2273)  ; FMin(a,b)
  %2276 = fadd fast float %2275, %2151
  %2277 = fcmp fast olt float %2276, %2138
  br i1 %2277, label %2142, label %2278

; <label>:2278                                    ; preds = %2271, %2267
  %2279 = phi float [ %2272, %2271 ], [ %2269, %2267 ]
  br label %2280

; <label>:2280                                    ; preds = %2278, %2117, %2085, %2043
  %2281 = phi float [ 0.000000e+00, %2085 ], [ 0.000000e+00, %2043 ], [ 0.000000e+00, %2117 ], [ %2279, %2278 ]
  %2282 = fsub fast float 1.000000e+00, %2281
  %2283 = call float @dx.op.unary.f32(i32 7, float %2282)  ; Saturate(value)
  %2284 = call float @dx.op.binary.f32(i32 36, float %2044, float %2283)  ; FMin(a,b)
  %2285 = add nuw i32 %2045, 1
  %2286 = icmp eq i32 %2285, %2040
  br i1 %2286, label %2287, label %2043

; <label>:2287                                    ; preds = %2280
  br label %2288

; <label>:2288                                    ; preds = %2287, %2018, %2007, %1806, %221
  %2289 = phi i32 [ %1783, %1806 ], [ %1783, %2007 ], [ 0, %221 ], [ %1783, %2018 ], [ %1783, %2287 ]
  %2290 = phi float [ %1807, %1806 ], [ %1807, %2007 ], [ 1.000000e+00, %221 ], [ %1807, %2018 ], [ %2284, %2287 ]
  %2291 = phi i32 [ %1786, %1806 ], [ %1786, %2007 ], [ 0, %221 ], [ %1786, %2018 ], [ %1786, %2287 ]
  %2292 = phi i32 [ %1787, %1806 ], [ %1787, %2007 ], [ 0, %221 ], [ %1787, %2018 ], [ %1787, %2287 ]
  %2293 = phi i32 [ %1788, %1806 ], [ %1788, %2007 ], [ -1, %221 ], [ %1788, %2018 ], [ %1788, %2287 ]
  %2294 = phi i32 [ %1789, %1806 ], [ %1789, %2007 ], [ -1, %221 ], [ %1789, %2018 ], [ %1789, %2287 ]
  %2295 = phi i32 [ %1790, %1806 ], [ %1790, %2007 ], [ -1, %221 ], [ %1790, %2018 ], [ %1790, %2287 ]
  %2296 = phi i32 [ %1791, %1806 ], [ %1791, %2007 ], [ -1, %221 ], [ %1791, %2018 ], [ %1791, %2287 ]
  %2297 = fcmp fast ogt float %2290, 0x3F91111120000000
  %2298 = fcmp fast olt float %2290, 1.000000e+00
  %2299 = and i1 %2297, %2298
  br i1 %2299, label %2300, label %2321

; <label>:2300                                    ; preds = %2288
  %2301 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2302 = extractvalue %dx.types.CBufRet.i32 %2301, 1
  %2303 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2304 = extractvalue %dx.types.CBufRet.i32 %2303, 0
  %2305 = extractvalue %dx.types.CBufRet.i32 %2303, 1
  %2306 = extractvalue %dx.types.CBufRet.i32 %2303, 2
  %2307 = and i32 %2304, %64
  %2308 = and i32 %2305, %66
  %2309 = and i32 %2306, %2302
  %2310 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %24, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2311 = extractvalue %dx.types.CBufRet.i32 %2310, 1
  %2312 = mul i32 %2309, %2311
  %2313 = add i32 %2312, %2308
  %2314 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2315 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %2314, i32 0, i32 %2307, i32 %2313, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2316 = extractvalue %dx.types.ResRet.f32 %2315, 0
  %2317 = fadd fast float %2316, -5.000000e-01
  %2318 = fmul fast float %2317, 0x3FB1111120000000
  %2319 = fadd fast float %2318, %2290
  %2320 = call float @dx.op.unary.f32(i32 7, float %2319)  ; Saturate(value)
  br label %2321

; <label>:2321                                    ; preds = %2300, %2288
  %2322 = phi float [ %2320, %2300 ], [ %2290, %2288 ]
  %2323 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 521 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<2xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2323, i32 %64, i32 %66, i32 undef, float %2322, float %2322, float %2322, float %2322, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  %2324 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %2325 = extractvalue %dx.types.CBufRet.i32 %2324, 3
  %2326 = icmp eq i32 %2325, %190
  %2327 = select i1 %2326, float %2322, float 1.000000e+00
  %2328 = select i1 %2326, i32 %2291, i32 0
  %2329 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %2330 = extractvalue %dx.types.CBufRet.i32 %2329, 2
  %2331 = icmp eq i32 %2330, 0
  br i1 %2331, label %2332, label %2655

; <label>:2332                                    ; preds = %2321
  %2333 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %26, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %2334 = extractvalue %dx.types.CBufRet.f32 %2333, 0
  %2335 = extractvalue %dx.types.CBufRet.f32 %2333, 1
  %2336 = fsub fast float %97, %2334
  %2337 = fsub fast float %98, %2335
  %2338 = fptoui float %2336 to i32
  %2339 = fptoui float %2337 to i32
  %2340 = icmp ne i32 %2289, 0
  %2341 = and i1 %2340, %2326
  br i1 %2341, label %2342, label %2648

; <label>:2342                                    ; preds = %2332
  %2343 = lshr i32 %2293, 7
  %2344 = lshr i32 %2294, 7
  %2345 = lshr i32 %2295, 7
  %2346 = lshr i32 %2296, 7
  %2347 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2348 = extractvalue %dx.types.CBufRet.i32 %2347, 2
  %2349 = extractvalue %dx.types.CBufRet.i32 %2347, 3
  %2350 = icmp ult i32 %2345, %2348
  %2351 = icmp ult i32 %2346, %2349
  %2352 = and i1 %2350, %2351
  br i1 %2352, label %2353, label %2362

; <label>:2353                                    ; preds = %2342
  %2354 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %2355 = extractvalue %dx.types.CBufRet.i32 %2354, 2
  %2356 = and i32 %2355, 31
  %2357 = shl i32 %2346, %2356
  %2358 = add i32 %2357, %2345
  %2359 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 524, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2360 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2359, i32 %2358, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2361 = extractvalue %dx.types.ResRet.i32 %2360, 0
  br label %2362

; <label>:2362                                    ; preds = %2353, %2342
  %2363 = phi i32 [ %2361, %2353 ], [ 0, %2342 ]
  %2364 = extractvalue %dx.types.CBufRet.i32 %2324, 2
  %2365 = icmp eq i32 %2364, 1
  br i1 %2365, label %2648, label %2366

; <label>:2366                                    ; preds = %2362
  %2367 = icmp eq i32 %2364, 2
  br i1 %2367, label %2368, label %2391

; <label>:2368                                    ; preds = %2366
  %2369 = lshr i32 %2328, 16
  %2370 = xor i32 %2369, %2328
  %2371 = mul i32 %2370, -2048144789
  %2372 = lshr i32 %2371, 13
  %2373 = xor i32 %2372, %2371
  %2374 = mul i32 %2373, -1028477387
  %2375 = lshr i32 %2374, 16
  %2376 = xor i32 %2375, %2374
  %2377 = and i32 %2376, 255
  %2378 = uitofp i32 %2377 to float
  %2379 = lshr i32 %2376, 8
  %2380 = and i32 %2379, 255
  %2381 = uitofp i32 %2380 to float
  %2382 = and i32 %2375, 255
  %2383 = uitofp i32 %2382 to float
  %2384 = fmul fast float %2378, 0x3F69B34D00000000
  %2385 = fmul fast float %2381, 0x3F69B34D00000000
  %2386 = fmul fast float %2383, 0x3F69B34D00000000
  %2387 = fmul fast float %2327, 0x3FC99999A0000000
  %2388 = fadd fast float %2384, %2387
  %2389 = fadd fast float %2385, %2387
  %2390 = fadd fast float %2386, %2387
  br label %2648

; <label>:2391                                    ; preds = %2366
  %2392 = icmp eq i32 %2364, 4
  %2393 = and i1 %2352, %2392
  br i1 %2393, label %2394, label %2437

; <label>:2394                                    ; preds = %2391
  %2395 = shl i32 %2344, 10
  %2396 = add i32 %2395, %2343
  %2397 = lshr i32 %2396, 16
  %2398 = xor i32 %2397, %2396
  %2399 = mul i32 %2398, -2048144789
  %2400 = lshr i32 %2399, 13
  %2401 = xor i32 %2400, %2399
  %2402 = mul i32 %2401, -1028477387
  %2403 = lshr i32 %2402, 16
  %2404 = xor i32 %2403, %2402
  %2405 = and i32 %2404, 255
  %2406 = uitofp i32 %2405 to float
  %2407 = lshr i32 %2404, 8
  %2408 = and i32 %2407, 255
  %2409 = uitofp i32 %2408 to float
  %2410 = and i32 %2403, 255
  %2411 = uitofp i32 %2410 to float
  %2412 = lshr i32 %2328, 16
  %2413 = xor i32 %2412, %2328
  %2414 = mul i32 %2413, -2048144789
  %2415 = lshr i32 %2414, 13
  %2416 = xor i32 %2415, %2414
  %2417 = mul i32 %2416, -1028477387
  %2418 = lshr i32 %2417, 16
  %2419 = xor i32 %2418, %2417
  %2420 = and i32 %2419, 255
  %2421 = uitofp i32 %2420 to float
  %2422 = lshr i32 %2419, 8
  %2423 = and i32 %2422, 255
  %2424 = uitofp i32 %2423 to float
  %2425 = and i32 %2418, 255
  %2426 = uitofp i32 %2425 to float
  %2427 = fadd fast float %2406, %2421
  %2428 = fmul fast float %2427, 0x3F59B34D00000000
  %2429 = fadd fast float %2409, %2424
  %2430 = fmul fast float %2429, 0x3F59B34D00000000
  %2431 = fadd fast float %2411, %2426
  %2432 = fmul fast float %2431, 0x3F59B34D00000000
  %2433 = fmul fast float %2327, 0x3FC99999A0000000
  %2434 = fadd fast float %2428, %2433
  %2435 = fadd fast float %2430, %2433
  %2436 = fadd fast float %2432, %2433
  br label %2648

; <label>:2437                                    ; preds = %2391
  %2438 = icmp eq i32 %2364, 16
  br i1 %2438, label %2439, label %2485

; <label>:2439                                    ; preds = %2437
  %2440 = uitofp i32 %2292 to float
  %2441 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2442 = extractvalue %dx.types.CBufRet.i32 %2441, 1
  %2443 = sitofp i32 %2442 to float
  %2444 = fdiv fast float %2440, %2443
  %2445 = call float @dx.op.unary.f32(i32 7, float %2444)  ; Saturate(value)
  %2446 = fmul fast float %2445, 5.000000e-01
  %2447 = fadd fast float %2446, 5.000000e-01
  %2448 = call float @dx.op.unary.f32(i32 7, float %2447)  ; Saturate(value)
  %2449 = fmul fast float %2448, 0x404A71CBE0000000
  %2450 = fmul fast float %2448, 0x40358B9700000000
  %2451 = fmul fast float %2448, 0x405BA11E20000000
  %2452 = fsub fast float 0x406B587060000000, %2449
  %2453 = fsub fast float 0x4050E16060000000, %2450
  %2454 = fadd fast float %2451, 0xC073134600000000
  %2455 = fmul fast float %2452, %2448
  %2456 = fmul fast float %2453, %2448
  %2457 = fmul fast float %2454, %2448
  %2458 = fadd fast float %2455, 0xC074ED5CC0000000
  %2459 = fadd fast float %2456, 0xC0515451E0000000
  %2460 = fadd fast float %2457, 0x4072095FC0000000
  %2461 = fmul fast float %2458, %2448
  %2462 = fmul fast float %2459, %2448
  %2463 = fmul fast float %2460, %2448
  %2464 = fadd fast float %2461, 0x406C9883C0000000
  %2465 = fadd fast float %2462, 0x40390CC420000000
  %2466 = fadd fast float %2463, 0xC056E2A0A0000000
  %2467 = fmul fast float %2464, %2448
  %2468 = fmul fast float %2465, %2448
  %2469 = fmul fast float %2466, %2448
  %2470 = fadd fast float %2467, 0xC050860480000000
  %2471 = fadd fast float %2468, 0xC013B64120000000
  %2472 = fadd fast float %2469, 0xC024305460000000
  %2473 = fmul fast float %2470, %2448
  %2474 = fmul fast float %2471, %2448
  %2475 = fmul fast float %2472, %2448
  %2476 = fadd fast float %2473, 0x401ADD9D20000000
  %2477 = fadd fast float %2474, 0x40097552C0000000
  %2478 = fadd fast float %2475, 0x401E494CA0000000
  %2479 = fmul fast float %2476, %2448
  %2480 = fmul fast float %2477, %2448
  %2481 = fmul fast float %2478, %2448
  %2482 = fadd fast float %2479, 0x3FBD34F000000000
  %2483 = fadd fast float %2480, 0x3FB0192080000000
  %2484 = fadd fast float %2481, 0x3FCCC75A00000000
  br label %2648

; <label>:2485                                    ; preds = %2437
  %2486 = icmp eq i32 %2364, 8
  %2487 = and i1 %2352, %2486
  br i1 %2487, label %2488, label %2526

; <label>:2488                                    ; preds = %2485
  %2489 = and i32 %2363, 2
  %2490 = icmp ne i32 %2489, 0
  %2491 = and i32 %2363, 4
  %2492 = icmp ne i32 %2491, 0
  %2493 = and i32 %2363, 6
  %2494 = icmp eq i32 %2493, 6
  %2495 = shl i32 %2344, 10
  %2496 = add i32 %2495, %2343
  %2497 = lshr i32 %2496, 16
  %2498 = xor i32 %2497, %2496
  %2499 = mul i32 %2498, -2048144789
  %2500 = lshr i32 %2499, 13
  %2501 = xor i32 %2500, %2499
  %2502 = mul i32 %2501, -1028477387
  %2503 = lshr i32 %2502, 16
  %2504 = xor i32 %2503, %2502
  %2505 = and i32 %2504, 255
  %2506 = uitofp i32 %2505 to float
  %2507 = lshr i32 %2504, 8
  %2508 = and i32 %2507, 255
  %2509 = uitofp i32 %2508 to float
  %2510 = and i32 %2503, 255
  %2511 = uitofp i32 %2510 to float
  %2512 = select i1 %2494, float 0x3FE19999A0000000, float 0.000000e+00
  %2513 = select i1 %2490, float 0.000000e+00, float 0x3FE19999A0000000
  %2514 = select i1 %2492, float 0.000000e+00, float 0x3FE19999A0000000
  %2515 = select i1 %2490, float %2514, float 0.000000e+00
  %2516 = fmul fast float %2506, 0x3F50101020000000
  %2517 = fmul fast float %2509, 0x3F50101020000000
  %2518 = fmul fast float %2511, 0x3F50101020000000
  %2519 = fmul fast float %2327, 0x3FC99999A0000000
  %2520 = fadd fast float %2516, %2519
  %2521 = fadd fast float %2520, %2512
  %2522 = fadd fast float %2517, %2519
  %2523 = fadd fast float %2522, %2513
  %2524 = fadd fast float %2518, %2519
  %2525 = fadd fast float %2524, %2515
  br label %2648

; <label>:2526                                    ; preds = %2485
  %2527 = icmp eq i32 %2364, 128
  br i1 %2527, label %2528, label %2563

; <label>:2528                                    ; preds = %2526
  %2529 = shl i32 %2344, 10
  %2530 = add i32 %2529, %2343
  %2531 = lshr i32 %2530, 16
  %2532 = xor i32 %2531, %2530
  %2533 = mul i32 %2532, -2048144789
  %2534 = lshr i32 %2533, 13
  %2535 = xor i32 %2534, %2533
  %2536 = mul i32 %2535, -1028477387
  %2537 = lshr i32 %2536, 16
  %2538 = xor i32 %2537, %2536
  %2539 = and i32 %2538, 255
  %2540 = uitofp i32 %2539 to float
  %2541 = lshr i32 %2538, 8
  %2542 = and i32 %2541, 255
  %2543 = uitofp i32 %2542 to float
  %2544 = and i32 %2537, 255
  %2545 = uitofp i32 %2544 to float
  %2546 = fmul fast float %2540, 0x3F59B34D00000000
  br i1 %2352, label %2547, label %2554

; <label>:2547                                    ; preds = %2528
  %2548 = and i32 %2363, 32
  %2549 = icmp ne i32 %2548, 0
  %2550 = select i1 %2549, float 1.000000e+00, float %2546
  %2551 = fsub fast float %2550, %2546
  %2552 = fmul fast float %2551, 0x3FE99999A0000000
  %2553 = fadd fast float %2552, %2546
  br label %2554

; <label>:2554                                    ; preds = %2547, %2528
  %2555 = phi float [ %2553, %2547 ], [ %2546, %2528 ]
  %2556 = fmul fast float %2555, 0x3FE99999A0000000
  %2557 = fmul fast float %2543, 0x3F548F70E0000000
  %2558 = fmul fast float %2545, 0x3F548F70E0000000
  %2559 = fmul fast float %2327, 0x3FC99999A0000000
  %2560 = fadd fast float %2556, %2559
  %2561 = fadd fast float %2557, %2559
  %2562 = fadd fast float %2558, %2559
  br label %2648

; <label>:2563                                    ; preds = %2526
  %2564 = icmp eq i32 %2364, 256
  br i1 %2564, label %2565, label %2609

; <label>:2565                                    ; preds = %2563
  %2566 = shl i32 %2344, 10
  %2567 = add i32 %2566, %2343
  %2568 = lshr i32 %2567, 16
  %2569 = xor i32 %2568, %2567
  %2570 = mul i32 %2569, -2048144789
  %2571 = lshr i32 %2570, 13
  %2572 = xor i32 %2571, %2570
  %2573 = mul i32 %2572, -1028477387
  %2574 = lshr i32 %2573, 16
  %2575 = xor i32 %2574, %2573
  %2576 = and i32 %2575, 255
  %2577 = uitofp i32 %2576 to float
  %2578 = lshr i32 %2575, 8
  %2579 = and i32 %2578, 255
  %2580 = uitofp i32 %2579 to float
  %2581 = and i32 %2574, 255
  %2582 = uitofp i32 %2581 to float
  %2583 = fmul fast float %2577, 0x3F59B34D00000000
  %2584 = fmul fast float %2580, 0x3F59B34D00000000
  br i1 %2352, label %2585, label %2599

; <label>:2585                                    ; preds = %2565
  %2586 = lshr i32 %2363, 8
  %2587 = and i32 %2586, 2
  %2588 = icmp ne i32 %2587, 0
  %2589 = and i32 %2586, 4
  %2590 = icmp ne i32 %2589, 0
  %2591 = select i1 %2590, float 1.000000e+00, float %2583
  %2592 = select i1 %2588, float 1.000000e+00, float %2584
  %2593 = fsub fast float %2591, %2583
  %2594 = fsub fast float %2592, %2584
  %2595 = fmul fast float %2593, 0x3FE99999A0000000
  %2596 = fmul fast float %2594, 0x3FE99999A0000000
  %2597 = fadd fast float %2595, %2583
  %2598 = fadd fast float %2596, %2584
  br label %2599

; <label>:2599                                    ; preds = %2585, %2565
  %2600 = phi float [ %2597, %2585 ], [ %2583, %2565 ]
  %2601 = phi float [ %2598, %2585 ], [ %2584, %2565 ]
  %2602 = fmul fast float %2600, 0x3FE99999A0000000
  %2603 = fmul fast float %2601, 0x3FE99999A0000000
  %2604 = fmul fast float %2582, 0x3F548F70E0000000
  %2605 = fmul fast float %2327, 0x3FC99999A0000000
  %2606 = fadd fast float %2602, %2605
  %2607 = fadd fast float %2603, %2605
  %2608 = fadd fast float %2604, %2605
  br label %2648

; <label>:2609                                    ; preds = %2563
  %2610 = icmp eq i32 %2364, 512
  br i1 %2610, label %2611, label %2642

; <label>:2611                                    ; preds = %2609
  %2612 = and i32 %2363, 48
  %2613 = icmp eq i32 %2612, 32
  %2614 = shl i32 %2344, 10
  %2615 = add i32 %2614, %2343
  %2616 = lshr i32 %2615, 16
  %2617 = xor i32 %2616, %2615
  %2618 = mul i32 %2617, -2048144789
  %2619 = lshr i32 %2618, 13
  %2620 = xor i32 %2619, %2618
  %2621 = mul i32 %2620, -1028477387
  %2622 = lshr i32 %2621, 16
  %2623 = xor i32 %2622, %2621
  %2624 = and i32 %2623, 255
  %2625 = uitofp i32 %2624 to float
  %2626 = lshr i32 %2623, 8
  %2627 = and i32 %2626, 255
  %2628 = uitofp i32 %2627 to float
  %2629 = and i32 %2622, 255
  %2630 = uitofp i32 %2629 to float
  %2631 = select i1 %2613, float 0x3FE19999A0000000, float 0.000000e+00
  %2632 = select i1 %2613, float 0.000000e+00, float 0x3FE19999A0000000
  %2633 = fmul fast float %2625, 0x3F50101020000000
  %2634 = fmul fast float %2628, 0x3F50101020000000
  %2635 = fmul fast float %2630, 0x3F50101020000000
  %2636 = fmul fast float %2327, 0x3FC99999A0000000
  %2637 = fadd fast float %2633, %2636
  %2638 = fadd fast float %2637, %2631
  %2639 = fadd fast float %2634, %2636
  %2640 = fadd fast float %2639, %2632
  %2641 = fadd fast float %2635, %2636
  br label %2648

; <label>:2642                                    ; preds = %2609
  %2643 = icmp eq i32 %2364, 64
  %2644 = fmul fast float %2327, 0x3FC99999A0000000
  %2645 = select i1 %2643, float %2644, float 1.000000e+00
  %2646 = select i1 %2643, float %2644, float 0.000000e+00
  %2647 = select i1 %2643, float %2644, float 1.000000e+00
  br label %2648

; <label>:2648                                    ; preds = %2642, %2611, %2599, %2554, %2488, %2439, %2394, %2368, %2362, %2332
  %2649 = phi float [ %2388, %2368 ], [ %2434, %2394 ], [ %2482, %2439 ], [ %2521, %2488 ], [ %2560, %2554 ], [ %2606, %2599 ], [ %2638, %2611 ], [ 1.000000e+00, %2332 ], [ %2327, %2362 ], [ %2645, %2642 ]
  %2650 = phi float [ %2389, %2368 ], [ %2435, %2394 ], [ %2483, %2439 ], [ %2523, %2488 ], [ %2561, %2554 ], [ %2607, %2599 ], [ %2640, %2611 ], [ 0.000000e+00, %2332 ], [ %2327, %2362 ], [ %2646, %2642 ]
  %2651 = phi float [ %2390, %2368 ], [ %2436, %2394 ], [ %2484, %2439 ], [ %2525, %2488 ], [ %2562, %2554 ], [ %2608, %2599 ], [ %2641, %2611 ], [ 1.000000e+00, %2332 ], [ %2327, %2362 ], [ %2647, %2642 ]
  %2652 = phi i1 [ true, %2368 ], [ true, %2394 ], [ true, %2439 ], [ true, %2488 ], [ true, %2554 ], [ true, %2599 ], [ true, %2611 ], [ false, %2332 ], [ true, %2362 ], [ %2643, %2642 ]
  br i1 %2652, label %2653, label %2655

; <label>:2653                                    ; preds = %2648
  %2654 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1033 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xF32>
  call void @dx.op.textureStore.f32(i32 67, %dx.types.Handle %2654, i32 %2338, i32 %2339, i32 undef, float %2649, float %2650, float %2651, float 1.000000e+00, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %2655

; <label>:2655                                    ; preds = %2653, %2648, %2321, %79, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.f32(i32, %dx.types.Handle, i32, i32, i32, float, float, float, float, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!36}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !25, !28, !34}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17, !18, !19, !21, !22, !23}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 6, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 7, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !7}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !7}
!18 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !15}
!19 = !{i32 10, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 10, i32 1, i32 12, i32 0, !20}
!20 = !{i32 1, i32 32}
!21 = !{i32 11, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 4, i32 0, !15}
!22 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 12, i32 1, i32 2, i32 0, !7}
!23 = !{i32 13, %"class.StructuredBuffer<FPhysicalPageMetaData>"* undef, !"", i32 0, i32 13, i32 1, i32 12, i32 0, !24}
!24 = !{i32 1, i32 16}
!25 = !{!26, !27}
!26 = !{i32 0, %"class.RWTexture2D<vector<float, 2> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!27 = !{i32 1, %"class.RWTexture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !7}
!28 = !{!29, !30, !31, !32, !33}
!29 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 368, null}
!30 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!31 = !{i32 2, %UniformBufferConstants_VirtualShadowMap* undef, !"", i32 0, i32 2, i32 1, i32 116, null}
!32 = !{i32 3, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 3, i32 1, i32 44, null}
!33 = !{i32 4, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 4, i32 1, i32 212, null}
!34 = !{!35}
!35 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!36 = !{void ()* @VirtualShadowMapProjection, !"VirtualShadowMapProjection", null, !4, !37}
!37 = !{i32 0, i64 524304, i32 4, !38, i32 5, !39}
!38 = !{i32 8, i32 8, i32 1}
!39 = !{i32 0}
