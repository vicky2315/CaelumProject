;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: c6460ecffaa64d633ea9fef0b6d1e106
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(8,8,1)
;
;
; Buffer Definitions:
;
; cbuffer _RootShaderParameters
; {
;
;   struct _RootShaderParameters
;   {
;
;       float ScreenRayLength;                        ; Offset:  112
;       int SMRTRayCount;                             ; Offset:  116
;       int SMRTSamplesPerRay;                        ; Offset:  120
;       float SMRTRayLengthScale;                     ; Offset:  124
;       float SMRTCotMaxRayAngleFromLight;            ; Offset:  128
;       float SMRTTexelDitherScale;                   ; Offset:  132
;       float SMRTExtrapolateSlope;                   ; Offset:  136
;       float SMRTMaxSlopeBias;                       ; Offset:  140
;       uint SMRTAdaptiveRayCount;                    ; Offset:  144
;       int4 ProjectionRect;                          ; Offset:  160
;       float NormalBias;                             ; Offset:  176
;       float SubsurfaceMinSourceRadius;              ; Offset:  180
;       uint InputType;                               ; Offset:  184
;       uint bCullBackfacingPixels;                   ; Offset:  188
;       float3 Light_TranslatedWorldPosition;         ; Offset:  224
;       float Light_InvRadius;                        ; Offset:  236
;       float3 Light_Color;                           ; Offset:  240
;       float Light_FalloffExponent;                  ; Offset:  252
;       float3 Light_Direction;                       ; Offset:  256
;       float Light_SpecularScale;                    ; Offset:  268
;       float3 Light_Tangent;                         ; Offset:  272
;       float Light_SourceRadius;                     ; Offset:  284
;       float2 Light_SpotAngles;                      ; Offset:  288
;       float Light_SoftSourceRadius;                 ; Offset:  296
;       float Light_SourceLength;                     ; Offset:  300
;       float Light_RectLightBarnCosAngle;            ; Offset:  304
;       float Light_RectLightBarnLength;              ; Offset:  308
;       float2 Light_RectLightAtlasUVOffset;          ; Offset:  312
;       float2 Light_RectLightAtlasUVScale;           ; Offset:  320
;       float Light_RectLightAtlasMaxLevel;           ; Offset:  328
;       int LightUniformVirtualShadowMapId;           ; Offset:  336
;       int VisualizeModeId;                          ; Offset:  360
;       int VisualizeVirtualShadowMapId;              ; Offset:  364
;   
;   } _RootShaderParameters;                          ; Offset:    0 Size:   368
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_VirtualShadowMap
; {
;
;   struct UniformBufferConstants_VirtualShadowMap
;   {
;
;       uint VirtualShadowMap_NumFullShadowMaps;      ; Offset:    0
;       uint VirtualShadowMap_NumSinglePageShadowMaps;; Offset:    4
;       uint VirtualShadowMap_MaxPhysicalPages;       ; Offset:    8
;       uint VirtualShadowMap_NumShadowMapSlots;      ; Offset:   12
;       uint VirtualShadowMap_StaticCachedArrayIndex; ; Offset:   16
;       uint VirtualShadowMap_PhysicalPageRowMask;    ; Offset:   20
;       uint VirtualShadowMap_PhysicalPageRowShift;   ; Offset:   24
;       uint VirtualShadowMap_PackedShadowMaskMaxLightCount;; Offset:   28
;       float4 VirtualShadowMap_RecPhysicalPoolSize;  ; Offset:   32
;       int2 VirtualShadowMap_PhysicalPoolSize;       ; Offset:   48
;       int2 VirtualShadowMap_PhysicalPoolSizePages;  ; Offset:   56
;       uint VirtualShadowMap_bExcludeNonNaniteFromCoarsePages;; Offset:   64
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamic;; Offset:   68
;       float VirtualShadowMap_CoarsePagePixelThresholdStatic;; Offset:   72
;       float VirtualShadowMap_CoarsePagePixelThresholdDynamicNanite;; Offset:   76
;       uint BindlessResource_VirtualShadowMap_ProjectionData;; Offset:   80
;       uint PrePadding_VirtualShadowMap_84;          ; Offset:   84
;       uint BindlessResource_VirtualShadowMap_PageTable;; Offset:   88
;       uint PrePadding_VirtualShadowMap_92;          ; Offset:   92
;       uint BindlessResource_VirtualShadowMap_PageFlags;; Offset:   96
;       uint PrePadding_VirtualShadowMap_100;         ; Offset:  100
;       uint BindlessResource_VirtualShadowMap_PageRectBounds;; Offset:  104
;       uint PrePadding_VirtualShadowMap_108;         ; Offset:  108
;       uint BindlessResource_VirtualShadowMap_PhysicalPagePool;; Offset:  112
;   
;   } UniformBufferConstants_VirtualShadowMap;        ; Offset:    0 Size:   116
;
; }
;
; cbuffer UniformBufferConstants_ForwardLightData
; {
;
;   struct hostlayout.UniformBufferConstants_ForwardLightData
;   {
;
;       uint ForwardLightData_NumLocalLights;         ; Offset:    0
;       uint ForwardLightData_NumReflectionCaptures;  ; Offset:    4
;       uint ForwardLightData_HasDirectionalLight;    ; Offset:    8
;       uint ForwardLightData_NumGridCells;           ; Offset:   12
;       int3 ForwardLightData_CulledGridSize;         ; Offset:   16
;       uint ForwardLightData_MaxCulledLightsPerCell; ; Offset:   28
;       uint ForwardLightData_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_ForwardLightData_36;          ; Offset:   36
;       uint PrePadding_ForwardLightData_40;          ; Offset:   40
;       uint PrePadding_ForwardLightData_44;          ; Offset:   44
;       float3 ForwardLightData_LightGridZParams;     ; Offset:   48
;       float PrePadding_ForwardLightData_60;         ; Offset:   60
;       float3 ForwardLightData_DirectionalLightDirection;; Offset:   64
;       float ForwardLightData_DirectionalLightSourceRadius;; Offset:   76
;       float3 ForwardLightData_DirectionalLightColor;; Offset:   80
;       float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint ForwardLightData_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_ForwardLightData_100;         ; Offset:  100
;       float2 ForwardLightData_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint ForwardLightData_NumDirectionalLightCascades;; Offset:  112
;       int ForwardLightData_DirectionalLightVSM;     ; Offset:  116
;       int PrePadding_ForwardLightData_120;          ; Offset:  120
;       int PrePadding_ForwardLightData_124;          ; Offset:  124
;       float4 ForwardLightData_CascadeEndDepths;     ; Offset:  128
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float ForwardLightData_DirectionalLightDepthBias;; Offset:  480
;       uint ForwardLightData_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint ForwardLightData_SimpleLightsEndIndex;   ; Offset:  488
;       uint ForwardLightData_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint ForwardLightData_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_ForwardLightData_500;         ; Offset:  500
;       uint PrePadding_ForwardLightData_504;         ; Offset:  504
;       uint PrePadding_ForwardLightData_508;         ; Offset:  508
;       float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint ForwardLightData_DirectLightingShowFlag; ; Offset:  592
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_ForwardLightData_DirectionalLightSMRTSettings_604;; Offset:  604
;       float ForwardLightData_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int ForwardLightData_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float ForwardLightData_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint ForwardLightData_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_ForwardLightData_644;         ; Offset:  644
;       uint PrePadding_ForwardLightData_648;         ; Offset:  648
;       uint PrePadding_ForwardLightData_652;         ; Offset:  652
;       uint BindlessResource_ForwardLightData_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_ForwardLightData_660;         ; Offset:  660
;       uint BindlessSampler_ForwardLightData_ShadowmapSampler;; Offset:  664
;       uint PrePadding_ForwardLightData_668;         ; Offset:  668
;       uint BindlessResource_ForwardLightData_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_ForwardLightData_676;         ; Offset:  676
;       uint BindlessSampler_ForwardLightData_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_ForwardLightData_684;         ; Offset:  684
;       uint BindlessResource_ForwardLightData_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_ForwardLightData_692;         ; Offset:  692
;       uint BindlessResource_ForwardLightData_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_ForwardLightData_700;         ; Offset:  700
;       uint BindlessResource_ForwardLightData_CulledLightDataGrid;; Offset:  704
;   
;   } UniformBufferConstants_ForwardLightData;        ; Offset:    0 Size:   708
;
; }
;
; cbuffer UniformBufferConstants_BlueNoise
; {
;
;   struct UniformBufferConstants_BlueNoise
;   {
;
;       int3 BlueNoise_Dimensions;                    ; Offset:    0
;       int PrePadding_BlueNoise_12;                  ; Offset:   12
;       int3 BlueNoise_ModuloMasks;                   ; Offset:   16
;       int PrePadding_BlueNoise_28;                  ; Offset:   28
;       uint BindlessResource_BlueNoise_ScalarTexture;; Offset:   32
;       uint PrePadding_BlueNoise_36;                 ; Offset:   36
;       uint BindlessResource_BlueNoise_Vec2Texture;  ; Offset:   40
;   
;   } UniformBufferConstants_BlueNoise;               ; Offset:    0 Size:    44
;
; }
;
; cbuffer UniformBufferConstants_VirtualVoxel
; {
;
;   struct UniformBufferConstants_VirtualVoxel
;   {
;
;       int3 VirtualVoxel_PageCountResolution;        ; Offset:    0
;       float VirtualVoxel_CPUMinVoxelWorldSize;      ; Offset:   12
;       int3 VirtualVoxel_PageTextureResolution;      ; Offset:   16
;       uint VirtualVoxel_PageCount;                  ; Offset:   28
;       uint VirtualVoxel_PageResolution;             ; Offset:   32
;       uint VirtualVoxel_PageResolutionLog2;         ; Offset:   36
;       uint VirtualVoxel_PageIndexCount;             ; Offset:   40
;       uint VirtualVoxel_IndirectDispatchGroupSize;  ; Offset:   44
;       uint VirtualVoxel_NodeDescCount;              ; Offset:   48
;       uint VirtualVoxel_JitterMode;                 ; Offset:   52
;       float VirtualVoxel_DensityScale;              ; Offset:   56
;       float VirtualVoxel_DensityScale_AO;           ; Offset:   60
;       float VirtualVoxel_DensityScale_Shadow;       ; Offset:   64
;       float VirtualVoxel_DensityScale_Transmittance;; Offset:   68
;       float VirtualVoxel_DensityScale_Environment;  ; Offset:   72
;       float VirtualVoxel_DensityScale_Raytracing;   ; Offset:   76
;       float VirtualVoxel_DepthBiasScale_Shadow;     ; Offset:   80
;       float VirtualVoxel_DepthBiasScale_Transmittance;; Offset:   84
;       float VirtualVoxel_DepthBiasScale_Environment;; Offset:   88
;       float VirtualVoxel_SteppingScale_Shadow;      ; Offset:   92
;       float VirtualVoxel_SteppingScale_Transmittance;; Offset:   96
;       float VirtualVoxel_SteppingScale_Environment; ; Offset:  100
;       float VirtualVoxel_SteppingScale_Raytracing;  ; Offset:  104
;       float VirtualVoxel_HairCoveragePixelRadiusAtDepth1;; Offset:  108
;       float VirtualVoxel_Raytracing_ShadowOcclusionThreshold;; Offset:  112
;       float VirtualVoxel_Raytracing_SkyOcclusionThreshold;; Offset:  116
;       float PrePadding_VirtualVoxel_120;            ; Offset:  120
;       float PrePadding_VirtualVoxel_124;            ; Offset:  124
;       float3 VirtualVoxel_TranslatedWorldOffset;    ; Offset:  128
;       float PrePadding_VirtualVoxel_140;            ; Offset:  140
;       float3 VirtualVoxel_TranslatedWorldOffsetStereoCorrection;; Offset:  144
;       uint VirtualVoxel_AllocationFeedbackEnable;   ; Offset:  156
;       uint BindlessResource_VirtualVoxel_PageIndexBuffer;; Offset:  160
;       uint PrePadding_VirtualVoxel_164;             ; Offset:  164
;       uint BindlessResource_VirtualVoxel_PageIndexOccupancyBuffer;; Offset:  168
;       uint PrePadding_VirtualVoxel_172;             ; Offset:  172
;       uint BindlessResource_VirtualVoxel_PageIndexCoordBuffer;; Offset:  176
;       uint PrePadding_VirtualVoxel_180;             ; Offset:  180
;       uint BindlessResource_VirtualVoxel_NodeDescBuffer;; Offset:  184
;       uint PrePadding_VirtualVoxel_188;             ; Offset:  188
;       uint BindlessResource_VirtualVoxel_CurrGPUMinVoxelSize;; Offset:  192
;       uint PrePadding_VirtualVoxel_196;             ; Offset:  196
;       uint BindlessResource_VirtualVoxel_NextGPUMinVoxelSize;; Offset:  200
;       float PrePadding_VirtualVoxel_204;            ; Offset:  204
;       uint BindlessResource_VirtualVoxel_PageTexture;; Offset:  208
;   
;   } UniformBufferConstants_VirtualVoxel;            ; Offset:    0 Size:   212
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
; Resource bind info for VirtualVoxel_NodeDescBuffer
; {
;
;   struct struct.FPackedVirtualVoxelNodeDesc
;   {
;
;       float3 TranslatedWorldMinAABB;                ; Offset:    0
;       uint PackedPageIndexResolution;               ; Offset:   12
;       float3 TranslatedWorldMaxAABB;                ; Offset:   16
;       uint PageIndexOffset_VoxelWorldSize;          ; Offset:   28
;   
;   } $Element;                                       ; Offset:    0 Size:    32
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; _RootShaderParameters             cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_VirtualShadowMap   cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_ForwardLightData   cbuffer      NA          NA     CB3            cb3     1
; UniformBufferConstants_BlueNoise   cbuffer      NA          NA     CB4            cb4     1
; UniformBufferConstants_VirtualVoxel   cbuffer      NA          NA     CB5            cb5     1
; SceneTexturesStruct_PointClampSampler   sampler      NA          NA      S0             s0     1
; SceneTexturesStruct_SceneDepthTexture   texture     f32          2d      T0             t0     1
; SceneTexturesStruct_GBufferATexture   texture     f32          2d      T1             t1     1
; SceneTexturesStruct_GBufferBTexture   texture     f32          2d      T2             t2     1
; SceneTexturesStruct_GBufferDTexture   texture     f32          2d      T3             t3     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T4             t4     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T5             t5     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T6             t6     1
; ForwardLightData_ForwardLocalLightBuffer   texture     f32         buf      T7             t7     1
; ForwardLightData_NumCulledLightsGrid   texture     u32         buf      T8             t8     1
; ForwardLightData_CulledLightDataGrid   texture     u32         buf      T9             t9     1
; BlueNoise_ScalarTexture           texture     f32          2d     T10            t10     1
; VirtualVoxel_PageIndexBuffer      texture     u32         buf     T11            t11     1
; VirtualVoxel_NodeDescBuffer       texture  struct         r/o     T12            t12     1
; VirtualVoxel_PageTexture          texture     u32          3d     T13            t13     1
; HairStrands_HairOnlyDepthTexture   texture     f32          2d     T14            t14     1
; TileListData                      texture     u32         buf     T15            t15     1
; OutShadowMaskBits                     UAV     u32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Buffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>" = type { %struct.FPackedVirtualVoxelNodeDesc }
%struct.FPackedVirtualVoxelNodeDesc = type { <3 x float>, i32, <3 x float>, i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.RWTexture2D<vector<unsigned int, 4> >" = type { <4 x i32> }
%_RootShaderParameters = type { float, i32, i32, float, float, float, float, float, i32, <4 x i32>, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, i32, i32, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_VirtualShadowMap = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x i32>, <2 x i32>, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%hostlayout.UniformBufferConstants_ForwardLightData = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_BlueNoise = type { <3 x i32>, i32, <3 x i32>, i32, i32, i32, i32 }
%UniformBufferConstants_VirtualVoxel = type { <3 x i32>, float, <3 x i32>, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32 }
%struct.SamplerState = type { i32 }

define void @VirtualShadowMapProjection() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 2 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 2 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 13, i32 212 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 13, i32 44 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 13, i32 708 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 13, i32 116 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 368 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %31 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %32 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %33 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.i32 %33, 0
  %35 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %36 = extractvalue %dx.types.CBufRet.i32 %35, 0
  %37 = extractvalue %dx.types.CBufRet.i32 %35, 1
  %38 = extractvalue %dx.types.CBufRet.i32 %35, 2
  %39 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %27, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %40 = extractvalue %dx.types.CBufRet.i32 %39, 0
  %41 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %42 = extractvalue %dx.types.CBufRet.f32 %41, 0
  %43 = extractvalue %dx.types.CBufRet.f32 %41, 1
  %44 = extractvalue %dx.types.CBufRet.f32 %41, 2
  %45 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %46 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %45, i32 %31, i32 undef)  ; BufferLoad(srv,index,wot)
  %47 = extractvalue %dx.types.ResRet.i32 %46, 0
  %48 = lshr i32 %47, 16
  %49 = shl i32 %47, 3
  %50 = and i32 %49, 524280
  %51 = shl nuw nsw i32 %48, 3
  %52 = and i32 %32, 1431655765
  %53 = lshr i32 %52, 1
  %54 = or i32 %53, %52
  %55 = and i32 %54, 858993459
  %56 = lshr i32 %55, 2
  %57 = or i32 %56, %55
  %58 = and i32 %57, 252645135
  %59 = lshr i32 %58, 4
  %60 = or i32 %59, %58
  %61 = lshr i32 %60, 8
  %62 = and i32 %61, 65280
  %63 = and i32 %60, 255
  %64 = or i32 %62, %63
  %65 = lshr i32 %32, 1
  %66 = and i32 %65, 1431655765
  %67 = lshr i32 %66, 1
  %68 = or i32 %67, %66
  %69 = and i32 %68, 858993459
  %70 = lshr i32 %69, 2
  %71 = or i32 %70, %69
  %72 = and i32 %71, 252645135
  %73 = lshr i32 %72, 4
  %74 = or i32 %73, %72
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, 65280
  %77 = and i32 %74, 255
  %78 = or i32 %76, %77
  %79 = add nuw nsw i32 %64, %50
  %80 = add nuw nsw i32 %78, %51
  %81 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.i32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.i32 %81, 1
  %84 = add i32 %79, %82
  %85 = add i32 %80, %83
  %86 = extractvalue %dx.types.CBufRet.i32 %81, 2
  %87 = extractvalue %dx.types.CBufRet.i32 %81, 3
  %88 = icmp uge i32 %84, %86
  %89 = icmp uge i32 %85, %87
  %90 = or i1 %88, %89
  br i1 %90, label %3213, label %91

; <label>:91                                      ; preds = %0
  %92 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %93 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %92, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %94 = extractvalue %dx.types.ResRet.f32 %93, 0
  %95 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.i32 %95, 2
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %103

; <label>:98                                      ; preds = %91
  %99 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %100 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %99, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %101 = extractvalue %dx.types.ResRet.f32 %100, 0
  %102 = fcmp fast oeq float %101, 0.000000e+00
  br i1 %102, label %3213, label %103

; <label>:103                                     ; preds = %98, %91
  %104 = phi float [ %101, %98 ], [ %94, %91 ]
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 71)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = fmul fast float %106, %104
  %108 = extractvalue %dx.types.CBufRet.f32 %105, 1
  %109 = fadd fast float %107, %108
  %110 = extractvalue %dx.types.CBufRet.f32 %105, 2
  %111 = fmul fast float %110, %104
  %112 = extractvalue %dx.types.CBufRet.f32 %105, 3
  %113 = fsub fast float %111, %112
  %114 = fdiv fast float 1.000000e+00, %113
  %115 = fadd fast float %109, %114
  %116 = uitofp i32 %84 to float
  %117 = uitofp i32 %85 to float
  %118 = fadd fast float %116, 5.000000e-01
  %119 = fadd fast float %117, 5.000000e-01
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = extractvalue %dx.types.CBufRet.f32 %120, 1
  %123 = extractvalue %dx.types.CBufRet.f32 %120, 2
  %124 = extractvalue %dx.types.CBufRet.f32 %120, 3
  %125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %126 = extractvalue %dx.types.CBufRet.f32 %125, 0
  %127 = extractvalue %dx.types.CBufRet.f32 %125, 1
  %128 = extractvalue %dx.types.CBufRet.f32 %125, 2
  %129 = extractvalue %dx.types.CBufRet.f32 %125, 3
  %130 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %131 = extractvalue %dx.types.CBufRet.f32 %130, 0
  %132 = extractvalue %dx.types.CBufRet.f32 %130, 1
  %133 = extractvalue %dx.types.CBufRet.f32 %130, 2
  %134 = extractvalue %dx.types.CBufRet.f32 %130, 3
  %135 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %136 = extractvalue %dx.types.CBufRet.f32 %135, 0
  %137 = extractvalue %dx.types.CBufRet.f32 %135, 1
  %138 = extractvalue %dx.types.CBufRet.f32 %135, 2
  %139 = extractvalue %dx.types.CBufRet.f32 %135, 3
  %140 = fmul fast float %121, %118
  %141 = call float @dx.op.tertiary.f32(i32 46, float %119, float %126, float %140)  ; FMad(a,b,c)
  %142 = call float @dx.op.tertiary.f32(i32 46, float %104, float %131, float %141)  ; FMad(a,b,c)
  %143 = fadd fast float %142, %136
  %144 = fmul fast float %122, %118
  %145 = call float @dx.op.tertiary.f32(i32 46, float %119, float %127, float %144)  ; FMad(a,b,c)
  %146 = call float @dx.op.tertiary.f32(i32 46, float %104, float %132, float %145)  ; FMad(a,b,c)
  %147 = fadd fast float %146, %137
  %148 = fmul fast float %123, %118
  %149 = call float @dx.op.tertiary.f32(i32 46, float %119, float %128, float %148)  ; FMad(a,b,c)
  %150 = call float @dx.op.tertiary.f32(i32 46, float %104, float %133, float %149)  ; FMad(a,b,c)
  %151 = fadd fast float %150, %138
  %152 = fmul fast float %124, %118
  %153 = call float @dx.op.tertiary.f32(i32 46, float %119, float %129, float %152)  ; FMad(a,b,c)
  %154 = call float @dx.op.tertiary.f32(i32 46, float %104, float %134, float %153)  ; FMad(a,b,c)
  %155 = fadd fast float %154, %139
  %156 = fdiv fast float %143, %155
  %157 = fdiv fast float %147, %155
  %158 = fdiv fast float %151, %155
  %159 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %160 = extractvalue %dx.types.CBufRet.f32 %159, 0
  %161 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %162 = extractvalue %dx.types.CBufRet.f32 %161, 1
  %163 = fmul fast float %160, %115
  %164 = fmul fast float %163, %162
  %165 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.i32 %165, 0
  %167 = uitofp i32 %166 to float
  %168 = fmul fast float %167, 0x4040551EC0000000
  %169 = fmul fast float %167, 0x4027A147A0000000
  %170 = fadd fast float %168, %118
  %171 = fadd fast float %169, %119
  %172 = call float @dx.op.dot2.f32(i32 54, float %170, float %171, float 0x3FB12E2860000000, float 0x3F77E8B200000000)  ; Dot2(ax,ay,bx,by)
  %173 = call float @dx.op.unary.f32(i32 22, float %172)  ; Frc(value)
  %174 = fmul fast float %173, 0x404A7DD040000000
  %175 = call float @dx.op.unary.f32(i32 22, float %174)  ; Frc(value)
  %176 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %177 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %176, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %178 = extractvalue %dx.types.ResRet.f32 %177, 0
  %179 = extractvalue %dx.types.ResRet.f32 %177, 1
  %180 = extractvalue %dx.types.ResRet.f32 %177, 2
  %181 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %182 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %181, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %183 = extractvalue %dx.types.ResRet.f32 %182, 3
  %184 = fmul fast float %183, 2.550000e+02
  %185 = fadd fast float %184, 5.000000e-01
  %186 = fptoui float %185 to i32
  %187 = and i32 %186, 15
  %188 = fmul fast float %178, 2.000000e+00
  %189 = fmul fast float %179, 2.000000e+00
  %190 = fmul fast float %180, 2.000000e+00
  %191 = fadd fast float %188, -1.000000e+00
  %192 = fadd fast float %189, -1.000000e+00
  %193 = fadd fast float %190, -1.000000e+00
  %194 = call float @dx.op.dot3.f32(i32 55, float %191, float %192, float %193, float %191, float %192, float %193)  ; Dot3(ax,ay,az,bx,by,bz)
  %195 = call float @dx.op.unary.f32(i32 25, float %194)  ; Rsqrt(value)
  %196 = fmul fast float %195, %191
  %197 = fmul fast float %195, %192
  %198 = fmul fast float %195, %193
  %199 = icmp ne i32 %187, 0
  %200 = icmp eq i32 %187, 7
  %201 = and i32 %186, 14
  %202 = icmp eq i32 %201, 2
  %203 = add nsw i32 %187, -5
  %204 = icmp ult i32 %203, 3
  %205 = or i1 %202, %204
  %206 = icmp eq i32 %187, 9
  %207 = or i1 %206, %205
  %208 = xor i1 %97, true
  %209 = icmp eq i32 %187, 6
  %210 = or i1 %202, %209
  %211 = and i1 %210, %208
  br i1 %211, label %212, label %223

; <label>:212                                     ; preds = %103
  %213 = icmp eq i32 %201, 8
  %214 = and i32 %186, 12
  %215 = icmp eq i32 %214, 4
  %216 = or i1 %215, %202
  %217 = or i1 %213, %216
  %218 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %219 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %218, i32 0, i32 %84, i32 %85, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %220 = extractvalue %dx.types.ResRet.f32 %219, 3
  %221 = select i1 %217, float %220, float 0.000000e+00
  %222 = call float @dx.op.binary.f32(i32 36, float %221, float 0x3FEFAE1480000000)  ; FMin(a,b)
  br label %223

; <label>:223                                     ; preds = %212, %103
  %224 = phi float [ 1.000000e+00, %103 ], [ %222, %212 ]
  %225 = fmul fast float %115, %42
  %226 = fadd fast float %225, %43
  %227 = call float @dx.op.unary.f32(i32 23, float %226)  ; Log(value)
  %228 = fmul fast float %227, %44
  %229 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %228)  ; FMax(a,b)
  %230 = fptoui float %229 to i32
  %231 = add nsw i32 %38, -1
  %232 = call i32 @dx.op.binary.i32(i32 40, i32 %230, i32 %231)  ; UMin(a,b)
  %233 = and i32 %40, 31
  %234 = lshr i32 %79, %233
  %235 = lshr i32 %80, %233
  %236 = mul i32 %232, %37
  %237 = add i32 %236, %235
  %238 = mul i32 %237, %36
  %239 = add i32 %238, %234
  %240 = shl i32 %239, 1
  %241 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %242 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %241, i32 %240, i32 undef)  ; BufferLoad(srv,index,wot)
  %243 = extractvalue %dx.types.ResRet.i32 %242, 0
  %244 = call i32 @dx.op.binary.i32(i32 40, i32 %243, i32 %34)  ; UMin(a,b)
  %245 = or i32 %240, 1
  %246 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %241, i32 %245, i32 undef)  ; BufferLoad(srv,index,wot)
  %247 = extractvalue %dx.types.ResRet.i32 %246, 0
  %248 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %249 = extractvalue %dx.types.CBufRet.i32 %248, 3
  %250 = call i32 @dx.op.binary.i32(i32 40, i32 %249, i32 %244)  ; UMin(a,b)
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %3203, label %252

; <label>:252                                     ; preds = %223
  br label %253

; <label>:253                                     ; preds = %3195, %252
  %254 = phi i32 [ %3196, %3195 ], [ -1, %252 ]
  %255 = phi i32 [ %3197, %3195 ], [ -1, %252 ]
  %256 = phi i32 [ %3198, %3195 ], [ -1, %252 ]
  %257 = phi i32 [ %3199, %3195 ], [ -1, %252 ]
  %258 = phi i32 [ %3200, %3195 ], [ 0, %252 ]
  %259 = add i32 %258, %247
  %260 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %261 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %260, i32 %259, i32 undef)  ; BufferLoad(srv,index,wot)
  %262 = extractvalue %dx.types.ResRet.i32 %261, 0
  %263 = mul i32 %262, 6
  %264 = add i32 %263, 5
  %265 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 10, i32 1033 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<4xF32>
  %266 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %265, i32 %264, i32 undef)  ; BufferLoad(srv,index,wot)
  %267 = extractvalue %dx.types.ResRet.f32 %266, 2
  %268 = add i32 %263, 3
  %269 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %265, i32 %268, i32 undef)  ; BufferLoad(srv,index,wot)
  %270 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %265, i32 %263, i32 undef)  ; BufferLoad(srv,index,wot)
  %271 = extractvalue %dx.types.ResRet.f32 %270, 0
  %272 = extractvalue %dx.types.ResRet.f32 %270, 1
  %273 = extractvalue %dx.types.ResRet.f32 %270, 2
  %274 = fptosi float %267 to i32
  %275 = icmp eq i32 %274, -1
  br i1 %275, label %3195, label %276

; <label>:276                                     ; preds = %253
  %277 = extractvalue %dx.types.ResRet.f32 %270, 3
  %278 = extractvalue %dx.types.ResRet.f32 %269, 2
  %279 = extractvalue %dx.types.ResRet.f32 %269, 0
  %280 = bitcast float %279 to i32
  %281 = and i32 %280, 65535
  %282 = call float @dx.op.legacyF16ToF32(i32 131, i32 %281)  ; LegacyF16ToF32(value)
  %283 = bitcast float %278 to i32
  %284 = and i32 %283, 65535
  %285 = call float @dx.op.legacyF16ToF32(i32 131, i32 %284)  ; LegacyF16ToF32(value)
  %286 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %287 = extractvalue %dx.types.CBufRet.i32 %286, 2
  %288 = icmp eq i32 %287, 1
  %289 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %290 = extractvalue %dx.types.CBufRet.f32 %289, 0
  %291 = extractvalue %dx.types.CBufRet.f32 %289, 1
  %292 = extractvalue %dx.types.CBufRet.f32 %289, 2
  %293 = fsub fast float %156, %290
  %294 = fsub fast float %157, %291
  %295 = fsub fast float %158, %292
  %296 = fmul fast float %293, %293
  %297 = fmul fast float %294, %294
  %298 = fadd fast float %296, %297
  %299 = fmul fast float %295, %295
  %300 = fadd fast float %298, %299
  %301 = call float @dx.op.unary.f32(i32 24, float %300)  ; Sqrt(value)
  %302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %303 = extractvalue %dx.types.CBufRet.f32 %302, 0
  %304 = fmul fast float %303, %301
  %305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %306 = extractvalue %dx.types.CBufRet.f32 %305, 0
  %307 = fdiv fast float %304, %306
  %308 = call float @dx.op.binary.f32(i32 35, float 0x3F947AE140000000, float %307)  ; FMax(a,b)
  %309 = fsub fast float %271, %156
  %310 = fsub fast float %272, %157
  %311 = fsub fast float %273, %158
  %312 = call float @dx.op.dot3.f32(i32 55, float %309, float %310, float %311, float %309, float %310, float %311)  ; Dot3(ax,ay,az,bx,by,bz)
  %313 = call float @dx.op.unary.f32(i32 25, float %312)  ; Rsqrt(value)
  %314 = fmul fast float %313, %309
  %315 = fmul fast float %313, %310
  %316 = fmul fast float %313, %311
  %317 = fcmp fast oge float %313, %277
  %318 = or i1 %199, %288
  %319 = and i1 %318, %317
  br i1 %319, label %320, label %3129

; <label>:320                                     ; preds = %276
  %321 = extractvalue %dx.types.CBufRet.i32 %286, 3
  %322 = icmp eq i32 %321, 0
  %323 = or i1 %288, %322
  %324 = or i1 %207, %323
  %325 = xor i1 %324, true
  %326 = or i1 %200, %288
  %327 = select i1 %326, float %314, float %196
  %328 = select i1 %326, float %315, float %197
  %329 = select i1 %326, float %316, float %198
  %330 = fmul fast float %327, %308
  %331 = fmul fast float %328, %308
  %332 = fmul fast float %329, %308
  %333 = fadd fast float %330, %156
  %334 = fadd fast float %331, %157
  %335 = fadd fast float %332, %158
  %336 = xor i1 %288, true
  %337 = fcmp fast ogt float %164, 0.000000e+00
  %338 = and i1 %337, %336
  br i1 %338, label %339, label %477

; <label>:339                                     ; preds = %320
  %340 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %341 = extractvalue %dx.types.CBufRet.f32 %340, 0
  %342 = extractvalue %dx.types.CBufRet.f32 %340, 1
  %343 = extractvalue %dx.types.CBufRet.f32 %340, 2
  %344 = extractvalue %dx.types.CBufRet.f32 %340, 3
  %345 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %346 = extractvalue %dx.types.CBufRet.f32 %345, 0
  %347 = extractvalue %dx.types.CBufRet.f32 %345, 1
  %348 = extractvalue %dx.types.CBufRet.f32 %345, 2
  %349 = extractvalue %dx.types.CBufRet.f32 %345, 3
  %350 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %351 = extractvalue %dx.types.CBufRet.f32 %350, 0
  %352 = extractvalue %dx.types.CBufRet.f32 %350, 1
  %353 = extractvalue %dx.types.CBufRet.f32 %350, 2
  %354 = extractvalue %dx.types.CBufRet.f32 %350, 3
  %355 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %356 = extractvalue %dx.types.CBufRet.f32 %355, 0
  %357 = extractvalue %dx.types.CBufRet.f32 %355, 1
  %358 = extractvalue %dx.types.CBufRet.f32 %355, 2
  %359 = extractvalue %dx.types.CBufRet.f32 %355, 3
  %360 = fmul fast float %341, %333
  %361 = call float @dx.op.tertiary.f32(i32 46, float %334, float %346, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %335, float %351, float %361)  ; FMad(a,b,c)
  %363 = fadd fast float %362, %356
  %364 = fmul fast float %342, %333
  %365 = call float @dx.op.tertiary.f32(i32 46, float %334, float %347, float %364)  ; FMad(a,b,c)
  %366 = call float @dx.op.tertiary.f32(i32 46, float %335, float %352, float %365)  ; FMad(a,b,c)
  %367 = fadd fast float %366, %357
  %368 = fmul fast float %343, %333
  %369 = call float @dx.op.tertiary.f32(i32 46, float %334, float %348, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %335, float %353, float %369)  ; FMad(a,b,c)
  %371 = fadd fast float %370, %358
  %372 = fmul fast float %344, %333
  %373 = call float @dx.op.tertiary.f32(i32 46, float %334, float %349, float %372)  ; FMad(a,b,c)
  %374 = call float @dx.op.tertiary.f32(i32 46, float %335, float %354, float %373)  ; FMad(a,b,c)
  %375 = fadd fast float %374, %359
  %376 = fmul fast float %314, %164
  %377 = fmul fast float %315, %164
  %378 = fmul fast float %316, %164
  %379 = fmul fast float %341, %376
  %380 = call float @dx.op.tertiary.f32(i32 46, float %377, float %346, float %379)  ; FMad(a,b,c)
  %381 = call float @dx.op.tertiary.f32(i32 46, float %378, float %351, float %380)  ; FMad(a,b,c)
  %382 = fmul fast float %342, %376
  %383 = call float @dx.op.tertiary.f32(i32 46, float %377, float %347, float %382)  ; FMad(a,b,c)
  %384 = call float @dx.op.tertiary.f32(i32 46, float %378, float %352, float %383)  ; FMad(a,b,c)
  %385 = fmul fast float %343, %376
  %386 = call float @dx.op.tertiary.f32(i32 46, float %377, float %348, float %385)  ; FMad(a,b,c)
  %387 = call float @dx.op.tertiary.f32(i32 46, float %378, float %353, float %386)  ; FMad(a,b,c)
  %388 = fmul fast float %344, %376
  %389 = call float @dx.op.tertiary.f32(i32 46, float %377, float %349, float %388)  ; FMad(a,b,c)
  %390 = call float @dx.op.tertiary.f32(i32 46, float %378, float %354, float %389)  ; FMad(a,b,c)
  %391 = fadd fast float %381, %363
  %392 = fadd fast float %384, %367
  %393 = fadd fast float %387, %371
  %394 = fadd fast float %390, %375
  %395 = fdiv fast float %363, %375
  %396 = fdiv fast float %367, %375
  %397 = fdiv fast float %371, %375
  %398 = fdiv fast float %391, %394
  %399 = fdiv fast float %392, %394
  %400 = fdiv fast float %393, %394
  %401 = fsub fast float %398, %395
  %402 = fsub fast float %399, %396
  %403 = fsub fast float %400, %397
  %404 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %405 = extractvalue %dx.types.CBufRet.f32 %404, 0
  %406 = extractvalue %dx.types.CBufRet.f32 %404, 1
  %407 = fmul fast float %405, %395
  %408 = fmul fast float %406, %396
  %409 = extractvalue %dx.types.CBufRet.f32 %404, 2
  %410 = extractvalue %dx.types.CBufRet.f32 %404, 3
  %411 = fadd fast float %407, %410
  %412 = fadd fast float %408, %409
  %413 = fmul fast float %405, %401
  %414 = fmul fast float %406, %402
  %415 = fadd fast float %175, -5.000000e-01
  %416 = fmul fast float %415, 2.500000e-01
  %417 = fadd fast float %416, 2.500000e-01
  %418 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %419 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %420 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %418, %dx.types.Handle %419, float %411, float %412, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %421 = extractvalue %dx.types.ResRet.f32 %420, 0
  %422 = fmul fast float %413, %417
  %423 = fmul fast float %414, %417
  %424 = fmul fast float %403, %417
  %425 = fadd fast float %422, %411
  %426 = fadd fast float %423, %412
  %427 = fadd fast float %424, %397
  %428 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %418, %dx.types.Handle %419, float %425, float %426, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %429 = extractvalue %dx.types.ResRet.f32 %428, 0
  %430 = fcmp fast une float %429, %421
  %431 = fcmp fast olt float %427, %429
  %432 = and i1 %430, %431
  br i1 %432, label %472, label %433

; <label>:433                                     ; preds = %339
  %434 = fadd fast float %416, 5.000000e-01
  %435 = fmul fast float %413, %434
  %436 = fmul fast float %414, %434
  %437 = fmul fast float %403, %434
  %438 = fadd fast float %435, %411
  %439 = fadd fast float %436, %412
  %440 = fadd fast float %437, %397
  %441 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %418, %dx.types.Handle %419, float %438, float %439, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %442 = extractvalue %dx.types.ResRet.f32 %441, 0
  %443 = fcmp fast une float %442, %421
  %444 = fcmp fast olt float %440, %442
  %445 = and i1 %443, %444
  br i1 %445, label %472, label %446

; <label>:446                                     ; preds = %433
  %447 = fadd fast float %416, 7.500000e-01
  %448 = fmul fast float %413, %447
  %449 = fmul fast float %414, %447
  %450 = fmul fast float %403, %447
  %451 = fadd fast float %448, %411
  %452 = fadd fast float %449, %412
  %453 = fadd fast float %450, %397
  %454 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %418, %dx.types.Handle %419, float %451, float %452, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %455 = extractvalue %dx.types.ResRet.f32 %454, 0
  %456 = fcmp fast une float %455, %421
  %457 = fcmp fast olt float %453, %455
  %458 = and i1 %456, %457
  br i1 %458, label %472, label %459

; <label>:459                                     ; preds = %446
  %460 = fadd fast float %416, 1.000000e+00
  %461 = fmul fast float %413, %460
  %462 = fmul fast float %414, %460
  %463 = fmul fast float %403, %460
  %464 = fadd fast float %461, %411
  %465 = fadd fast float %462, %412
  %466 = fadd fast float %463, %397
  %467 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %418, %dx.types.Handle %419, float %464, float %465, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %468 = extractvalue %dx.types.ResRet.f32 %467, 0
  %469 = fcmp fast une float %468, %421
  %470 = fcmp fast olt float %466, %468
  %471 = and i1 %469, %470
  br i1 %471, label %472, label %477

; <label>:472                                     ; preds = %459, %446, %433, %339
  %473 = phi float [ %417, %339 ], [ %434, %433 ], [ %447, %446 ], [ %460, %459 ]
  %474 = fadd fast float %473, -3.750000e-01
  %475 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %474)  ; FMax(a,b)
  %476 = fmul fast float %475, %164
  br label %477

; <label>:477                                     ; preds = %472, %459, %320
  %478 = phi float [ %164, %320 ], [ %476, %472 ], [ %164, %459 ]
  %479 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %480 = extractvalue %dx.types.CBufRet.i32 %479, 1
  %481 = icmp sgt i32 %480, 0
  br i1 %481, label %482, label %1906

; <label>:482                                     ; preds = %477
  %483 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %484 = extractvalue %dx.types.CBufRet.i32 %483, 0
  %485 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %486 = extractvalue %dx.types.CBufRet.f32 %485, 3
  %487 = extractvalue %dx.types.CBufRet.f32 %485, 1
  %488 = extractvalue %dx.types.CBufRet.f32 %485, 0
  %489 = extractvalue %dx.types.CBufRet.i32 %479, 2
  %490 = fcmp fast ogt float %282, -2.000000e+00
  %491 = fsub fast float %271, %333
  %492 = fsub fast float %272, %334
  %493 = fsub fast float %273, %335
  %494 = call float @dx.op.dot3.f32(i32 55, float %491, float %492, float %493, float %491, float %492, float %493)  ; Dot3(ax,ay,az,bx,by,bz)
  %495 = fadd fast float %494, 1.000000e+00
  %496 = fdiv fast float 1.000000e+00, %495
  %497 = call float @dx.op.unary.f32(i32 25, float %494)  ; Rsqrt(value)
  %498 = fmul fast float %497, %491
  %499 = fmul fast float %497, %492
  %500 = fmul fast float %497, %493
  %501 = fmul fast float %497, %285
  %502 = fmul fast float %285, %285
  %503 = fmul fast float %502, %496
  %504 = call float @dx.op.unary.f32(i32 7, float %503)  ; Saturate(value)
  %505 = call float @dx.op.unary.f32(i32 24, float %504)  ; Sqrt(value)
  %506 = call float @dx.op.dot3.f32(i32 55, float %327, float %328, float %329, float %498, float %499, float %500)  ; Dot3(ax,ay,az,bx,by,bz)
  %507 = fsub fast float -0.000000e+00, %505
  %508 = fcmp fast olt float %506, %507
  %509 = and i1 %508, %325
  br i1 %509, label %2577, label %510

; <label>:510                                     ; preds = %482
  %511 = and i32 %84, 65535
  %512 = shl nuw nsw i32 %511, 8
  %513 = or i32 %512, %511
  %514 = and i32 %513, 16711935
  %515 = shl nuw nsw i32 %514, 4
  %516 = or i32 %515, %514
  %517 = and i32 %516, 252645135
  %518 = shl nuw nsw i32 %517, 2
  %519 = or i32 %518, %517
  %520 = and i32 %519, 858993459
  %521 = shl nuw nsw i32 %520, 1
  %522 = or i32 %521, %520
  %523 = and i32 %522, 1431655765
  %524 = and i32 %85, 65535
  %525 = shl nuw nsw i32 %524, 8
  %526 = or i32 %525, %524
  %527 = and i32 %526, 16711935
  %528 = shl nuw nsw i32 %527, 4
  %529 = or i32 %528, %527
  %530 = and i32 %529, 252645135
  %531 = shl nuw nsw i32 %530, 2
  %532 = or i32 %531, %530
  %533 = and i32 %532, 858993459
  %534 = shl nuw nsw i32 %533, 1
  %535 = or i32 %534, %533
  %536 = shl nuw i32 %535, 1
  %537 = and i32 %536, -1431655766
  %538 = or i32 %537, %523
  br i1 %490, label %563, label %539

; <label>:539                                     ; preds = %510
  %540 = fsub fast float -0.000000e+00, %491
  %541 = fsub fast float -0.000000e+00, %492
  %542 = fsub fast float -0.000000e+00, %493
  %543 = call float @dx.op.unary.f32(i32 6, float %540)  ; FAbs(value)
  %544 = call float @dx.op.unary.f32(i32 6, float %541)  ; FAbs(value)
  %545 = fcmp fast ult float %543, %544
  %546 = call float @dx.op.unary.f32(i32 6, float %542)  ; FAbs(value)
  %547 = fcmp fast ult float %543, %546
  %548 = or i1 %545, %547
  br i1 %548, label %552, label %549

; <label>:549                                     ; preds = %539
  %550 = fcmp uge float %491, -0.000000e+00
  %551 = zext i1 %550 to i32
  br label %560

; <label>:552                                     ; preds = %539
  %553 = fcmp fast ogt float %544, %546
  br i1 %553, label %554, label %557

; <label>:554                                     ; preds = %552
  %555 = fcmp olt float %492, -0.000000e+00
  %556 = select i1 %555, i32 2, i32 3
  br label %560

; <label>:557                                     ; preds = %552
  %558 = fcmp olt float %493, -0.000000e+00
  %559 = select i1 %558, i32 4, i32 5
  br label %560

; <label>:560                                     ; preds = %557, %554, %549
  %561 = phi i32 [ %551, %549 ], [ %556, %554 ], [ %559, %557 ]
  %562 = add i32 %561, %274
  br label %563

; <label>:563                                     ; preds = %560, %510
  %564 = phi i32 [ %562, %560 ], [ %274, %510 ]
  %565 = mul i32 %564, 336
  %566 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %567 = add i32 %565, 112
  %568 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %567, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %569 = extractvalue %dx.types.ResRet.i32 %568, 2
  %570 = bitcast i32 %569 to float
  %571 = add i32 %565, 128
  %572 = add i32 %565, 144
  %573 = add i32 %565, 160
  %574 = add i32 %565, 176
  %575 = add i32 %565, 192
  %576 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %575, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %577 = extractvalue %dx.types.ResRet.i32 %576, 0
  %578 = extractvalue %dx.types.ResRet.i32 %576, 1
  %579 = extractvalue %dx.types.ResRet.i32 %576, 2
  %580 = bitcast i32 %577 to float
  %581 = bitcast i32 %578 to float
  %582 = bitcast i32 %579 to float
  %583 = add i32 %565, 208
  %584 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %583, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %585 = extractvalue %dx.types.ResRet.i32 %584, 0
  %586 = extractvalue %dx.types.ResRet.i32 %584, 1
  %587 = extractvalue %dx.types.ResRet.i32 %584, 2
  %588 = bitcast i32 %585 to float
  %589 = bitcast i32 %586 to float
  %590 = bitcast i32 %587 to float
  %591 = add i32 %565, 224
  %592 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %591, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %593 = extractvalue %dx.types.ResRet.i32 %592, 0
  %594 = extractvalue %dx.types.ResRet.i32 %592, 1
  %595 = extractvalue %dx.types.ResRet.i32 %592, 2
  %596 = bitcast i32 %593 to float
  %597 = bitcast i32 %594 to float
  %598 = bitcast i32 %595 to float
  %599 = add i32 %565, 240
  %600 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %599, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %601 = extractvalue %dx.types.ResRet.i32 %600, 0
  %602 = extractvalue %dx.types.ResRet.i32 %600, 1
  %603 = extractvalue %dx.types.ResRet.i32 %600, 2
  %604 = bitcast i32 %601 to float
  %605 = bitcast i32 %602 to float
  %606 = bitcast i32 %603 to float
  %607 = add i32 %565, 256
  %608 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %607, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %609 = extractvalue %dx.types.ResRet.i32 %608, 0
  %610 = extractvalue %dx.types.ResRet.i32 %608, 1
  %611 = extractvalue %dx.types.ResRet.i32 %608, 2
  %612 = bitcast i32 %609 to float
  %613 = bitcast i32 %610 to float
  %614 = bitcast i32 %611 to float
  %615 = add i32 %565, 272
  %616 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %615, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %617 = extractvalue %dx.types.ResRet.i32 %616, 0
  %618 = extractvalue %dx.types.ResRet.i32 %616, 1
  %619 = extractvalue %dx.types.ResRet.i32 %616, 2
  %620 = bitcast i32 %617 to float
  %621 = bitcast i32 %618 to float
  %622 = bitcast i32 %619 to float
  %623 = add i32 %565, 300
  %624 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %566, i32 %623, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %625 = extractvalue %dx.types.ResRet.i32 %624, 0
  %626 = bitcast i32 %625 to float
  %627 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %628 = extractvalue %dx.types.CBufRet.f32 %627, 0
  %629 = extractvalue %dx.types.CBufRet.f32 %627, 1
  %630 = extractvalue %dx.types.CBufRet.f32 %627, 2
  %631 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %632 = extractvalue %dx.types.CBufRet.f32 %631, 0
  %633 = extractvalue %dx.types.CBufRet.f32 %631, 1
  %634 = extractvalue %dx.types.CBufRet.f32 %631, 2
  %635 = fadd fast float %628, %612
  %636 = fadd fast float %629, %613
  %637 = fadd fast float %630, %614
  %638 = fmul fast float %635, 2.097152e+06
  %639 = fmul fast float %636, 2.097152e+06
  %640 = fmul fast float %637, 2.097152e+06
  %641 = fadd fast float %620, %333
  %642 = fsub fast float %641, %632
  %643 = fadd fast float %642, %638
  %644 = fadd fast float %621, %334
  %645 = fsub fast float %644, %633
  %646 = fadd fast float %645, %639
  %647 = fadd fast float %622, %335
  %648 = fsub fast float %647, %634
  %649 = fadd fast float %648, %640
  %650 = call float @dx.op.dot3.f32(i32 55, float %327, float %328, float %329, float %643, float %646, float %649)  ; Dot3(ax,ay,az,bx,by,bz)
  %651 = fsub fast float -0.000000e+00, %650
  %652 = fmul fast float %580, %327
  %653 = call float @dx.op.tertiary.f32(i32 46, float %328, float %588, float %652)  ; FMad(a,b,c)
  %654 = call float @dx.op.tertiary.f32(i32 46, float %329, float %596, float %653)  ; FMad(a,b,c)
  %655 = call float @dx.op.tertiary.f32(i32 46, float %651, float %604, float %654)  ; FMad(a,b,c)
  %656 = fmul fast float %581, %327
  %657 = call float @dx.op.tertiary.f32(i32 46, float %328, float %589, float %656)  ; FMad(a,b,c)
  %658 = call float @dx.op.tertiary.f32(i32 46, float %329, float %597, float %657)  ; FMad(a,b,c)
  %659 = call float @dx.op.tertiary.f32(i32 46, float %651, float %605, float %658)  ; FMad(a,b,c)
  %660 = fmul fast float %582, %327
  %661 = call float @dx.op.tertiary.f32(i32 46, float %328, float %590, float %660)  ; FMad(a,b,c)
  %662 = call float @dx.op.tertiary.f32(i32 46, float %329, float %598, float %661)  ; FMad(a,b,c)
  %663 = call float @dx.op.tertiary.f32(i32 46, float %651, float %606, float %662)  ; FMad(a,b,c)
  %664 = fsub fast float -0.000000e+00, %655
  %665 = fsub fast float -0.000000e+00, %659
  %666 = fdiv fast float %664, %663
  %667 = fdiv fast float %665, %663
  %668 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %669 = extractvalue %dx.types.CBufRet.f32 %668, 0
  %670 = extractvalue %dx.types.CBufRet.f32 %668, 1
  %671 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %672 = extractvalue %dx.types.CBufRet.f32 %671, 1
  %673 = fmul fast float %306, %669
  %674 = fmul fast float %672, %670
  %675 = fdiv fast float 1.000000e+00, %673
  %676 = fdiv fast float 1.000000e+00, %674
  %677 = call float @dx.op.binary.f32(i32 36, float %675, float %676)  ; FMin(a,b)
  %678 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %679 = extractvalue %dx.types.CBufRet.f32 %678, 3
  %680 = fmul fast float %679, %115
  %681 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %682 = extractvalue %dx.types.CBufRet.f32 %681, 3
  %683 = fadd fast float %680, %682
  %684 = call float @dx.op.unary.f32(i32 21, float %626)  ; Exp(value)
  %685 = fmul fast float %684, %677
  %686 = fmul fast float %685, %683
  %687 = call float @dx.op.binary.f32(i32 35, float 0x3FB99999A0000000, float %686)  ; FMax(a,b)
  %688 = fdiv fast float %570, %494
  %689 = call float @dx.op.unary.f32(i32 6, float %688)  ; FAbs(value)
  %690 = fmul fast float %687, %487
  %691 = fmul fast float %690, %486
  %692 = fmul fast float %687, %486
  %693 = fmul fast float %692, %689
  %694 = fcmp fast oge float %500, 0.000000e+00
  %695 = select i1 %694, float 1.000000e+00, float -1.000000e+00
  %696 = fadd fast float %695, %500
  %697 = fdiv fast float 1.000000e+00, %696
  %698 = fsub fast float -0.000000e+00, %697
  %699 = fmul fast float %498, %499
  %700 = fmul fast float %699, %698
  %701 = fmul fast float %498, %498
  %702 = fmul fast float %701, %695
  %703 = fmul fast float %702, %698
  %704 = fadd fast float %703, 1.000000e+00
  %705 = fmul fast float %700, %695
  %706 = fmul fast float %498, %695
  %707 = fsub fast float -0.000000e+00, %706
  %708 = fmul fast float %499, %499
  %709 = fmul fast float %708, %698
  %710 = fadd fast float %709, %695
  %711 = fsub fast float -0.000000e+00, %499
  %712 = fmul fast float %704, %327
  %713 = call float @dx.op.tertiary.f32(i32 46, float %705, float %328, float %712)  ; FMad(a,b,c)
  %714 = call float @dx.op.tertiary.f32(i32 46, float %707, float %329, float %713)  ; FMad(a,b,c)
  %715 = fmul fast float %700, %327
  %716 = call float @dx.op.tertiary.f32(i32 46, float %710, float %328, float %715)  ; FMad(a,b,c)
  %717 = call float @dx.op.tertiary.f32(i32 46, float %711, float %329, float %716)  ; FMad(a,b,c)
  %718 = fmul fast float %498, %327
  %719 = call float @dx.op.tertiary.f32(i32 46, float %499, float %328, float %718)  ; FMad(a,b,c)
  %720 = call float @dx.op.tertiary.f32(i32 46, float %500, float %329, float %719)  ; FMad(a,b,c)
  %721 = fsub fast float -0.000000e+00, %714
  %722 = fsub fast float -0.000000e+00, %717
  %723 = fdiv fast float %721, %720
  %724 = fdiv fast float %722, %720
  %725 = fcmp fast oeq float %501, 0.000000e+00
  %726 = select i1 %725, i32 0, i32 %489
  br label %727

; <label>:727                                     ; preds = %1884, %563
  %728 = phi float [ %1892, %1884 ], [ %175, %563 ]
  %729 = phi i32 [ %1893, %1884 ], [ 0, %563 ]
  %730 = phi i32 [ %1872, %1884 ], [ 0, %563 ]
  %731 = phi float [ %1873, %1884 ], [ 0.000000e+00, %563 ]
  %732 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %733 = extractvalue %dx.types.CBufRet.i32 %732, 1
  %734 = shl i32 %733, 16
  %735 = add i32 %734, %538
  %736 = mul i32 %735, %480
  %737 = add i32 %736, %729
  %738 = call i32 @dx.op.unary.i32(i32 30, i32 %737)  ; Bfrev(value)
  %739 = add i32 %738, 1216234700
  %740 = mul i32 %739, -1676577210
  %741 = xor i32 %740, %739
  %742 = mul i32 %741, -529506958
  %743 = xor i32 %742, %741
  %744 = call i32 @dx.op.unary.i32(i32 30, i32 %743)  ; Bfrev(value)
  %745 = and i32 %744, 255
  %746 = and i32 %744, 1
  %747 = lshr i32 %744, 1
  %748 = and i32 %747, 1
  %749 = sub nsw i32 0, %748
  %750 = and i32 %749, 3
  %751 = xor i32 %750, %746
  %752 = lshr i32 %744, 2
  %753 = and i32 %752, 1
  %754 = sub nsw i32 0, %753
  %755 = and i32 %754, 5
  %756 = xor i32 %751, %755
  %757 = and i32 %754, 6
  %758 = shl nuw nsw i32 %753, 2
  %759 = xor i32 %751, %757
  %760 = or i32 %751, %758
  %761 = lshr i32 %744, 3
  %762 = and i32 %761, 1
  %763 = sub nsw i32 0, %762
  %764 = and i32 %763, 15
  %765 = xor i32 %756, %764
  %766 = and i32 %763, 9
  %767 = and i32 %763, 10
  %768 = xor i32 %759, %766
  %769 = lshr i32 %744, 4
  %770 = and i32 %769, 1
  %771 = sub nsw i32 0, %770
  %772 = and i32 %771, 17
  %773 = xor i32 %765, %772
  %774 = and i32 %771, 23
  %775 = and i32 %771, 31
  %776 = xor i32 %768, %774
  %777 = lshr i32 %744, 5
  %778 = and i32 %777, 1
  %779 = sub nsw i32 0, %778
  %780 = and i32 %779, 51
  %781 = xor i32 %773, %780
  %782 = and i32 %779, 58
  %783 = and i32 %779, 46
  %784 = xor i32 %776, %782
  %785 = lshr i32 %744, 6
  %786 = and i32 %785, 1
  %787 = sub nsw i32 0, %786
  %788 = and i32 %787, 85
  %789 = xor i32 %781, %788
  %790 = and i32 %787, 113
  %791 = and i32 %787, 69
  %792 = xor i32 %784, %790
  %793 = lshr i32 %744, 7
  %794 = and i32 %793, 1
  %795 = sub nsw i32 0, %794
  %796 = and i32 %795, 255
  %797 = xor i32 %789, %796
  %798 = and i32 %795, 163
  %799 = and i32 %795, 201
  %800 = xor i32 %792, %798
  %801 = xor i32 %775, %767
  %802 = xor i32 %801, %783
  %803 = xor i32 %802, %791
  %804 = xor i32 %803, %799
  %805 = xor i32 %804, %760
  %806 = add nsw i32 %745, -1862497895
  %807 = mul i32 %806, -1676577210
  %808 = xor i32 %807, %806
  %809 = mul i32 %808, -529506958
  %810 = xor i32 %809, %808
  %811 = call i32 @dx.op.unary.i32(i32 30, i32 %810)  ; Bfrev(value)
  %812 = add i32 %797, -646066581
  %813 = mul i32 %812, -1676577210
  %814 = xor i32 %813, %812
  %815 = mul i32 %814, -529506958
  %816 = xor i32 %815, %814
  %817 = call i32 @dx.op.unary.i32(i32 30, i32 %816)  ; Bfrev(value)
  %818 = add i32 %800, 570102578
  %819 = mul i32 %818, -1676577210
  %820 = xor i32 %819, %818
  %821 = add nuw i32 %805, 1786441729
  %822 = mul i32 %821, -1676577210
  %823 = xor i32 %822, %821
  %824 = lshr i32 %811, 8
  %825 = lshr i32 %817, 8
  %826 = uitofp i32 %824 to float
  %827 = uitofp i32 %825 to float
  %828 = fmul fast float %826, 0x3E76A09E60000000
  %829 = fmul fast float %827, 0x3E76A09E60000000
  %830 = fadd fast float %828, 0xBFE6A09E60000000
  %831 = fadd fast float %829, 0xBFE6A09E60000000
  %832 = fmul fast float %830, %830
  %833 = fmul fast float %831, %831
  %834 = call float @dx.op.binary.f32(i32 35, float %832, float %833)  ; FMax(a,b)
  %835 = fmul fast float %834, 2.000000e+00
  %836 = call float @dx.op.binary.f32(i32 36, float %832, float %833)  ; FMin(a,b)
  %837 = fsub fast float %835, %836
  %838 = call float @dx.op.unary.f32(i32 24, float %837)  ; Sqrt(value)
  %839 = fcmp fast ogt float %832, %833
  %840 = fsub fast float -0.000000e+00, %838
  %841 = fcmp fast ogt float %830, 0.000000e+00
  %842 = select i1 %841, float %838, float %840
  %843 = fcmp fast ogt float %831, 0.000000e+00
  %844 = select i1 %843, float %838, float %840
  %845 = select i1 %839, float %842, float %830
  %846 = select i1 %839, float %831, float %844
  %847 = fmul fast float %845, %501
  %848 = fmul fast float %846, %501
  %849 = call float @dx.op.dot2.f32(i32 54, float %847, float %848, float %847, float %848)  ; Dot2(ax,ay,bx,by)
  %850 = call float @dx.op.unary.f32(i32 24, float %849)  ; Sqrt(value)
  %851 = fsub fast float 1.000000e+00, %849
  %852 = call float @dx.op.unary.f32(i32 24, float %851)  ; Sqrt(value)
  %853 = fmul fast float %847, %704
  %854 = call float @dx.op.tertiary.f32(i32 46, float %848, float %700, float %853)  ; FMad(a,b,c)
  %855 = call float @dx.op.tertiary.f32(i32 46, float %852, float %498, float %854)  ; FMad(a,b,c)
  %856 = fmul fast float %847, %705
  %857 = call float @dx.op.tertiary.f32(i32 46, float %848, float %710, float %856)  ; FMad(a,b,c)
  %858 = call float @dx.op.tertiary.f32(i32 46, float %852, float %499, float %857)  ; FMad(a,b,c)
  %859 = fmul fast float %847, %707
  %860 = call float @dx.op.tertiary.f32(i32 46, float %848, float %711, float %859)  ; FMad(a,b,c)
  %861 = call float @dx.op.tertiary.f32(i32 46, float %852, float %500, float %860)  ; FMad(a,b,c)
  %862 = fcmp fast ogt float %690, 0.000000e+00
  br i1 %862, label %863, label %896

; <label>:863                                     ; preds = %727
  %864 = mul i32 %823, -529506958
  %865 = xor i32 %864, %823
  %866 = call i32 @dx.op.unary.i32(i32 30, i32 %865)  ; Bfrev(value)
  %867 = lshr i32 %866, 8
  %868 = uitofp i32 %867 to float
  %869 = fmul fast float %868, 0x3E70000000000000
  %870 = mul i32 %820, -529506958
  %871 = xor i32 %870, %820
  %872 = call i32 @dx.op.unary.i32(i32 30, i32 %871)  ; Bfrev(value)
  %873 = lshr i32 %872, 8
  %874 = uitofp i32 %873 to float
  %875 = fmul fast float %874, 0x3E70000000000000
  %876 = fadd fast float %875, -5.000000e-01
  %877 = fadd fast float %869, -5.000000e-01
  %878 = fmul fast float %876, %690
  %879 = fmul fast float %877, %690
  %880 = call float @dx.op.dot2.f32(i32 54, float %723, float %724, float %878, float %879)  ; Dot2(ax,ay,bx,by)
  %881 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %880)  ; FMax(a,b)
  %882 = fmul fast float %881, 2.000000e+00
  %883 = call float @dx.op.binary.f32(i32 36, float %691, float %882)  ; FMin(a,b)
  %884 = fmul fast float %878, %704
  %885 = call float @dx.op.tertiary.f32(i32 46, float %879, float %700, float %884)  ; FMad(a,b,c)
  %886 = call float @dx.op.tertiary.f32(i32 46, float %883, float %498, float %885)  ; FMad(a,b,c)
  %887 = fmul fast float %878, %705
  %888 = call float @dx.op.tertiary.f32(i32 46, float %879, float %710, float %887)  ; FMad(a,b,c)
  %889 = call float @dx.op.tertiary.f32(i32 46, float %883, float %499, float %888)  ; FMad(a,b,c)
  %890 = fmul fast float %878, %707
  %891 = call float @dx.op.tertiary.f32(i32 46, float %879, float %711, float %890)  ; FMad(a,b,c)
  %892 = call float @dx.op.tertiary.f32(i32 46, float %883, float %500, float %891)  ; FMad(a,b,c)
  %893 = fadd fast float %886, %643
  %894 = fadd fast float %889, %646
  %895 = fadd fast float %892, %649
  br label %896

; <label>:896                                     ; preds = %863, %727
  %897 = phi float [ %893, %863 ], [ %643, %727 ]
  %898 = phi float [ %894, %863 ], [ %646, %727 ]
  %899 = phi float [ %895, %863 ], [ %649, %727 ]
  %900 = fmul fast float %850, %488
  %901 = fadd fast float %852, %900
  %902 = fdiv fast float 1.500000e+00, %901
  %903 = call float @dx.op.unary.f32(i32 7, float %902)  ; Saturate(value)
  %904 = fmul fast float %494, 7.500000e-01
  %905 = fmul fast float %904, %497
  %906 = fmul fast float %905, %903
  %907 = fadd fast float %906, 0xBEB0C6F7A0000000
  %908 = call float @dx.op.binary.f32(i32 36, float %478, float %907)  ; FMin(a,b)
  %909 = fmul fast float %908, %855
  %910 = fmul fast float %908, %858
  %911 = fmul fast float %908, %861
  %912 = fadd fast float %909, %897
  %913 = fadd fast float %910, %898
  %914 = fadd fast float %911, %899
  %915 = fmul fast float %906, %855
  %916 = fmul fast float %906, %858
  %917 = fmul fast float %906, %861
  %918 = fadd fast float %915, %897
  %919 = fadd fast float %916, %898
  %920 = fadd fast float %917, %899
  %921 = fcmp fast ogt float %693, 0.000000e+00
  br i1 %921, label %922, label %1003

; <label>:922                                     ; preds = %896
  %923 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %924 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %923, i32 %571, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %925 = extractvalue %dx.types.ResRet.i32 %924, 0
  %926 = extractvalue %dx.types.ResRet.i32 %924, 1
  %927 = extractvalue %dx.types.ResRet.i32 %924, 3
  %928 = bitcast i32 %925 to float
  %929 = bitcast i32 %926 to float
  %930 = bitcast i32 %927 to float
  %931 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %923, i32 %572, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %932 = extractvalue %dx.types.ResRet.i32 %931, 0
  %933 = extractvalue %dx.types.ResRet.i32 %931, 1
  %934 = extractvalue %dx.types.ResRet.i32 %931, 3
  %935 = bitcast i32 %932 to float
  %936 = bitcast i32 %933 to float
  %937 = bitcast i32 %934 to float
  %938 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %923, i32 %573, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %939 = extractvalue %dx.types.ResRet.i32 %938, 0
  %940 = extractvalue %dx.types.ResRet.i32 %938, 1
  %941 = extractvalue %dx.types.ResRet.i32 %938, 3
  %942 = bitcast i32 %939 to float
  %943 = bitcast i32 %940 to float
  %944 = bitcast i32 %941 to float
  %945 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %923, i32 %574, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %946 = extractvalue %dx.types.ResRet.i32 %945, 0
  %947 = extractvalue %dx.types.ResRet.i32 %945, 1
  %948 = extractvalue %dx.types.ResRet.i32 %945, 3
  %949 = bitcast i32 %946 to float
  %950 = bitcast i32 %947 to float
  %951 = bitcast i32 %948 to float
  %952 = fmul fast float %928, %912
  %953 = call float @dx.op.tertiary.f32(i32 46, float %913, float %935, float %952)  ; FMad(a,b,c)
  %954 = call float @dx.op.tertiary.f32(i32 46, float %914, float %942, float %953)  ; FMad(a,b,c)
  %955 = fadd fast float %954, %949
  %956 = fmul fast float %929, %912
  %957 = call float @dx.op.tertiary.f32(i32 46, float %913, float %936, float %956)  ; FMad(a,b,c)
  %958 = call float @dx.op.tertiary.f32(i32 46, float %914, float %943, float %957)  ; FMad(a,b,c)
  %959 = fadd fast float %958, %950
  %960 = fmul fast float %930, %912
  %961 = call float @dx.op.tertiary.f32(i32 46, float %913, float %937, float %960)  ; FMad(a,b,c)
  %962 = call float @dx.op.tertiary.f32(i32 46, float %914, float %944, float %961)  ; FMad(a,b,c)
  %963 = fadd fast float %962, %951
  %964 = fdiv fast float %955, %963
  %965 = fdiv fast float %959, %963
  %966 = icmp ult i32 %564, 8192
  br i1 %966, label %977, label %967

; <label>:967                                     ; preds = %922
  %968 = fmul fast float %965, 1.280000e+02
  %969 = fptoui float %968 to i32
  %970 = fmul fast float %964, 1.280000e+02
  %971 = fptoui float %970 to i32
  %972 = mul i32 %564, 21845
  %973 = shl i32 %969, 7
  %974 = add i32 %972, -178946048
  %975 = add i32 %974, %971
  %976 = add i32 %975, %973
  br label %977

; <label>:977                                     ; preds = %967, %922
  %978 = phi i32 [ %976, %967 ], [ %564, %922 ]
  %979 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %980 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %979, i32 %978, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %981 = extractvalue %dx.types.ResRet.i32 %980, 0
  %982 = lshr i32 %981, 20
  %983 = and i32 %982, 31
  %984 = lshr i32 16384, %983
  %985 = uitofp i32 %984 to float
  %986 = select i1 %966, float 1.280000e+02, float %985
  %987 = fmul fast float %986, %964
  %988 = fmul fast float %986, %965
  %989 = fptoui float %987 to i32
  %990 = fptoui float %988 to i32
  %991 = uitofp i32 %989 to float
  %992 = uitofp i32 %990 to float
  %993 = fsub fast float 5.000000e-01, %987
  %994 = fadd fast float %993, %991
  %995 = fsub fast float 5.000000e-01, %988
  %996 = fadd fast float %995, %992
  %997 = fdiv fast float %994, %986
  %998 = fdiv fast float %996, %986
  %999 = call float @dx.op.dot2.f32(i32 54, float %666, float %667, float %997, float %998)  ; Dot2(ax,ay,bx,by)
  %1000 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %999)  ; FMax(a,b)
  %1001 = fmul fast float %1000, 2.000000e+00
  %1002 = call float @dx.op.binary.f32(i32 36, float %693, float %1001)  ; FMin(a,b)
  br label %1003

; <label>:1003                                    ; preds = %977, %896
  %1004 = phi float [ %1002, %977 ], [ 0.000000e+00, %896 ]
  br i1 %490, label %1005, label %1197

; <label>:1005                                    ; preds = %1003
  %1006 = mul i32 %274, 336
  %1007 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1008 = add i32 %1006, 128
  %1009 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1007, i32 %1008, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1010 = extractvalue %dx.types.ResRet.i32 %1009, 0
  %1011 = extractvalue %dx.types.ResRet.i32 %1009, 1
  %1012 = extractvalue %dx.types.ResRet.i32 %1009, 2
  %1013 = extractvalue %dx.types.ResRet.i32 %1009, 3
  %1014 = bitcast i32 %1010 to float
  %1015 = bitcast i32 %1011 to float
  %1016 = bitcast i32 %1012 to float
  %1017 = bitcast i32 %1013 to float
  %1018 = add i32 %1006, 144
  %1019 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1007, i32 %1018, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1020 = extractvalue %dx.types.ResRet.i32 %1019, 0
  %1021 = extractvalue %dx.types.ResRet.i32 %1019, 1
  %1022 = extractvalue %dx.types.ResRet.i32 %1019, 2
  %1023 = extractvalue %dx.types.ResRet.i32 %1019, 3
  %1024 = bitcast i32 %1020 to float
  %1025 = bitcast i32 %1021 to float
  %1026 = bitcast i32 %1022 to float
  %1027 = bitcast i32 %1023 to float
  %1028 = add i32 %1006, 160
  %1029 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1007, i32 %1028, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1030 = extractvalue %dx.types.ResRet.i32 %1029, 0
  %1031 = extractvalue %dx.types.ResRet.i32 %1029, 1
  %1032 = extractvalue %dx.types.ResRet.i32 %1029, 2
  %1033 = extractvalue %dx.types.ResRet.i32 %1029, 3
  %1034 = bitcast i32 %1030 to float
  %1035 = bitcast i32 %1031 to float
  %1036 = bitcast i32 %1032 to float
  %1037 = bitcast i32 %1033 to float
  %1038 = add i32 %1006, 176
  %1039 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1007, i32 %1038, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1040 = extractvalue %dx.types.ResRet.i32 %1039, 0
  %1041 = extractvalue %dx.types.ResRet.i32 %1039, 1
  %1042 = extractvalue %dx.types.ResRet.i32 %1039, 2
  %1043 = extractvalue %dx.types.ResRet.i32 %1039, 3
  %1044 = bitcast i32 %1040 to float
  %1045 = bitcast i32 %1041 to float
  %1046 = bitcast i32 %1042 to float
  %1047 = bitcast i32 %1043 to float
  %1048 = fmul fast float %1014, %912
  %1049 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1024, float %1048)  ; FMad(a,b,c)
  %1050 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1034, float %1049)  ; FMad(a,b,c)
  %1051 = fadd fast float %1050, %1044
  %1052 = fmul fast float %1015, %912
  %1053 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1025, float %1052)  ; FMad(a,b,c)
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1035, float %1053)  ; FMad(a,b,c)
  %1055 = fadd fast float %1054, %1045
  %1056 = fmul fast float %1016, %912
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1026, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1036, float %1057)  ; FMad(a,b,c)
  %1059 = fadd fast float %1058, %1046
  %1060 = fmul fast float %1017, %912
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1027, float %1060)  ; FMad(a,b,c)
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1037, float %1061)  ; FMad(a,b,c)
  %1063 = fadd fast float %1062, %1047
  %1064 = fmul fast float %1014, %918
  %1065 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1024, float %1064)  ; FMad(a,b,c)
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1034, float %1065)  ; FMad(a,b,c)
  %1067 = fadd fast float %1066, %1044
  %1068 = fmul fast float %1015, %918
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1025, float %1068)  ; FMad(a,b,c)
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1035, float %1069)  ; FMad(a,b,c)
  %1071 = fadd fast float %1070, %1045
  %1072 = fmul fast float %1016, %918
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1026, float %1072)  ; FMad(a,b,c)
  %1074 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1036, float %1073)  ; FMad(a,b,c)
  %1075 = fadd fast float %1074, %1046
  %1076 = fmul fast float %1017, %918
  %1077 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1027, float %1076)  ; FMad(a,b,c)
  %1078 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1037, float %1077)  ; FMad(a,b,c)
  %1079 = fadd fast float %1078, %1047
  %1080 = fdiv fast float %1051, %1063
  %1081 = fdiv fast float %1055, %1063
  %1082 = fdiv fast float %1059, %1063
  %1083 = fdiv fast float %1067, %1079
  %1084 = fdiv fast float %1071, %1079
  %1085 = fdiv fast float %1075, %1079
  %1086 = fsub fast float %1083, %1080
  %1087 = fsub fast float %1084, %1081
  %1088 = fsub fast float %1085, %1082
  %1089 = call float @dx.op.unary.f32(i32 7, float %1080)  ; Saturate(value)
  %1090 = call float @dx.op.unary.f32(i32 7, float %1081)  ; Saturate(value)
  %1091 = fadd fast float %1082, %1004
  %1092 = sitofp i32 %726 to float
  %1093 = fdiv fast float -1.000000e+00, %1092
  %1094 = fsub fast float 1.000000e+00, %728
  %1095 = icmp sgt i32 %726, -1
  br i1 %1095, label %1096, label %1836

; <label>:1096                                    ; preds = %1005
  br label %1097

; <label>:1097                                    ; preds = %1192, %1096
  %1098 = phi float [ %1193, %1192 ], [ -1.000000e+04, %1096 ]
  %1099 = phi float [ %1194, %1192 ], [ -1.000000e+00, %1096 ]
  %1100 = phi i32 [ %1195, %1192 ], [ 0, %1096 ]
  %1101 = icmp eq i32 %1100, %726
  br i1 %1101, label %1108, label %1102

; <label>:1102                                    ; preds = %1097
  %1103 = sitofp i32 %1100 to float
  %1104 = fadd fast float %1103, %1094
  %1105 = fmul fast float %1104, %1093
  %1106 = fadd fast float %1105, 1.000000e+00
  %1107 = fmul fast float %1106, %1106
  br label %1108

; <label>:1108                                    ; preds = %1102, %1097
  %1109 = phi float [ %1107, %1102 ], [ 0.000000e+00, %1097 ]
  %1110 = fmul fast float %1109, %1086
  %1111 = fmul fast float %1109, %1087
  %1112 = fmul fast float %1109, %1088
  %1113 = fadd fast float %1110, %1089
  %1114 = fadd fast float %1111, %1090
  %1115 = fadd fast float %1112, %1091
  %1116 = call float @dx.op.unary.f32(i32 7, float %1113)  ; Saturate(value)
  %1117 = call float @dx.op.unary.f32(i32 7, float %1114)  ; Saturate(value)
  %1118 = fcmp fast oeq float %1113, %1116
  %1119 = fcmp fast oeq float %1114, %1117
  %1120 = and i1 %1118, %1119
  br i1 %1120, label %1121, label %1167

; <label>:1121                                    ; preds = %1108
  %1122 = icmp ult i32 %274, 8192
  br i1 %1122, label %1133, label %1123

; <label>:1123                                    ; preds = %1121
  %1124 = fmul fast float %1114, 1.280000e+02
  %1125 = fptoui float %1124 to i32
  %1126 = fmul fast float %1113, 1.280000e+02
  %1127 = fptoui float %1126 to i32
  %1128 = mul i32 %274, 21845
  %1129 = shl i32 %1125, 7
  %1130 = add i32 %1128, -178946048
  %1131 = add i32 %1130, %1127
  %1132 = add i32 %1131, %1129
  br label %1133

; <label>:1133                                    ; preds = %1123, %1121
  %1134 = phi i32 [ %1132, %1123 ], [ %274, %1121 ]
  %1135 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1136 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1135, i32 %1134, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1137 = extractvalue %dx.types.ResRet.i32 %1136, 0
  %1138 = lshr i32 %1137, 20
  %1139 = and i32 %1137, 134217728
  %1140 = icmp eq i32 %1139, 0
  %1141 = and i32 %1138, 31
  %1142 = lshr i32 16384, %1141
  %1143 = uitofp i32 %1142 to float
  %1144 = select i1 %1122, float 1.280000e+02, float %1143
  br i1 %1140, label %1162, label %1145

; <label>:1145                                    ; preds = %1133
  %1146 = fmul fast float %1144, %1114
  %1147 = fptoui float %1146 to i32
  %1148 = and i32 %1147, 127
  %1149 = lshr i32 %1137, 3
  %1150 = and i32 %1149, 130944
  %1151 = or i32 %1148, %1150
  %1152 = fmul fast float %1144, %1113
  %1153 = fptoui float %1152 to i32
  %1154 = and i32 %1153, 127
  %1155 = shl i32 %1137, 7
  %1156 = and i32 %1155, 130944
  %1157 = or i32 %1154, %1156
  %1158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1159 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1158, i32 0, i32 %1157, i32 %1151, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1160 = extractvalue %dx.types.ResRet.i32 %1159, 0
  %1161 = bitcast i32 %1160 to float
  br label %1162

; <label>:1162                                    ; preds = %1145, %1133
  %1163 = phi float [ %1161, %1145 ], [ 0.000000e+00, %1133 ]
  %1164 = phi i1 [ true, %1145 ], [ false, %1133 ]
  %1165 = select i1 %1164, float %1163, float 0.000000e+00
  %1166 = zext i1 %1164 to i32
  br label %1167

; <label>:1167                                    ; preds = %1162, %1108
  %1168 = phi float [ 0.000000e+00, %1108 ], [ %1165, %1162 ]
  %1169 = phi i32 [ 0, %1108 ], [ %1166, %1162 ]
  %1170 = icmp eq i32 %1169, 0
  br i1 %1170, label %1192, label %1171

; <label>:1171                                    ; preds = %1167
  %1172 = fcmp fast oeq float %1098, -1.000000e+04
  br i1 %1172, label %1173, label %1175

; <label>:1173                                    ; preds = %1171
  %1174 = fcmp fast ogt float %1168, %1115
  br i1 %1174, label %1830, label %1192

; <label>:1175                                    ; preds = %1171
  %1176 = fsub fast float %1115, %1099
  %1177 = call float @dx.op.unary.f32(i32 6, float %1176)  ; FAbs(value)
  %1178 = fmul fast float %1177, 0x3FF0CCCCC0000000
  %1179 = fsub fast float %1168, %1115
  %1180 = fcmp fast ogt float %1179, %1178
  br i1 %1180, label %1184, label %1181

; <label>:1181                                    ; preds = %1175
  %1182 = fcmp fast une float %1168, %1098
  br i1 %1182, label %1183, label %1184

; <label>:1183                                    ; preds = %1181
  br label %1184

; <label>:1184                                    ; preds = %1183, %1181, %1175
  %1185 = phi float [ %1168, %1183 ], [ %1098, %1181 ], [ %1098, %1175 ]
  %1186 = phi float [ %1168, %1183 ], [ %1168, %1181 ], [ %1098, %1175 ]
  %1187 = fmul fast float %1177, 0x3FE0CCCCC0000000
  %1188 = fadd fast float %1187, %1115
  %1189 = fsub fast float %1188, %1186
  %1190 = call float @dx.op.unary.f32(i32 6, float %1189)  ; FAbs(value)
  %1191 = fcmp fast olt float %1190, %1187
  br i1 %1191, label %1830, label %1192

; <label>:1192                                    ; preds = %1184, %1173, %1167
  %1193 = phi float [ %1098, %1167 ], [ %1168, %1173 ], [ %1185, %1184 ]
  %1194 = phi float [ %1099, %1167 ], [ %1115, %1173 ], [ %1115, %1184 ]
  %1195 = add nuw nsw i32 %1100, 1
  %1196 = icmp slt i32 %1100, %726
  br i1 %1196, label %1097, label %1830

; <label>:1197                                    ; preds = %1003
  %1198 = call float @dx.op.unary.f32(i32 6, float %912)  ; FAbs(value)
  %1199 = call float @dx.op.unary.f32(i32 6, float %913)  ; FAbs(value)
  %1200 = fcmp fast ult float %1198, %1199
  %1201 = call float @dx.op.unary.f32(i32 6, float %914)  ; FAbs(value)
  %1202 = fcmp fast ult float %1198, %1201
  %1203 = or i1 %1200, %1202
  br i1 %1203, label %1207, label %1204

; <label>:1204                                    ; preds = %1197
  %1205 = fcmp ule float %912, 0.000000e+00
  %1206 = zext i1 %1205 to i32
  br label %1215

; <label>:1207                                    ; preds = %1197
  %1208 = fcmp fast ogt float %1199, %1201
  br i1 %1208, label %1209, label %1212

; <label>:1209                                    ; preds = %1207
  %1210 = fcmp fast ogt float %913, 0.000000e+00
  %1211 = select i1 %1210, i32 2, i32 3
  br label %1215

; <label>:1212                                    ; preds = %1207
  %1213 = fcmp fast ogt float %914, 0.000000e+00
  %1214 = select i1 %1213, i32 4, i32 5
  br label %1215

; <label>:1215                                    ; preds = %1212, %1209, %1204
  %1216 = phi i32 [ %1206, %1204 ], [ %1211, %1209 ], [ %1214, %1212 ]
  %1217 = call float @dx.op.unary.f32(i32 6, float %918)  ; FAbs(value)
  %1218 = call float @dx.op.unary.f32(i32 6, float %919)  ; FAbs(value)
  %1219 = fcmp fast ult float %1217, %1218
  %1220 = call float @dx.op.unary.f32(i32 6, float %920)  ; FAbs(value)
  %1221 = fcmp fast ult float %1217, %1220
  %1222 = or i1 %1219, %1221
  br i1 %1222, label %1226, label %1223

; <label>:1223                                    ; preds = %1215
  %1224 = fcmp ule float %918, 0.000000e+00
  %1225 = zext i1 %1224 to i32
  br label %1234

; <label>:1226                                    ; preds = %1215
  %1227 = fcmp fast ogt float %1218, %1220
  br i1 %1227, label %1228, label %1231

; <label>:1228                                    ; preds = %1226
  %1229 = fcmp fast ogt float %919, 0.000000e+00
  %1230 = select i1 %1229, i32 2, i32 3
  br label %1234

; <label>:1231                                    ; preds = %1226
  %1232 = fcmp fast ogt float %920, 0.000000e+00
  %1233 = select i1 %1232, i32 4, i32 5
  br label %1234

; <label>:1234                                    ; preds = %1231, %1228, %1223
  %1235 = phi i32 [ %1225, %1223 ], [ %1230, %1228 ], [ %1233, %1231 ]
  %1236 = icmp ne i32 %1216, %1235
  %1237 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %1236)  ; WaveAnyTrue(cond)
  %1238 = add i32 %1235, %274
  %1239 = mul i32 %1238, 336
  %1240 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1241 = add i32 %1239, 128
  %1242 = add i32 %1239, 144
  %1243 = add i32 %1239, 160
  %1244 = add i32 %1239, 176
  %1245 = sitofp i32 %726 to float
  %1246 = fdiv fast float -1.000000e+00, %1245
  %1247 = fsub fast float 1.000000e+00, %728
  %1248 = icmp sgt i32 %726, -1
  br i1 %1237, label %1249, label %1648

; <label>:1249                                    ; preds = %1234
  %1250 = add i32 %1216, %274
  %1251 = mul i32 %1250, 336
  %1252 = add i32 %1251, 128
  %1253 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1252, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1254 = extractvalue %dx.types.ResRet.i32 %1253, 0
  %1255 = extractvalue %dx.types.ResRet.i32 %1253, 1
  %1256 = extractvalue %dx.types.ResRet.i32 %1253, 2
  %1257 = extractvalue %dx.types.ResRet.i32 %1253, 3
  %1258 = bitcast i32 %1254 to float
  %1259 = bitcast i32 %1255 to float
  %1260 = bitcast i32 %1256 to float
  %1261 = bitcast i32 %1257 to float
  %1262 = add i32 %1251, 144
  %1263 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1262, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1264 = extractvalue %dx.types.ResRet.i32 %1263, 0
  %1265 = extractvalue %dx.types.ResRet.i32 %1263, 1
  %1266 = extractvalue %dx.types.ResRet.i32 %1263, 2
  %1267 = extractvalue %dx.types.ResRet.i32 %1263, 3
  %1268 = bitcast i32 %1264 to float
  %1269 = bitcast i32 %1265 to float
  %1270 = bitcast i32 %1266 to float
  %1271 = bitcast i32 %1267 to float
  %1272 = add i32 %1251, 160
  %1273 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1272, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1274 = extractvalue %dx.types.ResRet.i32 %1273, 0
  %1275 = extractvalue %dx.types.ResRet.i32 %1273, 1
  %1276 = extractvalue %dx.types.ResRet.i32 %1273, 2
  %1277 = extractvalue %dx.types.ResRet.i32 %1273, 3
  %1278 = bitcast i32 %1274 to float
  %1279 = bitcast i32 %1275 to float
  %1280 = bitcast i32 %1276 to float
  %1281 = bitcast i32 %1277 to float
  %1282 = add i32 %1251, 176
  %1283 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1282, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1284 = extractvalue %dx.types.ResRet.i32 %1283, 0
  %1285 = extractvalue %dx.types.ResRet.i32 %1283, 1
  %1286 = extractvalue %dx.types.ResRet.i32 %1283, 2
  %1287 = extractvalue %dx.types.ResRet.i32 %1283, 3
  %1288 = bitcast i32 %1284 to float
  %1289 = bitcast i32 %1285 to float
  %1290 = bitcast i32 %1286 to float
  %1291 = bitcast i32 %1287 to float
  %1292 = fmul fast float %1258, %912
  %1293 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1268, float %1292)  ; FMad(a,b,c)
  %1294 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1278, float %1293)  ; FMad(a,b,c)
  %1295 = fadd fast float %1294, %1288
  %1296 = fmul fast float %1259, %912
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1269, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1279, float %1297)  ; FMad(a,b,c)
  %1299 = fadd fast float %1298, %1289
  %1300 = fmul fast float %1260, %912
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1270, float %1300)  ; FMad(a,b,c)
  %1302 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1280, float %1301)  ; FMad(a,b,c)
  %1303 = fadd fast float %1302, %1290
  %1304 = fmul fast float %1261, %912
  %1305 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1271, float %1304)  ; FMad(a,b,c)
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1281, float %1305)  ; FMad(a,b,c)
  %1307 = fadd fast float %1306, %1291
  %1308 = fmul fast float %1258, %918
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1268, float %1308)  ; FMad(a,b,c)
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1278, float %1309)  ; FMad(a,b,c)
  %1311 = fadd fast float %1310, %1288
  %1312 = fmul fast float %1259, %918
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1269, float %1312)  ; FMad(a,b,c)
  %1314 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1279, float %1313)  ; FMad(a,b,c)
  %1315 = fadd fast float %1314, %1289
  %1316 = fmul fast float %1260, %918
  %1317 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1270, float %1316)  ; FMad(a,b,c)
  %1318 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1280, float %1317)  ; FMad(a,b,c)
  %1319 = fadd fast float %1318, %1290
  %1320 = fmul fast float %1261, %918
  %1321 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1271, float %1320)  ; FMad(a,b,c)
  %1322 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1281, float %1321)  ; FMad(a,b,c)
  %1323 = fadd fast float %1322, %1291
  %1324 = fdiv fast float %1295, %1307
  %1325 = fdiv fast float %1299, %1307
  %1326 = fdiv fast float %1303, %1307
  %1327 = fdiv fast float %1311, %1323
  %1328 = fdiv fast float %1315, %1323
  %1329 = fdiv fast float %1319, %1323
  %1330 = fsub fast float %1327, %1324
  %1331 = fsub fast float %1328, %1325
  %1332 = fsub fast float %1329, %1326
  %1333 = fadd fast float %1326, %1004
  %1334 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1241, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1335 = extractvalue %dx.types.ResRet.i32 %1334, 0
  %1336 = extractvalue %dx.types.ResRet.i32 %1334, 1
  %1337 = extractvalue %dx.types.ResRet.i32 %1334, 2
  %1338 = extractvalue %dx.types.ResRet.i32 %1334, 3
  %1339 = bitcast i32 %1335 to float
  %1340 = bitcast i32 %1336 to float
  %1341 = bitcast i32 %1337 to float
  %1342 = bitcast i32 %1338 to float
  %1343 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1242, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1344 = extractvalue %dx.types.ResRet.i32 %1343, 0
  %1345 = extractvalue %dx.types.ResRet.i32 %1343, 1
  %1346 = extractvalue %dx.types.ResRet.i32 %1343, 2
  %1347 = extractvalue %dx.types.ResRet.i32 %1343, 3
  %1348 = bitcast i32 %1344 to float
  %1349 = bitcast i32 %1345 to float
  %1350 = bitcast i32 %1346 to float
  %1351 = bitcast i32 %1347 to float
  %1352 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1243, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1353 = extractvalue %dx.types.ResRet.i32 %1352, 0
  %1354 = extractvalue %dx.types.ResRet.i32 %1352, 1
  %1355 = extractvalue %dx.types.ResRet.i32 %1352, 2
  %1356 = extractvalue %dx.types.ResRet.i32 %1352, 3
  %1357 = bitcast i32 %1353 to float
  %1358 = bitcast i32 %1354 to float
  %1359 = bitcast i32 %1355 to float
  %1360 = bitcast i32 %1356 to float
  %1361 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1244, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1362 = extractvalue %dx.types.ResRet.i32 %1361, 0
  %1363 = extractvalue %dx.types.ResRet.i32 %1361, 1
  %1364 = extractvalue %dx.types.ResRet.i32 %1361, 2
  %1365 = extractvalue %dx.types.ResRet.i32 %1361, 3
  %1366 = bitcast i32 %1362 to float
  %1367 = bitcast i32 %1363 to float
  %1368 = bitcast i32 %1364 to float
  %1369 = bitcast i32 %1365 to float
  %1370 = fmul fast float %1339, %912
  %1371 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1348, float %1370)  ; FMad(a,b,c)
  %1372 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1357, float %1371)  ; FMad(a,b,c)
  %1373 = fadd fast float %1372, %1366
  %1374 = fmul fast float %1340, %912
  %1375 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1349, float %1374)  ; FMad(a,b,c)
  %1376 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1358, float %1375)  ; FMad(a,b,c)
  %1377 = fadd fast float %1376, %1367
  %1378 = fmul fast float %1341, %912
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1350, float %1378)  ; FMad(a,b,c)
  %1380 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1359, float %1379)  ; FMad(a,b,c)
  %1381 = fadd fast float %1380, %1368
  %1382 = fmul fast float %1342, %912
  %1383 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1351, float %1382)  ; FMad(a,b,c)
  %1384 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1360, float %1383)  ; FMad(a,b,c)
  %1385 = fadd fast float %1384, %1369
  %1386 = fmul fast float %1339, %918
  %1387 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1348, float %1386)  ; FMad(a,b,c)
  %1388 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1357, float %1387)  ; FMad(a,b,c)
  %1389 = fadd fast float %1388, %1366
  %1390 = fmul fast float %1340, %918
  %1391 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1349, float %1390)  ; FMad(a,b,c)
  %1392 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1358, float %1391)  ; FMad(a,b,c)
  %1393 = fadd fast float %1392, %1367
  %1394 = fmul fast float %1341, %918
  %1395 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1350, float %1394)  ; FMad(a,b,c)
  %1396 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1359, float %1395)  ; FMad(a,b,c)
  %1397 = fadd fast float %1396, %1368
  %1398 = fmul fast float %1342, %918
  %1399 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1351, float %1398)  ; FMad(a,b,c)
  %1400 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1360, float %1399)  ; FMad(a,b,c)
  %1401 = fadd fast float %1400, %1369
  %1402 = fdiv fast float %1373, %1385
  %1403 = fdiv fast float %1377, %1385
  %1404 = fdiv fast float %1381, %1385
  %1405 = fdiv fast float %1389, %1401
  %1406 = fdiv fast float %1393, %1401
  %1407 = fdiv fast float %1397, %1401
  %1408 = fsub fast float %1405, %1402
  %1409 = fsub fast float %1406, %1403
  %1410 = fsub fast float %1407, %1404
  %1411 = fadd fast float %1404, %1004
  br i1 %1248, label %1412, label %1641

; <label>:1412                                    ; preds = %1249
  br label %1413

; <label>:1413                                    ; preds = %1633, %1412
  %1414 = phi i32 [ %1607, %1633 ], [ 1, %1412 ]
  %1415 = phi float [ %1634, %1633 ], [ -1.000000e+04, %1412 ]
  %1416 = phi float [ %1635, %1633 ], [ -1.000000e+00, %1412 ]
  %1417 = phi i32 [ %1636, %1633 ], [ 0, %1412 ]
  %1418 = icmp eq i32 %1417, %726
  br i1 %1418, label %1425, label %1419

; <label>:1419                                    ; preds = %1413
  %1420 = sitofp i32 %1417 to float
  %1421 = fadd fast float %1420, %1247
  %1422 = fmul fast float %1421, %1246
  %1423 = fadd fast float %1422, 1.000000e+00
  %1424 = fmul fast float %1423, %1423
  br label %1425

; <label>:1425                                    ; preds = %1419, %1413
  %1426 = phi float [ %1424, %1419 ], [ 0.000000e+00, %1413 ]
  %1427 = icmp eq i32 %1414, 0
  br i1 %1427, label %1548, label %1428

; <label>:1428                                    ; preds = %1425
  %1429 = fmul fast float %1426, %1408
  %1430 = fmul fast float %1426, %1409
  %1431 = fmul fast float %1426, %1410
  %1432 = fadd fast float %1429, %1402
  %1433 = fadd fast float %1430, %1403
  %1434 = fadd fast float %1431, %1411
  %1435 = call float @dx.op.unary.f32(i32 7, float %1432)  ; Saturate(value)
  %1436 = call float @dx.op.unary.f32(i32 7, float %1433)  ; Saturate(value)
  %1437 = fcmp fast oeq float %1432, %1435
  %1438 = fcmp fast oeq float %1433, %1436
  %1439 = and i1 %1437, %1438
  br i1 %1439, label %1440, label %1486

; <label>:1440                                    ; preds = %1428
  %1441 = icmp ult i32 %1238, 8192
  br i1 %1441, label %1452, label %1442

; <label>:1442                                    ; preds = %1440
  %1443 = fmul fast float %1433, 1.280000e+02
  %1444 = fptoui float %1443 to i32
  %1445 = fmul fast float %1432, 1.280000e+02
  %1446 = fptoui float %1445 to i32
  %1447 = mul i32 %1238, 21845
  %1448 = shl i32 %1444, 7
  %1449 = add i32 %1447, -178946048
  %1450 = add i32 %1449, %1446
  %1451 = add i32 %1450, %1448
  br label %1452

; <label>:1452                                    ; preds = %1442, %1440
  %1453 = phi i32 [ %1451, %1442 ], [ %1238, %1440 ]
  %1454 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1455 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1454, i32 %1453, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1456 = extractvalue %dx.types.ResRet.i32 %1455, 0
  %1457 = lshr i32 %1456, 20
  %1458 = and i32 %1456, 134217728
  %1459 = icmp eq i32 %1458, 0
  %1460 = and i32 %1457, 31
  %1461 = lshr i32 16384, %1460
  %1462 = uitofp i32 %1461 to float
  %1463 = select i1 %1441, float 1.280000e+02, float %1462
  br i1 %1459, label %1481, label %1464

; <label>:1464                                    ; preds = %1452
  %1465 = fmul fast float %1463, %1433
  %1466 = fptoui float %1465 to i32
  %1467 = and i32 %1466, 127
  %1468 = lshr i32 %1456, 3
  %1469 = and i32 %1468, 130944
  %1470 = or i32 %1467, %1469
  %1471 = fmul fast float %1463, %1432
  %1472 = fptoui float %1471 to i32
  %1473 = and i32 %1472, 127
  %1474 = shl i32 %1456, 7
  %1475 = and i32 %1474, 130944
  %1476 = or i32 %1473, %1475
  %1477 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1478 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1477, i32 0, i32 %1476, i32 %1470, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1479 = extractvalue %dx.types.ResRet.i32 %1478, 0
  %1480 = bitcast i32 %1479 to float
  br label %1481

; <label>:1481                                    ; preds = %1464, %1452
  %1482 = phi float [ %1480, %1464 ], [ 0.000000e+00, %1452 ]
  %1483 = phi i1 [ true, %1464 ], [ false, %1452 ]
  %1484 = select i1 %1483, float %1482, float 0.000000e+00
  %1485 = zext i1 %1483 to i32
  br label %1486

; <label>:1486                                    ; preds = %1481, %1428
  %1487 = phi float [ 0.000000e+00, %1428 ], [ %1484, %1481 ]
  %1488 = phi i32 [ 0, %1428 ], [ %1485, %1481 ]
  %1489 = icmp eq i32 %1488, 0
  br i1 %1489, label %1490, label %1606

; <label>:1490                                    ; preds = %1486
  %1491 = fmul fast float %1426, %1330
  %1492 = fmul fast float %1426, %1331
  %1493 = fmul fast float %1426, %1332
  %1494 = fadd fast float %1491, %1324
  %1495 = fadd fast float %1492, %1325
  %1496 = fadd fast float %1493, %1333
  %1497 = call float @dx.op.unary.f32(i32 7, float %1494)  ; Saturate(value)
  %1498 = call float @dx.op.unary.f32(i32 7, float %1495)  ; Saturate(value)
  %1499 = fcmp fast oeq float %1494, %1497
  %1500 = fcmp fast oeq float %1495, %1498
  %1501 = and i1 %1499, %1500
  br i1 %1501, label %1502, label %1606

; <label>:1502                                    ; preds = %1490
  %1503 = icmp ult i32 %1250, 8192
  br i1 %1503, label %1514, label %1504

; <label>:1504                                    ; preds = %1502
  %1505 = fmul fast float %1495, 1.280000e+02
  %1506 = fptoui float %1505 to i32
  %1507 = fmul fast float %1494, 1.280000e+02
  %1508 = fptoui float %1507 to i32
  %1509 = mul i32 %1250, 21845
  %1510 = shl i32 %1506, 7
  %1511 = add i32 %1509, -178946048
  %1512 = add i32 %1511, %1508
  %1513 = add i32 %1512, %1510
  br label %1514

; <label>:1514                                    ; preds = %1504, %1502
  %1515 = phi i32 [ %1513, %1504 ], [ %1250, %1502 ]
  %1516 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1517 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1516, i32 %1515, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1518 = extractvalue %dx.types.ResRet.i32 %1517, 0
  %1519 = lshr i32 %1518, 20
  %1520 = and i32 %1518, 134217728
  %1521 = icmp eq i32 %1520, 0
  %1522 = and i32 %1519, 31
  %1523 = lshr i32 16384, %1522
  %1524 = uitofp i32 %1523 to float
  %1525 = select i1 %1503, float 1.280000e+02, float %1524
  br i1 %1521, label %1543, label %1526

; <label>:1526                                    ; preds = %1514
  %1527 = fmul fast float %1525, %1495
  %1528 = fptoui float %1527 to i32
  %1529 = and i32 %1528, 127
  %1530 = lshr i32 %1518, 3
  %1531 = and i32 %1530, 130944
  %1532 = or i32 %1529, %1531
  %1533 = fmul fast float %1525, %1494
  %1534 = fptoui float %1533 to i32
  %1535 = and i32 %1534, 127
  %1536 = shl i32 %1518, 7
  %1537 = and i32 %1536, 130944
  %1538 = or i32 %1535, %1537
  %1539 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1540 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1539, i32 0, i32 %1538, i32 %1532, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1541 = extractvalue %dx.types.ResRet.i32 %1540, 0
  %1542 = bitcast i32 %1541 to float
  br label %1543

; <label>:1543                                    ; preds = %1526, %1514
  %1544 = phi float [ %1542, %1526 ], [ 0.000000e+00, %1514 ]
  %1545 = phi i1 [ true, %1526 ], [ false, %1514 ]
  %1546 = select i1 %1545, float %1544, float 0.000000e+00
  %1547 = zext i1 %1545 to i32
  br label %1606

; <label>:1548                                    ; preds = %1425
  %1549 = fmul fast float %1426, %1330
  %1550 = fmul fast float %1426, %1331
  %1551 = fmul fast float %1426, %1332
  %1552 = fadd fast float %1549, %1324
  %1553 = fadd fast float %1550, %1325
  %1554 = fadd fast float %1551, %1333
  %1555 = call float @dx.op.unary.f32(i32 7, float %1552)  ; Saturate(value)
  %1556 = call float @dx.op.unary.f32(i32 7, float %1553)  ; Saturate(value)
  %1557 = fcmp fast oeq float %1552, %1555
  %1558 = fcmp fast oeq float %1553, %1556
  %1559 = and i1 %1557, %1558
  br i1 %1559, label %1560, label %1606

; <label>:1560                                    ; preds = %1548
  %1561 = icmp ult i32 %1250, 8192
  br i1 %1561, label %1572, label %1562

; <label>:1562                                    ; preds = %1560
  %1563 = fmul fast float %1553, 1.280000e+02
  %1564 = fptoui float %1563 to i32
  %1565 = fmul fast float %1552, 1.280000e+02
  %1566 = fptoui float %1565 to i32
  %1567 = mul i32 %1250, 21845
  %1568 = shl i32 %1564, 7
  %1569 = add i32 %1567, -178946048
  %1570 = add i32 %1569, %1566
  %1571 = add i32 %1570, %1568
  br label %1572

; <label>:1572                                    ; preds = %1562, %1560
  %1573 = phi i32 [ %1571, %1562 ], [ %1250, %1560 ]
  %1574 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1575 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1574, i32 %1573, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1576 = extractvalue %dx.types.ResRet.i32 %1575, 0
  %1577 = lshr i32 %1576, 20
  %1578 = and i32 %1576, 134217728
  %1579 = icmp eq i32 %1578, 0
  %1580 = and i32 %1577, 31
  %1581 = lshr i32 16384, %1580
  %1582 = uitofp i32 %1581 to float
  %1583 = select i1 %1561, float 1.280000e+02, float %1582
  br i1 %1579, label %1601, label %1584

; <label>:1584                                    ; preds = %1572
  %1585 = fmul fast float %1583, %1553
  %1586 = fptoui float %1585 to i32
  %1587 = and i32 %1586, 127
  %1588 = lshr i32 %1576, 3
  %1589 = and i32 %1588, 130944
  %1590 = or i32 %1587, %1589
  %1591 = fmul fast float %1583, %1552
  %1592 = fptoui float %1591 to i32
  %1593 = and i32 %1592, 127
  %1594 = shl i32 %1576, 7
  %1595 = and i32 %1594, 130944
  %1596 = or i32 %1593, %1595
  %1597 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1598 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1597, i32 0, i32 %1596, i32 %1590, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1599 = extractvalue %dx.types.ResRet.i32 %1598, 0
  %1600 = bitcast i32 %1599 to float
  br label %1601

; <label>:1601                                    ; preds = %1584, %1572
  %1602 = phi float [ %1600, %1584 ], [ 0.000000e+00, %1572 ]
  %1603 = phi i1 [ true, %1584 ], [ false, %1572 ]
  %1604 = select i1 %1603, float %1602, float 0.000000e+00
  %1605 = zext i1 %1603 to i32
  br label %1606

; <label>:1606                                    ; preds = %1601, %1548, %1543, %1490, %1486
  %1607 = phi i32 [ %1414, %1486 ], [ 0, %1543 ], [ 0, %1490 ], [ 0, %1601 ], [ 0, %1548 ]
  %1608 = phi float [ %1434, %1486 ], [ %1496, %1543 ], [ %1496, %1490 ], [ %1554, %1601 ], [ %1554, %1548 ]
  %1609 = phi float [ %1487, %1486 ], [ %1546, %1543 ], [ 0.000000e+00, %1490 ], [ %1604, %1601 ], [ 0.000000e+00, %1548 ]
  %1610 = phi i32 [ %1488, %1486 ], [ %1547, %1543 ], [ 0, %1490 ], [ %1605, %1601 ], [ 0, %1548 ]
  %1611 = icmp eq i32 %1610, 0
  br i1 %1611, label %1633, label %1612

; <label>:1612                                    ; preds = %1606
  %1613 = fcmp fast oeq float %1415, -1.000000e+04
  br i1 %1613, label %1614, label %1616

; <label>:1614                                    ; preds = %1612
  %1615 = fcmp fast ogt float %1609, %1608
  br i1 %1615, label %1638, label %1633

; <label>:1616                                    ; preds = %1612
  %1617 = fsub fast float %1608, %1416
  %1618 = call float @dx.op.unary.f32(i32 6, float %1617)  ; FAbs(value)
  %1619 = fmul fast float %1618, 0x3FF0CCCCC0000000
  %1620 = fsub fast float %1609, %1608
  %1621 = fcmp fast ogt float %1620, %1619
  br i1 %1621, label %1625, label %1622

; <label>:1622                                    ; preds = %1616
  %1623 = fcmp fast une float %1609, %1415
  br i1 %1623, label %1624, label %1625

; <label>:1624                                    ; preds = %1622
  br label %1625

; <label>:1625                                    ; preds = %1624, %1622, %1616
  %1626 = phi float [ %1609, %1624 ], [ %1415, %1622 ], [ %1415, %1616 ]
  %1627 = phi float [ %1609, %1624 ], [ %1609, %1622 ], [ %1415, %1616 ]
  %1628 = fmul fast float %1618, 0x3FE0CCCCC0000000
  %1629 = fadd fast float %1628, %1608
  %1630 = fsub fast float %1629, %1627
  %1631 = call float @dx.op.unary.f32(i32 6, float %1630)  ; FAbs(value)
  %1632 = fcmp fast olt float %1631, %1628
  br i1 %1632, label %1638, label %1633

; <label>:1633                                    ; preds = %1625, %1614, %1606
  %1634 = phi float [ %1415, %1606 ], [ %1609, %1614 ], [ %1626, %1625 ]
  %1635 = phi float [ %1416, %1606 ], [ %1608, %1614 ], [ %1608, %1625 ]
  %1636 = add nuw nsw i32 %1417, 1
  %1637 = icmp slt i32 %1417, %726
  br i1 %1637, label %1413, label %1638

; <label>:1638                                    ; preds = %1633, %1625, %1614
  %1639 = phi float [ -1.000000e+00, %1633 ], [ %1627, %1625 ], [ %1609, %1614 ]
  %1640 = phi i32 [ 0, %1633 ], [ 1, %1625 ], [ 1, %1614 ]
  br label %1641

; <label>:1641                                    ; preds = %1638, %1249
  %1642 = phi i32 [ 1, %1249 ], [ %1607, %1638 ]
  %1643 = phi float [ -1.000000e+00, %1249 ], [ %1639, %1638 ]
  %1644 = phi i32 [ 0, %1249 ], [ %1640, %1638 ]
  %1645 = icmp ne i32 %1642, 0
  %1646 = select i1 %1645, i32 %1238, i32 %1250
  %1647 = select i1 %1645, float %1411, float %1333
  br label %1836

; <label>:1648                                    ; preds = %1234
  %1649 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1241, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1650 = extractvalue %dx.types.ResRet.i32 %1649, 0
  %1651 = extractvalue %dx.types.ResRet.i32 %1649, 1
  %1652 = extractvalue %dx.types.ResRet.i32 %1649, 2
  %1653 = extractvalue %dx.types.ResRet.i32 %1649, 3
  %1654 = bitcast i32 %1650 to float
  %1655 = bitcast i32 %1651 to float
  %1656 = bitcast i32 %1652 to float
  %1657 = bitcast i32 %1653 to float
  %1658 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1242, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1659 = extractvalue %dx.types.ResRet.i32 %1658, 0
  %1660 = extractvalue %dx.types.ResRet.i32 %1658, 1
  %1661 = extractvalue %dx.types.ResRet.i32 %1658, 2
  %1662 = extractvalue %dx.types.ResRet.i32 %1658, 3
  %1663 = bitcast i32 %1659 to float
  %1664 = bitcast i32 %1660 to float
  %1665 = bitcast i32 %1661 to float
  %1666 = bitcast i32 %1662 to float
  %1667 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1243, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1668 = extractvalue %dx.types.ResRet.i32 %1667, 0
  %1669 = extractvalue %dx.types.ResRet.i32 %1667, 1
  %1670 = extractvalue %dx.types.ResRet.i32 %1667, 2
  %1671 = extractvalue %dx.types.ResRet.i32 %1667, 3
  %1672 = bitcast i32 %1668 to float
  %1673 = bitcast i32 %1669 to float
  %1674 = bitcast i32 %1670 to float
  %1675 = bitcast i32 %1671 to float
  %1676 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1240, i32 %1244, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1677 = extractvalue %dx.types.ResRet.i32 %1676, 0
  %1678 = extractvalue %dx.types.ResRet.i32 %1676, 1
  %1679 = extractvalue %dx.types.ResRet.i32 %1676, 2
  %1680 = extractvalue %dx.types.ResRet.i32 %1676, 3
  %1681 = bitcast i32 %1677 to float
  %1682 = bitcast i32 %1678 to float
  %1683 = bitcast i32 %1679 to float
  %1684 = bitcast i32 %1680 to float
  %1685 = fmul fast float %1654, %912
  %1686 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1663, float %1685)  ; FMad(a,b,c)
  %1687 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1672, float %1686)  ; FMad(a,b,c)
  %1688 = fadd fast float %1687, %1681
  %1689 = fmul fast float %1655, %912
  %1690 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1664, float %1689)  ; FMad(a,b,c)
  %1691 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1673, float %1690)  ; FMad(a,b,c)
  %1692 = fadd fast float %1691, %1682
  %1693 = fmul fast float %1656, %912
  %1694 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1665, float %1693)  ; FMad(a,b,c)
  %1695 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1674, float %1694)  ; FMad(a,b,c)
  %1696 = fadd fast float %1695, %1683
  %1697 = fmul fast float %1657, %912
  %1698 = call float @dx.op.tertiary.f32(i32 46, float %913, float %1666, float %1697)  ; FMad(a,b,c)
  %1699 = call float @dx.op.tertiary.f32(i32 46, float %914, float %1675, float %1698)  ; FMad(a,b,c)
  %1700 = fadd fast float %1699, %1684
  %1701 = fmul fast float %1654, %918
  %1702 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1663, float %1701)  ; FMad(a,b,c)
  %1703 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1672, float %1702)  ; FMad(a,b,c)
  %1704 = fadd fast float %1703, %1681
  %1705 = fmul fast float %1655, %918
  %1706 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1664, float %1705)  ; FMad(a,b,c)
  %1707 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1673, float %1706)  ; FMad(a,b,c)
  %1708 = fadd fast float %1707, %1682
  %1709 = fmul fast float %1656, %918
  %1710 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1665, float %1709)  ; FMad(a,b,c)
  %1711 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1674, float %1710)  ; FMad(a,b,c)
  %1712 = fadd fast float %1711, %1683
  %1713 = fmul fast float %1657, %918
  %1714 = call float @dx.op.tertiary.f32(i32 46, float %919, float %1666, float %1713)  ; FMad(a,b,c)
  %1715 = call float @dx.op.tertiary.f32(i32 46, float %920, float %1675, float %1714)  ; FMad(a,b,c)
  %1716 = fadd fast float %1715, %1684
  %1717 = fdiv fast float %1688, %1700
  %1718 = fdiv fast float %1692, %1700
  %1719 = fdiv fast float %1696, %1700
  %1720 = fdiv fast float %1704, %1716
  %1721 = fdiv fast float %1708, %1716
  %1722 = fdiv fast float %1712, %1716
  %1723 = fsub fast float %1720, %1717
  %1724 = fsub fast float %1721, %1718
  %1725 = fsub fast float %1722, %1719
  %1726 = call float @dx.op.unary.f32(i32 7, float %1717)  ; Saturate(value)
  %1727 = call float @dx.op.unary.f32(i32 7, float %1718)  ; Saturate(value)
  %1728 = fadd fast float %1719, %1004
  br i1 %1248, label %1729, label %1836

; <label>:1729                                    ; preds = %1648
  br label %1730

; <label>:1730                                    ; preds = %1825, %1729
  %1731 = phi float [ %1826, %1825 ], [ -1.000000e+04, %1729 ]
  %1732 = phi float [ %1827, %1825 ], [ -1.000000e+00, %1729 ]
  %1733 = phi i32 [ %1828, %1825 ], [ 0, %1729 ]
  %1734 = icmp eq i32 %1733, %726
  br i1 %1734, label %1741, label %1735

; <label>:1735                                    ; preds = %1730
  %1736 = sitofp i32 %1733 to float
  %1737 = fadd fast float %1736, %1247
  %1738 = fmul fast float %1737, %1246
  %1739 = fadd fast float %1738, 1.000000e+00
  %1740 = fmul fast float %1739, %1739
  br label %1741

; <label>:1741                                    ; preds = %1735, %1730
  %1742 = phi float [ %1740, %1735 ], [ 0.000000e+00, %1730 ]
  %1743 = fmul fast float %1742, %1723
  %1744 = fmul fast float %1742, %1724
  %1745 = fmul fast float %1742, %1725
  %1746 = fadd fast float %1743, %1726
  %1747 = fadd fast float %1744, %1727
  %1748 = fadd fast float %1745, %1728
  %1749 = call float @dx.op.unary.f32(i32 7, float %1746)  ; Saturate(value)
  %1750 = call float @dx.op.unary.f32(i32 7, float %1747)  ; Saturate(value)
  %1751 = fcmp fast oeq float %1746, %1749
  %1752 = fcmp fast oeq float %1747, %1750
  %1753 = and i1 %1751, %1752
  br i1 %1753, label %1754, label %1800

; <label>:1754                                    ; preds = %1741
  %1755 = icmp ult i32 %1238, 8192
  br i1 %1755, label %1766, label %1756

; <label>:1756                                    ; preds = %1754
  %1757 = fmul fast float %1747, 1.280000e+02
  %1758 = fptoui float %1757 to i32
  %1759 = fmul fast float %1746, 1.280000e+02
  %1760 = fptoui float %1759 to i32
  %1761 = mul i32 %1238, 21845
  %1762 = shl i32 %1758, 7
  %1763 = add i32 %1761, -178946048
  %1764 = add i32 %1763, %1760
  %1765 = add i32 %1764, %1762
  br label %1766

; <label>:1766                                    ; preds = %1756, %1754
  %1767 = phi i32 [ %1765, %1756 ], [ %1238, %1754 ]
  %1768 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %1769 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1768, i32 %1767, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1770 = extractvalue %dx.types.ResRet.i32 %1769, 0
  %1771 = lshr i32 %1770, 20
  %1772 = and i32 %1770, 134217728
  %1773 = icmp eq i32 %1772, 0
  %1774 = and i32 %1771, 31
  %1775 = lshr i32 16384, %1774
  %1776 = uitofp i32 %1775 to float
  %1777 = select i1 %1755, float 1.280000e+02, float %1776
  br i1 %1773, label %1795, label %1778

; <label>:1778                                    ; preds = %1766
  %1779 = fmul fast float %1777, %1747
  %1780 = fptoui float %1779 to i32
  %1781 = and i32 %1780, 127
  %1782 = lshr i32 %1770, 3
  %1783 = and i32 %1782, 130944
  %1784 = or i32 %1781, %1783
  %1785 = fmul fast float %1777, %1746
  %1786 = fptoui float %1785 to i32
  %1787 = and i32 %1786, 127
  %1788 = shl i32 %1770, 7
  %1789 = and i32 %1788, 130944
  %1790 = or i32 %1787, %1789
  %1791 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %1792 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1791, i32 0, i32 %1790, i32 %1784, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1793 = extractvalue %dx.types.ResRet.i32 %1792, 0
  %1794 = bitcast i32 %1793 to float
  br label %1795

; <label>:1795                                    ; preds = %1778, %1766
  %1796 = phi float [ %1794, %1778 ], [ 0.000000e+00, %1766 ]
  %1797 = phi i1 [ true, %1778 ], [ false, %1766 ]
  %1798 = select i1 %1797, float %1796, float 0.000000e+00
  %1799 = zext i1 %1797 to i32
  br label %1800

; <label>:1800                                    ; preds = %1795, %1741
  %1801 = phi float [ 0.000000e+00, %1741 ], [ %1798, %1795 ]
  %1802 = phi i32 [ 0, %1741 ], [ %1799, %1795 ]
  %1803 = icmp eq i32 %1802, 0
  br i1 %1803, label %1825, label %1804

; <label>:1804                                    ; preds = %1800
  %1805 = fcmp fast oeq float %1731, -1.000000e+04
  br i1 %1805, label %1806, label %1808

; <label>:1806                                    ; preds = %1804
  %1807 = fcmp fast ogt float %1801, %1748
  br i1 %1807, label %1833, label %1825

; <label>:1808                                    ; preds = %1804
  %1809 = fsub fast float %1748, %1732
  %1810 = call float @dx.op.unary.f32(i32 6, float %1809)  ; FAbs(value)
  %1811 = fmul fast float %1810, 0x3FF0CCCCC0000000
  %1812 = fsub fast float %1801, %1748
  %1813 = fcmp fast ogt float %1812, %1811
  br i1 %1813, label %1817, label %1814

; <label>:1814                                    ; preds = %1808
  %1815 = fcmp fast une float %1801, %1731
  br i1 %1815, label %1816, label %1817

; <label>:1816                                    ; preds = %1814
  br label %1817

; <label>:1817                                    ; preds = %1816, %1814, %1808
  %1818 = phi float [ %1801, %1816 ], [ %1731, %1814 ], [ %1731, %1808 ]
  %1819 = phi float [ %1801, %1816 ], [ %1801, %1814 ], [ %1731, %1808 ]
  %1820 = fmul fast float %1810, 0x3FE0CCCCC0000000
  %1821 = fadd fast float %1820, %1748
  %1822 = fsub fast float %1821, %1819
  %1823 = call float @dx.op.unary.f32(i32 6, float %1822)  ; FAbs(value)
  %1824 = fcmp fast olt float %1823, %1820
  br i1 %1824, label %1833, label %1825

; <label>:1825                                    ; preds = %1817, %1806, %1800
  %1826 = phi float [ %1731, %1800 ], [ %1801, %1806 ], [ %1818, %1817 ]
  %1827 = phi float [ %1732, %1800 ], [ %1748, %1806 ], [ %1748, %1817 ]
  %1828 = add nuw nsw i32 %1733, 1
  %1829 = icmp slt i32 %1733, %726
  br i1 %1829, label %1730, label %1833

; <label>:1830                                    ; preds = %1192, %1184, %1173
  %1831 = phi float [ %1168, %1173 ], [ %1186, %1184 ], [ -1.000000e+00, %1192 ]
  %1832 = phi i32 [ 1, %1173 ], [ 1, %1184 ], [ 0, %1192 ]
  br label %1836

; <label>:1833                                    ; preds = %1825, %1817, %1806
  %1834 = phi float [ -1.000000e+00, %1825 ], [ %1819, %1817 ], [ %1801, %1806 ]
  %1835 = phi i32 [ 0, %1825 ], [ 1, %1817 ], [ 1, %1806 ]
  br label %1836

; <label>:1836                                    ; preds = %1833, %1830, %1648, %1641, %1005
  %1837 = phi i32 [ %274, %1005 ], [ %1238, %1648 ], [ %1646, %1641 ], [ %274, %1830 ], [ %1238, %1833 ]
  %1838 = phi float [ %1091, %1005 ], [ %1728, %1648 ], [ %1647, %1641 ], [ %1091, %1830 ], [ %1728, %1833 ]
  %1839 = phi float [ -1.000000e+00, %1005 ], [ -1.000000e+00, %1648 ], [ %1643, %1641 ], [ %1831, %1830 ], [ %1834, %1833 ]
  %1840 = phi i32 [ 0, %1005 ], [ 0, %1648 ], [ %1644, %1641 ], [ %1832, %1830 ], [ %1835, %1833 ]
  %1841 = icmp eq i32 %1840, 0
  br i1 %1841, label %1869, label %1842

; <label>:1842                                    ; preds = %1836
  %1843 = fmul fast float %912, %912
  %1844 = fmul fast float %913, %913
  %1845 = fadd fast float %1843, %1844
  %1846 = fmul fast float %914, %914
  %1847 = fadd fast float %1845, %1846
  %1848 = call float @dx.op.unary.f32(i32 24, float %1847)  ; Sqrt(value)
  %1849 = call float @dx.op.unary.f32(i32 7, float %1838)  ; Saturate(value)
  %1850 = mul i32 %1837, 336
  %1851 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1852 = add i32 %1850, 96
  %1853 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1851, i32 %1852, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1854 = extractvalue %dx.types.ResRet.i32 %1853, 2
  %1855 = bitcast i32 %1854 to float
  %1856 = add i32 %1850, 112
  %1857 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1851, i32 %1856, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1858 = extractvalue %dx.types.ResRet.i32 %1857, 2
  %1859 = bitcast i32 %1858 to float
  %1860 = fsub fast float %1839, %1855
  %1861 = fdiv fast float %1859, %1860
  %1862 = fsub fast float %1849, %1855
  %1863 = fmul fast float %1862, %1848
  %1864 = fdiv fast float %1863, %1859
  %1865 = fmul fast float %1864, %1861
  %1866 = fsub fast float %1848, %1865
  %1867 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %1866)  ; FMax(a,b)
  %1868 = fadd fast float %1867, %731
  br label %1871

; <label>:1869                                    ; preds = %1836
  %1870 = add i32 %730, 1
  br label %1871

; <label>:1871                                    ; preds = %1869, %1842
  %1872 = phi i32 [ %730, %1842 ], [ %1870, %1869 ]
  %1873 = phi float [ %1868, %1842 ], [ %731, %1869 ]
  %1874 = icmp eq i32 %484, 0
  br i1 %1874, label %1884, label %1875

; <label>:1875                                    ; preds = %1871
  %1876 = icmp eq i32 %729, 0
  br i1 %1876, label %1877, label %1879

; <label>:1877                                    ; preds = %1875
  %1878 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1841)  ; WaveAllTrue(cond)
  br i1 %1878, label %1895, label %1884

; <label>:1879                                    ; preds = %1875
  %1880 = icmp ult i32 %729, %484
  br i1 %1880, label %1884, label %1881

; <label>:1881                                    ; preds = %1879
  %1882 = icmp eq i32 %1872, 0
  %1883 = call i1 @dx.op.waveAllTrue(i32 114, i1 %1882)  ; WaveAllTrue(cond)
  br i1 %1883, label %1895, label %1884

; <label>:1884                                    ; preds = %1881, %1879, %1877, %1871
  %1885 = bitcast float %728 to i32
  %1886 = mul i32 %1885, -1835707051
  %1887 = add i32 %1886, 1216271409
  %1888 = lshr i32 %1887, 15
  %1889 = xor i32 %1888, %1887
  %1890 = lshr i32 %1889, 8
  %1891 = uitofp i32 %1890 to float
  %1892 = fmul fast float %1891, 0x3E70000000000000
  %1893 = add nuw i32 %729, 1
  %1894 = icmp ult i32 %1893, %480
  br i1 %1894, label %727, label %1895

; <label>:1895                                    ; preds = %1884, %1881, %1877
  %1896 = phi i32 [ %1893, %1884 ], [ 0, %1877 ], [ %729, %1881 ]
  %1897 = add i32 %1896, 1
  %1898 = call i32 @dx.op.binary.i32(i32 40, i32 %1897, i32 %480)  ; UMin(a,b)
  %1899 = sub i32 %1898, %1872
  %1900 = call i32 @dx.op.binary.i32(i32 39, i32 1, i32 %1899)  ; UMax(a,b)
  %1901 = uitofp i32 %1900 to float
  %1902 = fdiv fast float %1873, %1901
  %1903 = uitofp i32 %1872 to float
  %1904 = uitofp i32 %1898 to float
  %1905 = fdiv fast float %1903, %1904
  br label %2577

; <label>:1906                                    ; preds = %477
  %1907 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %1908 = extractvalue %dx.types.CBufRet.f32 %1907, 0
  %1909 = extractvalue %dx.types.CBufRet.f32 %1907, 1
  %1910 = extractvalue %dx.types.CBufRet.f32 %1907, 2
  %1911 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %1912 = extractvalue %dx.types.CBufRet.f32 %1911, 0
  %1913 = extractvalue %dx.types.CBufRet.f32 %1911, 1
  %1914 = extractvalue %dx.types.CBufRet.f32 %1911, 2
  %1915 = fsub fast float %333, %1912
  %1916 = fsub fast float %334, %1913
  %1917 = fsub fast float %335, %1914
  %1918 = call float @dx.op.binary.f32(i32 35, float %478, float 0.000000e+00)  ; FMax(a,b)
  %1919 = mul i32 %274, 336
  %1920 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1921 = add i32 %1919, 128
  %1922 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1921, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1923 = add i32 %1919, 144
  %1924 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1923, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1925 = add i32 %1919, 160
  %1926 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1925, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1927 = add i32 %1919, 176
  %1928 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1927, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1929 = add i32 %1919, 256
  %1930 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1929, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1931 = extractvalue %dx.types.ResRet.i32 %1930, 0
  %1932 = extractvalue %dx.types.ResRet.i32 %1930, 1
  %1933 = extractvalue %dx.types.ResRet.i32 %1930, 2
  %1934 = bitcast i32 %1931 to float
  %1935 = bitcast i32 %1932 to float
  %1936 = bitcast i32 %1933 to float
  %1937 = add i32 %1919, 268
  %1938 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1937, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1939 = extractvalue %dx.types.ResRet.i32 %1938, 0
  %1940 = add i32 %1919, 272
  %1941 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1940, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1942 = add i32 %1919, 288
  %1943 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1942, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1944 = icmp eq i32 %1939, 0
  %1945 = fadd fast float %1934, %1908
  %1946 = fadd fast float %1935, %1909
  %1947 = fadd fast float %1936, %1910
  %1948 = fmul fast float %1945, 2.097152e+06
  %1949 = fmul fast float %1946, 2.097152e+06
  %1950 = fmul fast float %1947, 2.097152e+06
  %1951 = fadd fast float %1948, %1915
  %1952 = fadd fast float %1949, %1916
  %1953 = fadd fast float %1950, %1917
  br i1 %1944, label %1954, label %2285

; <label>:1954                                    ; preds = %1906
  %1955 = extractvalue %dx.types.ResRet.i32 %1943, 2
  %1956 = bitcast i32 %1955 to float
  %1957 = extractvalue %dx.types.ResRet.i32 %1943, 1
  %1958 = bitcast i32 %1957 to float
  %1959 = extractvalue %dx.types.ResRet.i32 %1943, 0
  %1960 = bitcast i32 %1959 to float
  %1961 = add i32 %1919, 320
  %1962 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1961, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1963 = extractvalue %dx.types.ResRet.i32 %1962, 0
  %1964 = add i32 %1919, 316
  %1965 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1964, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1966 = extractvalue %dx.types.ResRet.i32 %1965, 0
  %1967 = add i32 %1919, 300
  %1968 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1967, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1969 = extractvalue %dx.types.ResRet.i32 %1968, 0
  %1970 = bitcast i32 %1969 to float
  %1971 = fadd fast float %1951, %1960
  %1972 = fadd fast float %1952, %1958
  %1973 = fadd fast float %1953, %1956
  %1974 = fmul fast float %1971, %1971
  %1975 = fmul fast float %1972, %1972
  %1976 = fadd fast float %1974, %1975
  %1977 = fmul fast float %1973, %1973
  %1978 = fadd fast float %1976, %1977
  %1979 = call float @dx.op.unary.f32(i32 24, float %1978)  ; Sqrt(value)
  %1980 = call float @dx.op.unary.f32(i32 23, float %1979)  ; Log(value)
  %1981 = fadd fast float %1980, %1970
  %1982 = call float @dx.op.unary.f32(i32 27, float %1981)  ; Round_ni(value)
  %1983 = fptosi float %1982 to i32
  %1984 = sub nsw i32 %1983, %1966
  %1985 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %1984)  ; IMax(a,b)
  %1986 = icmp slt i32 %1985, %1963
  br i1 %1986, label %1987, label %2577

; <label>:1987                                    ; preds = %1954
  %1988 = add nsw i32 %1985, %274
  %1989 = mul i32 %1988, 336
  %1990 = add i32 %1989, 96
  %1991 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1990, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1992 = extractvalue %dx.types.ResRet.i32 %1991, 2
  %1993 = bitcast i32 %1992 to float
  %1994 = add i32 %1989, 112
  %1995 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1994, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1996 = extractvalue %dx.types.ResRet.i32 %1995, 2
  %1997 = bitcast i32 %1996 to float
  %1998 = add i32 %1989, 128
  %1999 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %1998, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2000 = extractvalue %dx.types.ResRet.i32 %1999, 0
  %2001 = extractvalue %dx.types.ResRet.i32 %1999, 1
  %2002 = extractvalue %dx.types.ResRet.i32 %1999, 2
  %2003 = bitcast i32 %2000 to float
  %2004 = bitcast i32 %2001 to float
  %2005 = bitcast i32 %2002 to float
  %2006 = add i32 %1989, 144
  %2007 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2006, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2008 = extractvalue %dx.types.ResRet.i32 %2007, 0
  %2009 = extractvalue %dx.types.ResRet.i32 %2007, 1
  %2010 = extractvalue %dx.types.ResRet.i32 %2007, 2
  %2011 = bitcast i32 %2008 to float
  %2012 = bitcast i32 %2009 to float
  %2013 = bitcast i32 %2010 to float
  %2014 = add i32 %1989, 160
  %2015 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2014, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2016 = extractvalue %dx.types.ResRet.i32 %2015, 0
  %2017 = extractvalue %dx.types.ResRet.i32 %2015, 1
  %2018 = extractvalue %dx.types.ResRet.i32 %2015, 2
  %2019 = bitcast i32 %2016 to float
  %2020 = bitcast i32 %2017 to float
  %2021 = bitcast i32 %2018 to float
  %2022 = add i32 %1989, 176
  %2023 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2022, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2024 = extractvalue %dx.types.ResRet.i32 %2023, 0
  %2025 = extractvalue %dx.types.ResRet.i32 %2023, 1
  %2026 = extractvalue %dx.types.ResRet.i32 %2023, 2
  %2027 = bitcast i32 %2024 to float
  %2028 = bitcast i32 %2025 to float
  %2029 = bitcast i32 %2026 to float
  %2030 = add i32 %1989, 256
  %2031 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2030, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2032 = extractvalue %dx.types.ResRet.i32 %2031, 0
  %2033 = extractvalue %dx.types.ResRet.i32 %2031, 1
  %2034 = extractvalue %dx.types.ResRet.i32 %2031, 2
  %2035 = bitcast i32 %2032 to float
  %2036 = bitcast i32 %2033 to float
  %2037 = bitcast i32 %2034 to float
  %2038 = add i32 %1989, 272
  %2039 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2038, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2040 = extractvalue %dx.types.ResRet.i32 %2039, 0
  %2041 = extractvalue %dx.types.ResRet.i32 %2039, 1
  %2042 = extractvalue %dx.types.ResRet.i32 %2039, 2
  %2043 = bitcast i32 %2040 to float
  %2044 = bitcast i32 %2041 to float
  %2045 = bitcast i32 %2042 to float
  %2046 = fadd fast float %2035, %1908
  %2047 = fadd fast float %2036, %1909
  %2048 = fadd fast float %2037, %1910
  %2049 = fmul fast float %2046, 2.097152e+06
  %2050 = fmul fast float %2047, 2.097152e+06
  %2051 = fmul fast float %2048, 2.097152e+06
  %2052 = fadd fast float %2049, %1915
  %2053 = fadd fast float %2052, %2043
  %2054 = fadd fast float %2050, %1916
  %2055 = fadd fast float %2054, %2044
  %2056 = fadd fast float %2051, %1917
  %2057 = fadd fast float %2056, %2045
  %2058 = fmul fast float %2053, %2003
  %2059 = call float @dx.op.tertiary.f32(i32 46, float %2055, float %2011, float %2058)  ; FMad(a,b,c)
  %2060 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2019, float %2059)  ; FMad(a,b,c)
  %2061 = fadd fast float %2060, %2027
  %2062 = fmul fast float %2053, %2004
  %2063 = call float @dx.op.tertiary.f32(i32 46, float %2055, float %2012, float %2062)  ; FMad(a,b,c)
  %2064 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2020, float %2063)  ; FMad(a,b,c)
  %2065 = fadd fast float %2064, %2028
  %2066 = fmul fast float %2053, %2005
  %2067 = call float @dx.op.tertiary.f32(i32 46, float %2055, float %2013, float %2066)  ; FMad(a,b,c)
  %2068 = call float @dx.op.tertiary.f32(i32 46, float %2057, float %2021, float %2067)  ; FMad(a,b,c)
  %2069 = fadd fast float %2068, %2029
  %2070 = fmul fast float %2061, 1.280000e+02
  %2071 = fmul fast float %2065, 1.280000e+02
  %2072 = fptoui float %2070 to i32
  %2073 = fptoui float %2071 to i32
  %2074 = icmp ult i32 %1988, 8192
  br i1 %2074, label %2081, label %2075

; <label>:2075                                    ; preds = %1987
  %2076 = mul i32 %1988, 21845
  %2077 = shl i32 %2073, 7
  %2078 = add i32 %2076, -178946048
  %2079 = add i32 %2078, %2072
  %2080 = add i32 %2079, %2077
  br label %2081

; <label>:2081                                    ; preds = %2075, %1987
  %2082 = phi i32 [ %2080, %2075 ], [ %1988, %1987 ]
  %2083 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %2084 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2083, i32 %2082, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2085 = extractvalue %dx.types.ResRet.i32 %2084, 0
  %2086 = lshr i32 %2085, 20
  %2087 = and i32 %2086, 63
  %2088 = and i32 %2085, 134217728
  %2089 = icmp eq i32 %2088, 0
  br i1 %2089, label %2194, label %2090

; <label>:2090                                    ; preds = %2081
  %2091 = icmp eq i32 %2087, 0
  %2092 = zext i1 %2091 to i32
  %2093 = add i32 %2087, %1988
  %2094 = fmul fast float %2061, 1.638400e+04
  %2095 = fmul fast float %2065, 1.638400e+04
  %2096 = fptoui float %2094 to i32
  %2097 = fptoui float %2095 to i32
  br i1 %2091, label %2169, label %2098

; <label>:2098                                    ; preds = %2090
  %2099 = add i32 %1989, 304
  %2100 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2099, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2101 = extractvalue %dx.types.ResRet.i32 %2100, 0
  %2102 = extractvalue %dx.types.ResRet.i32 %2100, 1
  %2103 = mul i32 %2093, 336
  %2104 = add i32 %2103, 112
  %2105 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2104, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2106 = extractvalue %dx.types.ResRet.i32 %2105, 2
  %2107 = bitcast i32 %2106 to float
  %2108 = add i32 %2103, 304
  %2109 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2108, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2110 = extractvalue %dx.types.ResRet.i32 %2109, 0
  %2111 = extractvalue %dx.types.ResRet.i32 %2109, 1
  %2112 = shl i32 %2101, 5
  %2113 = shl i32 %2102, 5
  %2114 = shl i32 %2110, 5
  %2115 = shl i32 %2111, 5
  %2116 = sub i32 %2072, %2112
  %2117 = sub i32 %2073, %2113
  %2118 = and i32 %2086, 31
  %2119 = shl i32 %2114, %2118
  %2120 = shl i32 %2115, %2118
  %2121 = add i32 %2116, %2119
  %2122 = add i32 %2117, %2120
  %2123 = lshr i32 %2121, %2118
  %2124 = lshr i32 %2122, %2118
  %2125 = shl i32 %2123, 7
  %2126 = shl i32 %2124, 7
  %2127 = or i32 %2125, 127
  %2128 = or i32 %2126, 127
  %2129 = sitofp i32 %2101 to float
  %2130 = sitofp i32 %2102 to float
  %2131 = sitofp i32 %2110 to float
  %2132 = sitofp i32 %2111 to float
  %2133 = shl i32 1, %2118
  %2134 = uitofp i32 %2133 to float
  %2135 = fdiv fast float 1.000000e+00, %2134
  %2136 = fmul fast float %2135, %2129
  %2137 = fmul fast float %2135, %2130
  %2138 = fsub fast float %2131, %2136
  %2139 = fsub fast float %2132, %2137
  %2140 = fmul fast float %2138, 2.500000e-01
  %2141 = fmul fast float %2139, 2.500000e-01
  %2142 = fmul fast float %2135, %1997
  %2143 = fsub fast float %2107, %2142
  %2144 = fmul fast float %2135, %2061
  %2145 = fmul fast float %2135, %2065
  %2146 = fadd fast float %2140, %2144
  %2147 = fadd fast float %2141, %2145
  %2148 = fmul fast float %2146, 1.638400e+04
  %2149 = fmul fast float %2147, 1.638400e+04
  %2150 = fptoui float %2148 to i32
  %2151 = fptoui float %2149 to i32
  %2152 = call i32 @dx.op.binary.i32(i32 39, i32 %2150, i32 %2125)  ; UMax(a,b)
  %2153 = call i32 @dx.op.binary.i32(i32 39, i32 %2151, i32 %2126)  ; UMax(a,b)
  %2154 = call i32 @dx.op.binary.i32(i32 40, i32 %2152, i32 %2127)  ; UMin(a,b)
  %2155 = call i32 @dx.op.binary.i32(i32 40, i32 %2153, i32 %2128)  ; UMin(a,b)
  %2156 = icmp ult i32 %2093, 8192
  br i1 %2156, label %2162, label %2157

; <label>:2157                                    ; preds = %2098
  %2158 = mul i32 %2093, 21845
  %2159 = add i32 %2158, -178946048
  %2160 = add i32 %2159, %2123
  %2161 = add i32 %2160, %2126
  br label %2162

; <label>:2162                                    ; preds = %2157, %2098
  %2163 = phi i32 [ %2161, %2157 ], [ %2093, %2098 ]
  %2164 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2083, i32 %2163, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2165 = extractvalue %dx.types.ResRet.i32 %2164, 0
  %2166 = and i32 %2165, 200278016
  %2167 = icmp eq i32 %2166, 134217728
  %2168 = zext i1 %2167 to i32
  br label %2169

; <label>:2169                                    ; preds = %2162, %2090
  %2170 = phi i32 [ %2154, %2162 ], [ %2096, %2090 ]
  %2171 = phi i32 [ %2155, %2162 ], [ %2097, %2090 ]
  %2172 = phi float [ %2148, %2162 ], [ %2094, %2090 ]
  %2173 = phi float [ %2149, %2162 ], [ %2095, %2090 ]
  %2174 = phi float [ %2135, %2162 ], [ 1.000000e+00, %2090 ]
  %2175 = phi float [ %2143, %2162 ], [ 0.000000e+00, %2090 ]
  %2176 = phi i32 [ %2168, %2162 ], [ %2092, %2090 ]
  %2177 = phi i32 [ %2165, %2162 ], [ %2085, %2090 ]
  %2178 = icmp eq i32 %2176, 0
  br i1 %2178, label %2194, label %2179

; <label>:2179                                    ; preds = %2169
  %2180 = shl i32 %2177, 7
  %2181 = and i32 %2180, 130944
  %2182 = lshr i32 %2177, 3
  %2183 = and i32 %2182, 130944
  %2184 = and i32 %2170, 127
  %2185 = and i32 %2171, 127
  %2186 = or i32 %2181, %2184
  %2187 = or i32 %2183, %2185
  %2188 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %2189 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2188, i32 0, i32 %2186, i32 %2187, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2190 = extractvalue %dx.types.ResRet.i32 %2189, 0
  %2191 = bitcast i32 %2190 to float
  %2192 = fsub fast float %2191, %2175
  %2193 = fdiv fast float %2192, %2174
  br label %2194

; <label>:2194                                    ; preds = %2179, %2169, %2081
  %2195 = phi float [ %2193, %2179 ], [ 0.000000e+00, %2169 ], [ 0.000000e+00, %2081 ]
  %2196 = phi i32 [ %2093, %2179 ], [ -1, %2169 ], [ -1, %2081 ]
  %2197 = phi i1 [ true, %2179 ], [ false, %2169 ], [ false, %2081 ]
  %2198 = phi i32 [ %2170, %2179 ], [ %2170, %2169 ], [ 0, %2081 ]
  %2199 = phi i32 [ %2171, %2179 ], [ %2171, %2169 ], [ 0, %2081 ]
  %2200 = phi float [ %2172, %2179 ], [ %2172, %2169 ], [ 0.000000e+00, %2081 ]
  %2201 = phi float [ %2173, %2179 ], [ %2173, %2169 ], [ 0.000000e+00, %2081 ]
  br i1 %2197, label %2202, label %2577

; <label>:2202                                    ; preds = %2194
  %2203 = mul i32 %2196, 336
  %2204 = add i32 %2203, 96
  %2205 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2204, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2206 = extractvalue %dx.types.ResRet.i32 %2205, 2
  %2207 = bitcast i32 %2206 to float
  %2208 = add i32 %2203, 192
  %2209 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2208, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2210 = extractvalue %dx.types.ResRet.i32 %2209, 0
  %2211 = extractvalue %dx.types.ResRet.i32 %2209, 1
  %2212 = extractvalue %dx.types.ResRet.i32 %2209, 2
  %2213 = bitcast i32 %2210 to float
  %2214 = bitcast i32 %2211 to float
  %2215 = bitcast i32 %2212 to float
  %2216 = add i32 %2203, 208
  %2217 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2216, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2218 = extractvalue %dx.types.ResRet.i32 %2217, 0
  %2219 = extractvalue %dx.types.ResRet.i32 %2217, 1
  %2220 = extractvalue %dx.types.ResRet.i32 %2217, 2
  %2221 = bitcast i32 %2218 to float
  %2222 = bitcast i32 %2219 to float
  %2223 = bitcast i32 %2220 to float
  %2224 = add i32 %2203, 224
  %2225 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2224, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2226 = extractvalue %dx.types.ResRet.i32 %2225, 0
  %2227 = extractvalue %dx.types.ResRet.i32 %2225, 1
  %2228 = extractvalue %dx.types.ResRet.i32 %2225, 2
  %2229 = bitcast i32 %2226 to float
  %2230 = bitcast i32 %2227 to float
  %2231 = bitcast i32 %2228 to float
  %2232 = add i32 %2203, 240
  %2233 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2232, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2234 = extractvalue %dx.types.ResRet.i32 %2233, 0
  %2235 = extractvalue %dx.types.ResRet.i32 %2233, 1
  %2236 = extractvalue %dx.types.ResRet.i32 %2233, 2
  %2237 = bitcast i32 %2234 to float
  %2238 = bitcast i32 %2235 to float
  %2239 = bitcast i32 %2236 to float
  %2240 = call float @dx.op.dot3.f32(i32 55, float %327, float %328, float %329, float %2053, float %2055, float %2057)  ; Dot3(ax,ay,az,bx,by,bz)
  %2241 = fsub fast float -0.000000e+00, %2240
  %2242 = fmul fast float %2213, %327
  %2243 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2221, float %2242)  ; FMad(a,b,c)
  %2244 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2229, float %2243)  ; FMad(a,b,c)
  %2245 = call float @dx.op.tertiary.f32(i32 46, float %2241, float %2237, float %2244)  ; FMad(a,b,c)
  %2246 = fmul fast float %2214, %327
  %2247 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2222, float %2246)  ; FMad(a,b,c)
  %2248 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2230, float %2247)  ; FMad(a,b,c)
  %2249 = call float @dx.op.tertiary.f32(i32 46, float %2241, float %2238, float %2248)  ; FMad(a,b,c)
  %2250 = fmul fast float %2215, %327
  %2251 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2223, float %2250)  ; FMad(a,b,c)
  %2252 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2231, float %2251)  ; FMad(a,b,c)
  %2253 = call float @dx.op.tertiary.f32(i32 46, float %2241, float %2239, float %2252)  ; FMad(a,b,c)
  %2254 = fsub fast float -0.000000e+00, %2245
  %2255 = fsub fast float -0.000000e+00, %2249
  %2256 = fdiv fast float %2254, %2253
  %2257 = fdiv fast float %2255, %2253
  %2258 = uitofp i32 %2198 to float
  %2259 = uitofp i32 %2199 to float
  %2260 = fadd fast float %2258, 5.000000e-01
  %2261 = fadd fast float %2259, 5.000000e-01
  %2262 = fsub fast float %2260, %2200
  %2263 = fsub fast float %2261, %2201
  %2264 = fmul fast float %2262, 0x3F10000000000000
  %2265 = fmul fast float %2263, 0x3F10000000000000
  %2266 = call float @dx.op.dot2.f32(i32 54, float %2256, float %2257, float %2264, float %2265)  ; Dot2(ax,ay,bx,by)
  %2267 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2266)  ; FMax(a,b)
  %2268 = fmul fast float %2267, 2.000000e+00
  %2269 = fmul fast float %2207, 1.000000e+02
  %2270 = call float @dx.op.unary.f32(i32 6, float %2269)  ; FAbs(value)
  %2271 = call float @dx.op.binary.f32(i32 36, float %2268, float %2270)  ; FMin(a,b)
  %2272 = sub nsw i32 %2196, %1988
  %2273 = and i32 %2272, 31
  %2274 = shl i32 1, %2273
  %2275 = uitofp i32 %2274 to float
  %2276 = fmul fast float %2271, %2275
  %2277 = fmul fast float %1993, %1918
  %2278 = fadd fast float %2195, %2277
  %2279 = fsub fast float %2278, %2276
  %2280 = fcmp fast ogt float %2279, %2069
  br i1 %2280, label %2281, label %2577

; <label>:2281                                    ; preds = %2202
  %2282 = fsub fast float %2069, %2195
  %2283 = fdiv fast float %2282, %1993
  %2284 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %2283)  ; FMax(a,b)
  br label %2577

; <label>:2285                                    ; preds = %1906
  %2286 = extractvalue %dx.types.ResRet.i32 %1928, 3
  %2287 = extractvalue %dx.types.ResRet.i32 %1928, 2
  %2288 = extractvalue %dx.types.ResRet.i32 %1928, 1
  %2289 = extractvalue %dx.types.ResRet.i32 %1928, 0
  %2290 = extractvalue %dx.types.ResRet.i32 %1926, 3
  %2291 = extractvalue %dx.types.ResRet.i32 %1926, 2
  %2292 = extractvalue %dx.types.ResRet.i32 %1926, 1
  %2293 = extractvalue %dx.types.ResRet.i32 %1926, 0
  %2294 = extractvalue %dx.types.ResRet.i32 %1924, 3
  %2295 = extractvalue %dx.types.ResRet.i32 %1924, 2
  %2296 = extractvalue %dx.types.ResRet.i32 %1924, 1
  %2297 = extractvalue %dx.types.ResRet.i32 %1924, 0
  %2298 = extractvalue %dx.types.ResRet.i32 %1922, 3
  %2299 = extractvalue %dx.types.ResRet.i32 %1922, 2
  %2300 = extractvalue %dx.types.ResRet.i32 %1922, 1
  %2301 = extractvalue %dx.types.ResRet.i32 %1922, 0
  %2302 = add i32 %1919, 112
  %2303 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2302, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2304 = extractvalue %dx.types.ResRet.i32 %2303, 2
  %2305 = add i32 %1919, 96
  %2306 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2305, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2307 = extractvalue %dx.types.ResRet.i32 %2306, 2
  %2308 = extractvalue %dx.types.ResRet.i32 %1941, 2
  %2309 = bitcast i32 %2308 to float
  %2310 = extractvalue %dx.types.ResRet.i32 %1941, 1
  %2311 = bitcast i32 %2310 to float
  %2312 = extractvalue %dx.types.ResRet.i32 %1941, 0
  %2313 = bitcast i32 %2312 to float
  %2314 = fadd fast float %1951, %2313
  %2315 = fadd fast float %1952, %2311
  %2316 = fadd fast float %1953, %2309
  %2317 = icmp eq i32 %1939, 2
  br i1 %2317, label %2370, label %2318

; <label>:2318                                    ; preds = %2285
  %2319 = call float @dx.op.unary.f32(i32 6, float %2314)  ; FAbs(value)
  %2320 = call float @dx.op.unary.f32(i32 6, float %2315)  ; FAbs(value)
  %2321 = fcmp fast ult float %2319, %2320
  %2322 = call float @dx.op.unary.f32(i32 6, float %2316)  ; FAbs(value)
  %2323 = fcmp fast ult float %2319, %2322
  %2324 = or i1 %2321, %2323
  br i1 %2324, label %2328, label %2325

; <label>:2325                                    ; preds = %2318
  %2326 = fcmp ule float %2314, 0.000000e+00
  %2327 = zext i1 %2326 to i32
  br label %2336

; <label>:2328                                    ; preds = %2318
  %2329 = fcmp fast ogt float %2320, %2322
  br i1 %2329, label %2330, label %2333

; <label>:2330                                    ; preds = %2328
  %2331 = fcmp fast ogt float %2315, 0.000000e+00
  %2332 = select i1 %2331, i32 2, i32 3
  br label %2336

; <label>:2333                                    ; preds = %2328
  %2334 = fcmp fast ogt float %2316, 0.000000e+00
  %2335 = select i1 %2334, i32 4, i32 5
  br label %2336

; <label>:2336                                    ; preds = %2333, %2330, %2325
  %2337 = phi i32 [ %2327, %2325 ], [ %2332, %2330 ], [ %2335, %2333 ]
  %2338 = add i32 %2337, %274
  %2339 = mul i32 %2338, 336
  %2340 = add i32 %2339, 96
  %2341 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2340, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2342 = extractvalue %dx.types.ResRet.i32 %2341, 2
  %2343 = add i32 %2339, 112
  %2344 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2343, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2345 = extractvalue %dx.types.ResRet.i32 %2344, 2
  %2346 = add i32 %2339, 128
  %2347 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2346, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2348 = extractvalue %dx.types.ResRet.i32 %2347, 0
  %2349 = extractvalue %dx.types.ResRet.i32 %2347, 1
  %2350 = extractvalue %dx.types.ResRet.i32 %2347, 2
  %2351 = extractvalue %dx.types.ResRet.i32 %2347, 3
  %2352 = add i32 %2339, 144
  %2353 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2352, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2354 = extractvalue %dx.types.ResRet.i32 %2353, 0
  %2355 = extractvalue %dx.types.ResRet.i32 %2353, 1
  %2356 = extractvalue %dx.types.ResRet.i32 %2353, 2
  %2357 = extractvalue %dx.types.ResRet.i32 %2353, 3
  %2358 = add i32 %2339, 160
  %2359 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2358, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2360 = extractvalue %dx.types.ResRet.i32 %2359, 0
  %2361 = extractvalue %dx.types.ResRet.i32 %2359, 1
  %2362 = extractvalue %dx.types.ResRet.i32 %2359, 2
  %2363 = extractvalue %dx.types.ResRet.i32 %2359, 3
  %2364 = add i32 %2339, 176
  %2365 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2364, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2366 = extractvalue %dx.types.ResRet.i32 %2365, 0
  %2367 = extractvalue %dx.types.ResRet.i32 %2365, 1
  %2368 = extractvalue %dx.types.ResRet.i32 %2365, 2
  %2369 = extractvalue %dx.types.ResRet.i32 %2365, 3
  br label %2370

; <label>:2370                                    ; preds = %2336, %2285
  %2371 = phi i32 [ %2342, %2336 ], [ %2307, %2285 ]
  %2372 = phi i32 [ %2345, %2336 ], [ %2304, %2285 ]
  %2373 = phi i32 [ %2348, %2336 ], [ %2301, %2285 ]
  %2374 = phi i32 [ %2349, %2336 ], [ %2300, %2285 ]
  %2375 = phi i32 [ %2350, %2336 ], [ %2299, %2285 ]
  %2376 = phi i32 [ %2351, %2336 ], [ %2298, %2285 ]
  %2377 = phi i32 [ %2354, %2336 ], [ %2297, %2285 ]
  %2378 = phi i32 [ %2355, %2336 ], [ %2296, %2285 ]
  %2379 = phi i32 [ %2356, %2336 ], [ %2295, %2285 ]
  %2380 = phi i32 [ %2357, %2336 ], [ %2294, %2285 ]
  %2381 = phi i32 [ %2360, %2336 ], [ %2293, %2285 ]
  %2382 = phi i32 [ %2361, %2336 ], [ %2292, %2285 ]
  %2383 = phi i32 [ %2362, %2336 ], [ %2291, %2285 ]
  %2384 = phi i32 [ %2363, %2336 ], [ %2290, %2285 ]
  %2385 = phi i32 [ %2366, %2336 ], [ %2289, %2285 ]
  %2386 = phi i32 [ %2367, %2336 ], [ %2288, %2285 ]
  %2387 = phi i32 [ %2368, %2336 ], [ %2287, %2285 ]
  %2388 = phi i32 [ %2369, %2336 ], [ %2286, %2285 ]
  %2389 = phi i32 [ %2338, %2336 ], [ %274, %2285 ]
  %2390 = bitcast i32 %2388 to float
  %2391 = bitcast i32 %2387 to float
  %2392 = bitcast i32 %2386 to float
  %2393 = bitcast i32 %2385 to float
  %2394 = bitcast i32 %2384 to float
  %2395 = bitcast i32 %2383 to float
  %2396 = bitcast i32 %2382 to float
  %2397 = bitcast i32 %2381 to float
  %2398 = bitcast i32 %2380 to float
  %2399 = bitcast i32 %2379 to float
  %2400 = bitcast i32 %2378 to float
  %2401 = bitcast i32 %2377 to float
  %2402 = bitcast i32 %2376 to float
  %2403 = bitcast i32 %2375 to float
  %2404 = bitcast i32 %2374 to float
  %2405 = bitcast i32 %2373 to float
  %2406 = bitcast i32 %2372 to float
  %2407 = bitcast i32 %2371 to float
  %2408 = fmul fast float %2405, %2314
  %2409 = call float @dx.op.tertiary.f32(i32 46, float %2315, float %2401, float %2408)  ; FMad(a,b,c)
  %2410 = call float @dx.op.tertiary.f32(i32 46, float %2316, float %2397, float %2409)  ; FMad(a,b,c)
  %2411 = fadd fast float %2410, %2393
  %2412 = fmul fast float %2404, %2314
  %2413 = call float @dx.op.tertiary.f32(i32 46, float %2315, float %2400, float %2412)  ; FMad(a,b,c)
  %2414 = call float @dx.op.tertiary.f32(i32 46, float %2316, float %2396, float %2413)  ; FMad(a,b,c)
  %2415 = fadd fast float %2414, %2392
  %2416 = fmul fast float %2403, %2314
  %2417 = call float @dx.op.tertiary.f32(i32 46, float %2315, float %2399, float %2416)  ; FMad(a,b,c)
  %2418 = call float @dx.op.tertiary.f32(i32 46, float %2316, float %2395, float %2417)  ; FMad(a,b,c)
  %2419 = fadd fast float %2418, %2391
  %2420 = fmul fast float %2402, %2314
  %2421 = call float @dx.op.tertiary.f32(i32 46, float %2315, float %2398, float %2420)  ; FMad(a,b,c)
  %2422 = call float @dx.op.tertiary.f32(i32 46, float %2316, float %2394, float %2421)  ; FMad(a,b,c)
  %2423 = fadd fast float %2422, %2390
  %2424 = fdiv fast float %2411, %2423
  %2425 = fdiv fast float %2415, %2423
  %2426 = fdiv fast float %2419, %2423
  %2427 = icmp ult i32 %2389, 8192
  br i1 %2427, label %2438, label %2428

; <label>:2428                                    ; preds = %2370
  %2429 = fmul fast float %2425, 1.280000e+02
  %2430 = fptoui float %2429 to i32
  %2431 = fmul fast float %2424, 1.280000e+02
  %2432 = fptoui float %2431 to i32
  %2433 = mul i32 %2389, 21845
  %2434 = shl i32 %2430, 7
  %2435 = add i32 %2433, -178946048
  %2436 = add i32 %2435, %2432
  %2437 = add i32 %2436, %2434
  br label %2438

; <label>:2438                                    ; preds = %2428, %2370
  %2439 = phi i32 [ %2437, %2428 ], [ %2389, %2370 ]
  %2440 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %2441 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2440, i32 %2439, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2442 = extractvalue %dx.types.ResRet.i32 %2441, 0
  %2443 = lshr i32 %2442, 20
  %2444 = and i32 %2443, 63
  %2445 = and i32 %2442, 134217728
  %2446 = icmp eq i32 %2445, 0
  %2447 = select i1 %2427, i32 7, i32 %2444
  %2448 = and i32 %2447, 31
  %2449 = lshr i32 16384, %2448
  %2450 = uitofp i32 %2449 to float
  %2451 = fmul fast float %2450, %2424
  %2452 = fmul fast float %2450, %2425
  %2453 = fptoui float %2451 to i32
  %2454 = fptoui float %2452 to i32
  br i1 %2446, label %2468, label %2455

; <label>:2455                                    ; preds = %2438
  %2456 = lshr i32 %2442, 3
  %2457 = and i32 %2456, 130944
  %2458 = and i32 %2454, 127
  %2459 = or i32 %2458, %2457
  %2460 = shl i32 %2442, 7
  %2461 = and i32 %2460, 130944
  %2462 = and i32 %2453, 127
  %2463 = or i32 %2462, %2461
  %2464 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %2465 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %2464, i32 0, i32 %2463, i32 %2459, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %2466 = extractvalue %dx.types.ResRet.i32 %2465, 0
  %2467 = bitcast i32 %2466 to float
  br label %2468

; <label>:2468                                    ; preds = %2455, %2438
  %2469 = phi float [ %2467, %2455 ], [ 0.000000e+00, %2438 ]
  %2470 = phi i32 [ %2447, %2455 ], [ 0, %2438 ]
  %2471 = phi i32 [ %2389, %2455 ], [ -1, %2438 ]
  %2472 = phi i1 [ true, %2455 ], [ false, %2438 ]
  %2473 = phi i32 [ %2453, %2455 ], [ 0, %2438 ]
  %2474 = phi i32 [ %2454, %2455 ], [ 0, %2438 ]
  %2475 = phi float [ %2451, %2455 ], [ 0.000000e+00, %2438 ]
  %2476 = phi float [ %2452, %2455 ], [ 0.000000e+00, %2438 ]
  br i1 %2472, label %2477, label %2577

; <label>:2477                                    ; preds = %2468
  %2478 = mul i32 %2471, 336
  %2479 = add i32 %2478, 96
  %2480 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2479, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2481 = extractvalue %dx.types.ResRet.i32 %2480, 2
  %2482 = bitcast i32 %2481 to float
  %2483 = add i32 %2478, 192
  %2484 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2483, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2485 = extractvalue %dx.types.ResRet.i32 %2484, 0
  %2486 = extractvalue %dx.types.ResRet.i32 %2484, 1
  %2487 = extractvalue %dx.types.ResRet.i32 %2484, 2
  %2488 = bitcast i32 %2485 to float
  %2489 = bitcast i32 %2486 to float
  %2490 = bitcast i32 %2487 to float
  %2491 = add i32 %2478, 208
  %2492 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2491, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2493 = extractvalue %dx.types.ResRet.i32 %2492, 0
  %2494 = extractvalue %dx.types.ResRet.i32 %2492, 1
  %2495 = extractvalue %dx.types.ResRet.i32 %2492, 2
  %2496 = bitcast i32 %2493 to float
  %2497 = bitcast i32 %2494 to float
  %2498 = bitcast i32 %2495 to float
  %2499 = add i32 %2478, 224
  %2500 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2499, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2501 = extractvalue %dx.types.ResRet.i32 %2500, 0
  %2502 = extractvalue %dx.types.ResRet.i32 %2500, 1
  %2503 = extractvalue %dx.types.ResRet.i32 %2500, 2
  %2504 = bitcast i32 %2501 to float
  %2505 = bitcast i32 %2502 to float
  %2506 = bitcast i32 %2503 to float
  %2507 = add i32 %2478, 240
  %2508 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1920, i32 %2507, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2509 = extractvalue %dx.types.ResRet.i32 %2508, 0
  %2510 = extractvalue %dx.types.ResRet.i32 %2508, 1
  %2511 = extractvalue %dx.types.ResRet.i32 %2508, 2
  %2512 = bitcast i32 %2509 to float
  %2513 = bitcast i32 %2510 to float
  %2514 = bitcast i32 %2511 to float
  %2515 = call float @dx.op.dot3.f32(i32 55, float %327, float %328, float %329, float %2314, float %2315, float %2316)  ; Dot3(ax,ay,az,bx,by,bz)
  %2516 = fsub fast float -0.000000e+00, %2515
  %2517 = fmul fast float %2488, %327
  %2518 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2496, float %2517)  ; FMad(a,b,c)
  %2519 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2504, float %2518)  ; FMad(a,b,c)
  %2520 = call float @dx.op.tertiary.f32(i32 46, float %2516, float %2512, float %2519)  ; FMad(a,b,c)
  %2521 = fmul fast float %2489, %327
  %2522 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2497, float %2521)  ; FMad(a,b,c)
  %2523 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2505, float %2522)  ; FMad(a,b,c)
  %2524 = call float @dx.op.tertiary.f32(i32 46, float %2516, float %2513, float %2523)  ; FMad(a,b,c)
  %2525 = fmul fast float %2490, %327
  %2526 = call float @dx.op.tertiary.f32(i32 46, float %328, float %2498, float %2525)  ; FMad(a,b,c)
  %2527 = call float @dx.op.tertiary.f32(i32 46, float %329, float %2506, float %2526)  ; FMad(a,b,c)
  %2528 = call float @dx.op.tertiary.f32(i32 46, float %2516, float %2514, float %2527)  ; FMad(a,b,c)
  %2529 = fsub fast float -0.000000e+00, %2520
  %2530 = fsub fast float -0.000000e+00, %2524
  %2531 = fdiv fast float %2529, %2528
  %2532 = fdiv fast float %2530, %2528
  %2533 = and i32 %2470, 31
  %2534 = lshr i32 16384, %2533
  %2535 = uitofp i32 %2534 to float
  %2536 = uitofp i32 %2473 to float
  %2537 = uitofp i32 %2474 to float
  %2538 = fadd fast float %2536, 5.000000e-01
  %2539 = fadd fast float %2537, 5.000000e-01
  %2540 = fsub fast float %2538, %2475
  %2541 = fsub fast float %2539, %2476
  %2542 = fdiv fast float %2540, %2535
  %2543 = fdiv fast float %2541, %2535
  %2544 = call float @dx.op.dot2.f32(i32 54, float %2531, float %2532, float %2542, float %2543)  ; Dot2(ax,ay,bx,by)
  %2545 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2544)  ; FMax(a,b)
  %2546 = fmul fast float %2545, 2.000000e+00
  %2547 = fmul fast float %2482, 1.000000e+02
  %2548 = call float @dx.op.unary.f32(i32 6, float %2547)  ; FAbs(value)
  %2549 = call float @dx.op.binary.f32(i32 36, float %2546, float %2548)  ; FMin(a,b)
  %2550 = sub nsw i32 %2471, %2389
  %2551 = and i32 %2550, 31
  %2552 = shl i32 1, %2551
  %2553 = uitofp i32 %2552 to float
  %2554 = fmul fast float %2549, %2553
  %2555 = fmul fast float %1918, %2407
  %2556 = fsub fast float -0.000000e+00, %2555
  %2557 = fdiv fast float %2556, %2423
  %2558 = fsub fast float %2469, %2554
  %2559 = fsub fast float %2558, %2557
  %2560 = fcmp fast ogt float %2559, %2426
  br i1 %2560, label %2561, label %2577

; <label>:2561                                    ; preds = %2477
  %2562 = fmul fast float %2314, %2314
  %2563 = fmul fast float %2315, %2315
  %2564 = fadd fast float %2562, %2563
  %2565 = fmul fast float %2316, %2316
  %2566 = fadd fast float %2564, %2565
  %2567 = call float @dx.op.unary.f32(i32 24, float %2566)  ; Sqrt(value)
  %2568 = fsub fast float %2469, %2407
  %2569 = fdiv fast float %2406, %2568
  %2570 = fsub fast float %2426, %2407
  %2571 = fmul fast float %2567, %2570
  %2572 = fdiv fast float %2571, %2406
  %2573 = fmul fast float %2572, %2569
  %2574 = fsub fast float %2567, %2573
  %2575 = call float @dx.op.binary.f32(i32 35, float 0x3EB0C6F7A0000000, float %2574)  ; FMax(a,b)
  %2576 = fadd fast float %2575, %1918
  br label %2577

; <label>:2577                                    ; preds = %2561, %2477, %2468, %2281, %2202, %2194, %1954, %1895, %482
  %2578 = phi float [ 0.000000e+00, %482 ], [ %1905, %1895 ], [ 0.000000e+00, %2281 ], [ 1.000000e+00, %2202 ], [ 0.000000e+00, %2561 ], [ 1.000000e+00, %2477 ], [ 1.000000e+00, %2468 ], [ 1.000000e+00, %2194 ], [ 1.000000e+00, %1954 ]
  %2579 = phi float [ -1.000000e+00, %482 ], [ %1902, %1895 ], [ %2284, %2281 ], [ -1.000000e+00, %2202 ], [ %2576, %2561 ], [ -1.000000e+00, %2477 ], [ -1.000000e+00, %2468 ], [ -1.000000e+00, %2194 ], [ -1.000000e+00, %1954 ]
  %2580 = fcmp fast olt float %224, 1.000000e+00
  %2581 = fcmp fast olt float %2578, 1.000000e+00
  %2582 = and i1 %2580, %2581
  br i1 %2582, label %2583, label %2595

; <label>:2583                                    ; preds = %2577
  %2584 = call float @dx.op.binary.f32(i32 36, float %224, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %2585 = fsub fast float 1.000000e+00, %2584
  %2586 = call float @dx.op.unary.f32(i32 23, float %2585)  ; Log(value)
  %2587 = fmul fast float %2579, 0x3FA99999A0000000
  %2588 = fmul fast float %2587, %2586
  %2589 = call float @dx.op.unary.f32(i32 21, float %2588)  ; Exp(value)
  %2590 = call float @dx.op.unary.f32(i32 7, float %2589)  ; Saturate(value)
  %2591 = fsub fast float 1.000000e+00, %2590
  %2592 = fmul fast float %2591, %2578
  %2593 = fadd fast float %2592, %2590
  %2594 = fmul fast float %2593, %2593
  br label %2595

; <label>:2595                                    ; preds = %2583, %2577
  %2596 = phi float [ %2578, %2577 ], [ %2594, %2583 ]
  br i1 %288, label %3129, label %2597

; <label>:2597                                    ; preds = %2595
  %2598 = fcmp fast ogt float %2596, 0.000000e+00
  br i1 %2598, label %2599, label %2847

; <label>:2599                                    ; preds = %2597
  %2600 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %2601 = extractvalue %dx.types.CBufRet.i32 %2600, 0
  %2602 = mul i32 %84, 1664525
  %2603 = mul i32 %85, 1664525
  %2604 = mul i32 %2601, 1664525
  %2605 = add i32 %2602, 1013904223
  %2606 = add i32 %2603, 1013904223
  %2607 = add i32 %2604, 1013904223
  %2608 = mul i32 %2607, %2606
  %2609 = add i32 %2605, %2608
  %2610 = mul i32 %2609, %2607
  %2611 = add i32 %2610, %2606
  %2612 = mul i32 %2611, %2609
  %2613 = add i32 %2612, %2607
  %2614 = mul i32 %2613, %2611
  %2615 = add i32 %2614, %2609
  %2616 = mul i32 %2615, %2613
  %2617 = add i32 %2616, %2611
  %2618 = lshr i32 %2615, 16
  %2619 = add i32 %2602, 1042201148
  %2620 = add i32 %2603, 1042201148
  %2621 = mul i32 %2607, %2620
  %2622 = add i32 %2619, %2621
  %2623 = mul i32 %2622, %2607
  %2624 = add i32 %2623, %2620
  %2625 = mul i32 %2624, %2622
  %2626 = add i32 %2625, %2607
  %2627 = mul i32 %2626, %2624
  %2628 = add i32 %2627, %2622
  %2629 = lshr i32 %2628, 16
  %2630 = uitofp i32 %2601 to float
  %2631 = fmul fast float %2630, 1.250000e-01
  %2632 = uitofp i32 %2618 to float
  %2633 = fmul fast float %2632, 0x3EF0000000000000
  %2634 = fadd fast float %2633, %2631
  %2635 = call float @dx.op.unary.f32(i32 22, float %2634)  ; Frc(value)
  %2636 = call i32 @dx.op.unary.i32(i32 30, i32 %2601)  ; Bfrev(value)
  %2637 = xor i32 %2617, %2636
  %2638 = lshr i32 %2637, 16
  %2639 = uitofp i32 %2638 to float
  %2640 = fmul fast float %2639, 0x3EF0000000000000
  %2641 = uitofp i32 %2629 to float
  %2642 = fmul fast float %2641, 0x3EF0000000000000
  %2643 = fadd fast float %2642, %2631
  %2644 = call float @dx.op.unary.f32(i32 22, float %2643)  ; Frc(value)
  %2645 = fsub fast float %271, %333
  %2646 = fsub fast float %272, %334
  %2647 = fsub fast float %273, %335
  %2648 = call float @dx.op.dot3.f32(i32 55, float %2645, float %2646, float %2647, float %2645, float %2646, float %2647)  ; Dot3(ax,ay,az,bx,by,bz)
  %2649 = fadd fast float %2648, 1.000000e+00
  %2650 = fdiv fast float 1.000000e+00, %2649
  %2651 = call float @dx.op.unary.f32(i32 25, float %2648)  ; Rsqrt(value)
  %2652 = fmul fast float %2651, %2645
  %2653 = fmul fast float %2651, %2646
  %2654 = fmul fast float %2651, %2647
  %2655 = fmul fast float %2651, %285
  %2656 = fmul fast float %285, %285
  %2657 = fmul fast float %2656, %2650
  %2658 = call float @dx.op.unary.f32(i32 7, float %2657)  ; Saturate(value)
  %2659 = call float @dx.op.unary.f32(i32 24, float %2658)  ; Sqrt(value)
  %2660 = call float @dx.op.dot3.f32(i32 55, float %327, float %328, float %329, float %2652, float %2653, float %2654)  ; Dot3(ax,ay,az,bx,by,bz)
  %2661 = fsub fast float -0.000000e+00, %2659
  %2662 = fcmp fast olt float %2660, %2661
  br i1 %2662, label %2838, label %2663

; <label>:2663                                    ; preds = %2599
  %2664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %30, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %2665 = extractvalue %dx.types.CBufRet.f32 %2664, 0
  %2666 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %30, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %2667 = extractvalue %dx.types.CBufRet.i32 %2666, 1
  %2668 = mul i32 %2628, %2626
  %2669 = add i32 %2668, %2624
  %2670 = xor i32 %2636, %2669
  %2671 = lshr i32 %2670, 16
  %2672 = uitofp i32 %2671 to float
  %2673 = fmul fast float %2672, 0x3EF0000000000000
  %2674 = sitofp i32 %2667 to float
  %2675 = fmul fast float %2673, %2674
  %2676 = add nsw i32 %2667, -1
  %2677 = sitofp i32 %2676 to float
  %2678 = call float @dx.op.binary.f32(i32 36, float %2675, float %2677)  ; FMin(a,b)
  %2679 = fptoui float %2678 to i32
  %2680 = and i32 %84, 65535
  %2681 = shl nuw nsw i32 %2680, 8
  %2682 = or i32 %2681, %2680
  %2683 = and i32 %2682, 16711935
  %2684 = shl nuw nsw i32 %2683, 4
  %2685 = or i32 %2684, %2683
  %2686 = and i32 %2685, 252645135
  %2687 = shl nuw nsw i32 %2686, 2
  %2688 = or i32 %2687, %2686
  %2689 = and i32 %2688, 858993459
  %2690 = shl nuw nsw i32 %2689, 1
  %2691 = or i32 %2690, %2689
  %2692 = and i32 %2691, 1431655765
  %2693 = and i32 %85, 65535
  %2694 = shl nuw nsw i32 %2693, 8
  %2695 = or i32 %2694, %2693
  %2696 = and i32 %2695, 16711935
  %2697 = shl nuw nsw i32 %2696, 4
  %2698 = or i32 %2697, %2696
  %2699 = and i32 %2698, 252645135
  %2700 = shl nuw nsw i32 %2699, 2
  %2701 = or i32 %2700, %2699
  %2702 = and i32 %2701, 858993459
  %2703 = shl nuw nsw i32 %2702, 1
  %2704 = or i32 %2703, %2702
  %2705 = shl nuw i32 %2704, 1
  %2706 = and i32 %2705, -1431655766
  %2707 = or i32 %2706, %2692
  %2708 = extractvalue %dx.types.CBufRet.i32 %2600, 1
  %2709 = shl i32 %2708, 16
  %2710 = add i32 %2709, %2707
  %2711 = mul i32 %2710, %2667
  %2712 = add i32 %2711, %2679
  %2713 = call i32 @dx.op.unary.i32(i32 30, i32 %2712)  ; Bfrev(value)
  %2714 = add i32 %2713, 1216234700
  %2715 = mul i32 %2714, -1676577210
  %2716 = xor i32 %2715, %2714
  %2717 = mul i32 %2716, -529506958
  %2718 = xor i32 %2717, %2716
  %2719 = call i32 @dx.op.unary.i32(i32 30, i32 %2718)  ; Bfrev(value)
  %2720 = and i32 %2719, 255
  %2721 = and i32 %2719, 1
  %2722 = lshr i32 %2719, 1
  %2723 = and i32 %2722, 1
  %2724 = sub nsw i32 0, %2723
  %2725 = and i32 %2724, 3
  %2726 = xor i32 %2725, %2721
  %2727 = lshr i32 %2719, 2
  %2728 = and i32 %2727, 1
  %2729 = sub nsw i32 0, %2728
  %2730 = and i32 %2729, 5
  %2731 = xor i32 %2726, %2730
  %2732 = lshr i32 %2719, 3
  %2733 = and i32 %2732, 1
  %2734 = sub nsw i32 0, %2733
  %2735 = and i32 %2734, 15
  %2736 = xor i32 %2731, %2735
  %2737 = lshr i32 %2719, 4
  %2738 = and i32 %2737, 1
  %2739 = sub nsw i32 0, %2738
  %2740 = and i32 %2739, 17
  %2741 = xor i32 %2736, %2740
  %2742 = lshr i32 %2719, 5
  %2743 = and i32 %2742, 1
  %2744 = sub nsw i32 0, %2743
  %2745 = and i32 %2744, 51
  %2746 = xor i32 %2741, %2745
  %2747 = lshr i32 %2719, 6
  %2748 = and i32 %2747, 1
  %2749 = sub nsw i32 0, %2748
  %2750 = and i32 %2749, 85
  %2751 = xor i32 %2746, %2750
  %2752 = lshr i32 %2719, 7
  %2753 = and i32 %2752, 1
  %2754 = sub nsw i32 0, %2753
  %2755 = and i32 %2754, 255
  %2756 = xor i32 %2751, %2755
  %2757 = add nsw i32 %2720, -1862497895
  %2758 = mul i32 %2757, -1676577210
  %2759 = xor i32 %2758, %2757
  %2760 = mul i32 %2759, -529506958
  %2761 = xor i32 %2760, %2759
  %2762 = call i32 @dx.op.unary.i32(i32 30, i32 %2761)  ; Bfrev(value)
  %2763 = add i32 %2756, -646066581
  %2764 = mul i32 %2763, -1676577210
  %2765 = xor i32 %2764, %2763
  %2766 = mul i32 %2765, -529506958
  %2767 = xor i32 %2766, %2765
  %2768 = call i32 @dx.op.unary.i32(i32 30, i32 %2767)  ; Bfrev(value)
  %2769 = lshr i32 %2762, 8
  %2770 = lshr i32 %2768, 8
  %2771 = uitofp i32 %2769 to float
  %2772 = uitofp i32 %2770 to float
  %2773 = fmul fast float %2771, 0x3E76A09E60000000
  %2774 = fmul fast float %2772, 0x3E76A09E60000000
  %2775 = fadd fast float %2773, 0xBFE6A09E60000000
  %2776 = fadd fast float %2774, 0xBFE6A09E60000000
  %2777 = fmul fast float %2775, %2775
  %2778 = fmul fast float %2776, %2776
  %2779 = call float @dx.op.binary.f32(i32 35, float %2777, float %2778)  ; FMax(a,b)
  %2780 = fmul fast float %2779, 2.000000e+00
  %2781 = call float @dx.op.binary.f32(i32 36, float %2777, float %2778)  ; FMin(a,b)
  %2782 = fsub fast float %2780, %2781
  %2783 = call float @dx.op.unary.f32(i32 24, float %2782)  ; Sqrt(value)
  %2784 = fcmp fast ogt float %2777, %2778
  %2785 = fsub fast float -0.000000e+00, %2783
  %2786 = fcmp fast ogt float %2775, 0.000000e+00
  %2787 = select i1 %2786, float %2783, float %2785
  %2788 = fcmp fast ogt float %2776, 0.000000e+00
  %2789 = select i1 %2788, float %2783, float %2785
  %2790 = select i1 %2784, float %2787, float %2775
  %2791 = select i1 %2784, float %2776, float %2789
  %2792 = fmul fast float %2790, %2655
  %2793 = fmul fast float %2791, %2655
  %2794 = call float @dx.op.dot2.f32(i32 54, float %2792, float %2793, float %2792, float %2793)  ; Dot2(ax,ay,bx,by)
  %2795 = call float @dx.op.unary.f32(i32 24, float %2794)  ; Sqrt(value)
  %2796 = fsub fast float 1.000000e+00, %2794
  %2797 = call float @dx.op.unary.f32(i32 24, float %2796)  ; Sqrt(value)
  %2798 = fcmp fast oge float %2654, 0.000000e+00
  %2799 = select i1 %2798, float 1.000000e+00, float -1.000000e+00
  %2800 = fadd fast float %2799, %2654
  %2801 = fdiv fast float 1.000000e+00, %2800
  %2802 = fsub fast float -0.000000e+00, %2801
  %2803 = fmul fast float %2652, %2653
  %2804 = fmul fast float %2803, %2802
  %2805 = fmul fast float %2652, %2652
  %2806 = fmul fast float %2805, %2799
  %2807 = fmul fast float %2806, %2802
  %2808 = fadd fast float %2807, 1.000000e+00
  %2809 = fmul fast float %2653, %2653
  %2810 = fmul fast float %2809, %2802
  %2811 = fadd fast float %2810, %2799
  %2812 = fsub fast float -0.000000e+00, %2653
  %2813 = fmul fast float %2808, %2792
  %2814 = call float @dx.op.tertiary.f32(i32 46, float %2793, float %2804, float %2813)  ; FMad(a,b,c)
  %2815 = call float @dx.op.tertiary.f32(i32 46, float %2797, float %2652, float %2814)  ; FMad(a,b,c)
  %2816 = fmul fast float %2792, %2799
  %2817 = fmul fast float %2816, %2804
  %2818 = call float @dx.op.tertiary.f32(i32 46, float %2793, float %2811, float %2817)  ; FMad(a,b,c)
  %2819 = call float @dx.op.tertiary.f32(i32 46, float %2797, float %2653, float %2818)  ; FMad(a,b,c)
  %2820 = fmul fast float %2652, %2799
  %2821 = fmul fast float %2820, %2792
  %2822 = fsub fast float -0.000000e+00, %2821
  %2823 = call float @dx.op.tertiary.f32(i32 46, float %2793, float %2812, float %2822)  ; FMad(a,b,c)
  %2824 = call float @dx.op.tertiary.f32(i32 46, float %2797, float %2654, float %2823)  ; FMad(a,b,c)
  %2825 = fmul fast float %2795, %2665
  %2826 = fadd fast float %2797, %2825
  %2827 = fdiv fast float 1.500000e+00, %2826
  %2828 = call float @dx.op.unary.f32(i32 7, float %2827)  ; Saturate(value)
  %2829 = fmul fast float %2648, 7.500000e-01
  %2830 = fmul fast float %2829, %2651
  %2831 = fmul fast float %2830, %2828
  %2832 = fmul fast float %2831, %2815
  %2833 = fmul fast float %2831, %2819
  %2834 = fmul fast float %2831, %2824
  %2835 = fadd fast float %2832, %333
  %2836 = fadd fast float %2833, %334
  %2837 = fadd fast float %2834, %335
  br label %2838

; <label>:2838                                    ; preds = %2663, %2599
  %2839 = phi float [ 0.000000e+00, %2599 ], [ %333, %2663 ]
  %2840 = phi float [ 0.000000e+00, %2599 ], [ %334, %2663 ]
  %2841 = phi float [ 0.000000e+00, %2599 ], [ %335, %2663 ]
  %2842 = phi float [ 0.000000e+00, %2599 ], [ %2835, %2663 ]
  %2843 = phi float [ 0.000000e+00, %2599 ], [ %2836, %2663 ]
  %2844 = phi float [ 0.000000e+00, %2599 ], [ %2837, %2663 ]
  %2845 = zext i1 %2662 to i32
  %2846 = xor i32 %2845, 1
  br label %2847

; <label>:2847                                    ; preds = %2838, %2597
  %2848 = phi float [ %2839, %2838 ], [ 0.000000e+00, %2597 ]
  %2849 = phi float [ %2840, %2838 ], [ 0.000000e+00, %2597 ]
  %2850 = phi float [ %2841, %2838 ], [ 0.000000e+00, %2597 ]
  %2851 = phi float [ %2842, %2838 ], [ 0.000000e+00, %2597 ]
  %2852 = phi float [ %2843, %2838 ], [ 0.000000e+00, %2597 ]
  %2853 = phi float [ %2844, %2838 ], [ 0.000000e+00, %2597 ]
  %2854 = phi i32 [ %2846, %2838 ], [ 0, %2597 ]
  %2855 = phi float [ %2635, %2838 ], [ 0.000000e+00, %2597 ]
  %2856 = phi float [ %2640, %2838 ], [ 0.000000e+00, %2597 ]
  %2857 = phi float [ %2644, %2838 ], [ 0.000000e+00, %2597 ]
  %2858 = icmp eq i32 %2854, 0
  br i1 %2858, label %3129, label %2859

; <label>:2859                                    ; preds = %2847
  %2860 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %2861 = extractvalue %dx.types.CBufRet.f32 %2860, 0
  %2862 = fmul fast float %2861, %314
  %2863 = fmul fast float %2861, %315
  %2864 = fmul fast float %2861, %316
  %2865 = fadd fast float %2855, -5.000000e-01
  %2866 = fadd fast float %2856, -5.000000e-01
  %2867 = fadd fast float %2857, -5.000000e-01
  %2868 = fadd fast float %2865, %2862
  %2869 = fadd fast float %2866, %2863
  %2870 = fadd fast float %2867, %2864
  %2871 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %2872 = extractvalue %dx.types.CBufRet.i32 %2871, 0
  %2873 = extractvalue %dx.types.CBufRet.i32 %2871, 1
  %2874 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2875 = extractvalue %dx.types.CBufRet.i32 %2874, 0
  %2876 = extractvalue %dx.types.CBufRet.i32 %2874, 1
  %2877 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %25, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %2878 = extractvalue %dx.types.CBufRet.f32 %2877, 0
  %2879 = extractvalue %dx.types.CBufRet.f32 %2860, 3
  %2880 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %2881 = extractvalue %dx.types.CBufRet.i32 %2880, 0
  %2882 = icmp eq i32 %2881, 0
  br i1 %2882, label %3129, label %2883

; <label>:2883                                    ; preds = %2859
  br label %2884

; <label>:2884                                    ; preds = %3121, %2883
  %2885 = phi float [ %3125, %3121 ], [ %2596, %2883 ]
  %2886 = phi i32 [ %3126, %3121 ], [ 0, %2883 ]
  %2887 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 524, i32 32 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=32>
  %2888 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2887, i32 %2886, i32 0, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2889 = extractvalue %dx.types.ResRet.f32 %2888, 0
  %2890 = extractvalue %dx.types.ResRet.f32 %2888, 1
  %2891 = extractvalue %dx.types.ResRet.f32 %2888, 2
  %2892 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2887, i32 %2886, i32 12, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2893 = extractvalue %dx.types.ResRet.i32 %2892, 0
  %2894 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2887, i32 %2886, i32 16, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2895 = extractvalue %dx.types.ResRet.f32 %2894, 0
  %2896 = extractvalue %dx.types.ResRet.f32 %2894, 1
  %2897 = extractvalue %dx.types.ResRet.f32 %2894, 2
  %2898 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %2887, i32 %2886, i32 28, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2899 = extractvalue %dx.types.ResRet.i32 %2898, 0
  %2900 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %25, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %2901 = extractvalue %dx.types.CBufRet.i32 %2900, 0
  %2902 = and i32 %2893, 255
  %2903 = lshr i32 %2893, 8
  %2904 = and i32 %2903, 255
  %2905 = lshr i32 %2893, 16
  %2906 = and i32 %2905, 255
  %2907 = mul i32 %2901, %2902
  %2908 = mul i32 %2901, %2904
  %2909 = mul i32 %2901, %2906
  %2910 = and i32 %2899, 4194303
  %2911 = lshr i32 %2899, 22
  %2912 = uitofp i32 %2911 to float
  %2913 = fmul fast float %2912, 0x3F84050140000000
  %2914 = icmp ne i32 %2902, 0
  %2915 = icmp ne i32 %2904, 0
  %2916 = icmp ne i32 %2906, 0
  %2917 = and i1 %2914, %2915
  %2918 = and i1 %2916, %2917
  %2919 = fmul fast float %2913, %2868
  %2920 = fmul fast float %2913, %2869
  %2921 = fmul fast float %2913, %2870
  %2922 = fadd fast float %2919, %2848
  %2923 = fadd fast float %2920, %2849
  %2924 = fadd fast float %2921, %2850
  %2925 = fdiv fast float 0x4059933340000000, %2912
  br i1 %2918, label %2926, label %3121

; <label>:2926                                    ; preds = %2884
  %2927 = fsub fast float %2851, %2922
  %2928 = fsub fast float %2852, %2923
  %2929 = fsub fast float %2853, %2924
  %2930 = fdiv fast float 1.000000e+00, %2927
  %2931 = fdiv fast float 1.000000e+00, %2928
  %2932 = fdiv fast float 1.000000e+00, %2929
  %2933 = fsub fast float %2889, %2922
  %2934 = fsub fast float %2890, %2923
  %2935 = fsub fast float %2891, %2924
  %2936 = fmul fast float %2930, %2933
  %2937 = fmul fast float %2931, %2934
  %2938 = fmul fast float %2932, %2935
  %2939 = fsub fast float %2895, %2922
  %2940 = fsub fast float %2896, %2923
  %2941 = fsub fast float %2897, %2924
  %2942 = fmul fast float %2930, %2939
  %2943 = fmul fast float %2931, %2940
  %2944 = fmul fast float %2932, %2941
  %2945 = call float @dx.op.binary.f32(i32 36, float %2936, float %2942)  ; FMin(a,b)
  %2946 = call float @dx.op.binary.f32(i32 36, float %2937, float %2943)  ; FMin(a,b)
  %2947 = call float @dx.op.binary.f32(i32 36, float %2938, float %2944)  ; FMin(a,b)
  %2948 = call float @dx.op.binary.f32(i32 35, float %2936, float %2942)  ; FMax(a,b)
  %2949 = call float @dx.op.binary.f32(i32 35, float %2937, float %2943)  ; FMax(a,b)
  %2950 = call float @dx.op.binary.f32(i32 35, float %2938, float %2944)  ; FMax(a,b)
  %2951 = call float @dx.op.binary.f32(i32 35, float %2946, float %2947)  ; FMax(a,b)
  %2952 = call float @dx.op.binary.f32(i32 35, float %2945, float %2951)  ; FMax(a,b)
  %2953 = call float @dx.op.binary.f32(i32 36, float %2949, float %2950)  ; FMin(a,b)
  %2954 = call float @dx.op.binary.f32(i32 36, float %2948, float %2953)  ; FMin(a,b)
  %2955 = call float @dx.op.unary.f32(i32 7, float %2952)  ; Saturate(value)
  %2956 = call float @dx.op.unary.f32(i32 7, float %2954)  ; Saturate(value)
  %2957 = fcmp fast olt float %2955, %2956
  br i1 %2957, label %2958, label %3121

; <label>:2958                                    ; preds = %2926
  %2959 = fmul fast float %2955, %2927
  %2960 = fmul fast float %2955, %2928
  %2961 = fmul fast float %2955, %2929
  %2962 = fsub fast float %2956, %2955
  %2963 = fmul fast float %2927, %2962
  %2964 = fsub fast float %2956, %2955
  %2965 = fmul fast float %2928, %2964
  %2966 = fsub fast float %2956, %2955
  %2967 = fmul fast float %2929, %2966
  %2968 = fmul fast float %2963, %2963
  %2969 = fmul fast float %2965, %2965
  %2970 = fadd fast float %2968, %2969
  %2971 = fmul fast float %2967, %2967
  %2972 = fadd fast float %2970, %2971
  %2973 = call float @dx.op.unary.f32(i32 24, float %2972)  ; Sqrt(value)
  %2974 = call float @dx.op.binary.f32(i32 36, float %2973, float 1.000000e+05)  ; FMin(a,b)
  %2975 = call float @dx.op.dot3.f32(i32 55, float %2963, float %2965, float %2967, float %2963, float %2965, float %2967)  ; Dot3(ax,ay,az,bx,by,bz)
  %2976 = call float @dx.op.unary.f32(i32 25, float %2975)  ; Rsqrt(value)
  %2977 = fdiv fast float %2974, %2913
  %2978 = call float @dx.op.unary.f32(i32 28, float %2977)  ; Round_pi(value)
  %2979 = call float @dx.op.binary.f32(i32 36, float %2978, float 1.024000e+03)  ; FMin(a,b)
  %2980 = fdiv fast float %2974, %2979
  %2981 = fcmp fast ogt float %2979, 0.000000e+00
  br i1 %2981, label %2982, label %3121

; <label>:2982                                    ; preds = %2958
  br label %2983

; <label>:2983                                    ; preds = %3112, %2982
  %2984 = phi i32 [ %3070, %3112 ], [ 9999, %2982 ]
  %2985 = phi i32 [ %3071, %3112 ], [ 9999, %2982 ]
  %2986 = phi i32 [ %3072, %3112 ], [ 9999, %2982 ]
  %2987 = phi i32 [ %3073, %3112 ], [ 0, %2982 ]
  %2988 = phi i32 [ %3074, %3112 ], [ 0, %2982 ]
  %2989 = phi i32 [ %3075, %3112 ], [ 0, %2982 ]
  %2990 = phi i32 [ %3076, %3112 ], [ 0, %2982 ]
  %2991 = phi float [ %3116, %3112 ], [ 1.000000e+00, %2982 ]
  %2992 = phi float [ %3117, %3112 ], [ 0.000000e+00, %2982 ]
  %2993 = phi float [ %3113, %3112 ], [ 0.000000e+00, %2982 ]
  %2994 = fmul fast float %2991, %2980
  %2995 = call float @dx.op.binary.f32(i32 35, float %2994, float 0.000000e+00)  ; FMax(a,b)
  %2996 = fmul fast float %2963, %2913
  %2997 = fmul fast float %2996, %2976
  %2998 = fmul fast float %2997, %2992
  %2999 = fmul fast float %2965, %2913
  %3000 = fmul fast float %2999, %2976
  %3001 = fmul fast float %3000, %2992
  %3002 = fmul fast float %2967, %2913
  %3003 = fmul fast float %3002, %2976
  %3004 = fmul fast float %3003, %2992
  %3005 = fmul fast float %2865, %2995
  %3006 = fmul fast float %2866, %2995
  %3007 = fmul fast float %2867, %2995
  %3008 = add i32 %2907, -1
  %3009 = add i32 %2908, -1
  %3010 = add i32 %2909, -1
  %3011 = fsub fast float %2922, %2889
  %3012 = fadd fast float %3011, %2959
  %3013 = fadd fast float %3012, %2998
  %3014 = fadd fast float %3013, %3005
  %3015 = fsub fast float %2923, %2890
  %3016 = fadd fast float %3015, %2960
  %3017 = fadd fast float %3016, %3001
  %3018 = fadd fast float %3017, %3006
  %3019 = fsub fast float %2924, %2891
  %3020 = fadd fast float %3019, %2961
  %3021 = fadd fast float %3020, %3004
  %3022 = fadd fast float %3021, %3007
  %3023 = fsub fast float %2895, %2889
  %3024 = fsub fast float %2896, %2890
  %3025 = fsub fast float %2897, %2891
  %3026 = fdiv fast float %3014, %3023
  %3027 = fdiv fast float %3018, %3024
  %3028 = fdiv fast float %3022, %3025
  %3029 = call float @dx.op.unary.f32(i32 7, float %3026)  ; Saturate(value)
  %3030 = call float @dx.op.unary.f32(i32 7, float %3027)  ; Saturate(value)
  %3031 = call float @dx.op.unary.f32(i32 7, float %3028)  ; Saturate(value)
  %3032 = uitofp i32 %2907 to float
  %3033 = uitofp i32 %2908 to float
  %3034 = uitofp i32 %2909 to float
  %3035 = fmul fast float %3029, %3032
  %3036 = fmul fast float %3030, %3033
  %3037 = fmul fast float %3031, %3034
  %3038 = fptoui float %3035 to i32
  %3039 = fptoui float %3036 to i32
  %3040 = fptoui float %3037 to i32
  %3041 = call i32 @dx.op.binary.i32(i32 40, i32 %3038, i32 %3008)  ; UMin(a,b)
  %3042 = call i32 @dx.op.binary.i32(i32 40, i32 %3039, i32 %3009)  ; UMin(a,b)
  %3043 = call i32 @dx.op.binary.i32(i32 40, i32 %3040, i32 %3010)  ; UMin(a,b)
  %3044 = and i32 %2876, 31
  %3045 = lshr i32 %3041, %3044
  %3046 = lshr i32 %3042, %3044
  %3047 = lshr i32 %3043, %3044
  %3048 = icmp ne i32 %3045, %2984
  %3049 = icmp ne i32 %3046, %2985
  %3050 = icmp ne i32 %3047, %2986
  %3051 = or i1 %3048, %3049
  %3052 = or i1 %3051, %3050
  br i1 %3052, label %3053, label %3069

; <label>:3053                                    ; preds = %2983
  %3054 = mul i32 %3047, %2904
  %3055 = add i32 %3054, %3046
  %3056 = mul i32 %3055, %2902
  %3057 = add i32 %3045, %2910
  %3058 = add i32 %3057, %3056
  %3059 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %3060 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %3059, i32 %3058, i32 undef)  ; BufferLoad(srv,index,wot)
  %3061 = extractvalue %dx.types.ResRet.i32 %3060, 0
  %3062 = icmp ne i32 %3061, -1
  %3063 = zext i1 %3062 to i32
  %3064 = mul i32 %2872, %2873
  %3065 = urem i32 %3061, %3064
  %3066 = urem i32 %3065, %2872
  %3067 = udiv i32 %3065, %2872
  %3068 = udiv i32 %3061, %3064
  br label %3069

; <label>:3069                                    ; preds = %3053, %2983
  %3070 = phi i32 [ %3045, %3053 ], [ %2984, %2983 ]
  %3071 = phi i32 [ %3046, %3053 ], [ %2985, %2983 ]
  %3072 = phi i32 [ %3047, %3053 ], [ %2986, %2983 ]
  %3073 = phi i32 [ %3063, %3053 ], [ %2987, %2983 ]
  %3074 = phi i32 [ %3066, %3053 ], [ %2988, %2983 ]
  %3075 = phi i32 [ %3067, %3053 ], [ %2989, %2983 ]
  %3076 = phi i32 [ %3068, %3053 ], [ %2990, %2983 ]
  %3077 = icmp eq i32 %3073, 0
  br i1 %3077, label %3112, label %3078

; <label>:3078                                    ; preds = %3069
  %3079 = shl i32 %3074, %3044
  %3080 = shl i32 %3075, %3044
  %3081 = shl i32 %3076, %3044
  %3082 = shl i32 %3045, %3044
  %3083 = shl i32 %3046, %3044
  %3084 = shl i32 %3047, %3044
  %3085 = sub i32 %3041, %3082
  %3086 = sub i32 %3042, %3083
  %3087 = sub i32 %3043, %3084
  %3088 = add i32 %3085, %3079
  %3089 = add i32 %3086, %3080
  %3090 = add i32 %3087, %3081
  %3091 = fmul fast float %2995, %2925
  %3092 = call float @dx.op.unary.f32(i32 23, float %3091)  ; Log(value)
  %3093 = fptoui float %3092 to i32
  %3094 = and i32 %3093, 31
  %3095 = lshr i32 %3088, %3094
  %3096 = lshr i32 %3089, %3094
  %3097 = lshr i32 %3090, %3094
  %3098 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %3099 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %3098, i32 %3093, i32 %3095, i32 %3096, i32 %3097, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3100 = extractvalue %dx.types.ResRet.i32 %3099, 0
  %3101 = icmp sgt i32 %3100, -1
  br i1 %3101, label %3102, label %3108

; <label>:3102                                    ; preds = %3078
  %3103 = and i32 %3100, 16777215
  %3104 = uitofp i32 %3103 to float
  %3105 = fmul fast float %2878, 0x3F50624DE0000000
  %3106 = fmul fast float %3105, %3091
  %3107 = fmul fast float %3106, %3104
  br label %3108

; <label>:3108                                    ; preds = %3102, %3078
  %3109 = phi float [ %3107, %3102 ], [ 0.000000e+00, %3078 ]
  %3110 = fadd fast float %3109, %2993
  %3111 = fcmp fast ogt float %3110, 1.000000e+00
  br i1 %3111, label %3119, label %3112

; <label>:3112                                    ; preds = %3108, %3069
  %3113 = phi float [ %3110, %3108 ], [ %2993, %3069 ]
  %3114 = fmul fast float %2991, %2879
  %3115 = uitofp i32 %2875 to float
  %3116 = call float @dx.op.binary.f32(i32 36, float %3115, float %3114)  ; FMin(a,b)
  %3117 = fadd fast float %3116, %2992
  %3118 = fcmp fast olt float %3117, %2979
  br i1 %3118, label %2983, label %3119

; <label>:3119                                    ; preds = %3112, %3108
  %3120 = phi float [ %3110, %3108 ], [ %3113, %3112 ]
  br label %3121

; <label>:3121                                    ; preds = %3119, %2958, %2926, %2884
  %3122 = phi float [ 0.000000e+00, %2926 ], [ 0.000000e+00, %2884 ], [ 0.000000e+00, %2958 ], [ %3120, %3119 ]
  %3123 = fsub fast float 1.000000e+00, %3122
  %3124 = call float @dx.op.unary.f32(i32 7, float %3123)  ; Saturate(value)
  %3125 = call float @dx.op.binary.f32(i32 36, float %2885, float %3124)  ; FMin(a,b)
  %3126 = add nuw i32 %2886, 1
  %3127 = icmp eq i32 %3126, %2881
  br i1 %3127, label %3128, label %2884

; <label>:3128                                    ; preds = %3121
  br label %3129

; <label>:3129                                    ; preds = %3128, %2859, %2847, %2595, %276
  %3130 = phi float [ %2596, %2595 ], [ %2596, %2847 ], [ 1.000000e+00, %276 ], [ %2596, %2859 ], [ %3125, %3128 ]
  %3131 = fcmp fast ogt float %3130, 0x3F91111120000000
  %3132 = fcmp fast olt float %3130, 1.000000e+00
  %3133 = and i1 %3131, %3132
  br i1 %3133, label %3134, label %3155

; <label>:3134                                    ; preds = %3129
  %3135 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %29, i32 145)  ; CBufferLoadLegacy(handle,regIndex)
  %3136 = extractvalue %dx.types.CBufRet.i32 %3135, 1
  %3137 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %3138 = extractvalue %dx.types.CBufRet.i32 %3137, 0
  %3139 = extractvalue %dx.types.CBufRet.i32 %3137, 1
  %3140 = extractvalue %dx.types.CBufRet.i32 %3137, 2
  %3141 = and i32 %3138, %84
  %3142 = and i32 %3139, %85
  %3143 = and i32 %3140, %3136
  %3144 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %26, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %3145 = extractvalue %dx.types.CBufRet.i32 %3144, 1
  %3146 = mul i32 %3143, %3145
  %3147 = add i32 %3146, %3142
  %3148 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %3149 = call %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32 66, %dx.types.Handle %3148, i32 0, i32 %3141, i32 %3147, i32 undef, i32 0, i32 0, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %3150 = extractvalue %dx.types.ResRet.f32 %3149, 0
  %3151 = fadd fast float %3150, -5.000000e-01
  %3152 = fmul fast float %3151, 0x3FB1111120000000
  %3153 = fadd fast float %3152, %3130
  %3154 = call float @dx.op.unary.f32(i32 7, float %3153)  ; Saturate(value)
  br label %3155

; <label>:3155                                    ; preds = %3134, %3129
  %3156 = phi float [ %3154, %3134 ], [ %3130, %3129 ]
  %3157 = fmul fast float %3156, 1.500000e+01
  %3158 = call float @dx.op.unary.f32(i32 26, float %3157)  ; Round_ne(value)
  %3159 = fptoui float %3158 to i32
  %3160 = and i32 %3159, 15
  %3161 = xor i32 %3160, 15
  %3162 = lshr i32 %258, 3
  %3163 = icmp eq i32 %3162, 0
  br i1 %3163, label %3164, label %3168

; <label>:3164                                    ; preds = %3155
  %3165 = shl i32 %258, 2
  %3166 = and i32 %3165, 28
  %3167 = shl i32 %3161, %3166
  br label %3168

; <label>:3168                                    ; preds = %3164, %3155
  %3169 = phi i32 [ %3167, %3164 ], [ 0, %3155 ]
  %3170 = xor i32 %3169, %254
  %3171 = icmp eq i32 %3162, 1
  br i1 %3171, label %3172, label %3176

; <label>:3172                                    ; preds = %3168
  %3173 = shl i32 %258, 2
  %3174 = and i32 %3173, 28
  %3175 = shl i32 %3161, %3174
  br label %3176

; <label>:3176                                    ; preds = %3172, %3168
  %3177 = phi i32 [ %3175, %3172 ], [ 0, %3168 ]
  %3178 = xor i32 %3177, %255
  %3179 = icmp eq i32 %3162, 2
  br i1 %3179, label %3180, label %3184

; <label>:3180                                    ; preds = %3176
  %3181 = shl i32 %258, 2
  %3182 = and i32 %3181, 28
  %3183 = shl i32 %3161, %3182
  br label %3184

; <label>:3184                                    ; preds = %3180, %3176
  %3185 = phi i32 [ %3183, %3180 ], [ 0, %3176 ]
  %3186 = xor i32 %3185, %256
  %3187 = icmp eq i32 %3162, 3
  br i1 %3187, label %3188, label %3192

; <label>:3188                                    ; preds = %3184
  %3189 = shl i32 %258, 2
  %3190 = and i32 %3189, 28
  %3191 = shl i32 %3161, %3190
  br label %3192

; <label>:3192                                    ; preds = %3188, %3184
  %3193 = phi i32 [ %3191, %3188 ], [ 0, %3184 ]
  %3194 = xor i32 %3193, %257
  br label %3195

; <label>:3195                                    ; preds = %3192, %253
  %3196 = phi i32 [ %254, %253 ], [ %3170, %3192 ]
  %3197 = phi i32 [ %255, %253 ], [ %3178, %3192 ]
  %3198 = phi i32 [ %256, %253 ], [ %3186, %3192 ]
  %3199 = phi i32 [ %257, %253 ], [ %3194, %3192 ]
  %3200 = add nuw i32 %258, 1
  %3201 = icmp eq i32 %3200, %250
  br i1 %3201, label %3202, label %253, !llvm.loop !41

; <label>:3202                                    ; preds = %3195
  br label %3203

; <label>:3203                                    ; preds = %3202, %223
  %3204 = phi i32 [ -1, %223 ], [ %3196, %3202 ]
  %3205 = phi i32 [ -1, %223 ], [ %3197, %3202 ]
  %3206 = phi i32 [ -1, %223 ], [ %3198, %3202 ]
  %3207 = phi i32 [ -1, %223 ], [ %3199, %3202 ]
  %3208 = xor i32 %3204, -1
  %3209 = xor i32 %3205, -1
  %3210 = xor i32 %3206, -1
  %3211 = xor i32 %3207, -1
  %3212 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 1029 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<4xU32>
  call void @dx.op.textureStore.i32(i32 67, %dx.types.Handle %3212, i32 %84, i32 %85, i32 undef, i32 %3208, i32 %3209, i32 %3210, i32 %3211, i8 15)  ; TextureStore(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)
  br label %3213

; <label>:3213                                    ; preds = %3203, %98, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureLoad.f32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare void @dx.op.textureStore.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.unary.i32(i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAllTrue(i32, i1) #2

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!37}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !26, !28, !35}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !16, !17, !18, !19, !20, !21, !23, !24, !25}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 2, i32 0, !7}
!9 = !{i32 2, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 2, i32 0, !7}
!10 = !{i32 3, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 2, i32 0, !7}
!11 = !{i32 4, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 4, i32 1, i32 11, i32 0, null}
!12 = !{i32 5, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !13}
!13 = !{i32 1, i32 4}
!14 = !{i32 6, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 6, i32 1, i32 7, i32 0, !15}
!15 = !{i32 0, i32 5}
!16 = !{i32 7, %"class.Buffer<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 10, i32 0, !7}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !15}
!18 = !{i32 9, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 9, i32 1, i32 10, i32 0, !15}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !7}
!20 = !{i32 11, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 11, i32 1, i32 10, i32 0, !15}
!21 = !{i32 12, %"class.StructuredBuffer<FPackedVirtualVoxelNodeDesc>"* undef, !"", i32 0, i32 12, i32 1, i32 12, i32 0, !22}
!22 = !{i32 1, i32 32}
!23 = !{i32 13, %"class.Texture3D<unsigned int>"* undef, !"", i32 0, i32 13, i32 1, i32 4, i32 0, !15}
!24 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !7}
!25 = !{i32 15, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 15, i32 1, i32 10, i32 0, !15}
!26 = !{!27}
!27 = !{i32 0, %"class.RWTexture2D<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !15}
!28 = !{!29, !30, !31, !32, !33, !34}
!29 = !{i32 0, %_RootShaderParameters* undef, !"", i32 0, i32 0, i32 1, i32 368, null}
!30 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!31 = !{i32 2, %UniformBufferConstants_VirtualShadowMap* undef, !"", i32 0, i32 2, i32 1, i32 116, null}
!32 = !{i32 3, %hostlayout.UniformBufferConstants_ForwardLightData* undef, !"", i32 0, i32 3, i32 1, i32 708, null}
!33 = !{i32 4, %UniformBufferConstants_BlueNoise* undef, !"", i32 0, i32 4, i32 1, i32 44, null}
!34 = !{i32 5, %UniformBufferConstants_VirtualVoxel* undef, !"", i32 0, i32 5, i32 1, i32 212, null}
!35 = !{!36}
!36 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!37 = !{void ()* @VirtualShadowMapProjection, !"VirtualShadowMapProjection", null, !4, !38}
!38 = !{i32 0, i64 524304, i32 4, !39, i32 5, !40}
!39 = !{i32 8, i32 8, i32 1}
!40 = !{i32 0}
!41 = distinct !{!41, !42}
!42 = !{!"llvm.loop.unroll.disable"}
