;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xyzw        0     NONE   float   xyzw
; TEXCOORD                 1   xyz         1     NONE    uint    yz 
; TEXCOORD                 2   xyzw        2     NONE     int     zw
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: 516b970d3d5efdff652c8bd286c7f86b
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0                 linear       
; TEXCOORD                 1        nointerpolation       
; TEXCOORD                 2        nointerpolation       
;
; Buffer Definitions:
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; VirtualShadowMap_PageTable        texture  struct         r/o      T0             t0     1
; OutDepthBufferArray                   UAV     u32     2darray      U0             u0     1
;
;
; ViewId state:
;
; Number of inputs: 12, outputs: 0
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.RWTexture2DArray<unsigned int>" = type { i32 }

define void @HWRasterizePS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %4 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %5 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %6 = call i32 @dx.op.loadInput.i32(i32 4, i32 1, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %7 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %8 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %9 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 2, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %10 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 3, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %11 = fdiv fast float %7, %10
  %12 = fdiv fast float %8, %10
  %13 = fdiv fast float %9, %10
  %14 = fptoui float %11 to i32
  %15 = fptoui float %12 to i32
  %16 = icmp ult i32 %14, %3
  %17 = icmp ult i32 %15, %4
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %51

; <label>:19                                      ; preds = %0
  %20 = lshr i32 %5, 22
  %21 = icmp ult i32 %6, 8192
  br i1 %21, label %31, label %22

; <label>:22                                      ; preds = %19
  %23 = lshr i32 %15, 7
  %24 = lshr i32 %14, 7
  %25 = lshr i32 %5, 17
  %26 = sub nsw i32 7, %25
  %27 = and i32 %26, 31
  %28 = shl i32 %23, %27
  %29 = add i32 %24, %6
  %30 = add i32 %29, %28
  br label %31

; <label>:31                                      ; preds = %22, %19
  %32 = phi i32 [ %6, %19 ], [ %30, %22 ]
  %33 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %34 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %33, i32 %32, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %35 = extractvalue %dx.types.ResRet.i32 %34, 0
  %36 = and i32 %35, 200278016
  %37 = icmp eq i32 %36, 134217728
  br i1 %37, label %38, label %51

; <label>:38                                      ; preds = %31
  %39 = lshr i32 %35, 3
  %40 = and i32 %39, 130944
  %41 = and i32 %15, 127
  %42 = or i32 %40, %41
  %43 = shl i32 %35, 7
  %44 = and i32 %43, 130944
  %45 = and i32 %14, 127
  %46 = or i32 %44, %45
  %47 = call float @dx.op.unary.f32(i32 7, float %13)  ; Saturate(value)
  %48 = bitcast float %47 to i32
  %49 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4103, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2DArray<U32>
  %50 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %49, i32 7, i32 %46, i32 %42, i32 %20, i32 %48)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %51

; <label>:51                                      ; preds = %38, %31, %0
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!11}
!dx.entryPoints = !{!12}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, !8, null, null}
!5 = !{!6}
!6 = !{i32 0, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 4}
!8 = !{!9}
!9 = !{i32 0, %"class.RWTexture2DArray<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 7, i1 false, i1 false, i1 false, !10}
!10 = !{i32 0, i32 5}
!11 = !{[2 x i32] [i32 12, i32 0]}
!12 = !{void ()* @HWRasterizePS, !"HWRasterizePS", !13, !4, !24}
!13 = !{!14, null, null}
!14 = !{!15, !18, !21}
!15 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !16, i8 2, i32 1, i8 4, i32 0, i8 0, !17}
!16 = !{i32 0}
!17 = !{i32 3, i32 15}
!18 = !{i32 1, !"TEXCOORD", i8 5, i8 0, !19, i8 1, i32 1, i8 3, i32 1, i8 0, !20}
!19 = !{i32 1}
!20 = !{i32 3, i32 6}
!21 = !{i32 2, !"TEXCOORD", i8 4, i8 0, !22, i8 1, i32 1, i8 4, i32 2, i8 0, !23}
!22 = !{i32 2}
!23 = !{i32 3, i32 12}
!24 = !{i32 0, i64 16, i32 5, !16}
