;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; TEXCOORD                 0   xy          0     NONE   float   xy  
; SV_Position              0   xyzw        1      POS   float       
; SV_RenderTargetArrayIndex     0   x           2  RTINDEX    uint   x   
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
;
; shader hash: 491be7f5989aa01fdd2d20dd8f54ce85
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; TEXCOORD                 0          noperspective       
; SV_Position              0          noperspective       
; SV_RenderTargetArrayIndex     0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct hostlayout.$Globals
;   {
;
;       float4 DepthOfFieldParams;                    ; Offset:    0
;       uint bSceneLightingChannelsValid;             ; Offset:   16
;       float3 SoftTransitionScale;                   ; Offset:   20
;       float4 ShadowBufferSize;                      ; Offset:   32
;       row_major float4x4 ShadowViewProjectionMatrices[6];; Offset:   48
;       float InvShadowmapResolution;                 ; Offset:  432
;       row_major float4x4 TranslatedWorldToShadowMatrix;; Offset:  448
;       float4 ShadowmapMinMax;                       ; Offset:  512
;       float4 ShadowInjectParams;                    ; Offset:  528
;       float4 DepthBiasParameters;                   ; Offset:  544
;       uint bStaticallyShadowed;                     ; Offset:  560
;       row_major float4x4 TranslatedWorldToStaticShadowMatrix;; Offset:  576
;       float4 StaticShadowBufferSize;                ; Offset:  640
;       uint VolumeCascadeIndex;                      ; Offset:  656
;       float4 SimpleLightPositionAndRadius;          ; Offset:  672
;       float4 SimpleLightColorAndExponent;           ; Offset:  688
;       float CloudShadowmapFarDepthKm;               ; Offset:  704
;       row_major float4x4 CloudShadowmapTranslatedWorldToLightClipMatrix;; Offset:  720
;       float CloudShadowmapStrength;                 ; Offset:  784
;       uint VolumetricCloudShadowEnabled;            ; Offset:  788
;       uint AtmospherePerPixelTransmittanceEnabled;  ; Offset:  792
;       float4 LightFunctionParameters;               ; Offset:  800
;       row_major float4x4 LightFunctionTranslatedWorldToLight;; Offset:  816
;       float4 ClippingPlanes[2];                     ; Offset:  880
;       float SpotlightMask;                          ; Offset:  912
;       int VirtualShadowMapId;                       ; Offset:  916
;   
;   } $Globals;                                       ; Offset:    0 Size:   920
;
; }
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_DeferredLightUniforms
; {
;
;   struct UniformBufferConstants_DeferredLightUniforms
;   {
;
;       float4 DeferredLightUniforms_ShadowMapChannelMask;; Offset:    0
;       float2 DeferredLightUniforms_DistanceFadeMAD; ; Offset:   16
;       float DeferredLightUniforms_ContactShadowLength;; Offset:   24
;       float DeferredLightUniforms_ContactShadowCastingIntensity;; Offset:   28
;       float DeferredLightUniforms_ContactShadowNonCastingIntensity;; Offset:   32
;       float DeferredLightUniforms_VolumetricScatteringIntensity;; Offset:   36
;       uint DeferredLightUniforms_ShadowedBits;      ; Offset:   40
;       uint DeferredLightUniforms_LightingChannelMask;; Offset:   44
;       float3 DeferredLightUniforms_TranslatedWorldPosition;; Offset:   48
;       float DeferredLightUniforms_InvRadius;        ; Offset:   60
;       float3 DeferredLightUniforms_Color;           ; Offset:   64
;       float DeferredLightUniforms_FalloffExponent;  ; Offset:   76
;       float3 DeferredLightUniforms_Direction;       ; Offset:   80
;       float DeferredLightUniforms_SpecularScale;    ; Offset:   92
;       float3 DeferredLightUniforms_Tangent;         ; Offset:   96
;       float DeferredLightUniforms_SourceRadius;     ; Offset:  108
;       float2 DeferredLightUniforms_SpotAngles;      ; Offset:  112
;       float DeferredLightUniforms_SoftSourceRadius; ; Offset:  120
;       float DeferredLightUniforms_SourceLength;     ; Offset:  124
;       float DeferredLightUniforms_RectLightBarnCosAngle;; Offset:  128
;       float DeferredLightUniforms_RectLightBarnLength;; Offset:  132
;       float2 DeferredLightUniforms_RectLightAtlasUVOffset;; Offset:  136
;       float2 DeferredLightUniforms_RectLightAtlasUVScale;; Offset:  144
;       float DeferredLightUniforms_RectLightAtlasMaxLevel;; Offset:  152
;       float DeferredLightUniforms_IESAtlasIndex;    ; Offset:  156
;   
;   } UniformBufferConstants_DeferredLightUniforms;   ; Offset:    0 Size:   160
;
; }
;
; Resource bind info for VirtualShadowMap_PageTable
; {
;
;   uint $Element;                                    ; Offset:    0 Size:     4
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_View       cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_DeferredLightUniforms   cbuffer      NA          NA     CB2            cb2     1
; View_TransmittanceLutTextureSampler   sampler      NA          NA      S0             s0     1
; ShadowDepthTextureSampler         sampler      NA          NA      S1             s1     1
; StaticShadowDepthTextureSampler   sampler      NA          NA      S2             s2     1
; CloudShadowmapSampler             sampler      NA          NA      S3             s3     1
; View_TransmittanceLutTexture      texture     f32          2d      T0             t0     1
; VirtualShadowMap_ProjectionData   texture    byte         r/o      T1             t1     1
; VirtualShadowMap_PageTable        texture  struct         r/o      T2             t2     1
; VirtualShadowMap_PhysicalPagePool   texture     u32     2darray      T3             t3     1
; ShadowDepthTexture                texture     f32          2d      T4             t4     1
; StaticShadowDepthTexture          texture     f32          2d      T5             t5     1
; CloudShadowmapTexture             texture     f32          2d      T6             t6     1
;
;
; ViewId state:
;
; Number of inputs: 9, outputs: 8
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 0, 1, 8 }
;   output 1 depends on inputs: { 0, 1, 8 }
;   output 2 depends on inputs: { 0, 1, 8 }
;   output 3 depends on inputs: { 0, 1, 8 }
;   output 4 depends on inputs: { 0, 1, 8 }
;   output 5 depends on inputs: { 0, 1, 8 }
;   output 6 depends on inputs: { 0, 1, 8 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.StructuredBuffer<unsigned int>" = type { i32 }
%"class.Texture2DArray<unsigned int>" = type { i32, %"class.Texture2DArray<unsigned int>::mips_type" }
%"class.Texture2DArray<unsigned int>::mips_type" = type { i32 }
%"class.Texture2D<vector<float, 3> >" = type { <3 x float>, %"class.Texture2D<vector<float, 3> >::mips_type" }
%"class.Texture2D<vector<float, 3> >::mips_type" = type { i32 }
%"hostlayout.$Globals" = type { <4 x float>, i32, <3 x float>, <4 x float>, [6 x [4 x <4 x float>]], float, [4 x <4 x float>], <4 x float>, <4 x float>, <4 x float>, i32, [4 x <4 x float>], <4 x float>, i32, <4 x float>, <4 x float>, float, [4 x <4 x float>], float, i32, i32, <4 x float>, [4 x <4 x float>], [2 x <4 x float>], float, i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%UniformBufferConstants_DeferredLightUniforms = type { <4 x float>, <2 x float>, float, float, float, float, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, float, float, <2 x float>, <2 x float>, float, float }
%struct.SamplerState = type { i32 }

define void @InjectMainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 13, i32 160 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %16 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %17 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 920 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %18 = call i32 @dx.op.loadInput.i32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %19 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %20 = call float @dx.op.loadInput.f32(i32 4, i32 0, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %21 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %22 = extractvalue %dx.types.CBufRet.i32 %21, 0
  %23 = add i32 %22, 149
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 %23)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 2
  %26 = uitofp i32 %18 to float
  %27 = fadd fast float %26, 5.000000e-01
  %28 = add i32 %22, 151
  %29 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 %28)  ; CBufferLoadLegacy(handle,regIndex)
  %30 = extractvalue %dx.types.CBufRet.f32 %29, 3
  %31 = fmul fast float %30, %27
  %32 = fadd fast float %31, %25
  %33 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %34 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %35 = extractvalue %dx.types.CBufRet.f32 %29, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %29, 1
  %37 = fdiv fast float %19, %35
  %38 = fdiv fast float %20, %36
  %39 = fadd fast float %37, %33
  %40 = fadd fast float %38, %34
  %41 = fmul fast float %30, 5.000000e-01
  %42 = fsub fast float %39, %41
  %43 = fsub fast float %40, %41
  %44 = extractvalue %dx.types.CBufRet.f32 %24, 3
  %45 = fmul fast float %44, %27
  %46 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 55)  ; CBufferLoadLegacy(handle,regIndex)
  %47 = extractvalue %dx.types.CBufRet.f32 %46, 0
  %48 = extractvalue %dx.types.CBufRet.f32 %46, 1
  %49 = extractvalue %dx.types.CBufRet.f32 %46, 2
  %50 = extractvalue %dx.types.CBufRet.f32 %46, 3
  %51 = call float @dx.op.dot4.f32(i32 56, float %47, float %48, float %49, float %50, float %42, float %43, float %32, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %52 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %53 = extractvalue %dx.types.CBufRet.f32 %52, 0
  %54 = extractvalue %dx.types.CBufRet.f32 %52, 1
  %55 = extractvalue %dx.types.CBufRet.f32 %52, 2
  %56 = extractvalue %dx.types.CBufRet.f32 %52, 3
  %57 = call float @dx.op.dot4.f32(i32 56, float %53, float %54, float %55, float %56, float %42, float %43, float %32, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %58 = fcmp ogt float %51, -0.000000e+00
  call void @dx.op.discard(i32 82, i1 %58)  ; Discard(condition)
  %59 = fcmp ogt float %57, -0.000000e+00
  call void @dx.op.discard(i32 82, i1 %59)  ; Discard(condition)
  %60 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.f32 %60, 0
  %62 = fmul fast float %51, %61
  %63 = fsub fast float -0.000000e+00, %62
  %64 = call float @dx.op.unary.f32(i32 7, float %63)  ; Saturate(value)
  %65 = extractvalue %dx.types.CBufRet.f32 %60, 1
  %66 = fmul fast float %57, %65
  %67 = fsub fast float -0.000000e+00, %66
  %68 = call float @dx.op.unary.f32(i32 7, float %67)  ; Saturate(value)
  %69 = fmul fast float %68, %64
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 41)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.i32 %74, 0
  %76 = add i32 %75, 151
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 %76)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %79 = fmul fast float %78, 5.000000e-01
  %80 = fmul fast float %79, %71
  %81 = fmul fast float %79, %72
  %82 = fmul fast float %79, %73
  %83 = call float @dx.op.unary.f32(i32 6, float %80)  ; FAbs(value)
  %84 = call float @dx.op.unary.f32(i32 6, float %81)  ; FAbs(value)
  %85 = call float @dx.op.unary.f32(i32 6, float %82)  ; FAbs(value)
  %86 = call float @dx.op.dot3.f32(i32 55, float %83, float %84, float %85, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00)  ; Dot3(ax,ay,az,bx,by,bz)
  %87 = fadd fast float %86, %42
  %88 = fadd fast float %86, %43
  %89 = fadd fast float %86, %32
  %90 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.i32 %90, 0
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %203, label %93, !dx.controlflow.hints !41

; <label>:93                                      ; preds = %0
  %94 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 36)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.f32 %94, 0
  %96 = extractvalue %dx.types.CBufRet.f32 %94, 1
  %97 = extractvalue %dx.types.CBufRet.f32 %94, 3
  %98 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %99 = extractvalue %dx.types.CBufRet.f32 %98, 0
  %100 = extractvalue %dx.types.CBufRet.f32 %98, 1
  %101 = extractvalue %dx.types.CBufRet.f32 %98, 3
  %102 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.f32 %102, 0
  %104 = extractvalue %dx.types.CBufRet.f32 %102, 1
  %105 = extractvalue %dx.types.CBufRet.f32 %102, 3
  %106 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %107 = extractvalue %dx.types.CBufRet.f32 %106, 0
  %108 = extractvalue %dx.types.CBufRet.f32 %106, 1
  %109 = extractvalue %dx.types.CBufRet.f32 %106, 3
  %110 = fmul fast float %95, %87
  %111 = call float @dx.op.tertiary.f32(i32 46, float %88, float %99, float %110)  ; FMad(a,b,c)
  %112 = call float @dx.op.tertiary.f32(i32 46, float %89, float %103, float %111)  ; FMad(a,b,c)
  %113 = fadd fast float %112, %107
  %114 = fmul fast float %96, %87
  %115 = call float @dx.op.tertiary.f32(i32 46, float %88, float %100, float %114)  ; FMad(a,b,c)
  %116 = call float @dx.op.tertiary.f32(i32 46, float %89, float %104, float %115)  ; FMad(a,b,c)
  %117 = fadd fast float %116, %108
  %118 = fmul fast float %97, %87
  %119 = call float @dx.op.tertiary.f32(i32 46, float %88, float %101, float %118)  ; FMad(a,b,c)
  %120 = call float @dx.op.tertiary.f32(i32 46, float %89, float %105, float %119)  ; FMad(a,b,c)
  %121 = fadd fast float %120, %109
  %122 = fdiv fast float %113, %121
  %123 = fdiv fast float %117, %121
  %124 = fcmp fast ole float %122, 1.000000e+00
  %125 = fcmp fast ole float %123, 1.000000e+00
  %126 = fcmp fast oge float %122, 0.000000e+00
  %127 = fcmp fast oge float %123, 0.000000e+00
  %128 = and i1 %126, %124
  %129 = and i1 %127, %125
  %130 = and i1 %128, %129
  br i1 %130, label %131, label %203

; <label>:131                                     ; preds = %93
  %132 = extractvalue %dx.types.CBufRet.f32 %106, 2
  %133 = extractvalue %dx.types.CBufRet.f32 %102, 2
  %134 = extractvalue %dx.types.CBufRet.f32 %98, 2
  %135 = extractvalue %dx.types.CBufRet.f32 %94, 2
  %136 = fmul fast float %135, %87
  %137 = call float @dx.op.tertiary.f32(i32 46, float %88, float %134, float %136)  ; FMad(a,b,c)
  %138 = call float @dx.op.tertiary.f32(i32 46, float %89, float %133, float %137)  ; FMad(a,b,c)
  %139 = fadd fast float %138, %132
  %140 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %141 = extractvalue %dx.types.CBufRet.f32 %140, 0
  %142 = extractvalue %dx.types.CBufRet.f32 %140, 1
  %143 = extractvalue %dx.types.CBufRet.f32 %140, 2
  %144 = extractvalue %dx.types.CBufRet.f32 %140, 3
  %145 = fmul fast float %141, %122
  %146 = fmul fast float %142, %123
  %147 = fadd fast float %145, -5.000000e-01
  %148 = fadd fast float %146, -5.000000e-01
  %149 = call float @dx.op.unary.f32(i32 22, float %147)  ; Frc(value)
  %150 = call float @dx.op.unary.f32(i32 22, float %148)  ; Frc(value)
  %151 = call float @dx.op.unary.f32(i32 27, float %147)  ; Round_ni(value)
  %152 = call float @dx.op.unary.f32(i32 27, float %148)  ; Round_ni(value)
  %153 = fadd fast float %151, 1.000000e+00
  %154 = fadd fast float %152, 1.000000e+00
  %155 = fmul fast float %153, %143
  %156 = fmul fast float %154, %144
  %157 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %158 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %159 = call %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32 73, %dx.types.Handle %157, %dx.types.Handle %158, float %155, float %156, float undef, float undef, i32 0, i32 0, i32 0)  ; TextureGather(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)
  %160 = extractvalue %dx.types.ResRet.f32 %159, 0
  %161 = extractvalue %dx.types.ResRet.f32 %159, 1
  %162 = extractvalue %dx.types.ResRet.f32 %159, 2
  %163 = extractvalue %dx.types.ResRet.f32 %159, 3
  %164 = fmul fast float %139, 4.000000e+01
  %165 = fadd fast float %164, -1.000000e+00
  %166 = fmul fast float %160, 4.000000e+01
  %167 = fmul fast float %161, 4.000000e+01
  %168 = fmul fast float %162, 4.000000e+01
  %169 = fmul fast float %163, 4.000000e+01
  %170 = fsub fast float %166, %165
  %171 = fsub fast float %167, %165
  %172 = fsub fast float %168, %165
  %173 = fsub fast float %169, %165
  %174 = call float @dx.op.unary.f32(i32 7, float %170)  ; Saturate(value)
  %175 = call float @dx.op.unary.f32(i32 7, float %171)  ; Saturate(value)
  %176 = call float @dx.op.unary.f32(i32 7, float %172)  ; Saturate(value)
  %177 = call float @dx.op.unary.f32(i32 7, float %173)  ; Saturate(value)
  %178 = fcmp fast ogt float %160, 0x3FEFAE1480000000
  %179 = fcmp fast ogt float %161, 0x3FEFAE1480000000
  %180 = fcmp fast ogt float %162, 0x3FEFAE1480000000
  %181 = fcmp fast ogt float %163, 0x3FEFAE1480000000
  %182 = uitofp i1 %178 to float
  %183 = uitofp i1 %179 to float
  %184 = uitofp i1 %180 to float
  %185 = uitofp i1 %181 to float
  %186 = fadd fast float %182, %174
  %187 = fadd fast float %183, %175
  %188 = fadd fast float %176, %184
  %189 = fadd fast float %177, %185
  %190 = call float @dx.op.unary.f32(i32 7, float %186)  ; Saturate(value)
  %191 = call float @dx.op.unary.f32(i32 7, float %187)  ; Saturate(value)
  %192 = call float @dx.op.unary.f32(i32 7, float %188)  ; Saturate(value)
  %193 = call float @dx.op.unary.f32(i32 7, float %189)  ; Saturate(value)
  %194 = fsub fast float %192, %193
  %195 = fsub fast float %191, %190
  %196 = fmul fast float %194, %149
  %197 = fmul fast float %195, %149
  %198 = fadd fast float %196, %193
  %199 = fadd fast float %197, %190
  %200 = fsub fast float %199, %198
  %201 = fmul fast float %200, %150
  %202 = fadd fast float %201, %198
  br label %203

; <label>:203                                     ; preds = %131, %93, %0
  %204 = phi float [ %202, %131 ], [ 1.000000e+00, %93 ], [ 1.000000e+00, %0 ]
  %205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %206 = extractvalue %dx.types.CBufRet.f32 %205, 0
  %207 = extractvalue %dx.types.CBufRet.f32 %205, 1
  %208 = extractvalue %dx.types.CBufRet.f32 %205, 3
  %209 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %210 = extractvalue %dx.types.CBufRet.f32 %209, 0
  %211 = extractvalue %dx.types.CBufRet.f32 %209, 1
  %212 = extractvalue %dx.types.CBufRet.f32 %209, 3
  %213 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %214 = extractvalue %dx.types.CBufRet.f32 %213, 0
  %215 = extractvalue %dx.types.CBufRet.f32 %213, 1
  %216 = extractvalue %dx.types.CBufRet.f32 %213, 3
  %217 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %218 = extractvalue %dx.types.CBufRet.f32 %217, 0
  %219 = extractvalue %dx.types.CBufRet.f32 %217, 1
  %220 = extractvalue %dx.types.CBufRet.f32 %217, 3
  %221 = fmul fast float %206, %87
  %222 = call float @dx.op.tertiary.f32(i32 46, float %88, float %210, float %221)  ; FMad(a,b,c)
  %223 = call float @dx.op.tertiary.f32(i32 46, float %89, float %214, float %222)  ; FMad(a,b,c)
  %224 = fadd fast float %223, %218
  %225 = fmul fast float %207, %87
  %226 = call float @dx.op.tertiary.f32(i32 46, float %88, float %211, float %225)  ; FMad(a,b,c)
  %227 = call float @dx.op.tertiary.f32(i32 46, float %89, float %215, float %226)  ; FMad(a,b,c)
  %228 = fadd fast float %227, %219
  %229 = fmul fast float %208, %87
  %230 = call float @dx.op.tertiary.f32(i32 46, float %88, float %212, float %229)  ; FMad(a,b,c)
  %231 = call float @dx.op.tertiary.f32(i32 46, float %89, float %216, float %230)  ; FMad(a,b,c)
  %232 = fadd fast float %231, %220
  %233 = fdiv fast float %224, %232
  %234 = fdiv fast float %228, %232
  %235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %236 = extractvalue %dx.types.CBufRet.f32 %235, 0
  %237 = extractvalue %dx.types.CBufRet.f32 %235, 1
  %238 = fcmp fast oge float %233, %236
  %239 = fcmp fast oge float %234, %237
  %240 = and i1 %238, %239
  %241 = extractvalue %dx.types.CBufRet.f32 %235, 2
  %242 = extractvalue %dx.types.CBufRet.f32 %235, 3
  %243 = fcmp fast ole float %233, %241
  %244 = fcmp fast ole float %234, %242
  %245 = and i1 %243, %244
  %246 = and i1 %240, %245
  br i1 %246, label %247, label %270

; <label>:247                                     ; preds = %203
  %248 = extractvalue %dx.types.CBufRet.f32 %217, 2
  %249 = extractvalue %dx.types.CBufRet.f32 %213, 2
  %250 = extractvalue %dx.types.CBufRet.f32 %209, 2
  %251 = extractvalue %dx.types.CBufRet.f32 %205, 2
  %252 = fmul fast float %251, %87
  %253 = call float @dx.op.tertiary.f32(i32 46, float %88, float %250, float %252)  ; FMad(a,b,c)
  %254 = call float @dx.op.tertiary.f32(i32 46, float %89, float %249, float %253)  ; FMad(a,b,c)
  %255 = fsub fast float 1.000000e+00, %248
  %256 = fsub fast float %255, %254
  %257 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %258 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %259 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %257, %dx.types.Handle %258, float %233, float %234, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %260 = extractvalue %dx.types.ResRet.f32 %259, 0
  %261 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %262 = extractvalue %dx.types.CBufRet.f32 %261, 0
  %263 = fsub fast float %260, %262
  %264 = fcmp fast olt float %256, %263
  %265 = uitofp i1 %264 to float
  %266 = fcmp fast oeq float %260, 1.000000e+00
  %267 = uitofp i1 %266 to float
  %268 = fadd fast float %265, %267
  %269 = call float @dx.op.unary.f32(i32 7, float %268)  ; Saturate(value)
  br label %270

; <label>:270                                     ; preds = %247, %203
  %271 = phi float [ %269, %247 ], [ 1.000000e+00, %203 ]
  %272 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %273 = extractvalue %dx.types.CBufRet.f32 %272, 0
  %274 = extractvalue %dx.types.CBufRet.f32 %272, 1
  %275 = extractvalue %dx.types.CBufRet.f32 %272, 2
  %276 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 74)  ; CBufferLoadLegacy(handle,regIndex)
  %277 = extractvalue %dx.types.CBufRet.f32 %276, 0
  %278 = extractvalue %dx.types.CBufRet.f32 %276, 1
  %279 = extractvalue %dx.types.CBufRet.f32 %276, 2
  %280 = fsub fast float %87, %277
  %281 = fsub fast float %88, %278
  %282 = fsub fast float %89, %279
  %283 = call float @dx.op.dot3.f32(i32 55, float %280, float %281, float %282, float %273, float %274, float %275)  ; Dot3(ax,ay,az,bx,by,bz)
  %284 = extractvalue %dx.types.CBufRet.f32 %60, 2
  %285 = fmul fast float %284, %283
  %286 = extractvalue %dx.types.CBufRet.f32 %60, 3
  %287 = fadd fast float %285, %286
  %288 = call float @dx.op.unary.f32(i32 7, float %287)  ; Saturate(value)
  %289 = fsub fast float 1.000000e+00, %271
  %290 = fmul fast float %288, %288
  %291 = fmul fast float %290, %289
  %292 = fadd fast float %291, %271
  %293 = call float @dx.op.binary.f32(i32 36, float %204, float %292)  ; FMin(a,b)
  %294 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %295 = extractvalue %dx.types.CBufRet.i32 %294, 1
  %296 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %297 = extractvalue %dx.types.CBufRet.f32 %296, 0
  %298 = extractvalue %dx.types.CBufRet.f32 %296, 1
  %299 = extractvalue %dx.types.CBufRet.f32 %296, 2
  %300 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %301 = extractvalue %dx.types.CBufRet.f32 %300, 0
  %302 = extractvalue %dx.types.CBufRet.f32 %300, 1
  %303 = extractvalue %dx.types.CBufRet.f32 %300, 2
  %304 = fsub fast float %87, %301
  %305 = fsub fast float %88, %302
  %306 = fsub fast float %89, %303
  %307 = mul i32 %295, 336
  %308 = add i32 %307, 128
  %309 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %310 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %308, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %311 = add i32 %307, 144
  %312 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %311, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %313 = add i32 %307, 160
  %314 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %313, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %315 = add i32 %307, 176
  %316 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %315, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %317 = add i32 %307, 256
  %318 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %317, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %319 = extractvalue %dx.types.ResRet.i32 %318, 0
  %320 = extractvalue %dx.types.ResRet.i32 %318, 1
  %321 = extractvalue %dx.types.ResRet.i32 %318, 2
  %322 = bitcast i32 %319 to float
  %323 = bitcast i32 %320 to float
  %324 = bitcast i32 %321 to float
  %325 = add i32 %307, 268
  %326 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %325, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %327 = extractvalue %dx.types.ResRet.i32 %326, 0
  %328 = add i32 %307, 272
  %329 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %328, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %330 = add i32 %307, 288
  %331 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %330, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %332 = icmp eq i32 %327, 0
  %333 = fadd fast float %322, %297
  %334 = fadd fast float %323, %298
  %335 = fadd fast float %324, %299
  %336 = fmul fast float %333, 2.097152e+06
  %337 = fmul fast float %334, 2.097152e+06
  %338 = fmul fast float %335, 2.097152e+06
  %339 = fadd fast float %336, %304
  %340 = fadd fast float %337, %305
  %341 = fadd fast float %338, %306
  br i1 %332, label %342, label %582

; <label>:342                                     ; preds = %270
  %343 = extractvalue %dx.types.ResRet.i32 %331, 2
  %344 = bitcast i32 %343 to float
  %345 = extractvalue %dx.types.ResRet.i32 %331, 1
  %346 = bitcast i32 %345 to float
  %347 = extractvalue %dx.types.ResRet.i32 %331, 0
  %348 = bitcast i32 %347 to float
  %349 = add i32 %307, 320
  %350 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %349, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %351 = extractvalue %dx.types.ResRet.i32 %350, 0
  %352 = add i32 %307, 316
  %353 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %352, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %354 = extractvalue %dx.types.ResRet.i32 %353, 0
  %355 = add i32 %307, 300
  %356 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %355, i32 undef, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %357 = extractvalue %dx.types.ResRet.i32 %356, 0
  %358 = bitcast i32 %357 to float
  %359 = fadd fast float %339, %348
  %360 = fadd fast float %340, %346
  %361 = fadd fast float %341, %344
  %362 = fmul fast float %359, %359
  %363 = fmul fast float %360, %360
  %364 = fadd fast float %362, %363
  %365 = fmul fast float %361, %361
  %366 = fadd fast float %364, %365
  %367 = call float @dx.op.unary.f32(i32 24, float %366)  ; Sqrt(value)
  %368 = call float @dx.op.unary.f32(i32 23, float %367)  ; Log(value)
  %369 = fadd fast float %368, %358
  %370 = call float @dx.op.unary.f32(i32 27, float %369)  ; Round_ni(value)
  %371 = fptosi float %370 to i32
  %372 = sub nsw i32 %371, %354
  %373 = call i32 @dx.op.binary.i32(i32 37, i32 0, i32 %372)  ; IMax(a,b)
  %374 = icmp slt i32 %373, %351
  br i1 %374, label %375, label %754

; <label>:375                                     ; preds = %342
  %376 = add nsw i32 %373, %295
  %377 = mul i32 %376, 336
  %378 = add i32 %377, 128
  %379 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %378, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %380 = extractvalue %dx.types.ResRet.i32 %379, 0
  %381 = extractvalue %dx.types.ResRet.i32 %379, 1
  %382 = extractvalue %dx.types.ResRet.i32 %379, 2
  %383 = bitcast i32 %380 to float
  %384 = bitcast i32 %381 to float
  %385 = bitcast i32 %382 to float
  %386 = add i32 %377, 144
  %387 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %386, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %388 = extractvalue %dx.types.ResRet.i32 %387, 0
  %389 = extractvalue %dx.types.ResRet.i32 %387, 1
  %390 = extractvalue %dx.types.ResRet.i32 %387, 2
  %391 = bitcast i32 %388 to float
  %392 = bitcast i32 %389 to float
  %393 = bitcast i32 %390 to float
  %394 = add i32 %377, 160
  %395 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %394, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %396 = extractvalue %dx.types.ResRet.i32 %395, 0
  %397 = extractvalue %dx.types.ResRet.i32 %395, 1
  %398 = extractvalue %dx.types.ResRet.i32 %395, 2
  %399 = bitcast i32 %396 to float
  %400 = bitcast i32 %397 to float
  %401 = bitcast i32 %398 to float
  %402 = add i32 %377, 176
  %403 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %402, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %404 = extractvalue %dx.types.ResRet.i32 %403, 0
  %405 = extractvalue %dx.types.ResRet.i32 %403, 1
  %406 = extractvalue %dx.types.ResRet.i32 %403, 2
  %407 = bitcast i32 %404 to float
  %408 = bitcast i32 %405 to float
  %409 = bitcast i32 %406 to float
  %410 = add i32 %377, 256
  %411 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %410, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %412 = extractvalue %dx.types.ResRet.i32 %411, 0
  %413 = extractvalue %dx.types.ResRet.i32 %411, 1
  %414 = extractvalue %dx.types.ResRet.i32 %411, 2
  %415 = bitcast i32 %412 to float
  %416 = bitcast i32 %413 to float
  %417 = bitcast i32 %414 to float
  %418 = add i32 %377, 272
  %419 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %418, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %420 = extractvalue %dx.types.ResRet.i32 %419, 0
  %421 = extractvalue %dx.types.ResRet.i32 %419, 1
  %422 = extractvalue %dx.types.ResRet.i32 %419, 2
  %423 = bitcast i32 %420 to float
  %424 = bitcast i32 %421 to float
  %425 = bitcast i32 %422 to float
  %426 = fadd fast float %415, %297
  %427 = fadd fast float %416, %298
  %428 = fadd fast float %417, %299
  %429 = fmul fast float %426, 2.097152e+06
  %430 = fmul fast float %427, 2.097152e+06
  %431 = fmul fast float %428, 2.097152e+06
  %432 = fadd fast float %429, %304
  %433 = fadd fast float %432, %423
  %434 = fadd fast float %430, %305
  %435 = fadd fast float %434, %424
  %436 = fadd fast float %431, %306
  %437 = fadd fast float %436, %425
  %438 = fmul fast float %433, %383
  %439 = call float @dx.op.tertiary.f32(i32 46, float %435, float %391, float %438)  ; FMad(a,b,c)
  %440 = call float @dx.op.tertiary.f32(i32 46, float %437, float %399, float %439)  ; FMad(a,b,c)
  %441 = fadd fast float %440, %407
  %442 = fmul fast float %433, %384
  %443 = call float @dx.op.tertiary.f32(i32 46, float %435, float %392, float %442)  ; FMad(a,b,c)
  %444 = call float @dx.op.tertiary.f32(i32 46, float %437, float %400, float %443)  ; FMad(a,b,c)
  %445 = fadd fast float %444, %408
  %446 = fmul fast float %433, %385
  %447 = call float @dx.op.tertiary.f32(i32 46, float %435, float %393, float %446)  ; FMad(a,b,c)
  %448 = call float @dx.op.tertiary.f32(i32 46, float %437, float %401, float %447)  ; FMad(a,b,c)
  %449 = fadd fast float %448, %409
  %450 = fmul fast float %441, 1.280000e+02
  %451 = fmul fast float %445, 1.280000e+02
  %452 = fptoui float %450 to i32
  %453 = fptoui float %451 to i32
  %454 = icmp ult i32 %376, 8192
  br i1 %454, label %461, label %455

; <label>:455                                     ; preds = %375
  %456 = mul i32 %376, 21845
  %457 = shl i32 %453, 7
  %458 = add i32 %456, -178946048
  %459 = add i32 %458, %452
  %460 = add i32 %459, %457
  br label %461

; <label>:461                                     ; preds = %455, %375
  %462 = phi i32 [ %460, %455 ], [ %376, %375 ]
  %463 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %464 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %462, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %465 = extractvalue %dx.types.ResRet.i32 %464, 0
  %466 = lshr i32 %465, 20
  %467 = and i32 %466, 63
  %468 = and i32 %465, 134217728
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %576, label %470

; <label>:470                                     ; preds = %461
  %471 = icmp eq i32 %467, 0
  %472 = zext i1 %471 to i32
  %473 = add i32 %467, %376
  %474 = fmul fast float %441, 1.638400e+04
  %475 = fmul fast float %445, 1.638400e+04
  %476 = fptoui float %474 to i32
  %477 = fptoui float %475 to i32
  br i1 %471, label %553, label %478

; <label>:478                                     ; preds = %470
  %479 = add i32 %377, 304
  %480 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %479, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %481 = extractvalue %dx.types.ResRet.i32 %480, 0
  %482 = extractvalue %dx.types.ResRet.i32 %480, 1
  %483 = mul i32 %473, 336
  %484 = add i32 %483, 304
  %485 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %484, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %486 = extractvalue %dx.types.ResRet.i32 %485, 0
  %487 = extractvalue %dx.types.ResRet.i32 %485, 1
  %488 = shl i32 %481, 5
  %489 = shl i32 %482, 5
  %490 = shl i32 %486, 5
  %491 = shl i32 %487, 5
  %492 = sub i32 %452, %488
  %493 = sub i32 %453, %489
  %494 = and i32 %466, 31
  %495 = shl i32 %490, %494
  %496 = shl i32 %491, %494
  %497 = add i32 %492, %495
  %498 = add i32 %493, %496
  %499 = lshr i32 %497, %494
  %500 = lshr i32 %498, %494
  %501 = shl i32 %499, 7
  %502 = shl i32 %500, 7
  %503 = or i32 %501, 127
  %504 = or i32 %502, 127
  %505 = add i32 %377, 112
  %506 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %505, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %507 = extractvalue %dx.types.ResRet.i32 %506, 2
  %508 = bitcast i32 %507 to float
  %509 = add i32 %483, 112
  %510 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %509, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %511 = extractvalue %dx.types.ResRet.i32 %510, 2
  %512 = bitcast i32 %511 to float
  %513 = sitofp i32 %481 to float
  %514 = sitofp i32 %482 to float
  %515 = sitofp i32 %486 to float
  %516 = sitofp i32 %487 to float
  %517 = shl i32 1, %494
  %518 = uitofp i32 %517 to float
  %519 = fdiv fast float 1.000000e+00, %518
  %520 = fmul fast float %519, %513
  %521 = fmul fast float %519, %514
  %522 = fsub fast float %515, %520
  %523 = fsub fast float %516, %521
  %524 = fmul fast float %522, 2.500000e-01
  %525 = fmul fast float %523, 2.500000e-01
  %526 = fmul fast float %519, %508
  %527 = fsub fast float %512, %526
  %528 = fmul fast float %519, %441
  %529 = fmul fast float %519, %445
  %530 = fadd fast float %524, %528
  %531 = fadd fast float %525, %529
  %532 = fmul fast float %530, 1.638400e+04
  %533 = fmul fast float %531, 1.638400e+04
  %534 = fptoui float %532 to i32
  %535 = fptoui float %533 to i32
  %536 = call i32 @dx.op.binary.i32(i32 39, i32 %534, i32 %501)  ; UMax(a,b)
  %537 = call i32 @dx.op.binary.i32(i32 39, i32 %535, i32 %502)  ; UMax(a,b)
  %538 = call i32 @dx.op.binary.i32(i32 40, i32 %536, i32 %503)  ; UMin(a,b)
  %539 = call i32 @dx.op.binary.i32(i32 40, i32 %537, i32 %504)  ; UMin(a,b)
  %540 = icmp ult i32 %473, 8192
  br i1 %540, label %546, label %541

; <label>:541                                     ; preds = %478
  %542 = mul i32 %473, 21845
  %543 = add i32 %542, -178946048
  %544 = add i32 %543, %499
  %545 = add i32 %544, %502
  br label %546

; <label>:546                                     ; preds = %541, %478
  %547 = phi i32 [ %545, %541 ], [ %473, %478 ]
  %548 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %463, i32 %547, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %549 = extractvalue %dx.types.ResRet.i32 %548, 0
  %550 = and i32 %549, 200278016
  %551 = icmp eq i32 %550, 134217728
  %552 = zext i1 %551 to i32
  br label %553

; <label>:553                                     ; preds = %546, %470
  %554 = phi i32 [ %538, %546 ], [ %476, %470 ]
  %555 = phi i32 [ %539, %546 ], [ %477, %470 ]
  %556 = phi float [ %519, %546 ], [ 1.000000e+00, %470 ]
  %557 = phi float [ %527, %546 ], [ 0.000000e+00, %470 ]
  %558 = phi i32 [ %552, %546 ], [ %472, %470 ]
  %559 = phi i32 [ %549, %546 ], [ %465, %470 ]
  %560 = icmp eq i32 %558, 0
  br i1 %560, label %576, label %561

; <label>:561                                     ; preds = %553
  %562 = shl i32 %559, 7
  %563 = and i32 %562, 130944
  %564 = lshr i32 %559, 3
  %565 = and i32 %564, 130944
  %566 = and i32 %554, 127
  %567 = and i32 %555, 127
  %568 = or i32 %563, %566
  %569 = or i32 %565, %567
  %570 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %571 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %570, i32 0, i32 %568, i32 %569, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %572 = extractvalue %dx.types.ResRet.i32 %571, 0
  %573 = bitcast i32 %572 to float
  %574 = fsub fast float %573, %557
  %575 = fdiv fast float %574, %556
  br label %576

; <label>:576                                     ; preds = %561, %553, %461
  %577 = phi float [ %575, %561 ], [ 0.000000e+00, %553 ], [ 0.000000e+00, %461 ]
  %578 = phi i1 [ true, %561 ], [ false, %553 ], [ false, %461 ]
  %579 = fcmp fast ogt float %577, %449
  %580 = and i1 %578, %579
  %581 = select i1 %580, float 0.000000e+00, float 1.000000e+00
  br label %754

; <label>:582                                     ; preds = %270
  %583 = extractvalue %dx.types.ResRet.i32 %329, 2
  %584 = bitcast i32 %583 to float
  %585 = extractvalue %dx.types.ResRet.i32 %329, 1
  %586 = bitcast i32 %585 to float
  %587 = extractvalue %dx.types.ResRet.i32 %329, 0
  %588 = bitcast i32 %587 to float
  %589 = extractvalue %dx.types.ResRet.i32 %316, 3
  %590 = extractvalue %dx.types.ResRet.i32 %316, 2
  %591 = extractvalue %dx.types.ResRet.i32 %316, 1
  %592 = extractvalue %dx.types.ResRet.i32 %316, 0
  %593 = extractvalue %dx.types.ResRet.i32 %314, 3
  %594 = extractvalue %dx.types.ResRet.i32 %314, 2
  %595 = extractvalue %dx.types.ResRet.i32 %314, 1
  %596 = extractvalue %dx.types.ResRet.i32 %314, 0
  %597 = extractvalue %dx.types.ResRet.i32 %312, 3
  %598 = extractvalue %dx.types.ResRet.i32 %312, 2
  %599 = extractvalue %dx.types.ResRet.i32 %312, 1
  %600 = extractvalue %dx.types.ResRet.i32 %312, 0
  %601 = extractvalue %dx.types.ResRet.i32 %310, 3
  %602 = extractvalue %dx.types.ResRet.i32 %310, 2
  %603 = extractvalue %dx.types.ResRet.i32 %310, 1
  %604 = extractvalue %dx.types.ResRet.i32 %310, 0
  %605 = fadd fast float %339, %588
  %606 = fadd fast float %340, %586
  %607 = fadd fast float %341, %584
  %608 = icmp eq i32 %327, 2
  br i1 %608, label %655, label %609

; <label>:609                                     ; preds = %582
  %610 = call float @dx.op.unary.f32(i32 6, float %605)  ; FAbs(value)
  %611 = call float @dx.op.unary.f32(i32 6, float %606)  ; FAbs(value)
  %612 = fcmp fast oge float %610, %611
  %613 = call float @dx.op.unary.f32(i32 6, float %607)  ; FAbs(value)
  %614 = fcmp fast oge float %610, %613
  %615 = and i1 %612, %614
  br i1 %615, label %616, label %619

; <label>:616                                     ; preds = %609
  %617 = fcmp ule float %605, 0.000000e+00
  %618 = zext i1 %617 to i32
  br label %627

; <label>:619                                     ; preds = %609
  %620 = fcmp fast ogt float %611, %613
  br i1 %620, label %621, label %624

; <label>:621                                     ; preds = %619
  %622 = fcmp fast ogt float %606, 0.000000e+00
  %623 = select i1 %622, i32 2, i32 3
  br label %627

; <label>:624                                     ; preds = %619
  %625 = fcmp fast ogt float %607, 0.000000e+00
  %626 = select i1 %625, i32 4, i32 5
  br label %627

; <label>:627                                     ; preds = %624, %621, %616
  %628 = phi i32 [ %618, %616 ], [ %623, %621 ], [ %626, %624 ]
  %629 = add i32 %628, %295
  %630 = mul i32 %629, 336
  %631 = add i32 %630, 128
  %632 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %631, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %633 = extractvalue %dx.types.ResRet.i32 %632, 0
  %634 = extractvalue %dx.types.ResRet.i32 %632, 1
  %635 = extractvalue %dx.types.ResRet.i32 %632, 2
  %636 = extractvalue %dx.types.ResRet.i32 %632, 3
  %637 = add i32 %630, 144
  %638 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %637, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %639 = extractvalue %dx.types.ResRet.i32 %638, 0
  %640 = extractvalue %dx.types.ResRet.i32 %638, 1
  %641 = extractvalue %dx.types.ResRet.i32 %638, 2
  %642 = extractvalue %dx.types.ResRet.i32 %638, 3
  %643 = add i32 %630, 160
  %644 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %643, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %645 = extractvalue %dx.types.ResRet.i32 %644, 0
  %646 = extractvalue %dx.types.ResRet.i32 %644, 1
  %647 = extractvalue %dx.types.ResRet.i32 %644, 2
  %648 = extractvalue %dx.types.ResRet.i32 %644, 3
  %649 = add i32 %630, 176
  %650 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %309, i32 %649, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %651 = extractvalue %dx.types.ResRet.i32 %650, 0
  %652 = extractvalue %dx.types.ResRet.i32 %650, 1
  %653 = extractvalue %dx.types.ResRet.i32 %650, 2
  %654 = extractvalue %dx.types.ResRet.i32 %650, 3
  br label %655

; <label>:655                                     ; preds = %627, %582
  %656 = phi i32 [ %633, %627 ], [ %604, %582 ]
  %657 = phi i32 [ %634, %627 ], [ %603, %582 ]
  %658 = phi i32 [ %635, %627 ], [ %602, %582 ]
  %659 = phi i32 [ %636, %627 ], [ %601, %582 ]
  %660 = phi i32 [ %639, %627 ], [ %600, %582 ]
  %661 = phi i32 [ %640, %627 ], [ %599, %582 ]
  %662 = phi i32 [ %641, %627 ], [ %598, %582 ]
  %663 = phi i32 [ %642, %627 ], [ %597, %582 ]
  %664 = phi i32 [ %645, %627 ], [ %596, %582 ]
  %665 = phi i32 [ %646, %627 ], [ %595, %582 ]
  %666 = phi i32 [ %647, %627 ], [ %594, %582 ]
  %667 = phi i32 [ %648, %627 ], [ %593, %582 ]
  %668 = phi i32 [ %651, %627 ], [ %592, %582 ]
  %669 = phi i32 [ %652, %627 ], [ %591, %582 ]
  %670 = phi i32 [ %653, %627 ], [ %590, %582 ]
  %671 = phi i32 [ %654, %627 ], [ %589, %582 ]
  %672 = phi i32 [ %629, %627 ], [ %295, %582 ]
  %673 = bitcast i32 %671 to float
  %674 = bitcast i32 %670 to float
  %675 = bitcast i32 %669 to float
  %676 = bitcast i32 %668 to float
  %677 = bitcast i32 %667 to float
  %678 = bitcast i32 %666 to float
  %679 = bitcast i32 %665 to float
  %680 = bitcast i32 %664 to float
  %681 = bitcast i32 %663 to float
  %682 = bitcast i32 %662 to float
  %683 = bitcast i32 %661 to float
  %684 = bitcast i32 %660 to float
  %685 = bitcast i32 %659 to float
  %686 = bitcast i32 %658 to float
  %687 = bitcast i32 %657 to float
  %688 = bitcast i32 %656 to float
  %689 = fmul fast float %688, %605
  %690 = call float @dx.op.tertiary.f32(i32 46, float %606, float %684, float %689)  ; FMad(a,b,c)
  %691 = call float @dx.op.tertiary.f32(i32 46, float %607, float %680, float %690)  ; FMad(a,b,c)
  %692 = fadd fast float %691, %676
  %693 = fmul fast float %687, %605
  %694 = call float @dx.op.tertiary.f32(i32 46, float %606, float %683, float %693)  ; FMad(a,b,c)
  %695 = call float @dx.op.tertiary.f32(i32 46, float %607, float %679, float %694)  ; FMad(a,b,c)
  %696 = fadd fast float %695, %675
  %697 = fmul fast float %686, %605
  %698 = call float @dx.op.tertiary.f32(i32 46, float %606, float %682, float %697)  ; FMad(a,b,c)
  %699 = call float @dx.op.tertiary.f32(i32 46, float %607, float %678, float %698)  ; FMad(a,b,c)
  %700 = fadd fast float %699, %674
  %701 = fmul fast float %685, %605
  %702 = call float @dx.op.tertiary.f32(i32 46, float %606, float %681, float %701)  ; FMad(a,b,c)
  %703 = call float @dx.op.tertiary.f32(i32 46, float %607, float %677, float %702)  ; FMad(a,b,c)
  %704 = fadd fast float %703, %673
  %705 = fdiv fast float %692, %704
  %706 = fdiv fast float %696, %704
  %707 = fdiv fast float %700, %704
  %708 = icmp ult i32 %672, 8192
  br i1 %708, label %719, label %709

; <label>:709                                     ; preds = %655
  %710 = fmul fast float %706, 1.280000e+02
  %711 = fptoui float %710 to i32
  %712 = fmul fast float %705, 1.280000e+02
  %713 = fptoui float %712 to i32
  %714 = mul i32 %672, 21845
  %715 = shl i32 %711, 7
  %716 = add i32 %714, -178946048
  %717 = add i32 %716, %713
  %718 = add i32 %717, %715
  br label %719

; <label>:719                                     ; preds = %709, %655
  %720 = phi i32 [ %718, %709 ], [ %672, %655 ]
  %721 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 4 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=4>
  %722 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %721, i32 %720, i32 0, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %723 = extractvalue %dx.types.ResRet.i32 %722, 0
  %724 = lshr i32 %723, 20
  %725 = and i32 %723, 134217728
  %726 = icmp eq i32 %725, 0
  %727 = and i32 %724, 31
  %728 = lshr i32 16384, %727
  %729 = uitofp i32 %728 to float
  %730 = select i1 %708, float 1.280000e+02, float %729
  br i1 %726, label %748, label %731

; <label>:731                                     ; preds = %719
  %732 = lshr i32 %723, 3
  %733 = and i32 %732, 130944
  %734 = fmul fast float %730, %706
  %735 = fptoui float %734 to i32
  %736 = and i32 %735, 127
  %737 = or i32 %736, %733
  %738 = shl i32 %723, 7
  %739 = and i32 %738, 130944
  %740 = fmul fast float %730, %705
  %741 = fptoui float %740 to i32
  %742 = and i32 %741, 127
  %743 = or i32 %742, %739
  %744 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 7, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2DArray<U32>
  %745 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %744, i32 0, i32 %743, i32 %737, i32 0, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %746 = extractvalue %dx.types.ResRet.i32 %745, 0
  %747 = bitcast i32 %746 to float
  br label %748

; <label>:748                                     ; preds = %731, %719
  %749 = phi float [ %747, %731 ], [ 0.000000e+00, %719 ]
  %750 = phi i1 [ true, %731 ], [ false, %719 ]
  %751 = fcmp fast ogt float %749, %707
  %752 = and i1 %750, %751
  %753 = select i1 %752, float 0.000000e+00, float 1.000000e+00
  br label %754

; <label>:754                                     ; preds = %748, %576, %342
  %755 = phi float [ 1.000000e+00, %342 ], [ %581, %576 ], [ %753, %748 ]
  %756 = fmul fast float %755, %293
  %757 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %17, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %758 = extractvalue %dx.types.CBufRet.i32 %757, 1
  %759 = icmp eq i32 %758, 0
  br i1 %759, label %829, label %760

; <label>:760                                     ; preds = %754
  %761 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 49)  ; CBufferLoadLegacy(handle,regIndex)
  %762 = extractvalue %dx.types.CBufRet.f32 %761, 0
  %763 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %764 = extractvalue %dx.types.CBufRet.f32 %763, 0
  %765 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %766 = extractvalue %dx.types.CBufRet.f32 %765, 0
  %767 = extractvalue %dx.types.CBufRet.f32 %765, 1
  %768 = extractvalue %dx.types.CBufRet.f32 %765, 2
  %769 = extractvalue %dx.types.CBufRet.f32 %765, 3
  %770 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %771 = extractvalue %dx.types.CBufRet.f32 %770, 0
  %772 = extractvalue %dx.types.CBufRet.f32 %770, 1
  %773 = extractvalue %dx.types.CBufRet.f32 %770, 2
  %774 = extractvalue %dx.types.CBufRet.f32 %770, 3
  %775 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %776 = extractvalue %dx.types.CBufRet.f32 %775, 0
  %777 = extractvalue %dx.types.CBufRet.f32 %775, 1
  %778 = extractvalue %dx.types.CBufRet.f32 %775, 2
  %779 = extractvalue %dx.types.CBufRet.f32 %775, 3
  %780 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %17, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %781 = extractvalue %dx.types.CBufRet.f32 %780, 0
  %782 = extractvalue %dx.types.CBufRet.f32 %780, 1
  %783 = extractvalue %dx.types.CBufRet.f32 %780, 2
  %784 = extractvalue %dx.types.CBufRet.f32 %780, 3
  %785 = fmul fast float %766, %87
  %786 = call float @dx.op.tertiary.f32(i32 46, float %88, float %771, float %785)  ; FMad(a,b,c)
  %787 = call float @dx.op.tertiary.f32(i32 46, float %89, float %776, float %786)  ; FMad(a,b,c)
  %788 = fadd fast float %787, %781
  %789 = fmul fast float %767, %87
  %790 = call float @dx.op.tertiary.f32(i32 46, float %88, float %772, float %789)  ; FMad(a,b,c)
  %791 = call float @dx.op.tertiary.f32(i32 46, float %89, float %777, float %790)  ; FMad(a,b,c)
  %792 = fadd fast float %791, %782
  %793 = fmul fast float %768, %87
  %794 = call float @dx.op.tertiary.f32(i32 46, float %88, float %773, float %793)  ; FMad(a,b,c)
  %795 = call float @dx.op.tertiary.f32(i32 46, float %89, float %778, float %794)  ; FMad(a,b,c)
  %796 = fadd fast float %795, %783
  %797 = fmul fast float %769, %87
  %798 = call float @dx.op.tertiary.f32(i32 46, float %88, float %774, float %797)  ; FMad(a,b,c)
  %799 = call float @dx.op.tertiary.f32(i32 46, float %89, float %779, float %798)  ; FMad(a,b,c)
  %800 = fadd fast float %799, %784
  %801 = fdiv fast float %788, %800
  %802 = fdiv fast float %792, %800
  %803 = fdiv fast float %796, %800
  %804 = fmul fast float %801, 5.000000e-01
  %805 = fmul fast float %802, 5.000000e-01
  %806 = fadd fast float %804, 5.000000e-01
  %807 = fsub fast float 5.000000e-01, %805
  %808 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 777 })  ; AnnotateHandle(res,props)  resource: Texture2D<3xF32>
  %809 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %810 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %808, %dx.types.Handle %809, float %806, float %807, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %811 = extractvalue %dx.types.ResRet.f32 %810, 0
  %812 = extractvalue %dx.types.ResRet.f32 %810, 1
  %813 = extractvalue %dx.types.ResRet.f32 %810, 2
  %814 = fsub fast float 1.000000e+00, %803
  %815 = call float @dx.op.unary.f32(i32 7, float %814)  ; Saturate(value)
  %816 = fmul fast float %815, %764
  %817 = fsub fast float %816, %811
  %818 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %817)  ; FMax(a,b)
  %819 = fmul fast float %812, 1.000000e+03
  %820 = fmul fast float %819, %818
  %821 = call float @dx.op.binary.f32(i32 36, float %813, float %820)  ; FMin(a,b)
  %822 = fmul fast float %821, 0xBFF7154760000000
  %823 = call float @dx.op.unary.f32(i32 21, float %822)  ; Exp(value)
  %824 = call float @dx.op.unary.f32(i32 7, float %823)  ; Saturate(value)
  %825 = fadd fast float %824, -1.000000e+00
  %826 = fmul fast float %825, %762
  %827 = fadd fast float %826, 1.000000e+00
  %828 = fmul fast float %827, %756
  br label %829

; <label>:829                                     ; preds = %760, %754
  %830 = phi float [ %828, %760 ], [ %756, %754 ]
  %831 = icmp eq i32 %75, 1
  br i1 %831, label %832, label %862

; <label>:832                                     ; preds = %829
  %833 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 150)  ; CBufferLoadLegacy(handle,regIndex)
  %834 = extractvalue %dx.types.CBufRet.f32 %833, 3
  %835 = fmul fast float %834, 4.000000e+00
  %836 = fadd fast float %835, 1.000000e+00
  %837 = fmul fast float %836, %19
  %838 = fmul fast float %836, %20
  %839 = fmul fast float %45, %836
  %840 = fmul fast float %834, 2.000000e+00
  %841 = fsub fast float -5.000000e-01, %840
  %842 = fadd fast float %841, %837
  %843 = fadd fast float %841, %838
  %844 = fadd fast float %841, %839
  %845 = call float @dx.op.unary.f32(i32 6, float %842)  ; FAbs(value)
  %846 = call float @dx.op.unary.f32(i32 6, float %843)  ; FAbs(value)
  %847 = call float @dx.op.unary.f32(i32 6, float %844)  ; FAbs(value)
  %848 = fsub fast float 5.000000e-01, %845
  %849 = fsub fast float 5.000000e-01, %846
  %850 = fsub fast float 5.000000e-01, %847
  %851 = fmul fast float %848, 1.000000e+01
  %852 = fmul fast float %849, 1.000000e+01
  %853 = fmul fast float %850, 1.000000e+01
  %854 = call float @dx.op.unary.f32(i32 7, float %851)  ; Saturate(value)
  %855 = call float @dx.op.unary.f32(i32 7, float %852)  ; Saturate(value)
  %856 = call float @dx.op.unary.f32(i32 7, float %853)  ; Saturate(value)
  %857 = fadd fast float %830, -1.000000e+00
  %858 = fmul fast float %854, %857
  %859 = fmul fast float %858, %855
  %860 = fmul fast float %859, %856
  %861 = fadd fast float %860, 1.000000e+00
  br label %862

; <label>:862                                     ; preds = %832, %829
  %863 = phi float [ %861, %832 ], [ %830, %829 ]
  %864 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %15, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %865 = extractvalue %dx.types.CBufRet.f32 %864, 0
  %866 = extractvalue %dx.types.CBufRet.f32 %864, 1
  %867 = extractvalue %dx.types.CBufRet.f32 %864, 2
  %868 = fmul fast float %863, 0x3FD45F3060000000
  %869 = fmul fast float %868, %865
  %870 = fmul fast float %868, %866
  %871 = fmul fast float %868, %867
  %872 = extractvalue %dx.types.CBufRet.i32 %757, 2
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %959, label %874

; <label>:874                                     ; preds = %862
  %875 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 173)  ; CBufferLoadLegacy(handle,regIndex)
  %876 = extractvalue %dx.types.CBufRet.f32 %875, 0
  %877 = extractvalue %dx.types.CBufRet.f32 %875, 1
  %878 = extractvalue %dx.types.CBufRet.f32 %875, 2
  %879 = fsub fast float %87, %876
  %880 = fsub fast float %88, %877
  %881 = fsub fast float %89, %878
  %882 = fmul fast float %879, 0x3EE4F8B580000000
  %883 = fmul fast float %880, 0x3EE4F8B580000000
  %884 = fmul fast float %881, 0x3EE4F8B580000000
  %885 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %16, i32 179)  ; CBufferLoadLegacy(handle,regIndex)
  %886 = extractvalue %dx.types.CBufRet.f32 %885, 3
  %887 = extractvalue %dx.types.CBufRet.f32 %885, 2
  %888 = call float @dx.op.dot3.f32(i32 55, float %882, float %883, float %884, float %882, float %883, float %884)  ; Dot3(ax,ay,az,bx,by,bz)
  %889 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %71, float %72, float %73)  ; Dot3(ax,ay,az,bx,by,bz)
  %890 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %882, float %883, float %884)  ; Dot3(ax,ay,az,bx,by,bz)
  %891 = fmul fast float %890, 2.000000e+00
  %892 = fmul fast float %887, %887
  %893 = fsub fast float %888, %892
  %894 = fmul fast float %891, %891
  %895 = fmul fast float %889, 4.000000e+00
  %896 = fmul fast float %895, %893
  %897 = fsub fast float %894, %896
  %898 = fcmp fast ult float %897, 0.000000e+00
  br i1 %898, label %909, label %899, !dx.controlflow.hints !42

; <label>:899                                     ; preds = %874
  %900 = call float @dx.op.unary.f32(i32 24, float %897)  ; Sqrt(value)
  %901 = fsub fast float -0.000000e+00, %891
  %902 = fsub fast float %901, %900
  %903 = fsub fast float %900, %891
  %904 = fmul fast float %889, 2.000000e+00
  %905 = fdiv fast float %902, %904
  %906 = fdiv fast float %903, %904
  %907 = fcmp ogt float %905, 0.000000e+00
  %908 = fcmp ogt float %906, 0.000000e+00
  br label %909

; <label>:909                                     ; preds = %899, %874
  %910 = phi i1 [ %907, %899 ], [ false, %874 ]
  %911 = phi i1 [ %908, %899 ], [ false, %874 ]
  %912 = or i1 %910, %911
  br i1 %912, label %952, label %913

; <label>:913                                     ; preds = %909
  %914 = fmul fast float %882, %882
  %915 = fmul fast float %883, %883
  %916 = fadd fast float %914, %915
  %917 = fmul fast float %884, %884
  %918 = fadd fast float %916, %917
  %919 = call float @dx.op.unary.f32(i32 24, float %918)  ; Sqrt(value)
  %920 = fdiv fast float %882, %919
  %921 = fdiv fast float %883, %919
  %922 = fdiv fast float %884, %919
  %923 = call float @dx.op.dot3.f32(i32 55, float %71, float %72, float %73, float %920, float %921, float %922)  ; Dot3(ax,ay,az,bx,by,bz)
  %924 = fmul fast float %886, %886
  %925 = fsub fast float %924, %892
  %926 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %925)  ; FMax(a,b)
  %927 = call float @dx.op.unary.f32(i32 24, float %926)  ; Sqrt(value)
  %928 = fmul fast float %919, %919
  %929 = fsub fast float %928, %892
  %930 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %929)  ; FMax(a,b)
  %931 = call float @dx.op.unary.f32(i32 24, float %930)  ; Sqrt(value)
  %932 = fmul fast float %923, %923
  %933 = fadd fast float %932, -1.000000e+00
  %934 = fmul fast float %928, %933
  %935 = fadd fast float %934, %924
  %936 = fmul fast float %923, %919
  %937 = call float @dx.op.unary.f32(i32 24, float %935)  ; Sqrt(value)
  %938 = fsub fast float %937, %936
  %939 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %938)  ; FMax(a,b)
  %940 = fsub fast float %886, %919
  %941 = fsub fast float %939, %940
  %942 = fsub fast float %927, %940
  %943 = fadd fast float %942, %931
  %944 = fdiv fast float %941, %943
  %945 = fdiv fast float %931, %927
  %946 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %947 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %948 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %946, %dx.types.Handle %947, float %944, float %945, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %949 = extractvalue %dx.types.ResRet.f32 %948, 0
  %950 = extractvalue %dx.types.ResRet.f32 %948, 1
  %951 = extractvalue %dx.types.ResRet.f32 %948, 2
  br label %952

; <label>:952                                     ; preds = %913, %909
  %953 = phi float [ %949, %913 ], [ 0.000000e+00, %909 ]
  %954 = phi float [ %950, %913 ], [ 0.000000e+00, %909 ]
  %955 = phi float [ %951, %913 ], [ 0.000000e+00, %909 ]
  %956 = fmul fast float %953, %869
  %957 = fmul fast float %954, %870
  %958 = fmul fast float %955, %871
  br label %959

; <label>:959                                     ; preds = %952, %862
  %960 = phi float [ %956, %952 ], [ %869, %862 ]
  %961 = phi float [ %957, %952 ], [ %870, %862 ]
  %962 = phi float [ %958, %952 ], [ %871, %862 ]
  %963 = fmul fast float %72, 0xBFDF454580000000
  %964 = fmul fast float %73, 0x3FDF454580000000
  %965 = fmul fast float %71, 0xBFDF454580000000
  %966 = fmul fast float %960, %963
  %967 = fmul fast float %960, %964
  %968 = fmul fast float %960, %965
  %969 = fmul fast float %961, %963
  %970 = fmul fast float %961, %964
  %971 = fmul fast float %961, %965
  %972 = fmul fast float %962, %963
  %973 = fmul fast float %962, %964
  %974 = fmul fast float %962, %965
  %975 = call float @dx.op.dot3.f32(i32 55, float %966, float %969, float %972, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %976 = call float @dx.op.dot3.f32(i32 55, float %967, float %970, float %973, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %977 = call float @dx.op.dot3.f32(i32 55, float %968, float %971, float %974, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %978 = fmul fast float %69, 0x3FD20DD820000000
  %979 = fmul fast float %978, %960
  %980 = fmul fast float %978, %961
  %981 = fmul fast float %978, %962
  %982 = fmul fast float %863, %69
  %983 = fmul fast float %975, %69
  %984 = fmul fast float %976, %69
  %985 = fmul fast float %977, %69
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %979)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %980)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %981)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float %982)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %983)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %984)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %985)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.loadInput.i32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind
declare void @dx.op.discard(i32, i1) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.textureGather.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!25}
!dx.entryPoints = !{!26}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !16, !20}
!5 = !{!6, !8, !9, !11, !13, !14, !15}
!6 = !{i32 0, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 2, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 1, i32 1, i32 11, i32 0, null}
!9 = !{i32 2, %"class.StructuredBuffer<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !10}
!10 = !{i32 1, i32 4}
!11 = !{i32 3, %"class.Texture2DArray<unsigned int>"* undef, !"", i32 0, i32 3, i32 1, i32 7, i32 0, !12}
!12 = !{i32 0, i32 5}
!13 = !{i32 4, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 2, i32 0, !7}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !7}
!15 = !{i32 6, %"class.Texture2D<vector<float, 3> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !7}
!16 = !{!17, !18, !19}
!17 = !{i32 0, %"hostlayout.$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 920, null}
!18 = !{i32 1, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 1, i32 1, i32 5388, null}
!19 = !{i32 2, %UniformBufferConstants_DeferredLightUniforms* undef, !"", i32 0, i32 2, i32 1, i32 160, null}
!20 = !{!21, !22, !23, !24}
!21 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!22 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!23 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!24 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!25 = !{[11 x i32] [i32 9, i32 8, i32 127, i32 127, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127]}
!26 = !{void ()* @InjectMainPS, !"InjectMainPS", !27, !4, !40}
!27 = !{!28, !35, null}
!28 = !{!29, !32, !33}
!29 = !{i32 0, !"TEXCOORD", i8 9, i8 0, !30, i8 4, i32 1, i8 2, i32 0, i8 0, !31}
!30 = !{i32 0}
!31 = !{i32 3, i32 3}
!32 = !{i32 1, !"SV_Position", i8 9, i8 3, !30, i8 4, i32 1, i8 4, i32 1, i8 0, null}
!33 = !{i32 2, !"SV_RenderTargetArrayIndex", i8 5, i8 4, !30, i8 1, i32 1, i8 1, i32 2, i8 0, !34}
!34 = !{i32 3, i32 1}
!35 = !{!36, !38}
!36 = !{i32 0, !"SV_Target", i8 9, i8 16, !30, i8 0, i32 1, i8 4, i32 0, i8 0, !37}
!37 = !{i32 3, i32 15}
!38 = !{i32 1, !"SV_Target", i8 9, i8 16, !39, i8 0, i32 1, i8 4, i32 1, i8 0, !37}
!39 = !{i32 1}
!40 = !{i32 0, i64 16, i32 5, !30}
!41 = distinct !{!41, !"dx.controlflow.hints", i32 1}
!42 = distinct !{!42, !"dx.controlflow.hints", i32 2}
