;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; PACKED_VIEW_INDEX        0   x           0     NONE    uint       
; MACRO_TILE_INDEX         0    y          0     NONE    uint       
; SV_IsFrontFace           0     z         0    FFACE    uint       
; SV_Position              0   xyzw        1      POS   float   xy  
;
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; SV_Target                0   xyzw        0   TARGET   float   xyzw
; SV_Target                1   xyzw        1   TARGET   float   xyzw
; SV_Target                2   xyzw        2   TARGET   float   xyzw
; SV_Target                3   xyzw        3   TARGET   float   xyzw
; SV_Target                4   xyzw        4   TARGET   float   xyzw
; SV_Target                6   xyzw        6   TARGET   float   xyzw
;
; shader hash: 805a3797c5ff551524af9ad5a4047168
;
; Pipeline Runtime Information: 
;
; Pixel Shader
; DepthOutput=0
; SampleFrequency=0
;
;
; Input signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; PACKED_VIEW_INDEX        0        nointerpolation       
; MACRO_TILE_INDEX         0        nointerpolation       
; SV_Position              0          noperspective       
; SV_IsFrontFace           0        nointerpolation       
;
; Output signature:
;
; Name                 Index             InterpMode DynIdx
; -------------------- ----- ---------------------- ------
; SV_Target                0                              
; SV_Target                1                              
; SV_Target                2                              
; SV_Target                3                              
; SV_Target                4                              
; SV_Target                6                              
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct hostlayout.UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_TranslatedWorldToSubpixelClip;; Offset:   64
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:  128
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  192
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  256
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  320
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  384
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  448
;       row_major float4x4 View_ViewToClip;           ; Offset:  512
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  576
;       row_major float4x4 View_ClipToView;           ; Offset:  640
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  768
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  832
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  896
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  960
;       float3 View_ViewTilePosition;                 ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_MatrixTilePosition;               ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_ViewForward;                      ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float3 View_ViewUp;                           ; Offset: 1072
;       float PrePadding_View_1084;                   ; Offset: 1084
;       float3 View_ViewRight;                        ; Offset: 1088
;       float PrePadding_View_1100;                   ; Offset: 1100
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_HMDViewNoRollRight;               ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1136
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1152
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1168
;       float PrePadding_View_1180;                   ; Offset: 1180
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1184
;       float PrePadding_View_1196;                   ; Offset: 1196
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1200
;       float PrePadding_View_1212;                   ; Offset: 1212
;       float3 View_RelativePreViewTranslation;       ; Offset: 1216
;       float PrePadding_View_1228;                   ; Offset: 1228
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1232
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1360
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1424
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1488
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1552
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1616
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1680
;       float PrePadding_View_1692;                   ; Offset: 1692
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1696
;       float PrePadding_View_1708;                   ; Offset: 1708
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1712
;       float PrePadding_View_1724;                   ; Offset: 1724
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1728
;       float PrePadding_View_1740;                   ; Offset: 1740
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1744
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1808
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1872
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1936
;       float4 View_TemporalAAJitter;                 ; Offset: 2000
;       float4 View_GlobalClippingPlane;              ; Offset: 2016
;       float2 View_FieldOfViewWideAngles;            ; Offset: 2032
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 2040
;       float4 View_ViewRectMin;                      ; Offset: 2048
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2064
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2080
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2096
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2112
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2128
;       float4 View_ScreenToViewSpace;                ; Offset: 2144
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2160
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2168
;       int View_NumSceneColorMSAASamples;            ; Offset: 2176
;       float View_PreExposure;                       ; Offset: 2180
;       float View_OneOverPreExposure;                ; Offset: 2184
;       float PrePadding_View_2188;                   ; Offset: 2188
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2192
;       float4 View_SpecularOverrideParameter;        ; Offset: 2208
;       float4 View_NormalOverrideParameter;          ; Offset: 2224
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2240
;       float View_PrevFrameGameTime;                 ; Offset: 2248
;       float View_PrevFrameRealTime;                 ; Offset: 2252
;       float View_OutOfBoundsMask;                   ; Offset: 2256
;       float PrePadding_View_2260;                   ; Offset: 2260
;       float PrePadding_View_2264;                   ; Offset: 2264
;       float PrePadding_View_2268;                   ; Offset: 2268
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2272
;       float View_CullingSign;                       ; Offset: 2284
;       float View_NearPlane;                         ; Offset: 2288
;       float View_GameTime;                          ; Offset: 2292
;       float View_RealTime;                          ; Offset: 2296
;       float View_DeltaTime;                         ; Offset: 2300
;       float View_MaterialTextureMipBias;            ; Offset: 2304
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2308
;       uint View_Random;                             ; Offset: 2312
;       uint View_FrameNumber;                        ; Offset: 2316
;       uint View_StateFrameIndexMod8;                ; Offset: 2320
;       uint View_StateFrameIndex;                    ; Offset: 2324
;       uint View_DebugViewModeMask;                  ; Offset: 2328
;       uint View_WorldIsPaused;                      ; Offset: 2332
;       float View_CameraCut;                         ; Offset: 2336
;       float View_UnlitViewmodeMask;                 ; Offset: 2340
;       float PrePadding_View_2344;                   ; Offset: 2344
;       float PrePadding_View_2348;                   ; Offset: 2348
;       float4 View_DirectionalLightColor;            ; Offset: 2352
;       float3 View_DirectionalLightDirection;        ; Offset: 2368
;       float PrePadding_View_2380;                   ; Offset: 2380
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2384
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2416
;       float4 View_TemporalAAParams;                 ; Offset: 2448
;       float4 View_CircleDOFParams;                  ; Offset: 2464
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2480
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2484
;       float View_DepthOfFieldScale;                 ; Offset: 2488
;       float View_DepthOfFieldFocalLength;           ; Offset: 2492
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2496
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2500
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2504
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2508
;       float View_GeneralPurposeTweak;               ; Offset: 2512
;       float View_GeneralPurposeTweak2;              ; Offset: 2516
;       float View_DemosaicVposOffset;                ; Offset: 2520
;       float View_DecalDepthBias;                    ; Offset: 2524
;       float3 View_IndirectLightingColorScale;       ; Offset: 2528
;       float PrePadding_View_2540;                   ; Offset: 2540
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2544
;       float PrePadding_View_2556;                   ; Offset: 2556
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2560
;       float PrePadding_View_2572;                   ; Offset: 2572
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2576
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2608
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2640
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2672
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2704
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2736
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2752
;       float PrePadding_View_2764;                   ; Offset: 2764
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2768
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2784
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2848
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2864
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2868
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2872
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2876
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2880
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2896
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2900
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2904
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2908
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2912
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2916
;       float PrePadding_View_2920;                   ; Offset: 2920
;       float PrePadding_View_2924;                   ; Offset: 2924
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2928
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2940
;       float View_RealTimeReflectionCapture;         ; Offset: 2944
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2948
;       float PrePadding_View_2952;                   ; Offset: 2952
;       float PrePadding_View_2956;                   ; Offset: 2956
;       float4 View_AmbientCubemapTint;               ; Offset: 2960
;       float View_AmbientCubemapIntensity;           ; Offset: 2976
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2980
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2984
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2988
;       float4 View_SkyLightColor;                    ; Offset: 2992
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 3008
;       float View_MobilePreviewMode;                 ; Offset: 3136
;       float View_HMDEyePaddingOffset;               ; Offset: 3140
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3144
;       float View_ShowDecalsMask;                    ; Offset: 3148
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3152
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3156
;       float PrePadding_View_3160;                   ; Offset: 3160
;       float PrePadding_View_3164;                   ; Offset: 3164
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3168
;       int View_StereoPassIndex;                     ; Offset: 3180
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3184
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3376
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3472
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3568
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3572
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3576
;       int PrePadding_View_3580;                     ; Offset: 3580
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3600
;       float View_GlobalVolumeDimension;             ; Offset: 3612
;       float View_GlobalVolumeTexelSize;             ; Offset: 3616
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3620
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3624
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3628
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3632
;       float View_NotCoveredMinStepScale;            ; Offset: 3636
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3640
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3644
;       int2 View_CursorPosition;                     ; Offset: 3648
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3656
;       float PrePadding_View_3660;                   ; Offset: 3660
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3664
;       float PrePadding_View_3676;                   ; Offset: 3676
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3680
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3696
;       float2 View_VolumetricFogScreenUVToHistoryVolumeUV;; Offset: 3704
;       float View_VolumetricFogMaxDistance;          ; Offset: 3712
;       float PrePadding_View_3716;                   ; Offset: 3716
;       float PrePadding_View_3720;                   ; Offset: 3720
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3728
;       float PrePadding_View_3740;                   ; Offset: 3740
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3744
;       float PrePadding_View_3756;                   ; Offset: 3756
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3760
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3772
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3776
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3788
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3792
;       float PrePadding_View_3796;                   ; Offset: 3796
;       float PrePadding_View_3800;                   ; Offset: 3800
;       float PrePadding_View_3804;                   ; Offset: 3804
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3808
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3840
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3844
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3848
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3852
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3856
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3860
;       uint PrePadding_View_3864;                    ; Offset: 3864
;       uint PrePadding_View_3868;                    ; Offset: 3868
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3872
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3888
;       float PrePadding_View_3896;                   ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3904
;       float View_OverrideLandscapeLOD;              ; Offset: 3920
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3924
;       float View_MinRoughness;                      ; Offset: 3928
;       float PrePadding_View_3932;                   ; Offset: 3932
;       float4 View_HairRenderInfo;                   ; Offset: 3936
;       uint View_EnableSkyLight;                     ; Offset: 3952
;       uint View_HairRenderInfoBits;                 ; Offset: 3956
;       uint View_HairComponents;                     ; Offset: 3960
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3964
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3968
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3984
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 4000
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 4012
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4016
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4020
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4024
;       int View_PhysicsFieldTargetCount;             ; Offset: 4028
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4032
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4544
;       uint View_GPUSceneViewId;                     ; Offset: 4548
;       float View_ViewResolutionFraction;            ; Offset: 4552
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4556
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessResource_View_PrimitiveSceneData;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessResource_View_InstanceSceneData; ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessResource_View_InstancePayloadData;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessResource_View_LightmapSceneData; ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessResource_View_LTCMatTexture;     ; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessSampler_View_LTCMatSampler;      ; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessResource_View_LTCAmpTexture;     ; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessSampler_View_LTCAmpSampler;      ; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint View_bShadingEnergyConservation;         ; Offset: 5104
;       uint View_bShadingEnergyPreservation;         ; Offset: 5108
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5160
;       uint PrePadding_View_5164;                    ; Offset: 5164
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessResource_View_WaterData;         ; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint PrePadding_View_5208;                    ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5216
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5232
;       float PrePadding_View_5236;                   ; Offset: 5236
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint PrePadding_View_5256;                    ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5264
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       uint BindlessResource_View_EditorVisualizeLevelInstanceIds;; Offset: 5328
;       uint PrePadding_View_5332;                    ; Offset: 5332
;       uint BindlessResource_View_EditorSelectedHitProxyIds;; Offset: 5336
;       uint PrePadding_View_5340;                    ; Offset: 5340
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5344
;       uint PrePadding_View_5348;                    ; Offset: 5348
;       uint PrePadding_View_5352;                    ; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5360
;       float PrePadding_View_5372;                   ; Offset: 5372
;       float3 View_TLASViewTilePosition;             ; Offset: 5376
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5388
;
; }
;
; cbuffer UniformBufferConstants_OpaqueBasePass
; {
;
;   struct hostlayout.UniformBufferConstants_OpaqueBasePass
;   {
;
;       uint OpaqueBasePass_Shared_Forward_NumLocalLights;; Offset:    0
;       uint OpaqueBasePass_Shared_Forward_NumReflectionCaptures;; Offset:    4
;       uint OpaqueBasePass_Shared_Forward_HasDirectionalLight;; Offset:    8
;       uint OpaqueBasePass_Shared_Forward_NumGridCells;; Offset:   12
;       int3 OpaqueBasePass_Shared_Forward_CulledGridSize;; Offset:   16
;       uint OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;; Offset:   28
;       uint OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;; Offset:   32
;       uint PrePadding_OpaqueBasePass_Shared_Forward_36;; Offset:   36
;       uint PrePadding_OpaqueBasePass_Shared_Forward_40;; Offset:   40
;       uint PrePadding_OpaqueBasePass_Shared_Forward_44;; Offset:   44
;       float3 OpaqueBasePass_Shared_Forward_LightGridZParams;; Offset:   48
;       float PrePadding_OpaqueBasePass_Shared_Forward_60;; Offset:   60
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightDirection;; Offset:   64
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;; Offset:   76
;       float3 OpaqueBasePass_Shared_Forward_DirectionalLightColor;; Offset:   80
;       float OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;; Offset:   92
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;; Offset:   96
;       uint PrePadding_OpaqueBasePass_Shared_Forward_100;; Offset:  100
;       float2 OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;; Offset:  104
;       uint OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;; Offset:  112
;       int OpaqueBasePass_Shared_Forward_DirectionalLightVSM;; Offset:  116
;       int PrePadding_OpaqueBasePass_Shared_Forward_120;; Offset:  120
;       int PrePadding_OpaqueBasePass_Shared_Forward_124;; Offset:  124
;       float4 OpaqueBasePass_Shared_Forward_CascadeEndDepths;; Offset:  128
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  144
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];; Offset:  400
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;; Offset:  464
;       float OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;; Offset:  480
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;; Offset:  484
;       uint OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;; Offset:  488
;       uint OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;; Offset:  492
;       uint OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex;; Offset:  496
;       uint PrePadding_OpaqueBasePass_Shared_Forward_500;; Offset:  500
;       uint PrePadding_OpaqueBasePass_Shared_Forward_504;; Offset:  504
;       uint PrePadding_OpaqueBasePass_Shared_Forward_508;; Offset:  508
;       float4 OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;; Offset:  512
;       row_major float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;; Offset:  528
;       uint OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;; Offset:  592
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;; Offset:  596
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;; Offset:  600
;       float PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;; Offset:  604
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;; Offset:  608
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;; Offset:  612
;       int OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset:  616
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset:  620
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset:  624
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset:  628
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset:  632
;       float OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset:  636
;       uint OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset:  640
;       uint PrePadding_OpaqueBasePass_Shared_Forward_644;; Offset:  644
;       uint PrePadding_OpaqueBasePass_Shared_Forward_648;; Offset:  648
;       uint PrePadding_OpaqueBasePass_Shared_Forward_652;; Offset:  652
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;; Offset:  656
;       uint PrePadding_OpaqueBasePass_Shared_Forward_660;; Offset:  660
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler;; Offset:  664
;       uint PrePadding_OpaqueBasePass_Shared_Forward_668;; Offset:  668
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap;; Offset:  672
;       uint PrePadding_OpaqueBasePass_Shared_Forward_676;; Offset:  676
;       uint BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler;; Offset:  680
;       uint PrePadding_OpaqueBasePass_Shared_Forward_684;; Offset:  684
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer;; Offset:  688
;       uint PrePadding_OpaqueBasePass_Shared_Forward_692;; Offset:  692
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;; Offset:  696
;       uint PrePadding_OpaqueBasePass_Shared_Forward_700;; Offset:  700
;       uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid;; Offset:  704
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_708;; Offset:  708
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_712;; Offset:  712
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_716;; Offset:  716
;       uint OpaqueBasePass_Shared_ForwardISR_NumLocalLights;; Offset:  720
;       uint OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;; Offset:  724
;       uint OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;; Offset:  728
;       uint OpaqueBasePass_Shared_ForwardISR_NumGridCells;; Offset:  732
;       int3 OpaqueBasePass_Shared_ForwardISR_CulledGridSize;; Offset:  736
;       uint OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;; Offset:  748
;       uint OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;; Offset:  752
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_756;; Offset:  756
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_760;; Offset:  760
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_764;; Offset:  764
;       float3 OpaqueBasePass_Shared_ForwardISR_LightGridZParams;; Offset:  768
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_780;; Offset:  780
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;; Offset:  784
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;; Offset:  796
;       float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;; Offset:  800
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;; Offset:  812
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;; Offset:  816
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_820;; Offset:  820
;       float2 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;; Offset:  824
;       uint OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;; Offset:  832
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;; Offset:  836
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_840;; Offset:  840
;       int PrePadding_OpaqueBasePass_Shared_ForwardISR_844;; Offset:  844
;       float4 OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;; Offset:  848
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];; Offset:  864
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];; Offset: 1120
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;; Offset: 1184
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;; Offset: 1200
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;; Offset: 1204
;       uint OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;; Offset: 1208
;       uint OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;; Offset: 1212
;       uint OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex;; Offset: 1216
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1220;; Offset: 1220
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1224;; Offset: 1224
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1228;; Offset: 1228
;       float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;; Offset: 1232
;       row_major float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;; Offset: 1248
;       uint OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;; Offset: 1312
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;; Offset: 1316
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;; Offset: 1320
;       float PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;; Offset: 1324
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;; Offset: 1328
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;; Offset: 1332
;       int OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;; Offset: 1336
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;; Offset: 1340
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;; Offset: 1344
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;; Offset: 1348
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;; Offset: 1352
;       float OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;; Offset: 1356
;       uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;; Offset: 1360
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1364;; Offset: 1364
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1368;; Offset: 1368
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1372;; Offset: 1372
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;; Offset: 1376
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1380;; Offset: 1380
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler;; Offset: 1384
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1388;; Offset: 1388
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;; Offset: 1392
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1396;; Offset: 1396
;       uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler;; Offset: 1400
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1404;; Offset: 1404
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;; Offset: 1408
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1412;; Offset: 1412
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid;; Offset: 1416
;       uint PrePadding_OpaqueBasePass_Shared_ForwardISR_1420;; Offset: 1420
;       uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid;; Offset: 1424
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1428;; Offset: 1428
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1432;; Offset: 1432
;       float PrePadding_OpaqueBasePass_Shared_Reflection_1436;; Offset: 1436
;       float4 OpaqueBasePass_Shared_Reflection_SkyLightParameters;; Offset: 1440
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightCubemap;; Offset: 1456
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1460;; Offset: 1460
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler;; Offset: 1464
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1468;; Offset: 1468
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;; Offset: 1472
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1476;; Offset: 1476
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;; Offset: 1480
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1484;; Offset: 1484
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_ReflectionCubemap;; Offset: 1488
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1492;; Offset: 1492
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler;; Offset: 1496
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1500;; Offset: 1500
;       uint BindlessResource_OpaqueBasePass_Shared_Reflection_PreIntegratedGF;; Offset: 1504
;       uint PrePadding_OpaqueBasePass_Shared_Reflection_1508;; Offset: 1508
;       uint BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler;; Offset: 1512
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1516;; Offset: 1516
;       float4 OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;; Offset: 1520
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;; Offset: 1536
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;; Offset: 1552
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;; Offset: 1568
;       row_major float3x4 OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;; Offset: 1584
;       float3 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;; Offset: 1632
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1644;; Offset: 1644
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;; Offset: 1648
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1656;; Offset: 1656
;       float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1660;; Offset: 1660
;       row_major float4x4 OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];; Offset: 1664
;       float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];; Offset: 1792
;       float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;; Offset: 1824
;       uint OpaqueBasePass_Shared_PlanarReflection_bIsStereo;; Offset: 1832
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1836;; Offset: 1836
;       uint BindlessResource_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture;; Offset: 1840
;       uint PrePadding_OpaqueBasePass_Shared_PlanarReflection_1844;; Offset: 1844
;       uint BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler;; Offset: 1848
;       float PrePadding_OpaqueBasePass_Shared_Fog_1852;; Offset: 1852
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters;; Offset: 1856
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;; Offset: 1872
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;; Offset: 1888
;       float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;; Offset: 1904
;       float4 OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;; Offset: 1920
;       float4 OpaqueBasePass_Shared_Fog_InscatteringLightDirection;; Offset: 1936
;       float4 OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;; Offset: 1952
;       float2 OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;; Offset: 1968
;       float PrePadding_OpaqueBasePass_Shared_Fog_1976;; Offset: 1976
;       float PrePadding_OpaqueBasePass_Shared_Fog_1980;; Offset: 1980
;       float3 OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;; Offset: 1984
;       float OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;; Offset: 1996
;       float OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;; Offset: 2000
;       float OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;; Offset: 2004
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap;; Offset: 2008
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2012;; Offset: 2012
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler;; Offset: 2016
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2020;; Offset: 2020
;       uint BindlessResource_OpaqueBasePass_Shared_Fog_IntegratedLightScattering;; Offset: 2024
;       uint PrePadding_OpaqueBasePass_Shared_Fog_2028;; Offset: 2028
;       uint BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler;; Offset: 2032
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2036;; Offset: 2036
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2040;; Offset: 2040
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2044;; Offset: 2044
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;; Offset: 2048
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;; Offset: 2064
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;; Offset: 2080
;       float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;; Offset: 2096
;       float4 OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;; Offset: 2112
;       float4 OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;; Offset: 2128
;       float4 OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;; Offset: 2144
;       float2 OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;; Offset: 2160
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2168;; Offset: 2168
;       float PrePadding_OpaqueBasePass_Shared_FogISR_2172;; Offset: 2172
;       float3 OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;; Offset: 2176
;       float OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;; Offset: 2188
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;; Offset: 2192
;       float OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;; Offset: 2196
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap;; Offset: 2200
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2204;; Offset: 2204
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler;; Offset: 2208
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2212;; Offset: 2212
;       uint BindlessResource_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering;; Offset: 2216
;       uint PrePadding_OpaqueBasePass_Shared_FogISR_2220;; Offset: 2220
;       uint BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler;; Offset: 2224
;       float PrePadding_OpaqueBasePass_Shared_2228;  ; Offset: 2228
;       float PrePadding_OpaqueBasePass_Shared_2232;  ; Offset: 2232
;       float PrePadding_OpaqueBasePass_Shared_2236;  ; Offset: 2236
;       uint OpaqueBasePass_Shared_UseBasePassSkylight;; Offset: 2240
;       float PrePadding_OpaqueBasePass_Strata_2244;  ; Offset: 2244
;       float PrePadding_OpaqueBasePass_Strata_2248;  ; Offset: 2248
;       float PrePadding_OpaqueBasePass_Strata_2252;  ; Offset: 2252
;       uint OpaqueBasePass_Strata_MaxBytesPerPixel;  ; Offset: 2256
;       uint OpaqueBasePass_Strata_bRoughDiffuse;     ; Offset: 2260
;       uint OpaqueBasePass_Strata_PeelLayersAboveDepth;; Offset: 2264
;       uint OpaqueBasePass_Strata_bRoughnessTracking;; Offset: 2268
;       int OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT;; Offset: 2272
;       int OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT;; Offset: 2276
;       uint BindlessResource_OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs;; Offset: 2280
;       uint PrePadding_OpaqueBasePass_Strata_2284;   ; Offset: 2284
;       uint BindlessResource_OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV;; Offset: 2288
;       float PrePadding_OpaqueBasePass_2292;         ; Offset: 2292
;       float PrePadding_OpaqueBasePass_2296;         ; Offset: 2296
;       float PrePadding_OpaqueBasePass_2300;         ; Offset: 2300
;       int OpaqueBasePass_UseForwardScreenSpaceShadowMask;; Offset: 2304
;       int PrePadding_OpaqueBasePass_2308;           ; Offset: 2308
;       uint BindlessResource_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;; Offset: 2312
;       uint PrePadding_OpaqueBasePass_2316;          ; Offset: 2316
;       uint BindlessResource_OpaqueBasePass_IndirectOcclusionTexture;; Offset: 2320
;       uint PrePadding_OpaqueBasePass_2324;          ; Offset: 2324
;       uint BindlessResource_OpaqueBasePass_ResolvedSceneDepthTexture;; Offset: 2328
;       float PrePadding_OpaqueBasePass_2332;         ; Offset: 2332
;       uint BindlessResource_OpaqueBasePass_DBufferATexture;; Offset: 2336
;       uint PrePadding_OpaqueBasePass_2340;          ; Offset: 2340
;       uint BindlessResource_OpaqueBasePass_DBufferBTexture;; Offset: 2344
;       uint PrePadding_OpaqueBasePass_2348;          ; Offset: 2348
;       uint BindlessResource_OpaqueBasePass_DBufferCTexture;; Offset: 2352
;       uint PrePadding_OpaqueBasePass_2356;          ; Offset: 2356
;       uint BindlessResource_OpaqueBasePass_DBufferRenderMask;; Offset: 2360
;       uint PrePadding_OpaqueBasePass_2364;          ; Offset: 2364
;       uint BindlessSampler_OpaqueBasePass_DBufferATextureSampler;; Offset: 2368
;       uint PrePadding_OpaqueBasePass_2372;          ; Offset: 2372
;       uint BindlessSampler_OpaqueBasePass_DBufferBTextureSampler;; Offset: 2376
;       uint PrePadding_OpaqueBasePass_2380;          ; Offset: 2380
;       uint BindlessSampler_OpaqueBasePass_DBufferCTextureSampler;; Offset: 2384
;       uint PrePadding_OpaqueBasePass_2388;          ; Offset: 2388
;       uint PrePadding_OpaqueBasePass_2392;          ; Offset: 2392
;       uint PrePadding_OpaqueBasePass_2396;          ; Offset: 2396
;       uint BindlessResource_OpaqueBasePass_PreIntegratedGFTexture;; Offset: 2400
;       uint PrePadding_OpaqueBasePass_2404;          ; Offset: 2404
;       uint BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler;; Offset: 2408
;       uint PrePadding_OpaqueBasePass_2412;          ; Offset: 2412
;       int OpaqueBasePass_Is24BitUnormDepthStencil;  ; Offset: 2416
;       int PrePadding_OpaqueBasePass_2420;           ; Offset: 2420
;       uint BindlessResource_OpaqueBasePass_EyeAdaptationBuffer;; Offset: 2424
;   
;   } UniformBufferConstants_OpaqueBasePass;          ; Offset:    0 Size:  2428
;
; }
;
; cbuffer UniformBufferConstants_Nanite
; {
;
;   struct UniformBufferConstants_Nanite
;   {
;
;       int4 Nanite_PageConstants;                    ; Offset:    0
;       int4 Nanite_MaterialConfig;                   ; Offset:   16
;       uint Nanite_MaxNodes;                         ; Offset:   32
;       uint Nanite_MaxVisibleClusters;               ; Offset:   36
;       uint Nanite_RenderFlags;                      ; Offset:   40
;       float Nanite_RayTracingCutError;              ; Offset:   44
;       float4 Nanite_RectScaleOffset;                ; Offset:   48
;       uint BindlessResource_Nanite_ClusterPageData; ; Offset:   64
;       uint PrePadding_Nanite_68;                    ; Offset:   68
;       uint BindlessResource_Nanite_VisibleClustersSWHW;; Offset:   72
;       uint PrePadding_Nanite_76;                    ; Offset:   76
;       uint BindlessResource_Nanite_HierarchyBuffer; ; Offset:   80
;       uint PrePadding_Nanite_84;                    ; Offset:   84
;       uint BindlessResource_Nanite_MaterialTileRemap;; Offset:   88
;       uint PrePadding_Nanite_92;                    ; Offset:   92
;       uint BindlessResource_Nanite_MaterialDepthTable;; Offset:   96
;       uint PrePadding_Nanite_100;                   ; Offset:  100
;       uint BindlessResource_Nanite_MaterialResolve; ; Offset:  104
;       uint PrePadding_Nanite_108;                   ; Offset:  108
;       uint BindlessResource_Nanite_VisBuffer64;     ; Offset:  112
;       uint PrePadding_Nanite_116;                   ; Offset:  116
;       uint BindlessResource_Nanite_DbgBuffer64;     ; Offset:  120
;       uint PrePadding_Nanite_124;                   ; Offset:  124
;       uint BindlessResource_Nanite_DbgBuffer32;     ; Offset:  128
;       uint PrePadding_Nanite_132;                   ; Offset:  132
;       uint BindlessResource_Nanite_ShadingRate;     ; Offset:  136
;       uint PrePadding_Nanite_140;                   ; Offset:  140
;       uint BindlessResource_Nanite_RayTracingDataBuffer;; Offset:  144
;       uint PrePadding_Nanite_148;                   ; Offset:  148
;       uint Nanite_MultiViewEnabled;                 ; Offset:  152
;       uint PrePadding_Nanite_156;                   ; Offset:  156
;       uint BindlessResource_Nanite_MultiViewIndices;; Offset:  160
;       uint PrePadding_Nanite_164;                   ; Offset:  164
;       uint BindlessResource_Nanite_MultiViewRectScaleOffsets;; Offset:  168
;       uint PrePadding_Nanite_172;                   ; Offset:  172
;       uint BindlessResource_Nanite_InViews;         ; Offset:  176
;   
;   } UniformBufferConstants_Nanite;                  ; Offset:    0 Size:   180
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[2];           ; Offset:    0
;       uint BindlessResource_Material_Texture2D_0;   ; Offset:   32
;       uint PrePadding_Material_36;                  ; Offset:   36
;       uint BindlessSampler_Material_Texture2D_0Sampler;; Offset:   40
;       uint PrePadding_Material_44;                  ; Offset:   44
;       uint BindlessResource_Material_Texture2D_1;   ; Offset:   48
;       uint PrePadding_Material_52;                  ; Offset:   52
;       uint BindlessSampler_Material_Texture2D_1Sampler;; Offset:   56
;       uint PrePadding_Material_60;                  ; Offset:   60
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset:   64
;       uint PrePadding_Material_68;                  ; Offset:   68
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset:   72
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:    76
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstancePayloadData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_LightmapSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_OpaqueBasePass   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Nanite     cbuffer      NA          NA     CB2            cb2     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB3            cb3     1
; OpaqueBasePass_DBufferATextureSampler   sampler      NA          NA      S0             s0     1
; OpaqueBasePass_DBufferBTextureSampler   sampler      NA          NA      S1             s1     1
; OpaqueBasePass_DBufferCTextureSampler   sampler      NA          NA      S2             s2     1
; LightmapResourceCluster_LightMapSampler   sampler      NA          NA      S3             s3     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S5             s5     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_InstancePayloadData          texture  struct         r/o      T2             t2     1
; View_LightmapSceneData            texture  struct         r/o      T3             t3     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o      T4             t4     1
; OpaqueBasePass_DBufferATexture    texture     f32          2d      T5             t5     1
; OpaqueBasePass_DBufferBTexture    texture     f32          2d      T6             t6     1
; OpaqueBasePass_DBufferCTexture    texture     f32          2d      T7             t7     1
; LightmapResourceCluster_LightMapTexture   texture     f32          2d      T8             t8     1
; LightmapResourceCluster_SkyOcclusionTexture   texture     f32          2d      T9             t9     1
; LightmapResourceCluster_StaticShadowTexture   texture     f32          2d     T10            t10     1
; Nanite_ClusterPageData            texture    byte         r/o     T11            t11     1
; Nanite_VisibleClustersSWHW        texture    byte         r/o     T12            t12     1
; Nanite_VisBuffer64                texture     u32          2d     T13            t13     1
; Material_Texture2D_0              texture     f32          2d     T14            t14     1
; Material_Texture2D_1              texture     f32          2d     T15            t15     1
;
;
; ViewId state:
;
; Number of inputs: 8, outputs: 28
; Outputs dependent on ViewId: {  }
; Inputs contributing to computation of Outputs:
;   output 0 depends on inputs: { 4, 5 }
;   output 1 depends on inputs: { 4, 5 }
;   output 2 depends on inputs: { 4, 5 }
;   output 4 depends on inputs: { 4, 5 }
;   output 5 depends on inputs: { 4, 5 }
;   output 6 depends on inputs: { 4, 5 }
;   output 7 depends on inputs: { 4, 5 }
;   output 8 depends on inputs: { 4, 5 }
;   output 9 depends on inputs: { 4, 5 }
;   output 10 depends on inputs: { 4, 5 }
;   output 12 depends on inputs: { 4, 5 }
;   output 13 depends on inputs: { 4, 5 }
;   output 14 depends on inputs: { 4, 5 }
;   output 15 depends on inputs: { 4, 5 }
;   output 16 depends on inputs: { 4, 5 }
;   output 17 depends on inputs: { 4, 5 }
;   output 18 depends on inputs: { 4, 5 }
;   output 19 depends on inputs: { 4, 5 }
;   output 24 depends on inputs: { 4, 5 }
;   output 25 depends on inputs: { 4, 5 }
;   output 26 depends on inputs: { 4, 5 }
;   output 27 depends on inputs: { 4, 5 }
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%"class.Texture2D<unsigned long long>" = type { i64, %"class.Texture2D<unsigned long long>::mips_type" }
%"class.Texture2D<unsigned long long>::mips_type" = type { i32 }
%hostlayout.UniformBufferConstants_View = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, [4 x <4 x float>], <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%hostlayout.UniformBufferConstants_OpaqueBasePass = type { i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, <3 x i32>, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float>, float, <3 x float>, float, i32, i32, <2 x float>, i32, i32, i32, i32, <4 x float>, [4 x [4 x <4 x float>]], [4 x <4 x float>], <4 x float>, float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, [4 x <4 x float>], i32, float, float, float, float, i32, i32, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, [3 x <4 x float>], <3 x float>, float, <2 x float>, float, float, [2 x [4 x <4 x float>]], [2 x <4 x float>], <2 x float>, i32, i32, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, <3 x float>, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Nanite = type { <4 x i32>, <4 x i32>, i32, i32, i32, float, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%UniformBufferConstants_Material = type { [2 x <4 x float>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

define void @MainPS() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 15, i32 15, i32 0, i8 0 }, i32 15, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 14, i32 14, i32 0, i8 0 }, i32 14, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 13, i32 13, i32 0, i8 0 }, i32 13, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 12, i32 12, i32 0, i8 0 }, i32 12, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 11, i32 11, i32 0, i8 0 }, i32 11, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 10, i32 10, i32 0, i8 0 }, i32 10, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 9, i32 9, i32 0, i8 0 }, i32 9, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %15 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %16 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %17 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 3 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %18 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 3 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %19 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 3 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %20 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 3 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %21 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 3 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %22 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 3 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %23 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 2 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %24 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 2 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %25 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 2 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %26 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %27 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %23, %dx.types.ResourceProperties { i32 13, i32 76 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %25, %dx.types.ResourceProperties { i32 13, i32 2428 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %29 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %26, %dx.types.ResourceProperties { i32 13, i32 5388 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %30 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 0, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %31 = call float @dx.op.loadInput.f32(i32 4, i32 2, i32 0, i8 1, i32 undef)  ; LoadInput(inputSigId,rowIndex,colIndex,gsVertexAxis)
  %32 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %28, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %33 = extractvalue %dx.types.CBufRet.i32 %32, 0
  %34 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %35 = extractvalue %dx.types.CBufRet.f32 %34, 0
  %36 = extractvalue %dx.types.CBufRet.f32 %34, 1
  %37 = extractvalue %dx.types.CBufRet.f32 %34, 2
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %41 = extractvalue %dx.types.CBufRet.f32 %38, 2
  %42 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 125)  ; CBufferLoadLegacy(handle,regIndex)
  %43 = extractvalue %dx.types.CBufRet.f32 %42, 0
  %44 = extractvalue %dx.types.CBufRet.f32 %42, 1
  %45 = extractvalue %dx.types.CBufRet.f32 %42, 2
  %46 = extractvalue %dx.types.CBufRet.f32 %42, 3
  %47 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 128)  ; CBufferLoadLegacy(handle,regIndex)
  %48 = extractvalue %dx.types.CBufRet.f32 %47, 0
  %49 = extractvalue %dx.types.CBufRet.f32 %47, 1
  %50 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 129)  ; CBufferLoadLegacy(handle,regIndex)
  %51 = extractvalue %dx.types.CBufRet.f32 %50, 2
  %52 = extractvalue %dx.types.CBufRet.f32 %50, 3
  %53 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 139)  ; CBufferLoadLegacy(handle,regIndex)
  %54 = extractvalue %dx.types.CBufRet.f32 %53, 0
  %55 = extractvalue %dx.types.CBufRet.f32 %53, 1
  %56 = extractvalue %dx.types.CBufRet.f32 %53, 2
  %57 = extractvalue %dx.types.CBufRet.f32 %53, 3
  %58 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 140)  ; CBufferLoadLegacy(handle,regIndex)
  %59 = extractvalue %dx.types.CBufRet.f32 %58, 0
  %60 = extractvalue %dx.types.CBufRet.f32 %58, 1
  %61 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 187)  ; CBufferLoadLegacy(handle,regIndex)
  %62 = extractvalue %dx.types.CBufRet.f32 %61, 0
  %63 = extractvalue %dx.types.CBufRet.f32 %61, 1
  %64 = extractvalue %dx.types.CBufRet.f32 %61, 2
  %65 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %66 = extractvalue %dx.types.CBufRet.f32 %65, 0
  %67 = extractvalue %dx.types.CBufRet.f32 %65, 1
  %68 = extractvalue %dx.types.CBufRet.f32 %65, 3
  %69 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %70 = extractvalue %dx.types.CBufRet.f32 %69, 0
  %71 = extractvalue %dx.types.CBufRet.f32 %69, 1
  %72 = extractvalue %dx.types.CBufRet.f32 %69, 3
  %73 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %74 = extractvalue %dx.types.CBufRet.f32 %73, 0
  %75 = extractvalue %dx.types.CBufRet.f32 %73, 1
  %76 = extractvalue %dx.types.CBufRet.f32 %73, 3
  %77 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.f32 %77, 0
  %79 = extractvalue %dx.types.CBufRet.f32 %77, 1
  %80 = extractvalue %dx.types.CBufRet.f32 %77, 3
  %81 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %82 = extractvalue %dx.types.CBufRet.f32 %81, 0
  %83 = extractvalue %dx.types.CBufRet.f32 %81, 1
  %84 = extractvalue %dx.types.CBufRet.f32 %81, 2
  %85 = extractvalue %dx.types.CBufRet.f32 %81, 3
  %86 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %87 = extractvalue %dx.types.CBufRet.f32 %86, 0
  %88 = extractvalue %dx.types.CBufRet.f32 %86, 1
  %89 = extractvalue %dx.types.CBufRet.f32 %86, 2
  %90 = extractvalue %dx.types.CBufRet.f32 %86, 3
  %91 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 87)  ; CBufferLoadLegacy(handle,regIndex)
  %92 = extractvalue %dx.types.CBufRet.f32 %91, 0
  %93 = extractvalue %dx.types.CBufRet.f32 %91, 1
  %94 = extractvalue %dx.types.CBufRet.f32 %91, 2
  %95 = extractvalue %dx.types.CBufRet.f32 %91, 3
  %96 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 88)  ; CBufferLoadLegacy(handle,regIndex)
  %97 = extractvalue %dx.types.CBufRet.f32 %96, 0
  %98 = extractvalue %dx.types.CBufRet.f32 %96, 1
  %99 = extractvalue %dx.types.CBufRet.f32 %96, 2
  %100 = extractvalue %dx.types.CBufRet.f32 %96, 3
  %101 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 108)  ; CBufferLoadLegacy(handle,regIndex)
  %102 = extractvalue %dx.types.CBufRet.f32 %101, 0
  %103 = extractvalue %dx.types.CBufRet.f32 %101, 1
  %104 = extractvalue %dx.types.CBufRet.f32 %101, 2
  %105 = fadd fast float %30, -5.000000e-01
  %106 = fadd fast float %31, -5.000000e-01
  %107 = fptoui float %105 to i32
  %108 = fptoui float %106 to i32
  %109 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 2, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture2D<U32>
  %110 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %109, i32 0, i32 %107, i32 %108, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %111 = extractvalue %dx.types.ResRet.i32 %110, 0
  %112 = extractvalue %dx.types.ResRet.i32 %110, 1
  %113 = lshr i32 %111, 7
  %114 = and i32 %111, 127
  %115 = bitcast i32 %112 to float
  %116 = icmp eq i32 %113, 0
  br i1 %116, label %1627, label %117

; <label>:117                                     ; preds = %0
  %118 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %24, %dx.types.ResourceProperties { i32 13, i32 180 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %119 = shl nuw nsw i32 %113, 3
  %120 = add nsw i32 %119, -8
  %121 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %122 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %121, i32 %120, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %123 = extractvalue %dx.types.ResRet.i32 %122, 0
  %124 = extractvalue %dx.types.ResRet.i32 %122, 1
  %125 = lshr i32 %123, 16
  %126 = and i32 %124, 16777215
  %127 = lshr i32 %124, 24
  %128 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %118, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.i32 %128, 0
  %130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %15, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %131 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %126, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %132 = extractvalue %dx.types.ResRet.f32 %131, 0
  %133 = bitcast float %132 to i32
  %134 = and i32 %133, 1048575
  %135 = lshr i32 %133, 20
  %136 = extractvalue %dx.types.ResRet.f32 %131, 1
  %137 = bitcast float %136 to i32
  %138 = and i32 %137, 16777215
  %139 = mul nuw nsw i32 %134, 41
  %140 = add nuw nsw i32 %139, 26
  %141 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %142 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %140, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %143 = extractvalue %dx.types.ResRet.f32 %142, 3
  %144 = bitcast float %143 to i32
  %145 = add nuw nsw i32 %139, 27
  %146 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %145, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %147 = extractvalue %dx.types.ResRet.f32 %146, 3
  %148 = bitcast float %147 to i32
  %149 = mul i32 %148, %138
  %150 = and i32 %135, 64
  %151 = icmp ne i32 %150, 0
  %152 = and i32 %135, 8
  %153 = icmp ne i32 %152, 0
  %154 = and i32 %135, 16
  %155 = icmp ne i32 %154, 0
  %156 = and i32 %135, 160
  %157 = icmp ne i32 %156, 0
  %158 = zext i1 %157 to i32
  %159 = select i1 %151, i32 2, i32 %158
  %160 = add i32 %144, %159
  %161 = add i32 %160, %149
  %162 = add i32 %161, 2
  %163 = select i1 %153, i32 %162, i32 %161
  %164 = select i1 %155, i32 %163, i32 -1
  %165 = add nuw nsw i32 %139, 1
  %166 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %165, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %167 = extractvalue %dx.types.ResRet.f32 %166, 0
  %168 = extractvalue %dx.types.ResRet.f32 %166, 1
  %169 = extractvalue %dx.types.ResRet.f32 %166, 2
  %170 = add nuw nsw i32 %139, 14
  %171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %170, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %172 = extractvalue %dx.types.ResRet.f32 %171, 0
  %173 = extractvalue %dx.types.ResRet.f32 %171, 1
  %174 = extractvalue %dx.types.ResRet.f32 %171, 2
  %175 = add nuw nsw i32 %139, 15
  %176 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %175, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %177 = extractvalue %dx.types.ResRet.f32 %176, 0
  %178 = extractvalue %dx.types.ResRet.f32 %176, 1
  %179 = extractvalue %dx.types.ResRet.f32 %176, 2
  %180 = add nuw nsw i32 %139, 16
  %181 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %180, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 0
  %183 = extractvalue %dx.types.ResRet.f32 %181, 1
  %184 = extractvalue %dx.types.ResRet.f32 %181, 2
  %185 = add i32 %129, %126
  %186 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %185, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 0
  %188 = extractvalue %dx.types.ResRet.f32 %186, 1
  %189 = extractvalue %dx.types.ResRet.f32 %186, 2
  %190 = extractvalue %dx.types.ResRet.f32 %186, 3
  %191 = bitcast float %187 to i32
  %192 = bitcast float %188 to i32
  %193 = bitcast float %189 to i32
  %194 = bitcast float %190 to i32
  %195 = shl i32 %129, 1
  %196 = add i32 %195, %126
  %197 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %130, i32 %196, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %198 = extractvalue %dx.types.ResRet.f32 %197, 0
  %199 = extractvalue %dx.types.ResRet.f32 %197, 1
  %200 = extractvalue %dx.types.ResRet.f32 %197, 2
  %201 = and i32 %191, 65535
  %202 = uitofp i32 %201 to float
  %203 = lshr i32 %191, 16
  %204 = uitofp i32 %203 to float
  %205 = and i32 %192, 32767
  %206 = uitofp i32 %205 to float
  %207 = fadd fast float %202, -3.276800e+04
  %208 = fadd fast float %204, -3.276800e+04
  %209 = fadd fast float %206, -1.638400e+04
  %210 = fmul fast float %209, 0x3F06A0F8E0000000
  %211 = and i32 %192, 32768
  %212 = icmp ne i32 %211, 0
  %213 = fadd fast float %207, %208
  %214 = fmul fast float %213, 0x3F00002000000000
  %215 = fsub fast float %207, %208
  %216 = fmul fast float %215, 0x3F00002000000000
  %217 = call float @dx.op.unary.f32(i32 6, float %214)  ; FAbs(value)
  %218 = call float @dx.op.unary.f32(i32 6, float %216)  ; FAbs(value)
  %219 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %217, float %218)  ; Dot2(ax,ay,bx,by)
  %220 = fsub fast float 2.000000e+00, %219
  %221 = call float @dx.op.dot3.f32(i32 55, float %214, float %216, float %220, float %214, float %216, float %220)  ; Dot3(ax,ay,az,bx,by,bz)
  %222 = call float @dx.op.unary.f32(i32 25, float %221)  ; Rsqrt(value)
  %223 = fmul fast float %222, %214
  %224 = fmul fast float %222, %216
  %225 = fmul fast float %222, %220
  %226 = fadd fast float %225, 1.000000e+00
  %227 = fdiv fast float 1.000000e+00, %226
  %228 = fmul fast float %224, %223
  %229 = fmul fast float %228, %227
  %230 = fsub fast float -0.000000e+00, %229
  %231 = fmul fast float %223, %223
  %232 = fmul fast float %231, %227
  %233 = fsub fast float 1.000000e+00, %232
  %234 = fmul fast float %224, %224
  %235 = fmul fast float %234, %227
  %236 = fsub fast float 1.000000e+00, %235
  %237 = fmul fast float %210, %210
  %238 = fsub fast float 1.000000e+00, %237
  %239 = call float @dx.op.unary.f32(i32 24, float %238)  ; Sqrt(value)
  %240 = select i1 %212, float %210, float %239
  %241 = select i1 %212, float %239, float %210
  %242 = fmul fast float %233, %240
  %243 = fmul fast float %240, %230
  %244 = fmul fast float %240, %223
  %245 = fmul fast float %241, %230
  %246 = fmul fast float %236, %241
  %247 = fmul fast float %224, %241
  %248 = fsub fast float -0.000000e+00, %247
  %249 = fadd fast float %242, %245
  %250 = fadd fast float %243, %246
  %251 = fsub fast float %248, %244
  %252 = fmul fast float %251, %224
  %253 = fmul fast float %250, %225
  %254 = fsub fast float %252, %253
  %255 = fmul fast float %249, %225
  %256 = fmul fast float %251, %223
  %257 = fsub fast float %255, %256
  %258 = fmul fast float %250, %223
  %259 = fmul fast float %249, %224
  %260 = fsub fast float %258, %259
  %261 = lshr i32 %194, 16
  %262 = shl i32 %261, 23
  %263 = add i32 %262, -125829120
  %264 = bitcast i32 %263 to float
  %265 = lshr i32 %193, 16
  %266 = and i32 %193, 65535
  %267 = and i32 %194, 65535
  %268 = uitofp i32 %266 to float
  %269 = uitofp i32 %265 to float
  %270 = uitofp i32 %267 to float
  %271 = fadd fast float %268, -3.276800e+04
  %272 = fadd fast float %269, -3.276800e+04
  %273 = fadd fast float %270, -3.276800e+04
  %274 = fmul fast float %264, %271
  %275 = fmul fast float %264, %272
  %276 = fmul fast float %264, %273
  %277 = fmul fast float %249, %274
  %278 = fmul fast float %250, %274
  %279 = fmul fast float %251, %274
  %280 = fmul fast float %254, %275
  %281 = fmul fast float %257, %275
  %282 = fmul fast float %260, %275
  %283 = fmul fast float %223, %276
  %284 = fmul fast float %224, %276
  %285 = fmul fast float %225, %276
  %286 = call float @dx.op.unary.f32(i32 6, float %274)  ; FAbs(value)
  %287 = call float @dx.op.unary.f32(i32 6, float %275)  ; FAbs(value)
  %288 = call float @dx.op.unary.f32(i32 6, float %276)  ; FAbs(value)
  %289 = fdiv fast float 1.000000e+00, %286
  %290 = fdiv fast float 1.000000e+00, %287
  %291 = fdiv fast float 1.000000e+00, %288
  %292 = icmp eq i32 %161, -1
  %293 = xor i1 %153, true
  %294 = or i1 %292, %293
  br i1 %294, label %396, label %295, !dx.controlflow.hints !61

; <label>:295                                     ; preds = %117
  %296 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %297 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %296, i32 %161, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %298 = extractvalue %dx.types.ResRet.f32 %297, 0
  %299 = extractvalue %dx.types.ResRet.f32 %297, 1
  %300 = extractvalue %dx.types.ResRet.f32 %297, 2
  %301 = extractvalue %dx.types.ResRet.f32 %297, 3
  %302 = bitcast float %298 to i32
  %303 = bitcast float %299 to i32
  %304 = bitcast float %300 to i32
  %305 = bitcast float %301 to i32
  %306 = add i32 %161, 1
  %307 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %296, i32 %306, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %308 = extractvalue %dx.types.ResRet.f32 %307, 0
  %309 = extractvalue %dx.types.ResRet.f32 %307, 1
  %310 = extractvalue %dx.types.ResRet.f32 %307, 2
  %311 = and i32 %302, 65535
  %312 = uitofp i32 %311 to float
  %313 = lshr i32 %302, 16
  %314 = uitofp i32 %313 to float
  %315 = and i32 %303, 32767
  %316 = uitofp i32 %315 to float
  %317 = fadd fast float %312, -3.276800e+04
  %318 = fadd fast float %314, -3.276800e+04
  %319 = fadd fast float %316, -1.638400e+04
  %320 = fmul fast float %319, 0x3F06A0F8E0000000
  %321 = and i32 %303, 32768
  %322 = icmp ne i32 %321, 0
  %323 = fadd fast float %317, %318
  %324 = fmul fast float %323, 0x3F00002000000000
  %325 = fsub fast float %317, %318
  %326 = fmul fast float %325, 0x3F00002000000000
  %327 = call float @dx.op.unary.f32(i32 6, float %324)  ; FAbs(value)
  %328 = call float @dx.op.unary.f32(i32 6, float %326)  ; FAbs(value)
  %329 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %327, float %328)  ; Dot2(ax,ay,bx,by)
  %330 = fsub fast float 2.000000e+00, %329
  %331 = call float @dx.op.dot3.f32(i32 55, float %324, float %326, float %330, float %324, float %326, float %330)  ; Dot3(ax,ay,az,bx,by,bz)
  %332 = call float @dx.op.unary.f32(i32 25, float %331)  ; Rsqrt(value)
  %333 = fmul fast float %332, %324
  %334 = fmul fast float %332, %326
  %335 = fmul fast float %332, %330
  %336 = fadd fast float %335, 1.000000e+00
  %337 = fdiv fast float 1.000000e+00, %336
  %338 = fmul fast float %334, %333
  %339 = fmul fast float %338, %337
  %340 = fsub fast float -0.000000e+00, %339
  %341 = fmul fast float %333, %333
  %342 = fmul fast float %341, %337
  %343 = fsub fast float 1.000000e+00, %342
  %344 = fmul fast float %334, %334
  %345 = fmul fast float %344, %337
  %346 = fsub fast float 1.000000e+00, %345
  %347 = fmul fast float %320, %320
  %348 = fsub fast float 1.000000e+00, %347
  %349 = call float @dx.op.unary.f32(i32 24, float %348)  ; Sqrt(value)
  %350 = select i1 %322, float %320, float %349
  %351 = select i1 %322, float %349, float %320
  %352 = fmul fast float %343, %350
  %353 = fmul fast float %350, %340
  %354 = fmul fast float %350, %333
  %355 = fmul fast float %351, %340
  %356 = fmul fast float %346, %351
  %357 = fmul fast float %334, %351
  %358 = fsub fast float -0.000000e+00, %357
  %359 = fadd fast float %352, %355
  %360 = fadd fast float %353, %356
  %361 = fsub fast float %358, %354
  %362 = fmul fast float %361, %334
  %363 = fmul fast float %360, %335
  %364 = fsub fast float %362, %363
  %365 = fmul fast float %359, %335
  %366 = fmul fast float %361, %333
  %367 = fsub fast float %365, %366
  %368 = fmul fast float %360, %333
  %369 = fmul fast float %359, %334
  %370 = fsub fast float %368, %369
  %371 = lshr i32 %305, 16
  %372 = shl i32 %371, 23
  %373 = add i32 %372, -125829120
  %374 = bitcast i32 %373 to float
  %375 = lshr i32 %304, 16
  %376 = and i32 %304, 65535
  %377 = and i32 %305, 65535
  %378 = uitofp i32 %376 to float
  %379 = uitofp i32 %375 to float
  %380 = uitofp i32 %377 to float
  %381 = fadd fast float %378, -3.276800e+04
  %382 = fadd fast float %379, -3.276800e+04
  %383 = fadd fast float %380, -3.276800e+04
  %384 = fmul fast float %374, %381
  %385 = fmul fast float %374, %382
  %386 = fmul fast float %374, %383
  %387 = fmul fast float %359, %384
  %388 = fmul fast float %360, %384
  %389 = fmul fast float %361, %384
  %390 = fmul fast float %364, %385
  %391 = fmul fast float %367, %385
  %392 = fmul fast float %370, %385
  %393 = fmul fast float %333, %386
  %394 = fmul fast float %334, %386
  %395 = fmul fast float %335, %386
  br label %439

; <label>:396                                     ; preds = %117
  %397 = extractvalue %dx.types.ResRet.f32 %181, 3
  %398 = extractvalue %dx.types.ResRet.f32 %176, 3
  %399 = extractvalue %dx.types.ResRet.f32 %171, 3
  %400 = fmul fast float %277, %172
  %401 = call float @dx.op.tertiary.f32(i32 46, float %278, float %173, float %400)  ; FMad(a,b,c)
  %402 = call float @dx.op.tertiary.f32(i32 46, float %279, float %174, float %401)  ; FMad(a,b,c)
  %403 = fmul fast float %277, %177
  %404 = call float @dx.op.tertiary.f32(i32 46, float %278, float %178, float %403)  ; FMad(a,b,c)
  %405 = call float @dx.op.tertiary.f32(i32 46, float %279, float %179, float %404)  ; FMad(a,b,c)
  %406 = fmul fast float %277, %182
  %407 = call float @dx.op.tertiary.f32(i32 46, float %278, float %183, float %406)  ; FMad(a,b,c)
  %408 = call float @dx.op.tertiary.f32(i32 46, float %279, float %184, float %407)  ; FMad(a,b,c)
  %409 = fmul fast float %280, %172
  %410 = call float @dx.op.tertiary.f32(i32 46, float %281, float %173, float %409)  ; FMad(a,b,c)
  %411 = call float @dx.op.tertiary.f32(i32 46, float %282, float %174, float %410)  ; FMad(a,b,c)
  %412 = fmul fast float %280, %177
  %413 = call float @dx.op.tertiary.f32(i32 46, float %281, float %178, float %412)  ; FMad(a,b,c)
  %414 = call float @dx.op.tertiary.f32(i32 46, float %282, float %179, float %413)  ; FMad(a,b,c)
  %415 = fmul fast float %280, %182
  %416 = call float @dx.op.tertiary.f32(i32 46, float %281, float %183, float %415)  ; FMad(a,b,c)
  %417 = call float @dx.op.tertiary.f32(i32 46, float %282, float %184, float %416)  ; FMad(a,b,c)
  %418 = fmul fast float %283, %172
  %419 = call float @dx.op.tertiary.f32(i32 46, float %284, float %173, float %418)  ; FMad(a,b,c)
  %420 = call float @dx.op.tertiary.f32(i32 46, float %285, float %174, float %419)  ; FMad(a,b,c)
  %421 = fmul fast float %283, %177
  %422 = call float @dx.op.tertiary.f32(i32 46, float %284, float %178, float %421)  ; FMad(a,b,c)
  %423 = call float @dx.op.tertiary.f32(i32 46, float %285, float %179, float %422)  ; FMad(a,b,c)
  %424 = fmul fast float %283, %182
  %425 = call float @dx.op.tertiary.f32(i32 46, float %284, float %183, float %424)  ; FMad(a,b,c)
  %426 = call float @dx.op.tertiary.f32(i32 46, float %285, float %184, float %425)  ; FMad(a,b,c)
  %427 = fmul fast float %198, %172
  %428 = call float @dx.op.tertiary.f32(i32 46, float %199, float %173, float %427)  ; FMad(a,b,c)
  %429 = call float @dx.op.tertiary.f32(i32 46, float %200, float %174, float %428)  ; FMad(a,b,c)
  %430 = fadd fast float %429, %399
  %431 = fmul fast float %198, %177
  %432 = call float @dx.op.tertiary.f32(i32 46, float %199, float %178, float %431)  ; FMad(a,b,c)
  %433 = call float @dx.op.tertiary.f32(i32 46, float %200, float %179, float %432)  ; FMad(a,b,c)
  %434 = fadd fast float %433, %398
  %435 = fmul fast float %198, %182
  %436 = call float @dx.op.tertiary.f32(i32 46, float %199, float %183, float %435)  ; FMad(a,b,c)
  %437 = call float @dx.op.tertiary.f32(i32 46, float %200, float %184, float %436)  ; FMad(a,b,c)
  %438 = fadd fast float %437, %397
  br label %439

; <label>:439                                     ; preds = %396, %295
  %440 = phi float [ %387, %295 ], [ %402, %396 ]
  %441 = phi float [ %388, %295 ], [ %405, %396 ]
  %442 = phi float [ %389, %295 ], [ %408, %396 ]
  %443 = phi float [ %390, %295 ], [ %411, %396 ]
  %444 = phi float [ %391, %295 ], [ %414, %396 ]
  %445 = phi float [ %392, %295 ], [ %417, %396 ]
  %446 = phi float [ %393, %295 ], [ %420, %396 ]
  %447 = phi float [ %394, %295 ], [ %423, %396 ]
  %448 = phi float [ %395, %295 ], [ %426, %396 ]
  %449 = phi float [ %308, %295 ], [ %430, %396 ]
  %450 = phi float [ %309, %295 ], [ %434, %396 ]
  %451 = phi float [ %310, %295 ], [ %438, %396 ]
  %452 = icmp eq i32 %164, -1
  br i1 %452, label %460, label %453, !dx.controlflow.hints !62

; <label>:453                                     ; preds = %439
  %454 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %455 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %454, i32 %164, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %456 = extractvalue %dx.types.ResRet.f32 %455, 0
  %457 = extractvalue %dx.types.ResRet.f32 %455, 1
  %458 = extractvalue %dx.types.ResRet.f32 %455, 2
  %459 = extractvalue %dx.types.ResRet.f32 %455, 3
  br label %460

; <label>:460                                     ; preds = %453, %439
  %461 = phi float [ %456, %453 ], [ 0.000000e+00, %439 ]
  %462 = phi float [ %457, %453 ], [ 0.000000e+00, %439 ]
  %463 = phi float [ %458, %453 ], [ 0.000000e+00, %439 ]
  %464 = phi float [ %459, %453 ], [ 0.000000e+00, %439 ]
  %465 = fsub fast float %167, %35
  %466 = fsub fast float %168, %36
  %467 = fsub fast float %169, %37
  %468 = fmul fast float %465, 2.097152e+06
  %469 = fmul fast float %466, 2.097152e+06
  %470 = fmul fast float %467, 2.097152e+06
  %471 = fadd fast float %468, %39
  %472 = fadd fast float %471, %198
  %473 = fadd fast float %469, %40
  %474 = fadd fast float %473, %199
  %475 = fadd fast float %470, %41
  %476 = fadd fast float %475, %200
  %477 = extractvalue %dx.types.CBufRet.i32 %128, 1
  %478 = call i32 @dx.op.binary.i32(i32 40, i32 %125, i32 %477)  ; UMin(a,b)
  %479 = shl i32 %478, 17
  %480 = sub nsw i32 %125, %477
  %481 = call i32 @dx.op.binary.i32(i32 37, i32 %480, i32 0)  ; IMax(a,b)
  %482 = shl i32 %481, 15
  %483 = add i32 %482, %479
  %484 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %485 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %483, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %486 = extractvalue %dx.types.ResRet.i32 %485, 0
  %487 = shl i32 %486, 4
  %488 = shl nuw nsw i32 %127, 4
  %489 = or i32 %483, %488
  %490 = add nsw i32 %489, 16
  %491 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %490, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %492 = extractvalue %dx.types.ResRet.i32 %491, 0
  %493 = extractvalue %dx.types.ResRet.i32 %491, 1
  %494 = extractvalue %dx.types.ResRet.i32 %491, 3
  %495 = add i32 %490, %487
  %496 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %495, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %497 = extractvalue %dx.types.ResRet.i32 %496, 0
  %498 = extractvalue %dx.types.ResRet.i32 %496, 1
  %499 = extractvalue %dx.types.ResRet.i32 %496, 2
  %500 = extractvalue %dx.types.ResRet.i32 %496, 3
  %501 = mul i32 %486, 80
  %502 = add i32 %490, %501
  %503 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %502, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %504 = extractvalue %dx.types.ResRet.i32 %503, 0
  %505 = extractvalue %dx.types.ResRet.i32 %503, 1
  %506 = extractvalue %dx.types.ResRet.i32 %503, 2
  %507 = lshr i32 %492, 9
  %508 = lshr i32 %493, 8
  %509 = and i32 %500, 15
  %510 = lshr i32 %500, 9
  %511 = and i32 %510, 31
  %512 = lshr i32 %500, 14
  %513 = and i32 %512, 31
  %514 = lshr i32 %500, 19
  %515 = and i32 %514, 31
  %516 = lshr i32 %500, 24
  %517 = and i32 %516, 15
  %518 = and i32 %504, 4194303
  %519 = lshr i32 %504, 22
  %520 = and i32 %505, 4194303
  %521 = lshr i32 %505, 22
  %522 = and i32 %521, 7
  %523 = add nuw nsw i32 %509, 10
  %524 = mul nuw nsw i32 %523, %114
  %525 = add i32 %508, %483
  %526 = lshr i32 %524, 5
  %527 = shl nuw nsw i32 %526, 2
  %528 = add i32 %525, %527
  %529 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %528, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %530 = extractvalue %dx.types.ResRet.i32 %529, 0
  %531 = extractvalue %dx.types.ResRet.i32 %529, 1
  %532 = and i32 %524, 31
  %533 = lshr i32 %530, %532
  %534 = icmp ne i32 %532, 0
  %535 = sub nsw i32 0, %524
  %536 = and i32 %535, 31
  %537 = shl i32 %531, %536
  %538 = select i1 %534, i32 %537, i32 0
  %539 = or i32 %538, %533
  %540 = shl i32 1, %509
  %541 = add i32 %540, -1
  %542 = and i32 %539, %541
  %543 = lshr i32 %539, %509
  %544 = and i32 %543, 31
  %545 = add nuw nsw i32 %509, 5
  %546 = lshr i32 %539, %545
  %547 = and i32 %546, 31
  %548 = add i32 %544, %542
  %549 = add i32 %547, %542
  %550 = add nuw nsw i32 %511, %513
  %551 = add nuw nsw i32 %550, %515
  %552 = mul i32 %542, %551
  %553 = add i32 %507, %483
  %554 = lshr i32 %552, 5
  %555 = shl nuw nsw i32 %554, 2
  %556 = add i32 %553, %555
  %557 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %556, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %558 = extractvalue %dx.types.ResRet.i32 %557, 0
  %559 = extractvalue %dx.types.ResRet.i32 %557, 1
  %560 = extractvalue %dx.types.ResRet.i32 %557, 2
  %561 = and i32 %552, 31
  %562 = lshr i32 %558, %561
  %563 = icmp ne i32 %561, 0
  %564 = sub i32 0, %552
  %565 = and i32 %564, 31
  %566 = shl i32 %559, %565
  %567 = select i1 %563, i32 %566, i32 0
  %568 = or i32 %567, %562
  %569 = lshr i32 %559, %561
  %570 = shl i32 %560, %565
  %571 = select i1 %563, i32 %570, i32 0
  %572 = or i32 %571, %569
  %573 = shl i32 1, %511
  %574 = add i32 %573, -1
  %575 = and i32 %568, %574
  %576 = lshr i32 %568, %511
  %577 = icmp ne i32 %511, 0
  %578 = sub nsw i32 0, %510
  %579 = and i32 %578, 31
  %580 = shl i32 %572, %579
  %581 = select i1 %577, i32 %580, i32 0
  %582 = or i32 %581, %576
  %583 = lshr i32 %572, %511
  %584 = shl i32 1, %513
  %585 = add i32 %584, -1
  %586 = and i32 %582, %585
  %587 = lshr i32 %582, %513
  %588 = icmp ne i32 %513, 0
  %589 = sub nsw i32 0, %512
  %590 = and i32 %589, 31
  %591 = shl i32 %583, %590
  %592 = select i1 %588, i32 %591, i32 0
  %593 = or i32 %587, %592
  %594 = shl i32 1, %515
  %595 = add i32 %594, -1
  %596 = and i32 %593, %595
  %597 = shl i32 %500, 19
  %598 = and i32 %597, 260046848
  %599 = sub nsw i32 1132462080, %598
  %600 = bitcast i32 %599 to float
  %601 = add i32 %575, %497
  %602 = add i32 %586, %498
  %603 = add i32 %596, %499
  %604 = sitofp i32 %601 to float
  %605 = sitofp i32 %602 to float
  %606 = sitofp i32 %603 to float
  %607 = fmul fast float %604, %600
  %608 = fmul fast float %605, %600
  %609 = fmul fast float %606, %600
  %610 = mul i32 %548, %551
  %611 = lshr i32 %610, 5
  %612 = shl nuw nsw i32 %611, 2
  %613 = add i32 %553, %612
  %614 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %613, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %615 = extractvalue %dx.types.ResRet.i32 %614, 0
  %616 = extractvalue %dx.types.ResRet.i32 %614, 1
  %617 = extractvalue %dx.types.ResRet.i32 %614, 2
  %618 = and i32 %610, 31
  %619 = lshr i32 %615, %618
  %620 = icmp ne i32 %618, 0
  %621 = sub i32 0, %610
  %622 = and i32 %621, 31
  %623 = shl i32 %616, %622
  %624 = select i1 %620, i32 %623, i32 0
  %625 = or i32 %624, %619
  %626 = lshr i32 %616, %618
  %627 = shl i32 %617, %622
  %628 = select i1 %620, i32 %627, i32 0
  %629 = or i32 %628, %626
  %630 = and i32 %625, %574
  %631 = lshr i32 %625, %511
  %632 = shl i32 %629, %579
  %633 = select i1 %577, i32 %632, i32 0
  %634 = or i32 %633, %631
  %635 = lshr i32 %629, %511
  %636 = and i32 %634, %585
  %637 = lshr i32 %634, %513
  %638 = shl i32 %635, %590
  %639 = select i1 %588, i32 %638, i32 0
  %640 = or i32 %637, %639
  %641 = and i32 %640, %595
  %642 = add i32 %630, %497
  %643 = add i32 %636, %498
  %644 = add i32 %641, %499
  %645 = sitofp i32 %642 to float
  %646 = sitofp i32 %643 to float
  %647 = sitofp i32 %644 to float
  %648 = fmul fast float %645, %600
  %649 = fmul fast float %646, %600
  %650 = fmul fast float %647, %600
  %651 = mul i32 %549, %551
  %652 = lshr i32 %651, 5
  %653 = shl nuw nsw i32 %652, 2
  %654 = add i32 %553, %653
  %655 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %654, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %656 = extractvalue %dx.types.ResRet.i32 %655, 0
  %657 = extractvalue %dx.types.ResRet.i32 %655, 1
  %658 = extractvalue %dx.types.ResRet.i32 %655, 2
  %659 = and i32 %651, 31
  %660 = lshr i32 %656, %659
  %661 = icmp ne i32 %659, 0
  %662 = sub i32 0, %651
  %663 = and i32 %662, 31
  %664 = shl i32 %657, %663
  %665 = select i1 %661, i32 %664, i32 0
  %666 = or i32 %665, %660
  %667 = lshr i32 %657, %659
  %668 = shl i32 %658, %663
  %669 = select i1 %661, i32 %668, i32 0
  %670 = or i32 %669, %667
  %671 = and i32 %666, %574
  %672 = lshr i32 %666, %511
  %673 = shl i32 %670, %579
  %674 = select i1 %577, i32 %673, i32 0
  %675 = or i32 %674, %672
  %676 = lshr i32 %670, %511
  %677 = and i32 %675, %585
  %678 = lshr i32 %675, %513
  %679 = shl i32 %676, %590
  %680 = select i1 %588, i32 %679, i32 0
  %681 = or i32 %678, %680
  %682 = and i32 %681, %595
  %683 = add i32 %671, %497
  %684 = add i32 %677, %498
  %685 = add i32 %682, %499
  %686 = sitofp i32 %683 to float
  %687 = sitofp i32 %684 to float
  %688 = sitofp i32 %685 to float
  %689 = fmul fast float %686, %600
  %690 = fmul fast float %687, %600
  %691 = fmul fast float %688, %600
  %692 = add i32 %520, %483
  %693 = add i32 %518, %483
  %694 = and i32 %494, 15
  %695 = lshr i32 %494, 4
  %696 = and i32 %695, 15
  %697 = lshr i32 %494, 8
  %698 = and i32 %697, 15
  %699 = lshr i32 %494, 12
  %700 = and i32 %699, 15
  %701 = mul i32 %542, %519
  %702 = shl nuw nsw i32 %517, 1
  %703 = ashr i32 %701, 5
  %704 = shl nsw i32 %703, 2
  %705 = add i32 %704, %693
  %706 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %705, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %707 = extractvalue %dx.types.ResRet.i32 %706, 0
  %708 = extractvalue %dx.types.ResRet.i32 %706, 1
  %709 = extractvalue %dx.types.ResRet.i32 %706, 2
  %710 = extractvalue %dx.types.ResRet.i32 %706, 3
  %711 = and i32 %701, 31
  %712 = lshr i32 %707, %711
  %713 = icmp ne i32 %711, 0
  %714 = sub i32 0, %701
  %715 = and i32 %714, 31
  %716 = shl i32 %708, %715
  %717 = select i1 %713, i32 %716, i32 0
  %718 = or i32 %717, %712
  %719 = lshr i32 %708, %711
  %720 = shl i32 %709, %715
  %721 = select i1 %713, i32 %720, i32 0
  %722 = or i32 %721, %719
  %723 = lshr i32 %709, %711
  %724 = shl i32 %710, %715
  %725 = select i1 %713, i32 %724, i32 0
  %726 = or i32 %725, %723
  %727 = shl i32 1, %702
  %728 = add i32 %727, -1
  %729 = and i32 %718, %728
  %730 = shl i32 1, %517
  %731 = add i32 %730, -1
  %732 = and i32 %729, %731
  %733 = lshr i32 %729, %517
  %734 = and i32 %733, %731
  %735 = uitofp i32 %732 to float
  %736 = uitofp i32 %734 to float
  %737 = uitofp i32 %731 to float
  %738 = fdiv fast float 2.000000e+00, %737
  %739 = fmul fast float %735, %738
  %740 = fmul fast float %736, %738
  %741 = fadd fast float %739, -1.000000e+00
  %742 = fadd fast float %740, -1.000000e+00
  %743 = call float @dx.op.unary.f32(i32 6, float %741)  ; FAbs(value)
  %744 = fsub fast float 1.000000e+00, %743
  %745 = call float @dx.op.unary.f32(i32 6, float %742)  ; FAbs(value)
  %746 = fsub fast float %744, %745
  %747 = fsub fast float -0.000000e+00, %746
  %748 = call float @dx.op.unary.f32(i32 7, float %747)  ; Saturate(value)
  %749 = fsub fast float -0.000000e+00, %748
  %750 = fcmp fast oge float %741, 0.000000e+00
  %751 = fcmp fast oge float %742, 0.000000e+00
  %752 = select i1 %750, float %749, float %748
  %753 = select i1 %751, float %749, float %748
  %754 = fadd fast float %752, %741
  %755 = fadd fast float %753, %742
  %756 = call float @dx.op.dot3.f32(i32 55, float %754, float %755, float %746, float %754, float %755, float %746)  ; Dot3(ax,ay,az,bx,by,bz)
  %757 = call float @dx.op.unary.f32(i32 25, float %756)  ; Rsqrt(value)
  %758 = fmul fast float %754, %757
  %759 = fmul fast float %755, %757
  %760 = fmul fast float %757, %746
  %761 = lshr i32 %718, %702
  %762 = icmp ne i32 %517, 0
  %763 = sub nsw i32 0, %702
  %764 = and i32 %763, 30
  %765 = shl i32 %722, %764
  %766 = select i1 %762, i32 %765, i32 0
  %767 = or i32 %766, %761
  %768 = lshr i32 %722, %702
  %769 = shl i32 %726, %764
  %770 = select i1 %762, i32 %769, i32 0
  %771 = or i32 %770, %768
  %772 = add nuw nsw i32 %694, %696
  %773 = add nuw nsw i32 %772, %698
  %774 = add nuw nsw i32 %773, %700
  %775 = mul i32 %548, %519
  %776 = ashr i32 %775, 5
  %777 = shl nsw i32 %776, 2
  %778 = add i32 %777, %693
  %779 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %778, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %780 = extractvalue %dx.types.ResRet.i32 %779, 0
  %781 = extractvalue %dx.types.ResRet.i32 %779, 1
  %782 = extractvalue %dx.types.ResRet.i32 %779, 2
  %783 = extractvalue %dx.types.ResRet.i32 %779, 3
  %784 = and i32 %775, 31
  %785 = lshr i32 %780, %784
  %786 = icmp ne i32 %784, 0
  %787 = sub i32 0, %775
  %788 = and i32 %787, 31
  %789 = shl i32 %781, %788
  %790 = select i1 %786, i32 %789, i32 0
  %791 = or i32 %790, %785
  %792 = lshr i32 %781, %784
  %793 = shl i32 %782, %788
  %794 = select i1 %786, i32 %793, i32 0
  %795 = or i32 %794, %792
  %796 = lshr i32 %782, %784
  %797 = shl i32 %783, %788
  %798 = select i1 %786, i32 %797, i32 0
  %799 = or i32 %798, %796
  %800 = and i32 %791, %728
  %801 = and i32 %800, %731
  %802 = lshr i32 %800, %517
  %803 = and i32 %802, %731
  %804 = uitofp i32 %801 to float
  %805 = uitofp i32 %803 to float
  %806 = fmul fast float %804, %738
  %807 = fmul fast float %805, %738
  %808 = fadd fast float %806, -1.000000e+00
  %809 = fadd fast float %807, -1.000000e+00
  %810 = call float @dx.op.unary.f32(i32 6, float %808)  ; FAbs(value)
  %811 = fsub fast float 1.000000e+00, %810
  %812 = call float @dx.op.unary.f32(i32 6, float %809)  ; FAbs(value)
  %813 = fsub fast float %811, %812
  %814 = fsub fast float -0.000000e+00, %813
  %815 = call float @dx.op.unary.f32(i32 7, float %814)  ; Saturate(value)
  %816 = fsub fast float -0.000000e+00, %815
  %817 = fcmp fast oge float %808, 0.000000e+00
  %818 = fcmp fast oge float %809, 0.000000e+00
  %819 = select i1 %817, float %816, float %815
  %820 = select i1 %818, float %816, float %815
  %821 = fadd fast float %819, %808
  %822 = fadd fast float %820, %809
  %823 = call float @dx.op.dot3.f32(i32 55, float %821, float %822, float %813, float %821, float %822, float %813)  ; Dot3(ax,ay,az,bx,by,bz)
  %824 = call float @dx.op.unary.f32(i32 25, float %823)  ; Rsqrt(value)
  %825 = fmul fast float %821, %824
  %826 = fmul fast float %822, %824
  %827 = fmul fast float %824, %813
  %828 = lshr i32 %791, %702
  %829 = shl i32 %795, %764
  %830 = select i1 %762, i32 %829, i32 0
  %831 = or i32 %830, %828
  %832 = lshr i32 %795, %702
  %833 = shl i32 %799, %764
  %834 = select i1 %762, i32 %833, i32 0
  %835 = or i32 %834, %832
  %836 = mul i32 %549, %519
  %837 = ashr i32 %836, 5
  %838 = shl nsw i32 %837, 2
  %839 = add i32 %838, %693
  %840 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %839, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %841 = extractvalue %dx.types.ResRet.i32 %840, 0
  %842 = extractvalue %dx.types.ResRet.i32 %840, 1
  %843 = extractvalue %dx.types.ResRet.i32 %840, 2
  %844 = extractvalue %dx.types.ResRet.i32 %840, 3
  %845 = and i32 %836, 31
  %846 = lshr i32 %841, %845
  %847 = icmp ne i32 %845, 0
  %848 = sub i32 0, %836
  %849 = and i32 %848, 31
  %850 = shl i32 %842, %849
  %851 = select i1 %847, i32 %850, i32 0
  %852 = or i32 %851, %846
  %853 = lshr i32 %842, %845
  %854 = shl i32 %843, %849
  %855 = select i1 %847, i32 %854, i32 0
  %856 = or i32 %855, %853
  %857 = lshr i32 %843, %845
  %858 = shl i32 %844, %849
  %859 = select i1 %847, i32 %858, i32 0
  %860 = or i32 %859, %857
  %861 = and i32 %852, %728
  %862 = and i32 %861, %731
  %863 = lshr i32 %861, %517
  %864 = and i32 %863, %731
  %865 = uitofp i32 %862 to float
  %866 = uitofp i32 %864 to float
  %867 = fmul fast float %865, %738
  %868 = fmul fast float %866, %738
  %869 = fadd fast float %867, -1.000000e+00
  %870 = fadd fast float %868, -1.000000e+00
  %871 = call float @dx.op.unary.f32(i32 6, float %869)  ; FAbs(value)
  %872 = fsub fast float 1.000000e+00, %871
  %873 = call float @dx.op.unary.f32(i32 6, float %870)  ; FAbs(value)
  %874 = fsub fast float %872, %873
  %875 = fsub fast float -0.000000e+00, %874
  %876 = call float @dx.op.unary.f32(i32 7, float %875)  ; Saturate(value)
  %877 = fsub fast float -0.000000e+00, %876
  %878 = fcmp fast oge float %869, 0.000000e+00
  %879 = fcmp fast oge float %870, 0.000000e+00
  %880 = select i1 %878, float %877, float %876
  %881 = select i1 %879, float %877, float %876
  %882 = fadd fast float %880, %869
  %883 = fadd fast float %881, %870
  %884 = call float @dx.op.dot3.f32(i32 55, float %882, float %883, float %874, float %882, float %883, float %874)  ; Dot3(ax,ay,az,bx,by,bz)
  %885 = call float @dx.op.unary.f32(i32 25, float %884)  ; Rsqrt(value)
  %886 = fmul fast float %882, %885
  %887 = fmul fast float %883, %885
  %888 = fmul fast float %885, %874
  %889 = lshr i32 %852, %702
  %890 = shl i32 %856, %764
  %891 = select i1 %762, i32 %890, i32 0
  %892 = or i32 %891, %889
  %893 = lshr i32 %856, %702
  %894 = shl i32 %860, %764
  %895 = select i1 %762, i32 %894, i32 0
  %896 = or i32 %895, %893
  %897 = and i32 %506, 15
  %898 = lshr i32 %506, 4
  %899 = and i32 %898, 15
  %900 = icmp eq i32 %774, 32
  %901 = and i32 %774, 31
  %902 = lshr i32 %767, %901
  %903 = icmp ne i32 %901, 0
  %904 = sub nsw i32 0, %774
  %905 = and i32 %904, 31
  %906 = shl i32 %771, %905
  %907 = select i1 %903, i32 %906, i32 0
  %908 = or i32 %907, %902
  %909 = select i1 %900, i32 %771, i32 %908
  %910 = shl i32 1, %897
  %911 = add i32 %910, -1
  %912 = and i32 %909, %911
  %913 = lshr i32 %909, %897
  %914 = shl i32 1, %899
  %915 = add i32 %914, -1
  %916 = and i32 %913, %915
  %917 = icmp eq i32 %774, 32
  %918 = and i32 %774, 31
  %919 = lshr i32 %831, %918
  %920 = icmp ne i32 %918, 0
  %921 = sub nsw i32 0, %774
  %922 = and i32 %921, 31
  %923 = shl i32 %835, %922
  %924 = select i1 %920, i32 %923, i32 0
  %925 = or i32 %924, %919
  %926 = select i1 %917, i32 %835, i32 %925
  %927 = and i32 %926, %911
  %928 = lshr i32 %926, %897
  %929 = and i32 %928, %915
  %930 = icmp eq i32 %774, 32
  %931 = and i32 %774, 31
  %932 = lshr i32 %892, %931
  %933 = icmp ne i32 %931, 0
  %934 = sub nsw i32 0, %774
  %935 = and i32 %934, 31
  %936 = shl i32 %896, %935
  %937 = select i1 %933, i32 %936, i32 0
  %938 = or i32 %937, %932
  %939 = select i1 %930, i32 %896, i32 %938
  %940 = and i32 %939, %911
  %941 = lshr i32 %939, %897
  %942 = and i32 %941, %915
  %943 = icmp eq i32 %522, 0
  br i1 %943, label %994, label %944, !dx.controlflow.hints !63

; <label>:944                                     ; preds = %460
  %945 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %692, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %946 = extractvalue %dx.types.ResRet.i32 %945, 0
  %947 = extractvalue %dx.types.ResRet.i32 %945, 1
  %948 = extractvalue %dx.types.ResRet.i32 %945, 2
  %949 = extractvalue %dx.types.ResRet.i32 %945, 3
  %950 = add i32 %692, 16
  %951 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %950, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %952 = extractvalue %dx.types.ResRet.i32 %951, 0
  %953 = extractvalue %dx.types.ResRet.i32 %951, 1
  %954 = extractvalue %dx.types.ResRet.i32 %951, 2
  %955 = icmp ugt i32 %912, %948
  %956 = icmp ugt i32 %916, %949
  %957 = select i1 %955, i32 %952, i32 0
  %958 = select i1 %956, i32 %953, i32 0
  %959 = shl i32 %954, 23
  %960 = sub nsw i32 1065353216, %959
  %961 = bitcast i32 %960 to float
  %962 = add i32 %946, %912
  %963 = add i32 %962, %957
  %964 = add i32 %947, %916
  %965 = add i32 %964, %958
  %966 = sitofp i32 %963 to float
  %967 = sitofp i32 %965 to float
  %968 = fmul fast float %966, %961
  %969 = fmul fast float %967, %961
  %970 = icmp ugt i32 %927, %948
  %971 = icmp ugt i32 %929, %949
  %972 = select i1 %970, i32 %952, i32 0
  %973 = select i1 %971, i32 %953, i32 0
  %974 = add i32 %946, %927
  %975 = add i32 %974, %972
  %976 = add i32 %947, %929
  %977 = add i32 %976, %973
  %978 = sitofp i32 %975 to float
  %979 = sitofp i32 %977 to float
  %980 = fmul fast float %978, %961
  %981 = fmul fast float %979, %961
  %982 = icmp ugt i32 %940, %948
  %983 = icmp ugt i32 %942, %949
  %984 = select i1 %982, i32 %952, i32 0
  %985 = select i1 %983, i32 %953, i32 0
  %986 = add i32 %946, %940
  %987 = add i32 %986, %984
  %988 = add i32 %947, %942
  %989 = add i32 %988, %985
  %990 = sitofp i32 %987 to float
  %991 = sitofp i32 %989 to float
  %992 = fmul fast float %990, %961
  %993 = fmul fast float %991, %961
  br label %994

; <label>:994                                     ; preds = %944, %460
  %995 = phi float [ 0.000000e+00, %460 ], [ %992, %944 ]
  %996 = phi float [ 0.000000e+00, %460 ], [ %980, %944 ]
  %997 = phi float [ 0.000000e+00, %460 ], [ %968, %944 ]
  %998 = phi float [ 0.000000e+00, %460 ], [ %993, %944 ]
  %999 = phi float [ 0.000000e+00, %460 ], [ %981, %944 ]
  %1000 = phi float [ 0.000000e+00, %460 ], [ %969, %944 ]
  %1001 = fmul fast float %607, %277
  %1002 = call float @dx.op.tertiary.f32(i32 46, float %608, float %280, float %1001)  ; FMad(a,b,c)
  %1003 = call float @dx.op.tertiary.f32(i32 46, float %609, float %283, float %1002)  ; FMad(a,b,c)
  %1004 = fadd fast float %1003, %472
  %1005 = fmul fast float %607, %278
  %1006 = call float @dx.op.tertiary.f32(i32 46, float %608, float %281, float %1005)  ; FMad(a,b,c)
  %1007 = call float @dx.op.tertiary.f32(i32 46, float %609, float %284, float %1006)  ; FMad(a,b,c)
  %1008 = fadd fast float %1007, %474
  %1009 = fmul fast float %607, %279
  %1010 = call float @dx.op.tertiary.f32(i32 46, float %608, float %282, float %1009)  ; FMad(a,b,c)
  %1011 = call float @dx.op.tertiary.f32(i32 46, float %609, float %285, float %1010)  ; FMad(a,b,c)
  %1012 = fadd fast float %1011, %476
  %1013 = fmul fast float %1004, %66
  %1014 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %70, float %1013)  ; FMad(a,b,c)
  %1015 = call float @dx.op.tertiary.f32(i32 46, float %1012, float %74, float %1014)  ; FMad(a,b,c)
  %1016 = fadd fast float %1015, %78
  %1017 = fmul fast float %1004, %67
  %1018 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %71, float %1017)  ; FMad(a,b,c)
  %1019 = call float @dx.op.tertiary.f32(i32 46, float %1012, float %75, float %1018)  ; FMad(a,b,c)
  %1020 = fadd fast float %1019, %79
  %1021 = fmul fast float %1004, %68
  %1022 = call float @dx.op.tertiary.f32(i32 46, float %1008, float %72, float %1021)  ; FMad(a,b,c)
  %1023 = call float @dx.op.tertiary.f32(i32 46, float %1012, float %76, float %1022)  ; FMad(a,b,c)
  %1024 = fadd fast float %1023, %80
  %1025 = fmul fast float %648, %277
  %1026 = call float @dx.op.tertiary.f32(i32 46, float %649, float %280, float %1025)  ; FMad(a,b,c)
  %1027 = call float @dx.op.tertiary.f32(i32 46, float %650, float %283, float %1026)  ; FMad(a,b,c)
  %1028 = fadd fast float %1027, %472
  %1029 = fmul fast float %648, %278
  %1030 = call float @dx.op.tertiary.f32(i32 46, float %649, float %281, float %1029)  ; FMad(a,b,c)
  %1031 = call float @dx.op.tertiary.f32(i32 46, float %650, float %284, float %1030)  ; FMad(a,b,c)
  %1032 = fadd fast float %1031, %474
  %1033 = fmul fast float %648, %279
  %1034 = call float @dx.op.tertiary.f32(i32 46, float %649, float %282, float %1033)  ; FMad(a,b,c)
  %1035 = call float @dx.op.tertiary.f32(i32 46, float %650, float %285, float %1034)  ; FMad(a,b,c)
  %1036 = fadd fast float %1035, %476
  %1037 = fmul fast float %1028, %66
  %1038 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %70, float %1037)  ; FMad(a,b,c)
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1036, float %74, float %1038)  ; FMad(a,b,c)
  %1040 = fadd fast float %1039, %78
  %1041 = fmul fast float %1028, %67
  %1042 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %71, float %1041)  ; FMad(a,b,c)
  %1043 = call float @dx.op.tertiary.f32(i32 46, float %1036, float %75, float %1042)  ; FMad(a,b,c)
  %1044 = fadd fast float %1043, %79
  %1045 = fmul fast float %1028, %68
  %1046 = call float @dx.op.tertiary.f32(i32 46, float %1032, float %72, float %1045)  ; FMad(a,b,c)
  %1047 = call float @dx.op.tertiary.f32(i32 46, float %1036, float %76, float %1046)  ; FMad(a,b,c)
  %1048 = fadd fast float %1047, %80
  %1049 = fmul fast float %689, %277
  %1050 = call float @dx.op.tertiary.f32(i32 46, float %690, float %280, float %1049)  ; FMad(a,b,c)
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %691, float %283, float %1050)  ; FMad(a,b,c)
  %1052 = fadd fast float %1051, %472
  %1053 = fmul fast float %689, %278
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %690, float %281, float %1053)  ; FMad(a,b,c)
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %691, float %284, float %1054)  ; FMad(a,b,c)
  %1056 = fadd fast float %1055, %474
  %1057 = fmul fast float %689, %279
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %690, float %282, float %1057)  ; FMad(a,b,c)
  %1059 = call float @dx.op.tertiary.f32(i32 46, float %691, float %285, float %1058)  ; FMad(a,b,c)
  %1060 = fadd fast float %1059, %476
  %1061 = fmul fast float %1052, %66
  %1062 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %70, float %1061)  ; FMad(a,b,c)
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1060, float %74, float %1062)  ; FMad(a,b,c)
  %1064 = fadd fast float %1063, %78
  %1065 = fmul fast float %1052, %67
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %71, float %1065)  ; FMad(a,b,c)
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %1060, float %75, float %1066)  ; FMad(a,b,c)
  %1068 = fadd fast float %1067, %79
  %1069 = fmul fast float %1052, %68
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %1056, float %72, float %1069)  ; FMad(a,b,c)
  %1071 = call float @dx.op.tertiary.f32(i32 46, float %1060, float %76, float %1070)  ; FMad(a,b,c)
  %1072 = fadd fast float %1071, %80
  %1073 = fmul fast float %30, 2.560000e+02
  %1074 = fmul fast float %31, 2.560000e+02
  %1075 = fdiv fast float 1.000000e+00, %1024
  %1076 = fdiv fast float 1.000000e+00, %1048
  %1077 = fdiv fast float 1.000000e+00, %1072
  %1078 = fmul fast float %1075, %1016
  %1079 = fmul fast float %1075, %1020
  %1080 = fmul fast float %1076, %1040
  %1081 = fmul fast float %1076, %1044
  %1082 = fmul fast float %1077, %1064
  %1083 = fmul fast float %1077, %1068
  %1084 = fsub fast float %1083, %1081
  %1085 = fsub fast float %1079, %1083
  %1086 = fsub fast float %1081, %1079
  %1087 = fsub fast float %1080, %1082
  %1088 = fsub fast float %1082, %1078
  %1089 = fsub fast float %1078, %1080
  %1090 = fsub fast float %1073, %1080
  %1091 = fsub fast float %1073, %1082
  %1092 = fsub fast float %1073, %1078
  %1093 = fmul fast float %1084, %1090
  %1094 = fmul fast float %1085, %1091
  %1095 = fmul fast float %1086, %1092
  %1096 = fsub fast float %1074, %1081
  %1097 = fsub fast float %1074, %1083
  %1098 = fsub fast float %1074, %1079
  %1099 = fmul fast float %1087, %1096
  %1100 = fmul fast float %1088, %1097
  %1101 = fmul fast float %1089, %1098
  %1102 = fadd fast float %1093, %1099
  %1103 = fadd fast float %1094, %1100
  %1104 = fadd fast float %1095, %1101
  %1105 = fmul fast float %1103, %1076
  %1106 = fmul fast float %1104, %1077
  %1107 = call float @dx.op.dot3.f32(i32 55, float %1102, float %1103, float %1104, float %1075, float %1076, float %1077)  ; Dot3(ax,ay,az,bx,by,bz)
  %1108 = fdiv fast float 1.000000e+00, %1107
  %1109 = fmul fast float %1108, %1075
  %1110 = fmul fast float %1109, %1102
  %1111 = fmul fast float %1105, %1108
  %1112 = fmul fast float %1106, %1108
  %1113 = fmul fast float %1086, %1077
  %1114 = fmul fast float %1089, %1077
  %1115 = call float @dx.op.dot3.f32(i32 55, float %1084, float %1085, float %1086, float %1075, float %1076, float %1077)  ; Dot3(ax,ay,az,bx,by,bz)
  %1116 = call float @dx.op.dot3.f32(i32 55, float %1087, float %1088, float %1089, float %1075, float %1076, float %1077)  ; Dot3(ax,ay,az,bx,by,bz)
  %1117 = fmul fast float %1107, %1076
  %1118 = fmul fast float %1117, %1085
  %1119 = fmul fast float %1113, %1107
  %1120 = fmul fast float %1105, %1115
  %1121 = fmul fast float %1106, %1115
  %1122 = fsub fast float %1118, %1120
  %1123 = fsub fast float %1119, %1121
  %1124 = fmul fast float %1108, %1108
  %1125 = fmul fast float %1124, 2.560000e+02
  %1126 = fmul fast float %1125, %1122
  %1127 = fmul fast float %1125, %1123
  %1128 = fmul fast float %1117, %1088
  %1129 = fmul fast float %1114, %1107
  %1130 = fmul fast float %1105, %1116
  %1131 = fmul fast float %1106, %1116
  %1132 = fsub fast float %1128, %1130
  %1133 = fsub fast float %1129, %1131
  %1134 = fmul fast float %1125, %1132
  %1135 = fmul fast float %1125, %1133
  %1136 = fmul fast float %758, %1110
  %1137 = fmul fast float %759, %1110
  %1138 = fmul fast float %760, %1110
  %1139 = fmul fast float %825, %1111
  %1140 = fmul fast float %826, %1111
  %1141 = fmul fast float %827, %1111
  %1142 = fmul fast float %886, %1112
  %1143 = fmul fast float %887, %1112
  %1144 = fmul fast float %888, %1112
  %1145 = fadd fast float %1139, %1142
  %1146 = fadd fast float %1145, %1136
  %1147 = fadd fast float %1140, %1143
  %1148 = fadd fast float %1147, %1137
  %1149 = fadd fast float %1141, %1144
  %1150 = fadd fast float %1149, %1138
  %1151 = call float @dx.op.dot3.f32(i32 55, float %1146, float %1148, float %1150, float %1146, float %1148, float %1150)  ; Dot3(ax,ay,az,bx,by,bz)
  %1152 = call float @dx.op.unary.f32(i32 25, float %1151)  ; Rsqrt(value)
  %1153 = fmul fast float %1146, %1152
  %1154 = fmul fast float %1148, %1152
  %1155 = fmul fast float %1150, %1152
  %1156 = fsub fast float %996, %997
  %1157 = fsub fast float %999, %1000
  %1158 = fsub fast float %995, %997
  %1159 = fsub fast float %998, %1000
  %1160 = fmul fast float %1111, %1156
  %1161 = fmul fast float %1111, %1157
  %1162 = fmul fast float %1112, %1158
  %1163 = fmul fast float %1112, %1159
  %1164 = fadd fast float %1162, %997
  %1165 = fadd fast float %1164, %1160
  %1166 = fadd fast float %1163, %1000
  %1167 = fadd fast float %1166, %1161
  %1168 = fmul fast float %1126, %1156
  %1169 = fmul fast float %1126, %1157
  %1170 = fmul fast float %1127, %1158
  %1171 = fmul fast float %1127, %1159
  %1172 = fadd fast float %1168, %1170
  %1173 = fadd fast float %1169, %1171
  %1174 = fmul fast float %1134, %1156
  %1175 = fmul fast float %1134, %1157
  %1176 = fmul fast float %1135, %1158
  %1177 = fmul fast float %1135, %1159
  %1178 = fadd fast float %1174, %1176
  %1179 = fadd fast float %1175, %1177
  br i1 %943, label %1180, label %1193

; <label>:1180                                    ; preds = %994
  %1181 = fmul fast float %1153, %291
  %1182 = fmul fast float %1154, %291
  %1183 = fmul fast float %1155, %291
  %1184 = fmul fast float %1181, %277
  %1185 = call float @dx.op.tertiary.f32(i32 46, float %1182, float %280, float %1184)  ; FMad(a,b,c)
  %1186 = call float @dx.op.tertiary.f32(i32 46, float %1183, float %283, float %1185)  ; FMad(a,b,c)
  %1187 = fmul fast float %1181, %278
  %1188 = call float @dx.op.tertiary.f32(i32 46, float %1182, float %281, float %1187)  ; FMad(a,b,c)
  %1189 = call float @dx.op.tertiary.f32(i32 46, float %1183, float %284, float %1188)  ; FMad(a,b,c)
  %1190 = fmul fast float %1181, %279
  %1191 = call float @dx.op.tertiary.f32(i32 46, float %1182, float %282, float %1190)  ; FMad(a,b,c)
  %1192 = call float @dx.op.tertiary.f32(i32 46, float %1183, float %285, float %1191)  ; FMad(a,b,c)
  br label %1329

; <label>:1193                                    ; preds = %994
  %1194 = fsub fast float %645, %604
  %1195 = fmul fast float %600, %1194
  %1196 = fsub fast float %646, %605
  %1197 = fmul fast float %600, %1196
  %1198 = fsub fast float %647, %606
  %1199 = fmul fast float %600, %1198
  %1200 = fsub fast float %686, %604
  %1201 = fmul fast float %600, %1200
  %1202 = fsub fast float %687, %605
  %1203 = fmul fast float %600, %1202
  %1204 = fsub fast float %688, %606
  %1205 = fmul fast float %600, %1204
  %1206 = call float @dx.op.unary.f32(i32 6, float %1156)  ; FAbs(value)
  %1207 = call float @dx.op.unary.f32(i32 6, float %1158)  ; FAbs(value)
  %1208 = fadd fast float %1207, %1206
  %1209 = fcmp fast ogt float %1208, 0x3EB0C6F7A0000000
  br i1 %1209, label %1229, label %1210

; <label>:1210                                    ; preds = %1193
  %1211 = fcmp fast oge float %1155, 0.000000e+00
  %1212 = select i1 %1211, float 1.000000e+00, float -1.000000e+00
  %1213 = fadd fast float %1212, %1155
  %1214 = fdiv fast float 1.000000e+00, %1213
  %1215 = fsub fast float -0.000000e+00, %1214
  %1216 = fmul fast float %1153, %1154
  %1217 = fmul fast float %1216, %1215
  %1218 = fmul fast float %1153, %1153
  %1219 = fmul fast float %1218, %1212
  %1220 = fmul fast float %1219, %1215
  %1221 = fadd fast float %1220, 1.000000e+00
  %1222 = fmul fast float %1217, %1212
  %1223 = fmul fast float %1153, %1212
  %1224 = fsub fast float -0.000000e+00, %1223
  %1225 = fmul fast float %1154, %1154
  %1226 = fmul fast float %1225, %1215
  %1227 = fadd fast float %1226, %1212
  %1228 = fsub fast float -0.000000e+00, %1154
  br label %1286

; <label>:1229                                    ; preds = %1193
  %1230 = fmul fast float %1154, %1205
  %1231 = fmul fast float %1155, %1203
  %1232 = fsub fast float %1230, %1231
  %1233 = fmul fast float %1155, %1201
  %1234 = fmul fast float %1153, %1205
  %1235 = fsub fast float %1233, %1234
  %1236 = fmul fast float %1153, %1203
  %1237 = fmul fast float %1154, %1201
  %1238 = fsub fast float %1236, %1237
  %1239 = fmul fast float %1155, %1197
  %1240 = fmul fast float %1154, %1199
  %1241 = fsub fast float %1239, %1240
  %1242 = fmul fast float %1153, %1199
  %1243 = fmul fast float %1155, %1195
  %1244 = fsub fast float %1242, %1243
  %1245 = fmul fast float %1154, %1195
  %1246 = fmul fast float %1153, %1197
  %1247 = fsub fast float %1245, %1246
  %1248 = fmul fast float %1232, %1156
  %1249 = fmul fast float %1235, %1156
  %1250 = fmul fast float %1238, %1156
  %1251 = fmul fast float %1241, %1158
  %1252 = fmul fast float %1244, %1158
  %1253 = fmul fast float %1247, %1158
  %1254 = fadd fast float %1248, %1251
  %1255 = fadd fast float %1249, %1252
  %1256 = fadd fast float %1250, %1253
  %1257 = fmul fast float %1232, %1157
  %1258 = fmul fast float %1235, %1157
  %1259 = fmul fast float %1238, %1157
  %1260 = fmul fast float %1241, %1159
  %1261 = fmul fast float %1244, %1159
  %1262 = fmul fast float %1247, %1159
  %1263 = fadd fast float %1257, %1260
  %1264 = fadd fast float %1258, %1261
  %1265 = fadd fast float %1259, %1262
  %1266 = call float @dx.op.dot3.f32(i32 55, float %1254, float %1255, float %1256, float %1254, float %1255, float %1256)  ; Dot3(ax,ay,az,bx,by,bz)
  %1267 = call float @dx.op.unary.f32(i32 25, float %1266)  ; Rsqrt(value)
  %1268 = fmul fast float %1267, %1254
  %1269 = fmul fast float %1267, %1255
  %1270 = fmul fast float %1267, %1256
  %1271 = fmul fast float %1270, %1154
  %1272 = fmul fast float %1269, %1155
  %1273 = fsub fast float %1271, %1272
  %1274 = fmul fast float %1268, %1155
  %1275 = fmul fast float %1270, %1153
  %1276 = fsub fast float %1274, %1275
  %1277 = fmul fast float %1269, %1153
  %1278 = fmul fast float %1268, %1154
  %1279 = fsub fast float %1277, %1278
  %1280 = call float @dx.op.dot3.f32(i32 55, float %1263, float %1264, float %1265, float %1273, float %1276, float %1279)  ; Dot3(ax,ay,az,bx,by,bz)
  %1281 = fcmp fast olt float %1280, 0.000000e+00
  %1282 = select i1 %1281, float -1.000000e+00, float 1.000000e+00
  %1283 = fmul fast float %1273, %1282
  %1284 = fmul fast float %1276, %1282
  %1285 = fmul fast float %1279, %1282
  br label %1286

; <label>:1286                                    ; preds = %1229, %1210
  %1287 = phi float [ %1268, %1229 ], [ %1221, %1210 ]
  %1288 = phi float [ %1269, %1229 ], [ %1222, %1210 ]
  %1289 = phi float [ %1270, %1229 ], [ %1224, %1210 ]
  %1290 = phi float [ %1283, %1229 ], [ %1217, %1210 ]
  %1291 = phi float [ %1284, %1229 ], [ %1227, %1210 ]
  %1292 = phi float [ %1285, %1229 ], [ %1228, %1210 ]
  %1293 = fmul fast float %277, %289
  %1294 = fmul fast float %278, %289
  %1295 = fmul fast float %279, %289
  %1296 = fmul fast float %280, %290
  %1297 = fmul fast float %281, %290
  %1298 = fmul fast float %282, %290
  %1299 = fmul fast float %291, %283
  %1300 = fmul fast float %291, %284
  %1301 = fmul fast float %291, %285
  %1302 = fmul fast float %1287, %1293
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %1288, float %1296, float %1302)  ; FMad(a,b,c)
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1299, float %1303)  ; FMad(a,b,c)
  %1305 = fmul fast float %1287, %1294
  %1306 = call float @dx.op.tertiary.f32(i32 46, float %1288, float %1297, float %1305)  ; FMad(a,b,c)
  %1307 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1300, float %1306)  ; FMad(a,b,c)
  %1308 = fmul fast float %1287, %1295
  %1309 = call float @dx.op.tertiary.f32(i32 46, float %1288, float %1298, float %1308)  ; FMad(a,b,c)
  %1310 = call float @dx.op.tertiary.f32(i32 46, float %1289, float %1301, float %1309)  ; FMad(a,b,c)
  %1311 = fmul fast float %1290, %1293
  %1312 = call float @dx.op.tertiary.f32(i32 46, float %1291, float %1296, float %1311)  ; FMad(a,b,c)
  %1313 = call float @dx.op.tertiary.f32(i32 46, float %1292, float %1299, float %1312)  ; FMad(a,b,c)
  %1314 = fmul fast float %1290, %1294
  %1315 = call float @dx.op.tertiary.f32(i32 46, float %1291, float %1297, float %1314)  ; FMad(a,b,c)
  %1316 = call float @dx.op.tertiary.f32(i32 46, float %1292, float %1300, float %1315)  ; FMad(a,b,c)
  %1317 = fmul fast float %1290, %1295
  %1318 = call float @dx.op.tertiary.f32(i32 46, float %1291, float %1298, float %1317)  ; FMad(a,b,c)
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %1292, float %1301, float %1318)  ; FMad(a,b,c)
  %1320 = fmul fast float %1153, %1293
  %1321 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1296, float %1320)  ; FMad(a,b,c)
  %1322 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %1299, float %1321)  ; FMad(a,b,c)
  %1323 = fmul fast float %1153, %1294
  %1324 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1297, float %1323)  ; FMad(a,b,c)
  %1325 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %1300, float %1324)  ; FMad(a,b,c)
  %1326 = fmul fast float %1153, %1295
  %1327 = call float @dx.op.tertiary.f32(i32 46, float %1154, float %1298, float %1326)  ; FMad(a,b,c)
  %1328 = call float @dx.op.tertiary.f32(i32 46, float %1155, float %1301, float %1327)  ; FMad(a,b,c)
  br label %1329

; <label>:1329                                    ; preds = %1286, %1180
  %1330 = phi float [ %1179, %1286 ], [ 0.000000e+00, %1180 ]
  %1331 = phi float [ %1178, %1286 ], [ 0.000000e+00, %1180 ]
  %1332 = phi float [ %1173, %1286 ], [ 0.000000e+00, %1180 ]
  %1333 = phi float [ %1172, %1286 ], [ 0.000000e+00, %1180 ]
  %1334 = phi float [ %1167, %1286 ], [ 0.000000e+00, %1180 ]
  %1335 = phi float [ %1165, %1286 ], [ 0.000000e+00, %1180 ]
  %1336 = phi float [ %1304, %1286 ], [ 0.000000e+00, %1180 ]
  %1337 = phi float [ %1307, %1286 ], [ 0.000000e+00, %1180 ]
  %1338 = phi float [ %1310, %1286 ], [ 0.000000e+00, %1180 ]
  %1339 = phi float [ %1313, %1286 ], [ 0.000000e+00, %1180 ]
  %1340 = phi float [ %1316, %1286 ], [ 0.000000e+00, %1180 ]
  %1341 = phi float [ %1319, %1286 ], [ 0.000000e+00, %1180 ]
  %1342 = phi float [ %1322, %1286 ], [ %1186, %1180 ]
  %1343 = phi float [ %1325, %1286 ], [ %1189, %1180 ]
  %1344 = phi float [ %1328, %1286 ], [ %1192, %1180 ]
  %1345 = fmul fast float %1110, %607
  %1346 = fmul fast float %1110, %608
  %1347 = fmul fast float %1110, %609
  %1348 = fmul fast float %1111, %648
  %1349 = fmul fast float %1111, %649
  %1350 = fmul fast float %1111, %650
  %1351 = fmul fast float %1112, %689
  %1352 = fmul fast float %1112, %690
  %1353 = fmul fast float %1112, %691
  %1354 = fadd fast float %1348, %1351
  %1355 = fadd fast float %1354, %1345
  %1356 = fadd fast float %1349, %1352
  %1357 = fadd fast float %1356, %1346
  %1358 = fadd fast float %1350, %1353
  %1359 = fadd fast float %1358, %1347
  %1360 = fmul fast float %1355, %440
  %1361 = call float @dx.op.tertiary.f32(i32 46, float %1357, float %443, float %1360)  ; FMad(a,b,c)
  %1362 = call float @dx.op.tertiary.f32(i32 46, float %1359, float %446, float %1361)  ; FMad(a,b,c)
  %1363 = fadd fast float %468, %102
  %1364 = fadd fast float %1363, %449
  %1365 = fadd fast float %1364, %1362
  %1366 = fmul fast float %1355, %441
  %1367 = call float @dx.op.tertiary.f32(i32 46, float %1357, float %444, float %1366)  ; FMad(a,b,c)
  %1368 = call float @dx.op.tertiary.f32(i32 46, float %1359, float %447, float %1367)  ; FMad(a,b,c)
  %1369 = fadd fast float %469, %103
  %1370 = fadd fast float %1369, %450
  %1371 = fadd fast float %1370, %1368
  %1372 = fmul fast float %1355, %442
  %1373 = call float @dx.op.tertiary.f32(i32 46, float %1357, float %445, float %1372)  ; FMad(a,b,c)
  %1374 = call float @dx.op.tertiary.f32(i32 46, float %1359, float %448, float %1373)  ; FMad(a,b,c)
  %1375 = fadd fast float %470, %104
  %1376 = fadd fast float %1375, %451
  %1377 = fadd fast float %1376, %1374
  %1378 = fmul fast float %1365, %82
  %1379 = call float @dx.op.tertiary.f32(i32 46, float %1371, float %87, float %1378)  ; FMad(a,b,c)
  %1380 = call float @dx.op.tertiary.f32(i32 46, float %1377, float %92, float %1379)  ; FMad(a,b,c)
  %1381 = fadd fast float %1380, %97
  %1382 = fmul fast float %1365, %83
  %1383 = call float @dx.op.tertiary.f32(i32 46, float %1371, float %88, float %1382)  ; FMad(a,b,c)
  %1384 = call float @dx.op.tertiary.f32(i32 46, float %1377, float %93, float %1383)  ; FMad(a,b,c)
  %1385 = fadd fast float %1384, %98
  %1386 = fmul fast float %1365, %84
  %1387 = call float @dx.op.tertiary.f32(i32 46, float %1371, float %89, float %1386)  ; FMad(a,b,c)
  %1388 = call float @dx.op.tertiary.f32(i32 46, float %1377, float %94, float %1387)  ; FMad(a,b,c)
  %1389 = fadd fast float %1388, %99
  %1390 = fmul fast float %1365, %85
  %1391 = call float @dx.op.tertiary.f32(i32 46, float %1371, float %90, float %1390)  ; FMad(a,b,c)
  %1392 = call float @dx.op.tertiary.f32(i32 46, float %1377, float %95, float %1391)  ; FMad(a,b,c)
  %1393 = fadd fast float %1392, %100
  %1394 = fmul fast float %1110, %1004
  %1395 = fmul fast float %1110, %1008
  %1396 = fmul fast float %1110, %1012
  %1397 = fmul fast float %1111, %1028
  %1398 = fmul fast float %1111, %1032
  %1399 = fmul fast float %1111, %1036
  %1400 = fmul fast float %1112, %1052
  %1401 = fmul fast float %1112, %1056
  %1402 = fmul fast float %1112, %1060
  %1403 = fadd fast float %1397, %1400
  %1404 = fadd fast float %1403, %1394
  %1405 = fadd fast float %1398, %1401
  %1406 = fadd fast float %1405, %1395
  %1407 = fadd fast float %1399, %1402
  %1408 = fadd fast float %1407, %1396
  %1409 = fmul fast float %1110, %1024
  %1410 = fmul fast float %1111, %1048
  %1411 = fmul fast float %1112, %1072
  %1412 = fadd fast float %1410, %1411
  %1413 = fadd fast float %1412, %1409
  %1414 = fsub fast float %30, %48
  %1415 = fsub fast float %31, %49
  %1416 = fmul fast float %1414, %51
  %1417 = fmul fast float %1415, %52
  %1418 = fadd fast float %1416, -5.000000e-01
  %1419 = fadd fast float %1417, -5.000000e-01
  %1420 = fmul fast float %1418, 2.000000e+00
  %1421 = fmul fast float %1419, -2.000000e+00
  %1422 = fmul fast float %1420, %1413
  %1423 = fmul fast float %1421, %1413
  %1424 = fmul fast float %1413, %115
  %1425 = add nuw nsw i32 %139, 19
  %1426 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %1425, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1427 = extractvalue %dx.types.ResRet.f32 %1426, 3
  %1428 = bitcast float %1427 to i32
  %1429 = add nuw nsw i32 %139, 20
  %1430 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %141, i32 %1429, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1431 = extractvalue %dx.types.ResRet.f32 %1430, 3
  %1432 = bitcast float %1431 to i32
  %1433 = icmp eq i32 %1428, 0
  br i1 %1433, label %1585, label %1434

; <label>:1434                                    ; preds = %1329
  %1435 = icmp ult i32 %1428, %522
  br i1 %1435, label %1436, label %1585

; <label>:1436                                    ; preds = %1434
  %1437 = and i32 %506, 252645135
  %1438 = and i32 %898, 252645135
  %1439 = add nuw nsw i32 %1438, %1437
  %1440 = mul i32 %1439, 16843008
  %1441 = shl i32 %1428, 3
  %1442 = and i32 %1441, 24
  %1443 = lshr i32 %1440, %1442
  %1444 = and i32 %1443, 255
  %1445 = add nuw nsw i32 %774, %702
  %1446 = add nuw nsw i32 %1445, %1444
  %1447 = add i32 %1446, %701
  %1448 = add i32 %1446, %775
  %1449 = add i32 %1446, %836
  %1450 = lshr i32 %506, %1442
  %1451 = and i32 %1450, 15
  %1452 = or i32 %1442, 4
  %1453 = lshr i32 %506, %1452
  %1454 = and i32 %1453, 15
  %1455 = ashr i32 %1447, 5
  %1456 = shl nsw i32 %1455, 2
  %1457 = add i32 %1456, %693
  %1458 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %1457, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1459 = extractvalue %dx.types.ResRet.i32 %1458, 0
  %1460 = extractvalue %dx.types.ResRet.i32 %1458, 1
  %1461 = and i32 %1447, 31
  %1462 = lshr i32 %1459, %1461
  %1463 = icmp ne i32 %1461, 0
  %1464 = sub i32 0, %1447
  %1465 = and i32 %1464, 31
  %1466 = shl i32 %1460, %1465
  %1467 = select i1 %1463, i32 %1466, i32 0
  %1468 = or i32 %1467, %1462
  %1469 = shl i32 1, %1451
  %1470 = add i32 %1469, -1
  %1471 = and i32 %1468, %1470
  %1472 = lshr i32 %1468, %1451
  %1473 = shl i32 1, %1454
  %1474 = add i32 %1473, -1
  %1475 = and i32 %1472, %1474
  %1476 = ashr i32 %1448, 5
  %1477 = shl nsw i32 %1476, 2
  %1478 = add i32 %1477, %693
  %1479 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %1478, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1480 = extractvalue %dx.types.ResRet.i32 %1479, 0
  %1481 = extractvalue %dx.types.ResRet.i32 %1479, 1
  %1482 = and i32 %1448, 31
  %1483 = lshr i32 %1480, %1482
  %1484 = icmp ne i32 %1482, 0
  %1485 = sub i32 0, %1448
  %1486 = and i32 %1485, 31
  %1487 = shl i32 %1481, %1486
  %1488 = select i1 %1484, i32 %1487, i32 0
  %1489 = or i32 %1488, %1483
  %1490 = and i32 %1489, %1470
  %1491 = lshr i32 %1489, %1451
  %1492 = and i32 %1491, %1474
  %1493 = ashr i32 %1449, 5
  %1494 = shl nsw i32 %1493, 2
  %1495 = add i32 %1494, %693
  %1496 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %1495, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1497 = extractvalue %dx.types.ResRet.i32 %1496, 0
  %1498 = extractvalue %dx.types.ResRet.i32 %1496, 1
  %1499 = and i32 %1449, 31
  %1500 = lshr i32 %1497, %1499
  %1501 = icmp ne i32 %1499, 0
  %1502 = sub i32 0, %1449
  %1503 = and i32 %1502, 31
  %1504 = shl i32 %1498, %1503
  %1505 = select i1 %1501, i32 %1504, i32 0
  %1506 = or i32 %1505, %1500
  %1507 = and i32 %1506, %1470
  %1508 = lshr i32 %1506, %1451
  %1509 = and i32 %1508, %1474
  %1510 = shl i32 %1428, 5
  %1511 = add i32 %692, %1510
  %1512 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %1511, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1513 = extractvalue %dx.types.ResRet.i32 %1512, 0
  %1514 = extractvalue %dx.types.ResRet.i32 %1512, 1
  %1515 = extractvalue %dx.types.ResRet.i32 %1512, 2
  %1516 = extractvalue %dx.types.ResRet.i32 %1512, 3
  %1517 = add i32 %1511, 16
  %1518 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %484, i32 %1517, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1519 = extractvalue %dx.types.ResRet.i32 %1518, 0
  %1520 = extractvalue %dx.types.ResRet.i32 %1518, 1
  %1521 = extractvalue %dx.types.ResRet.i32 %1518, 2
  %1522 = icmp ugt i32 %1471, %1515
  %1523 = icmp ugt i32 %1475, %1516
  %1524 = select i1 %1522, i32 %1519, i32 0
  %1525 = select i1 %1523, i32 %1520, i32 0
  %1526 = shl i32 %1521, 23
  %1527 = sub nsw i32 1065353216, %1526
  %1528 = bitcast i32 %1527 to float
  %1529 = add i32 %1513, %1471
  %1530 = add i32 %1529, %1524
  %1531 = add i32 %1514, %1475
  %1532 = add i32 %1531, %1525
  %1533 = sitofp i32 %1530 to float
  %1534 = sitofp i32 %1532 to float
  %1535 = fmul fast float %1533, %1528
  %1536 = fmul fast float %1534, %1528
  %1537 = icmp ugt i32 %1490, %1515
  %1538 = icmp ugt i32 %1492, %1516
  %1539 = select i1 %1537, i32 %1519, i32 0
  %1540 = select i1 %1538, i32 %1520, i32 0
  %1541 = add i32 %1513, %1490
  %1542 = add i32 %1541, %1539
  %1543 = add i32 %1514, %1492
  %1544 = add i32 %1543, %1540
  %1545 = sitofp i32 %1542 to float
  %1546 = sitofp i32 %1544 to float
  %1547 = icmp ugt i32 %1507, %1515
  %1548 = icmp ugt i32 %1509, %1516
  %1549 = select i1 %1547, i32 %1519, i32 0
  %1550 = select i1 %1548, i32 %1520, i32 0
  %1551 = add i32 %1507, %1513
  %1552 = add i32 %1551, %1549
  %1553 = add i32 %1509, %1514
  %1554 = add i32 %1553, %1550
  %1555 = sitofp i32 %1552 to float
  %1556 = sitofp i32 %1554 to float
  %1557 = fsub fast float %1545, %1533
  %1558 = fmul fast float %1528, %1557
  %1559 = fsub fast float %1546, %1534
  %1560 = fmul fast float %1528, %1559
  %1561 = fsub fast float %1555, %1533
  %1562 = fmul fast float %1528, %1561
  %1563 = fsub fast float %1556, %1534
  %1564 = fmul fast float %1528, %1563
  %1565 = fmul fast float %1558, %1111
  %1566 = fmul fast float %1560, %1111
  %1567 = fadd fast float %1565, %1535
  %1568 = fadd fast float %1566, %1536
  %1569 = fmul fast float %1562, %1112
  %1570 = fmul fast float %1564, %1112
  %1571 = fadd fast float %1567, %1569
  %1572 = fadd fast float %1568, %1570
  %1573 = fmul fast float %1558, %1126
  %1574 = fmul fast float %1560, %1126
  %1575 = fmul fast float %1562, %1127
  %1576 = fmul fast float %1564, %1127
  %1577 = fadd fast float %1573, %1575
  %1578 = fadd fast float %1574, %1576
  %1579 = fmul fast float %1558, %1134
  %1580 = fmul fast float %1560, %1134
  %1581 = fmul fast float %1562, %1135
  %1582 = fmul fast float %1564, %1135
  %1583 = fadd fast float %1579, %1581
  %1584 = fadd fast float %1580, %1582
  br label %1585

; <label>:1585                                    ; preds = %1436, %1434, %1329
  %1586 = phi float [ %1571, %1436 ], [ 0.000000e+00, %1434 ], [ %1335, %1329 ]
  %1587 = phi float [ %1572, %1436 ], [ 0.000000e+00, %1434 ], [ %1334, %1329 ]
  %1588 = phi float [ %1577, %1436 ], [ 0.000000e+00, %1434 ], [ %1333, %1329 ]
  %1589 = phi float [ %1578, %1436 ], [ 0.000000e+00, %1434 ], [ %1332, %1329 ]
  %1590 = phi float [ %1583, %1436 ], [ 0.000000e+00, %1434 ], [ %1331, %1329 ]
  %1591 = phi float [ %1584, %1436 ], [ 0.000000e+00, %1434 ], [ %1330, %1329 ]
  %1592 = mul i32 %1432, 15
  %1593 = add i32 %1592, 2
  %1594 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1595 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1594, i32 %1593, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1596 = extractvalue %dx.types.ResRet.f32 %1595, 0
  %1597 = extractvalue %dx.types.ResRet.f32 %1595, 1
  %1598 = extractvalue %dx.types.ResRet.f32 %1595, 2
  %1599 = extractvalue %dx.types.ResRet.f32 %1595, 3
  %1600 = select i1 %155, float %461, float %1598
  %1601 = select i1 %155, float %462, float %1599
  %1602 = fmul fast float %1596, %1590
  %1603 = fmul fast float %1591, %1597
  %1604 = fmul fast float %1596, %1588
  %1605 = fmul fast float %1589, %1597
  %1606 = fmul fast float %1596, %1586
  %1607 = fmul fast float %1597, %1587
  %1608 = fadd fast float %1606, %1600
  %1609 = fadd fast float %1607, %1601
  %1610 = add i32 %1592, 3
  %1611 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1594, i32 %1610, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1612 = extractvalue %dx.types.ResRet.f32 %1611, 0
  %1613 = extractvalue %dx.types.ResRet.f32 %1611, 1
  %1614 = extractvalue %dx.types.ResRet.f32 %1611, 2
  %1615 = extractvalue %dx.types.ResRet.f32 %1611, 3
  %1616 = select i1 %155, float %463, float %1614
  %1617 = select i1 %155, float %464, float %1615
  %1618 = fmul fast float %1612, %1590
  %1619 = fmul fast float %1613, %1591
  %1620 = fmul fast float %1612, %1586
  %1621 = fmul fast float %1613, %1587
  %1622 = fadd fast float %1620, %1616
  %1623 = fadd fast float %1621, %1617
  %1624 = fmul float %1603, 5.000000e-01
  %1625 = fmul float %1605, 5.000000e-01
  %1626 = fmul float %1609, 5.000000e-01
  br label %1627

; <label>:1627                                    ; preds = %1585, %0
  %1628 = phi float [ %1608, %1585 ], [ 0.000000e+00, %0 ]
  %1629 = phi float [ %1626, %1585 ], [ 0.000000e+00, %0 ]
  %1630 = phi float [ %1622, %1585 ], [ 0.000000e+00, %0 ]
  %1631 = phi float [ %1623, %1585 ], [ 0.000000e+00, %0 ]
  %1632 = phi float [ %1604, %1585 ], [ 0.000000e+00, %0 ]
  %1633 = phi float [ %1625, %1585 ], [ 0.000000e+00, %0 ]
  %1634 = phi float [ %1618, %1585 ], [ 0.000000e+00, %0 ]
  %1635 = phi float [ %1619, %1585 ], [ 0.000000e+00, %0 ]
  %1636 = phi float [ %1602, %1585 ], [ 0.000000e+00, %0 ]
  %1637 = phi float [ %1624, %1585 ], [ 0.000000e+00, %0 ]
  %1638 = phi i32 [ %1592, %1585 ], [ 0, %0 ]
  %1639 = phi float [ %1422, %1585 ], [ 0.000000e+00, %0 ]
  %1640 = phi float [ %1423, %1585 ], [ 0.000000e+00, %0 ]
  %1641 = phi float [ %1424, %1585 ], [ 0.000000e+00, %0 ]
  %1642 = phi float [ %1413, %1585 ], [ 0.000000e+00, %0 ]
  %1643 = phi float [ %1381, %1585 ], [ 0.000000e+00, %0 ]
  %1644 = phi float [ %1385, %1585 ], [ 0.000000e+00, %0 ]
  %1645 = phi float [ %1389, %1585 ], [ 0.000000e+00, %0 ]
  %1646 = phi float [ %1393, %1585 ], [ 0.000000e+00, %0 ]
  %1647 = phi float [ %1336, %1585 ], [ 1.000000e+00, %0 ]
  %1648 = phi float [ %1337, %1585 ], [ 0.000000e+00, %0 ]
  %1649 = phi float [ %1338, %1585 ], [ 0.000000e+00, %0 ]
  %1650 = phi float [ %1339, %1585 ], [ 0.000000e+00, %0 ]
  %1651 = phi float [ %1340, %1585 ], [ 1.000000e+00, %0 ]
  %1652 = phi float [ %1341, %1585 ], [ 0.000000e+00, %0 ]
  %1653 = phi float [ %1342, %1585 ], [ 0.000000e+00, %0 ]
  %1654 = phi float [ %1343, %1585 ], [ 0.000000e+00, %0 ]
  %1655 = phi float [ %1344, %1585 ], [ 1.000000e+00, %0 ]
  %1656 = phi float [ %1404, %1585 ], [ 0.000000e+00, %0 ]
  %1657 = phi float [ %1406, %1585 ], [ 0.000000e+00, %0 ]
  %1658 = phi float [ %1408, %1585 ], [ 0.000000e+00, %0 ]
  %1659 = phi i32 [ %139, %1585 ], [ 0, %0 ]
  %1660 = phi float [ %1173, %1585 ], [ 0.000000e+00, %0 ]
  %1661 = phi float [ %1172, %1585 ], [ 0.000000e+00, %0 ]
  %1662 = phi float [ %1179, %1585 ], [ 0.000000e+00, %0 ]
  %1663 = phi float [ %1178, %1585 ], [ 0.000000e+00, %0 ]
  %1664 = phi float [ %1167, %1585 ], [ 0.000000e+00, %0 ]
  %1665 = phi float [ %1165, %1585 ], [ 0.000000e+00, %0 ]
  %1666 = fsub fast float %1656, %39
  %1667 = fsub fast float %1657, %40
  %1668 = fsub fast float %1658, %41
  %1669 = fmul fast float %1665, 5.000000e-01
  %1670 = fmul fast float %1664, 5.000000e-01
  %1671 = fmul fast float %1661, 5.000000e-01
  %1672 = fmul fast float %1660, 5.000000e-01
  %1673 = fmul fast float %1663, 5.000000e-01
  %1674 = fmul fast float %1662, 5.000000e-01
  %1675 = fmul fast float %1665, 1.000000e+01
  %1676 = fmul fast float %1664, 1.000000e+01
  %1677 = fmul fast float %1661, 0x4023FFFFE0000000
  %1678 = fmul fast float %1660, 0x4023FFFFE0000000
  %1679 = fmul fast float %1663, 0x4023FFFFE0000000
  %1680 = fmul fast float %1662, 0x4023FFFFE0000000
  %1681 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 144)  ; CBufferLoadLegacy(handle,regIndex)
  %1682 = extractvalue %dx.types.CBufRet.f32 %1681, 0
  %1683 = call float @dx.op.unary.f32(i32 21, float %1682)  ; Exp(value)
  %1684 = fmul fast float %1679, %1683
  %1685 = fmul fast float %1680, %1683
  %1686 = fmul fast float %1677, %1683
  %1687 = fmul fast float %1678, %1683
  %1688 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1689 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1690 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1688, %dx.types.Handle %1689, float %1675, float %1676, float undef, float undef, i32 0, i32 0, i32 undef, float %1686, float %1687, float undef, float %1684, float %1685, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1691 = extractvalue %dx.types.ResRet.f32 %1690, 0
  %1692 = extractvalue %dx.types.ResRet.f32 %1690, 1
  %1693 = fmul fast float %1691, 2.000000e+00
  %1694 = fmul fast float %1692, 2.000000e+00
  %1695 = fadd fast float %1693, -1.000000e+00
  %1696 = fadd fast float %1694, -1.000000e+00
  %1697 = call float @dx.op.dot2.f32(i32 54, float %1695, float %1696, float %1695, float %1696)  ; Dot2(ax,ay,bx,by)
  %1698 = fsub fast float 1.000000e+00, %1697
  %1699 = call float @dx.op.unary.f32(i32 7, float %1698)  ; Saturate(value)
  %1700 = call float @dx.op.unary.f32(i32 24, float %1699)  ; Sqrt(value)
  %1701 = fmul fast float %1691, 0x3FE3333340000000
  %1702 = fadd fast float %1701, 0xBFD3333340000000
  %1703 = fmul fast float %1692, 0x3FE3333340000000
  %1704 = fadd fast float %1703, 0xBFD3333340000000
  %1705 = fmul fast float %1702, %57
  %1706 = fmul fast float %1704, %57
  %1707 = fmul fast float %1700, %57
  %1708 = fadd fast float %1705, %54
  %1709 = fadd fast float %1706, %55
  %1710 = fadd fast float %1707, %56
  %1711 = call float @dx.op.dot3.f32(i32 55, float %1708, float %1709, float %1710, float %1708, float %1709, float %1710)  ; Dot3(ax,ay,az,bx,by,bz)
  %1712 = call float @dx.op.unary.f32(i32 25, float %1711)  ; Rsqrt(value)
  %1713 = fmul fast float %1708, %1712
  %1714 = fmul fast float %1709, %1712
  %1715 = fmul fast float %1710, %1712
  %1716 = fmul fast float %1713, %1647
  %1717 = call float @dx.op.tertiary.f32(i32 46, float %1714, float %1650, float %1716)  ; FMad(a,b,c)
  %1718 = call float @dx.op.tertiary.f32(i32 46, float %1715, float %1653, float %1717)  ; FMad(a,b,c)
  %1719 = fmul fast float %1713, %1648
  %1720 = call float @dx.op.tertiary.f32(i32 46, float %1714, float %1651, float %1719)  ; FMad(a,b,c)
  %1721 = call float @dx.op.tertiary.f32(i32 46, float %1715, float %1654, float %1720)  ; FMad(a,b,c)
  %1722 = fmul fast float %1713, %1649
  %1723 = call float @dx.op.tertiary.f32(i32 46, float %1714, float %1652, float %1722)  ; FMad(a,b,c)
  %1724 = call float @dx.op.tertiary.f32(i32 46, float %1715, float %1655, float %1723)  ; FMad(a,b,c)
  %1725 = call float @dx.op.dot3.f32(i32 55, float %1718, float %1721, float %1724, float %1718, float %1721, float %1724)  ; Dot3(ax,ay,az,bx,by,bz)
  %1726 = call float @dx.op.unary.f32(i32 25, float %1725)  ; Rsqrt(value)
  %1727 = fmul fast float %1726, %1718
  %1728 = fmul fast float %1726, %1721
  %1729 = fmul fast float %1726, %1724
  %1730 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %27, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1731 = extractvalue %dx.types.CBufRet.f32 %1730, 0
  %1732 = extractvalue %dx.types.CBufRet.f32 %1730, 1
  %1733 = extractvalue %dx.types.CBufRet.f32 %1730, 2
  %1734 = extractvalue %dx.types.CBufRet.f32 %1730, 3
  %1735 = fmul fast float %1732, %1731
  %1736 = fmul fast float %1733, %1731
  %1737 = fmul fast float %1734, %1731
  %1738 = fmul fast float %1665, 2.000000e+01
  %1739 = fmul fast float %1664, 2.000000e+01
  %1740 = fmul fast float %1661, 2.000000e+01
  %1741 = fmul fast float %1660, 2.000000e+01
  %1742 = fmul fast float %1663, 2.000000e+01
  %1743 = fmul fast float %1662, 2.000000e+01
  %1744 = fmul fast float %1742, %1683
  %1745 = fmul fast float %1743, %1683
  %1746 = fmul fast float %1740, %1683
  %1747 = fmul fast float %1741, %1683
  %1748 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1749 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1750 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1748, %dx.types.Handle %1749, float %1738, float %1739, float undef, float undef, i32 0, i32 0, i32 undef, float %1746, float %1747, float undef, float %1744, float %1745, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1751 = extractvalue %dx.types.ResRet.f32 %1750, 0
  %1752 = fmul fast float %1751, 0x3FE3333340000000
  %1753 = fadd fast float %1752, 0x3FD99999A0000000
  %1754 = fsub fast float 0x3FE3333340000000, %1752
  %1755 = fmul fast float %1665, 5.000000e+00
  %1756 = fmul fast float %1664, 5.000000e+00
  %1757 = fmul fast float %1661, 0x4013FFFFE0000000
  %1758 = fmul fast float %1660, 0x4013FFFFE0000000
  %1759 = fmul fast float %1663, 0x4013FFFFE0000000
  %1760 = fmul fast float %1662, 0x4013FFFFE0000000
  %1761 = fmul fast float %1759, %1683
  %1762 = fmul fast float %1760, %1683
  %1763 = fmul fast float %1757, %1683
  %1764 = fmul fast float %1758, %1683
  %1765 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1748, %dx.types.Handle %1749, float %1755, float %1756, float undef, float undef, i32 0, i32 0, i32 undef, float %1763, float %1764, float undef, float %1761, float %1762, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1766 = extractvalue %dx.types.ResRet.f32 %1765, 1
  %1767 = fadd fast float %1642, -2.400000e+01
  %1768 = fmul fast float %1767, 0x3F45D867C0000000
  %1769 = call float @dx.op.unary.f32(i32 7, float %1768)  ; Saturate(value)
  %1770 = fsub fast float 1.000000e+00, %1766
  %1771 = fmul fast float %1770, %1769
  %1772 = fadd fast float %1771, %1766
  %1773 = fsub fast float %1754, %1753
  %1774 = fmul fast float %1772, %1773
  %1775 = fadd fast float %1774, %1753
  %1776 = fmul fast float %1673, %1683
  %1777 = fmul fast float %1674, %1683
  %1778 = fmul fast float %1671, %1683
  %1779 = fmul fast float %1672, %1683
  %1780 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1748, %dx.types.Handle %1749, float %1669, float %1670, float undef, float undef, i32 0, i32 0, i32 undef, float %1778, float %1779, float undef, float %1776, float %1777, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1781 = extractvalue %dx.types.ResRet.f32 %1780, 1
  %1782 = fmul fast float %1766, %1769
  %1783 = fsub fast float %1766, %1782
  %1784 = fadd fast float %1781, %1783
  %1785 = fsub fast float 5.000000e-01, %1784
  %1786 = fmul fast float %1785, 5.000000e-01
  %1787 = fadd fast float %1786, %1784
  %1788 = fmul fast float %1787, 0x3FC75C2920000000
  %1789 = fadd fast float %1788, 0x3FC2E147A0000000
  %1790 = fmul fast float %1789, %1775
  %1791 = fmul fast float %1781, 5.000000e-01
  %1792 = fmul fast float %1766, 0x3FD3333340000000
  %1793 = fadd fast float %1792, 0x3FE6666660000000
  %1794 = fsub fast float 0x3FD3333340000000, %1792
  %1795 = fmul fast float %1794, %1769
  %1796 = fadd fast float %1793, %1795
  %1797 = fadd fast float %1796, %1791
  %1798 = call float @dx.op.unary.f32(i32 7, float %1797)  ; Saturate(value)
  %1799 = call float @dx.op.unary.f32(i32 7, float %1790)  ; Saturate(value)
  %1800 = call float @dx.op.unary.f32(i32 7, float %1798)  ; Saturate(value)
  %1801 = fmul fast float %1800, %60
  %1802 = fadd fast float %1801, %59
  %1803 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1804 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %1659, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1805 = extractvalue %dx.types.ResRet.f32 %1804, 0
  %1806 = bitcast float %1805 to i32
  %1807 = and i32 %1806, 8
  %1808 = icmp ne i32 %1807, 0
  %1809 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 196)  ; CBufferLoadLegacy(handle,regIndex)
  %1810 = extractvalue %dx.types.CBufRet.f32 %1809, 3
  %1811 = fcmp fast ogt float %1810, 0.000000e+00
  %1812 = and i1 %1811, %1808
  br i1 %1812, label %1813, label %1865, !dx.controlflow.hints !64

; <label>:1813                                    ; preds = %1627
  %1814 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %1815 = extractvalue %dx.types.CBufRet.f32 %1814, 2
  %1816 = extractvalue %dx.types.CBufRet.f32 %1814, 3
  %1817 = fmul fast float %1815, %30
  %1818 = fmul fast float %1816, %31
  %1819 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1820 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %22, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1821 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1819, %dx.types.Handle %1820, float %1817, float %1818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1822 = extractvalue %dx.types.ResRet.f32 %1821, 0
  %1823 = extractvalue %dx.types.ResRet.f32 %1821, 1
  %1824 = extractvalue %dx.types.ResRet.f32 %1821, 2
  %1825 = extractvalue %dx.types.ResRet.f32 %1821, 3
  %1826 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1827 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %21, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1828 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1826, %dx.types.Handle %1827, float %1817, float %1818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1829 = extractvalue %dx.types.ResRet.f32 %1828, 0
  %1830 = extractvalue %dx.types.ResRet.f32 %1828, 1
  %1831 = extractvalue %dx.types.ResRet.f32 %1828, 2
  %1832 = extractvalue %dx.types.ResRet.f32 %1828, 3
  %1833 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1834 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %20, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1835 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1833, %dx.types.Handle %1834, float %1817, float %1818, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1836 = extractvalue %dx.types.ResRet.f32 %1835, 0
  %1837 = extractvalue %dx.types.ResRet.f32 %1835, 1
  %1838 = extractvalue %dx.types.ResRet.f32 %1835, 2
  %1839 = extractvalue %dx.types.ResRet.f32 %1835, 3
  %1840 = fmul fast float %1829, 2.000000e+00
  %1841 = fmul fast float %1830, 2.000000e+00
  %1842 = fmul fast float %1831, 2.000000e+00
  %1843 = fadd fast float %1840, 0xBFF0101020000000
  %1844 = fadd fast float %1841, 0xBFF0101020000000
  %1845 = fadd fast float %1842, 0xBFF0101020000000
  %1846 = fmul fast float %1825, %1799
  %1847 = fadd fast float %1846, %1822
  %1848 = fadd fast float %1846, %1823
  %1849 = fadd fast float %1846, %1824
  %1850 = fmul fast float %1832, %1727
  %1851 = fmul fast float %1832, %1728
  %1852 = fmul fast float %1832, %1729
  %1853 = fadd fast float %1843, %1850
  %1854 = fadd fast float %1844, %1851
  %1855 = fadd fast float %1845, %1852
  %1856 = call float @dx.op.dot3.f32(i32 55, float %1853, float %1854, float %1855, float %1853, float %1854, float %1855)  ; Dot3(ax,ay,az,bx,by,bz)
  %1857 = call float @dx.op.unary.f32(i32 25, float %1856)  ; Rsqrt(value)
  %1858 = fmul fast float %1857, %1853
  %1859 = fmul fast float %1857, %1854
  %1860 = fmul fast float %1857, %1855
  %1861 = fmul fast float %1839, %1802
  %1862 = fadd fast float %1861, %1838
  %1863 = fmul fast float %1839, 5.000000e-01
  %1864 = fadd fast float %1863, %1837
  br label %1865

; <label>:1865                                    ; preds = %1813, %1627
  %1866 = phi float [ %1858, %1813 ], [ %1727, %1627 ]
  %1867 = phi float [ %1859, %1813 ], [ %1728, %1627 ]
  %1868 = phi float [ %1860, %1813 ], [ %1729, %1627 ]
  %1869 = phi float [ %1847, %1813 ], [ %1799, %1627 ]
  %1870 = phi float [ %1848, %1813 ], [ %1799, %1627 ]
  %1871 = phi float [ %1849, %1813 ], [ %1799, %1627 ]
  %1872 = phi float [ %1836, %1813 ], [ 0.000000e+00, %1627 ]
  %1873 = phi float [ %1864, %1813 ], [ 5.000000e-01, %1627 ]
  %1874 = phi float [ %1862, %1813 ], [ %1802, %1627 ]
  %1875 = and i32 %1806, 256
  %1876 = icmp ne i32 %1875, 0
  %1877 = and i32 %1806, 512
  %1878 = icmp ne i32 %1877, 0
  %1879 = select i1 %1878, float 1.000000e+00, float 0.000000e+00
  %1880 = select i1 %1876, float 2.000000e+00, float 0.000000e+00
  %1881 = fadd fast float %1880, %1879
  %1882 = fmul fast float %1881, 0x3FD5555560000000
  %1883 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %1884 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %19, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %1885 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %1883, %dx.types.Handle %1884, float %1630, float %1631, float undef, float undef, i32 0, i32 0, i32 undef, float %1634, float %1635, float undef, float %1634, float %1635, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %1886 = extractvalue %dx.types.ResRet.f32 %1885, 0
  %1887 = extractvalue %dx.types.ResRet.f32 %1885, 1
  %1888 = extractvalue %dx.types.ResRet.f32 %1885, 2
  %1889 = extractvalue %dx.types.ResRet.f32 %1885, 3
  %1890 = add i32 %1638, 1
  %1891 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %1892 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %1890, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1893 = extractvalue %dx.types.ResRet.f32 %1892, 0
  %1894 = extractvalue %dx.types.ResRet.f32 %1892, 1
  %1895 = extractvalue %dx.types.ResRet.f32 %1892, 2
  %1896 = extractvalue %dx.types.ResRet.f32 %1892, 3
  %1897 = fmul fast float %1893, 5.000000e-01
  %1898 = fmul fast float %1894, 5.000000e-01
  %1899 = fmul fast float %1895, 5.000000e-01
  %1900 = fmul fast float %1896, 5.000000e-01
  %1901 = fsub fast float 5.000000e-01, %1897
  %1902 = fsub fast float 5.000000e-01, %1898
  %1903 = fsub fast float 5.000000e-01, %1899
  %1904 = fsub fast float 5.000000e-01, %1900
  %1905 = fmul fast float %1893, %1886
  %1906 = fmul fast float %1894, %1887
  %1907 = fmul fast float %1895, %1888
  %1908 = fmul fast float %1896, %1889
  %1909 = fadd fast float %1901, %1905
  %1910 = fadd fast float %1902, %1906
  %1911 = fadd fast float %1903, %1907
  %1912 = fadd fast float %1904, %1908
  %1913 = call float @dx.op.unary.f32(i32 7, float %1909)  ; Saturate(value)
  %1914 = call float @dx.op.unary.f32(i32 7, float %1910)  ; Saturate(value)
  %1915 = call float @dx.op.unary.f32(i32 7, float %1911)  ; Saturate(value)
  %1916 = call float @dx.op.unary.f32(i32 7, float %1912)  ; Saturate(value)
  %1917 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %1638, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1918 = extractvalue %dx.types.ResRet.f32 %1917, 0
  %1919 = extractvalue %dx.types.ResRet.f32 %1917, 1
  %1920 = extractvalue %dx.types.ResRet.f32 %1917, 2
  %1921 = extractvalue %dx.types.ResRet.f32 %1917, 3
  %1922 = fmul fast float %1913, %1913
  %1923 = fmul fast float %1922, %1918
  %1924 = fmul fast float %1914, %1914
  %1925 = fmul fast float %1924, %1919
  %1926 = fmul fast float %1915, %1915
  %1927 = fmul fast float %1926, %1920
  %1928 = fmul fast float %1916, %1916
  %1929 = fmul fast float %1928, %1921
  %1930 = and i32 %1806, 32
  %1931 = icmp eq i32 %1930, 0
  br i1 %1931, label %1979, label %1932, !dx.controlflow.hints !65

; <label>:1932                                    ; preds = %1865
  %1933 = fdiv fast float %1639, %1642
  %1934 = fdiv fast float %1640, %1642
  %1935 = fsub fast float %1933, %43
  %1936 = fsub fast float %1934, %44
  %1937 = fdiv fast float %1643, %1646
  %1938 = fdiv fast float %1644, %1646
  %1939 = fsub fast float %1937, %45
  %1940 = fsub fast float %1938, %46
  %1941 = fdiv fast float %1641, %1642
  %1942 = fdiv fast float %1645, %1646
  %1943 = fsub fast float %1935, %1939
  %1944 = fsub fast float %1936, %1940
  %1945 = fsub fast float %1941, %1942
  %1946 = fcmp fast ogt float %1943, 0.000000e+00
  %1947 = fcmp fast ogt float %1944, 0.000000e+00
  %1948 = fcmp fast olt float %1943, 0.000000e+00
  %1949 = fcmp fast olt float %1944, 0.000000e+00
  %1950 = zext i1 %1946 to i32
  %1951 = zext i1 %1947 to i32
  %1952 = zext i1 %1948 to i32
  %1953 = zext i1 %1949 to i32
  %1954 = sub nsw i32 %1950, %1952
  %1955 = sub nsw i32 %1951, %1953
  %1956 = sitofp i32 %1954 to float
  %1957 = sitofp i32 %1955 to float
  %1958 = call float @dx.op.unary.f32(i32 6, float %1943)  ; FAbs(value)
  %1959 = call float @dx.op.unary.f32(i32 6, float %1944)  ; FAbs(value)
  %1960 = call float @dx.op.unary.f32(i32 24, float %1958)  ; Sqrt(value)
  %1961 = call float @dx.op.unary.f32(i32 24, float %1959)  ; Sqrt(value)
  %1962 = fmul fast float %1960, 0x3FD69508A0000000
  %1963 = fmul fast float %1962, %1956
  %1964 = fmul fast float %1961, 0x3FD69508A0000000
  %1965 = fmul fast float %1964, %1957
  %1966 = fadd fast float %1963, 0x3FDFFFE000000000
  %1967 = fadd fast float %1965, 0x3FDFFFE000000000
  %1968 = bitcast float %1945 to i32
  %1969 = lshr i32 %1968, 16
  %1970 = uitofp i32 %1969 to float
  %1971 = fmul fast float %1970, 0x3EF0001000000000
  %1972 = fadd fast float %1971, 0x3EB999B340000000
  %1973 = call float @dx.op.unary.f32(i32 7, float %1972)  ; Saturate(value)
  %1974 = and i32 %1968, 65535
  %1975 = uitofp i32 %1974 to float
  %1976 = fmul fast float %1975, 0x3EF0001000000000
  %1977 = fadd fast float %1976, 0x3EB999B340000000
  %1978 = call float @dx.op.unary.f32(i32 7, float %1977)  ; Saturate(value)
  br label %1979

; <label>:1979                                    ; preds = %1932, %1865
  %1980 = phi float [ %1966, %1932 ], [ 0.000000e+00, %1865 ]
  %1981 = phi float [ %1967, %1932 ], [ 0.000000e+00, %1865 ]
  %1982 = phi float [ %1973, %1932 ], [ 0.000000e+00, %1865 ]
  %1983 = phi float [ %1978, %1932 ], [ 0.000000e+00, %1865 ]
  %1984 = fmul fast float %1873, 0x3FB47AE140000000
  %1985 = fsub fast float %1869, %1984
  %1986 = fsub fast float %1870, %1984
  %1987 = fsub fast float %1871, %1984
  %1988 = fmul fast float %1985, %1872
  %1989 = fmul fast float %1986, %1872
  %1990 = fmul fast float %1987, %1872
  %1991 = fadd fast float %1988, %1984
  %1992 = fadd fast float %1989, %1984
  %1993 = fadd fast float %1990, %1984
  %1994 = fmul fast float %1872, %1869
  %1995 = fmul fast float %1872, %1870
  %1996 = fmul fast float %1872, %1871
  %1997 = fsub fast float %1869, %1994
  %1998 = fsub fast float %1870, %1995
  %1999 = fsub fast float %1871, %1996
  %2000 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 137)  ; CBufferLoadLegacy(handle,regIndex)
  %2001 = extractvalue %dx.types.CBufRet.f32 %2000, 3
  %2002 = fmul fast float %2001, %1997
  %2003 = fmul fast float %2001, %1998
  %2004 = fmul fast float %2001, %1999
  %2005 = extractvalue %dx.types.CBufRet.f32 %2000, 0
  %2006 = extractvalue %dx.types.CBufRet.f32 %2000, 1
  %2007 = extractvalue %dx.types.CBufRet.f32 %2000, 2
  %2008 = fadd fast float %2002, %2005
  %2009 = fadd fast float %2003, %2006
  %2010 = fadd fast float %2004, %2007
  %2011 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %2012 = extractvalue %dx.types.CBufRet.f32 %2011, 3
  %2013 = fmul fast float %2012, %1991
  %2014 = fmul fast float %2012, %1992
  %2015 = fmul fast float %2012, %1993
  %2016 = extractvalue %dx.types.CBufRet.f32 %2011, 0
  %2017 = extractvalue %dx.types.CBufRet.f32 %2011, 1
  %2018 = extractvalue %dx.types.CBufRet.f32 %2011, 2
  %2019 = fadd fast float %2013, %2016
  %2020 = fadd fast float %2014, %2017
  %2021 = fadd fast float %2015, %2018
  %2022 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 183)  ; CBufferLoadLegacy(handle,regIndex)
  %2023 = extractvalue %dx.types.CBufRet.f32 %2022, 3
  %2024 = fcmp fast une float %2023, 0.000000e+00
  %2025 = fmul fast float %2019, 0x3FDCCCCCC0000000
  %2026 = fmul fast float %2020, 0x3FDCCCCCC0000000
  %2027 = fmul fast float %2021, 0x3FDCCCCCC0000000
  %2028 = fadd fast float %2025, %2008
  %2029 = fadd fast float %2026, %2009
  %2030 = fadd fast float %2027, %2010
  %2031 = select i1 %2024, float %2028, float %2008
  %2032 = select i1 %2024, float %2029, float %2009
  %2033 = select i1 %2024, float %2030, float %2010
  %2034 = select i1 %2024, float 0.000000e+00, float %2019
  %2035 = select i1 %2024, float 0.000000e+00, float %2020
  %2036 = select i1 %2024, float 0.000000e+00, float %2021
  %2037 = call float @dx.op.dot3.f32(i32 55, float %2034, float %2035, float %2036, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2038 = fmul fast float %2037, 0x3F40600000000000
  %2039 = fadd fast float %2038, 0x3FEFFCB940000000
  %2040 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2039)  ; FMax(a,b)
  %2041 = fadd fast float %1629, 5.000000e-01
  %2042 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2043 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2042, %dx.types.Handle %1884, float %1628, float %1629, float undef, float undef, i32 0, i32 0, i32 undef, float %1632, float %1633, float undef, float %1636, float %1637, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2044 = extractvalue %dx.types.ResRet.f32 %2043, 0
  %2045 = extractvalue %dx.types.ResRet.f32 %2043, 1
  %2046 = extractvalue %dx.types.ResRet.f32 %2043, 2
  %2047 = extractvalue %dx.types.ResRet.f32 %2043, 3
  %2048 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2042, %dx.types.Handle %1884, float %1628, float %2041, float undef, float undef, i32 0, i32 0, i32 undef, float %1632, float %1633, float undef, float %1636, float %1637, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2049 = extractvalue %dx.types.ResRet.f32 %2048, 0
  %2050 = extractvalue %dx.types.ResRet.f32 %2048, 1
  %2051 = extractvalue %dx.types.ResRet.f32 %2048, 2
  %2052 = extractvalue %dx.types.ResRet.f32 %2048, 3
  %2053 = fmul fast float %2052, 0x3F70101020000000
  %2054 = fadd fast float %2047, 0xBF60101020000000
  %2055 = fadd fast float %2054, %2053
  %2056 = add i32 %1638, 4
  %2057 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %2056, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2058 = extractvalue %dx.types.ResRet.f32 %2057, 3
  %2059 = fmul fast float %2055, %2058
  %2060 = add i32 %1638, 6
  %2061 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %2060, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2062 = extractvalue %dx.types.ResRet.f32 %2061, 3
  %2063 = fadd fast float %2062, %2059
  %2064 = fmul fast float %2044, %2044
  %2065 = fmul fast float %2045, %2045
  %2066 = fmul fast float %2046, %2046
  %2067 = extractvalue %dx.types.ResRet.f32 %2057, 0
  %2068 = extractvalue %dx.types.ResRet.f32 %2057, 1
  %2069 = extractvalue %dx.types.ResRet.f32 %2057, 2
  %2070 = fmul fast float %2064, %2067
  %2071 = fmul fast float %2065, %2068
  %2072 = fmul fast float %2066, %2069
  %2073 = extractvalue %dx.types.ResRet.f32 %2061, 0
  %2074 = extractvalue %dx.types.ResRet.f32 %2061, 1
  %2075 = extractvalue %dx.types.ResRet.f32 %2061, 2
  %2076 = fadd fast float %2073, %2070
  %2077 = fadd fast float %2074, %2071
  %2078 = fadd fast float %2075, %2072
  %2079 = call float @dx.op.unary.f32(i32 21, float %2063)  ; Exp(value)
  %2080 = fadd fast float %2079, 0xBF9306FE00000000
  %2081 = add i32 %1638, 5
  %2082 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %2081, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2083 = extractvalue %dx.types.ResRet.f32 %2082, 0
  %2084 = extractvalue %dx.types.ResRet.f32 %2082, 1
  %2085 = extractvalue %dx.types.ResRet.f32 %2082, 2
  %2086 = extractvalue %dx.types.ResRet.f32 %2082, 3
  %2087 = fmul fast float %2083, %2049
  %2088 = fmul fast float %2084, %2050
  %2089 = fmul fast float %2085, %2051
  %2090 = fmul fast float %2086, %2052
  %2091 = add i32 %1638, 7
  %2092 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1891, i32 %2091, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2093 = extractvalue %dx.types.ResRet.f32 %2092, 0
  %2094 = extractvalue %dx.types.ResRet.f32 %2092, 1
  %2095 = extractvalue %dx.types.ResRet.f32 %2092, 2
  %2096 = extractvalue %dx.types.ResRet.f32 %2092, 3
  %2097 = fadd fast float %2093, %2087
  %2098 = fadd fast float %2094, %2088
  %2099 = fadd fast float %2095, %2089
  %2100 = fadd fast float %2096, %2090
  %2101 = call float @dx.op.dot4.f32(i32 56, float %2097, float %2098, float %2099, float %2100, float %1867, float %1868, float %1866, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2102 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2101)  ; FMax(a,b)
  %2103 = fmul fast float %2102, %2080
  %2104 = fmul fast float %2103, %2076
  %2105 = fmul fast float %2103, %2077
  %2106 = fmul fast float %2103, %2078
  %2107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 159)  ; CBufferLoadLegacy(handle,regIndex)
  %2108 = extractvalue %dx.types.CBufRet.f32 %2107, 0
  %2109 = extractvalue %dx.types.CBufRet.f32 %2107, 1
  %2110 = extractvalue %dx.types.CBufRet.f32 %2107, 2
  %2111 = fmul fast float %2104, %2108
  %2112 = fmul fast float %2105, %2109
  %2113 = fmul fast float %2106, %2110
  %2114 = icmp eq i32 %33, 0
  br i1 %2114, label %2231, label %2115

; <label>:2115                                    ; preds = %1979
  %2116 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 186)  ; CBufferLoadLegacy(handle,regIndex)
  %2117 = extractvalue %dx.types.CBufRet.f32 %2116, 1
  %2118 = fcmp fast une float %2117, 0.000000e+00
  br i1 %2118, label %2119, label %2158, !dx.controlflow.hints !66

; <label>:2119                                    ; preds = %2115
  %2120 = fmul fast float %1629, 2.000000e+00
  %2121 = fmul fast float %1633, 2.000000e+00
  %2122 = fmul fast float %1637, 2.000000e+00
  %2123 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 2, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture2D<4xF32>
  %2124 = call %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32 63, %dx.types.Handle %2123, %dx.types.Handle %1884, float %1628, float %2120, float undef, float undef, i32 0, i32 0, i32 undef, float %1632, float %2121, float undef, float %1636, float %2122, float undef, float undef)  ; SampleGrad(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)
  %2125 = extractvalue %dx.types.ResRet.f32 %2124, 0
  %2126 = extractvalue %dx.types.ResRet.f32 %2124, 1
  %2127 = extractvalue %dx.types.ResRet.f32 %2124, 2
  %2128 = extractvalue %dx.types.ResRet.f32 %2124, 3
  %2129 = fmul fast float %2125, 2.000000e+00
  %2130 = fmul fast float %2126, 2.000000e+00
  %2131 = fmul fast float %2127, 2.000000e+00
  %2132 = fadd fast float %2129, -1.000000e+00
  %2133 = fadd fast float %2130, -1.000000e+00
  %2134 = fadd fast float %2131, -1.000000e+00
  %2135 = fmul fast float %2128, %2128
  %2136 = call float @dx.op.dot3.f32(i32 55, float %2132, float %2133, float %2134, float %2132, float %2133, float %2134)  ; Dot3(ax,ay,az,bx,by,bz)
  %2137 = call float @dx.op.unary.f32(i32 25, float %2136)  ; Rsqrt(value)
  %2138 = fmul fast float %2132, %2137
  %2139 = fmul fast float %2133, %2137
  %2140 = fmul fast float %2134, %2137
  %2141 = fsub fast float 1.000000e+00, %2135
  %2142 = fmul fast float %2141, %2141
  %2143 = fsub fast float 1.000000e+00, %2142
  %2144 = fsub fast float %1866, %2138
  %2145 = fsub fast float %1867, %2139
  %2146 = fsub fast float %1868, %2140
  %2147 = fmul fast float %2143, %2144
  %2148 = fmul fast float %2143, %2145
  %2149 = fmul fast float %2143, %2146
  %2150 = fadd fast float %2147, %2138
  %2151 = fadd fast float %2148, %2139
  %2152 = fadd fast float %2149, %2140
  %2153 = call float @dx.op.dot3.f32(i32 55, float %2138, float %2139, float %2140, float %1866, float %1867, float %1868)  ; Dot3(ax,ay,az,bx,by,bz)
  %2154 = call float @dx.op.unary.f32(i32 7, float %2153)  ; Saturate(value)
  %2155 = fsub fast float 1.000000e+00, %2154
  %2156 = fmul fast float %2143, %2155
  %2157 = fadd fast float %2156, %2154
  br label %2158

; <label>:2158                                    ; preds = %2119, %2115
  %2159 = phi float [ %2135, %2119 ], [ 1.000000e+00, %2115 ]
  %2160 = phi float [ %2157, %2119 ], [ 1.000000e+00, %2115 ]
  %2161 = phi float [ %2150, %2119 ], [ %1866, %2115 ]
  %2162 = phi float [ %2151, %2119 ], [ %1867, %2115 ]
  %2163 = phi float [ %2152, %2119 ], [ %1868, %2115 ]
  %2164 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %2165 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2166 = extractvalue %dx.types.ResRet.f32 %2165, 0
  %2167 = extractvalue %dx.types.ResRet.f32 %2165, 1
  %2168 = extractvalue %dx.types.ResRet.f32 %2165, 2
  %2169 = extractvalue %dx.types.ResRet.f32 %2165, 3
  %2170 = call float @dx.op.dot4.f32(i32 56, float %2166, float %2167, float %2168, float %2169, float %2161, float %2162, float %2163, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2172 = extractvalue %dx.types.ResRet.f32 %2171, 0
  %2173 = extractvalue %dx.types.ResRet.f32 %2171, 1
  %2174 = extractvalue %dx.types.ResRet.f32 %2171, 2
  %2175 = extractvalue %dx.types.ResRet.f32 %2171, 3
  %2176 = call float @dx.op.dot4.f32(i32 56, float %2172, float %2173, float %2174, float %2175, float %2161, float %2162, float %2163, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2177 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2178 = extractvalue %dx.types.ResRet.f32 %2177, 0
  %2179 = extractvalue %dx.types.ResRet.f32 %2177, 1
  %2180 = extractvalue %dx.types.ResRet.f32 %2177, 2
  %2181 = extractvalue %dx.types.ResRet.f32 %2177, 3
  %2182 = call float @dx.op.dot4.f32(i32 56, float %2178, float %2179, float %2180, float %2181, float %2161, float %2162, float %2163, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2183 = fmul fast float %2162, %2161
  %2184 = fmul fast float %2163, %2162
  %2185 = fmul fast float %2163, %2163
  %2186 = fmul fast float %2163, %2161
  %2187 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2188 = extractvalue %dx.types.ResRet.f32 %2187, 0
  %2189 = extractvalue %dx.types.ResRet.f32 %2187, 1
  %2190 = extractvalue %dx.types.ResRet.f32 %2187, 2
  %2191 = extractvalue %dx.types.ResRet.f32 %2187, 3
  %2192 = call float @dx.op.dot4.f32(i32 56, float %2188, float %2189, float %2190, float %2191, float %2183, float %2184, float %2185, float %2186)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2193 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2194 = extractvalue %dx.types.ResRet.f32 %2193, 0
  %2195 = extractvalue %dx.types.ResRet.f32 %2193, 1
  %2196 = extractvalue %dx.types.ResRet.f32 %2193, 2
  %2197 = extractvalue %dx.types.ResRet.f32 %2193, 3
  %2198 = call float @dx.op.dot4.f32(i32 56, float %2194, float %2195, float %2196, float %2197, float %2183, float %2184, float %2185, float %2186)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2199 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2200 = extractvalue %dx.types.ResRet.f32 %2199, 0
  %2201 = extractvalue %dx.types.ResRet.f32 %2199, 1
  %2202 = extractvalue %dx.types.ResRet.f32 %2199, 2
  %2203 = extractvalue %dx.types.ResRet.f32 %2199, 3
  %2204 = call float @dx.op.dot4.f32(i32 56, float %2200, float %2201, float %2202, float %2203, float %2183, float %2184, float %2185, float %2186)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %2205 = fmul fast float %2161, %2161
  %2206 = fmul fast float %2162, %2162
  %2207 = fsub fast float %2205, %2206
  %2208 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %2164, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2209 = extractvalue %dx.types.ResRet.f32 %2208, 0
  %2210 = extractvalue %dx.types.ResRet.f32 %2208, 1
  %2211 = extractvalue %dx.types.ResRet.f32 %2208, 2
  %2212 = fmul fast float %2209, %2207
  %2213 = fmul fast float %2210, %2207
  %2214 = fmul fast float %2211, %2207
  %2215 = fadd fast float %2192, %2170
  %2216 = fadd fast float %2198, %2176
  %2217 = fadd fast float %2204, %2182
  %2218 = fadd fast float %2215, %2212
  %2219 = fadd fast float %2216, %2213
  %2220 = fadd fast float %2217, %2214
  %2221 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2218)  ; FMax(a,b)
  %2222 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2219)  ; FMax(a,b)
  %2223 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %2220)  ; FMax(a,b)
  %2224 = fmul fast float %2160, %2159
  %2225 = fmul fast float %2224, %62
  %2226 = fmul fast float %2225, %2221
  %2227 = fmul fast float %2224, %63
  %2228 = fmul fast float %2227, %2222
  %2229 = fmul fast float %2224, %64
  %2230 = fmul fast float %2229, %2223
  br label %2231

; <label>:2231                                    ; preds = %2158, %1979
  %2232 = phi float [ %2226, %2158 ], [ 0.000000e+00, %1979 ]
  %2233 = phi float [ %2228, %2158 ], [ 0.000000e+00, %1979 ]
  %2234 = phi float [ %2230, %2158 ], [ 0.000000e+00, %1979 ]
  %2235 = fadd fast float %2232, %2111
  %2236 = fadd fast float %2233, %2112
  %2237 = fadd fast float %2234, %2113
  %2238 = call float @dx.op.dot3.f32(i32 55, float %2235, float %2236, float %2237, float 0x3FD3333340000000, float 0x3FE2E147A0000000, float 0x3FBC28F5C0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2239 = fmul fast float %2235, %2031
  %2240 = fmul fast float %2236, %2032
  %2241 = fmul fast float %2237, %2033
  %2242 = fmul fast float %1869, 0x3F40600000000000
  %2243 = fadd fast float %2242, 0x3FEFFCB940000000
  %2244 = fmul fast float %1870, 0x3F40600000000000
  %2245 = fadd fast float %2244, 0x3FEFFCB940000000
  %2246 = fmul fast float %1871, 0x3F40600000000000
  %2247 = fadd fast float %2246, 0x3FEFFCB940000000
  %2248 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2243)  ; FMax(a,b)
  %2249 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2245)  ; FMax(a,b)
  %2250 = call float @dx.op.binary.f32(i32 35, float 1.000000e+00, float %2247)  ; FMax(a,b)
  %2251 = fmul fast float %2239, %2248
  %2252 = fmul fast float %2240, %2249
  %2253 = fmul fast float %2241, %2250
  %2254 = fmul fast float %2034, 0x3FDCCCCCC0000000
  %2255 = fmul fast float %2035, 0x3FDCCCCCC0000000
  %2256 = fmul fast float %2036, 0x3FDCCCCCC0000000
  %2257 = fadd fast float %2031, %2254
  %2258 = fadd fast float %2032, %2255
  %2259 = fadd fast float %2033, %2256
  %2260 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 146)  ; CBufferLoadLegacy(handle,regIndex)
  %2261 = extractvalue %dx.types.CBufRet.f32 %2260, 1
  %2262 = fmul fast float %2261, %2257
  %2263 = fmul fast float %2261, %2258
  %2264 = fmul fast float %2261, %2259
  %2265 = call float @dx.op.binary.f32(i32 35, float %1735, float 0.000000e+00)  ; FMax(a,b)
  %2266 = call float @dx.op.binary.f32(i32 35, float %1736, float 0.000000e+00)  ; FMax(a,b)
  %2267 = call float @dx.op.binary.f32(i32 35, float %1737, float 0.000000e+00)  ; FMax(a,b)
  %2268 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 141)  ; CBufferLoadLegacy(handle,regIndex)
  %2269 = extractvalue %dx.types.CBufRet.f32 %2268, 0
  %2270 = fcmp fast ogt float %2269, 0.000000e+00
  br i1 %2270, label %2271, label %2338, !dx.controlflow.hints !67

; <label>:2271                                    ; preds = %2231
  %2272 = add nsw i32 %1659, 1
  %2273 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2272, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2274 = extractvalue %dx.types.ResRet.f32 %2273, 0
  %2275 = extractvalue %dx.types.ResRet.f32 %2273, 1
  %2276 = extractvalue %dx.types.ResRet.f32 %2273, 2
  %2277 = add nsw i32 %1659, 18
  %2278 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2277, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2279 = extractvalue %dx.types.ResRet.f32 %2278, 0
  %2280 = extractvalue %dx.types.ResRet.f32 %2278, 1
  %2281 = extractvalue %dx.types.ResRet.f32 %2278, 2
  %2282 = add nsw i32 %1659, 17
  %2283 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2282, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2284 = extractvalue %dx.types.ResRet.f32 %2283, 3
  %2285 = add nsw i32 %1659, 24
  %2286 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2285, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2287 = extractvalue %dx.types.ResRet.f32 %2286, 3
  %2288 = add nsw i32 %1659, 25
  %2289 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2288, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2290 = extractvalue %dx.types.ResRet.f32 %2289, 3
  %2291 = add nsw i32 %1659, 31
  %2292 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1803, i32 %2291, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %2293 = extractvalue %dx.types.ResRet.f32 %2292, 0
  %2294 = fsub fast float %35, %2274
  %2295 = fsub fast float %36, %2275
  %2296 = fsub fast float %37, %2276
  %2297 = fmul fast float %2294, 2.097152e+06
  %2298 = fmul fast float %2295, 2.097152e+06
  %2299 = fmul fast float %2296, 2.097152e+06
  %2300 = fadd fast float %2297, %1666
  %2301 = fsub fast float %2300, %2279
  %2302 = fadd fast float %2298, %1667
  %2303 = fsub fast float %2302, %2280
  %2304 = fadd fast float %2299, %1668
  %2305 = fsub fast float %2304, %2281
  %2306 = call float @dx.op.unary.f32(i32 6, float %2301)  ; FAbs(value)
  %2307 = call float @dx.op.unary.f32(i32 6, float %2303)  ; FAbs(value)
  %2308 = call float @dx.op.unary.f32(i32 6, float %2305)  ; FAbs(value)
  %2309 = fadd fast float %2284, 1.000000e+00
  %2310 = fadd fast float %2287, 1.000000e+00
  %2311 = fadd fast float %2290, 1.000000e+00
  %2312 = fcmp fast ogt float %2306, %2309
  %2313 = fcmp fast ogt float %2307, %2310
  %2314 = fcmp fast ogt float %2308, %2311
  %2315 = or i1 %2312, %2313
  %2316 = or i1 %2315, %2314
  br i1 %2316, label %2317, label %2330

; <label>:2317                                    ; preds = %2271
  %2318 = fadd fast float %1667, %1666
  %2319 = fadd fast float %35, %36
  %2320 = fadd fast float %2318, %1668
  %2321 = fadd fast float %2319, %37
  %2322 = fmul fast float %2320, 0x3F52E83A20000000
  %2323 = fmul fast float %2321, 0x40A2E83A20000000
  %2324 = call float @dx.op.unary.f32(i32 22, float %2323)  ; Frc(value)
  %2325 = fadd fast float %2324, %2322
  %2326 = call float @dx.op.unary.f32(i32 22, float %2325)  ; Frc(value)
  %2327 = fcmp fast ogt float %2326, 5.000000e-01
  %2328 = uitofp i1 %2327 to float
  %2329 = fsub fast float 1.000000e+00, %2328
  br label %2338

; <label>:2330                                    ; preds = %2271
  %2331 = fcmp fast ogt float %2293, 0.000000e+00
  br i1 %2331, label %2332, label %2338

; <label>:2332                                    ; preds = %2330
  %2333 = fsub fast float -0.000000e+00, %2293
  %2334 = call float @dx.op.unary.f32(i32 6, float %2333)  ; FAbs(value)
  %2335 = fmul fast float %2334, 2.000000e+01
  %2336 = call float @dx.op.unary.f32(i32 7, float %2335)  ; Saturate(value)
  %2337 = fsub fast float 1.000000e+00, %2336
  br label %2338

; <label>:2338                                    ; preds = %2332, %2330, %2317, %2231
  %2339 = phi float [ %2329, %2317 ], [ %2337, %2332 ], [ %2265, %2330 ], [ %2265, %2231 ]
  %2340 = phi float [ 1.000000e+00, %2317 ], [ 0.000000e+00, %2332 ], [ %2266, %2330 ], [ %2266, %2231 ]
  %2341 = phi float [ %2328, %2317 ], [ %2337, %2332 ], [ %2267, %2330 ], [ %2267, %2231 ]
  %2342 = fadd fast float %2262, %2251
  %2343 = fadd fast float %2263, %2252
  %2344 = fadd fast float %2264, %2253
  %2345 = fadd fast float %2342, %2339
  %2346 = fadd fast float %2343, %2340
  %2347 = fadd fast float %2344, %2341
  %2348 = fmul fast float %30, 7.812500e-03
  %2349 = fmul fast float %31, 7.812500e-03
  %2350 = call float @dx.op.unary.f32(i32 22, float %2348)  ; Frc(value)
  %2351 = call float @dx.op.unary.f32(i32 22, float %2349)  ; Frc(value)
  %2352 = fmul fast float %2350, 1.280000e+02
  %2353 = fmul fast float %2351, 1.280000e+02
  %2354 = fadd fast float %2352, 0xC05015CCC0000000
  %2355 = fadd fast float %2353, 0xC0521DCCC0000000
  %2356 = fmul fast float %2354, %2354
  %2357 = fmul fast float %2355, %2355
  %2358 = fmul fast float %2355, %2354
  %2359 = call float @dx.op.dot3.f32(i32 55, float %2356, float %2357, float %2358, float 0x4034640000000000, float 0x404E5A0000000000, float 0x40036CCAA0000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %2360 = call float @dx.op.unary.f32(i32 22, float %2359)  ; Frc(value)
  %2361 = fadd fast float %2360, -5.000000e-01
  %2362 = fmul fast float %2238, %2040
  %2363 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %29, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %2364 = extractvalue %dx.types.CBufRet.f32 %2363, 1
  %2365 = fmul fast float %2362, %2364
  %2366 = fadd fast float %2365, 3.906250e-03
  %2367 = call float @dx.op.unary.f32(i32 23, float %2366)  ; Log(value)
  %2368 = fmul fast float %2367, 6.250000e-02
  %2369 = fmul fast float %2361, 0x3F70101020000000
  %2370 = fadd fast float %2369, 5.000000e-01
  %2371 = fadd fast float %2370, %2368
  %2372 = fmul fast float %1866, 5.000000e-01
  %2373 = fmul fast float %1867, 5.000000e-01
  %2374 = fmul fast float %1868, 5.000000e-01
  %2375 = fadd fast float %2372, 5.000000e-01
  %2376 = fadd fast float %2373, 5.000000e-01
  %2377 = fadd fast float %2374, 5.000000e-01
  %2378 = fmul fast float %2364, %2345
  %2379 = fmul fast float %2364, %2346
  %2380 = fmul fast float %2364, %2347
  %2381 = call float @dx.op.binary.f32(i32 36, float %2378, float 3.225600e+04)  ; FMin(a,b)
  %2382 = call float @dx.op.binary.f32(i32 36, float %2379, float 3.225600e+04)  ; FMin(a,b)
  %2383 = call float @dx.op.binary.f32(i32 36, float %2380, float 3.225600e+04)  ; FMin(a,b)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 0, float %2381)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 1, float %2382)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 2, float %2383)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 0, i32 0, i8 3, float 0.000000e+00)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 0, float %2375)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 1, float %2376)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 2, float %2377)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 1, i32 0, i8 3, float %1882)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 0, float %1872)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 1, float %1873)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 2, float %1874)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 2, i32 0, i8 3, float 0x3F70101020000000)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 0, float %1869)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 1, float %1870)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 2, float %1871)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 3, i32 0, i8 3, float %2371)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 0, float %1980)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 1, float %1981)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 2, float %1982)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 4, i32 0, i8 3, float %1983)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 0, float %1923)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 1, float %1925)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 2, float %1927)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  call void @dx.op.storeOutput.f32(i32 5, i32 5, i32 0, i8 3, float %1929)  ; StoreOutput(outputSigId,rowIndex,colIndex,value)
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.loadInput.f32(i32, i32, i32, i8, i32) #0

; Function Attrs: nounwind
declare void @dx.op.storeOutput.f32(i32, i32, i32, i8, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleGrad.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float, float, float, float, float, float, float) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.viewIdState = !{!37}
!dx.entryPoints = !{!38}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"ps", i32 6, i32 6}
!4 = !{!5, null, !25, !30}
!5 = !{!6, !8, !9, !10, !11, !12, !14, !15, !16, !17, !18, !19, !20, !21, !23, !24}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 3, i32 1, i32 12, i32 0, !7}
!11 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !7}
!12 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 2, i32 0, !13}
!13 = !{i32 0, i32 9}
!14 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 6, i32 1, i32 2, i32 0, !13}
!15 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 7, i32 1, i32 2, i32 0, !13}
!16 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 8, i32 1, i32 2, i32 0, !13}
!17 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 9, i32 1, i32 2, i32 0, !13}
!18 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 10, i32 1, i32 2, i32 0, !13}
!19 = !{i32 11, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 11, i32 1, i32 11, i32 0, null}
!20 = !{i32 12, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 12, i32 1, i32 11, i32 0, null}
!21 = !{i32 13, %"class.Texture2D<unsigned long long>"* undef, !"", i32 0, i32 13, i32 1, i32 2, i32 0, !22}
!22 = !{i32 0, i32 5}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 14, i32 1, i32 2, i32 0, !13}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* undef, !"", i32 0, i32 15, i32 1, i32 2, i32 0, !13}
!25 = !{!26, !27, !28, !29}
!26 = !{i32 0, %hostlayout.UniformBufferConstants_View* undef, !"", i32 0, i32 0, i32 1, i32 5388, null}
!27 = !{i32 1, %hostlayout.UniformBufferConstants_OpaqueBasePass* undef, !"", i32 0, i32 1, i32 1, i32 2428, null}
!28 = !{i32 2, %UniformBufferConstants_Nanite* undef, !"", i32 0, i32 2, i32 1, i32 180, null}
!29 = !{i32 3, %UniformBufferConstants_Material* undef, !"", i32 0, i32 3, i32 1, i32 76, null}
!30 = !{!31, !32, !33, !34, !35, !36}
!31 = !{i32 0, %struct.SamplerState* undef, !"", i32 0, i32 0, i32 1, i32 0, null}
!32 = !{i32 1, %struct.SamplerState* undef, !"", i32 0, i32 1, i32 1, i32 0, null}
!33 = !{i32 2, %struct.SamplerState* undef, !"", i32 0, i32 2, i32 1, i32 0, null}
!34 = !{i32 3, %struct.SamplerState* undef, !"", i32 0, i32 3, i32 1, i32 0, null}
!35 = !{i32 4, %struct.SamplerState* undef, !"", i32 0, i32 4, i32 1, i32 0, null}
!36 = !{i32 5, %struct.SamplerState* undef, !"", i32 0, i32 5, i32 1, i32 0, null}
!37 = !{[10 x i32] [i32 8, i32 28, i32 0, i32 0, i32 0, i32 0, i32 252704759, i32 252704759, i32 0, i32 0]}
!38 = !{void ()* @MainPS, !"MainPS", !39, !4, !60}
!39 = !{!40, !47, null}
!40 = !{!41, !43, !44, !46}
!41 = !{i32 0, !"PACKED_VIEW_INDEX", i8 5, i8 0, !42, i8 1, i32 1, i8 1, i32 0, i8 0, null}
!42 = !{i32 0}
!43 = !{i32 1, !"MACRO_TILE_INDEX", i8 5, i8 0, !42, i8 1, i32 1, i8 1, i32 0, i8 1, null}
!44 = !{i32 2, !"SV_Position", i8 9, i8 3, !42, i8 4, i32 1, i8 4, i32 1, i8 0, !45}
!45 = !{i32 3, i32 3}
!46 = !{i32 3, !"SV_IsFrontFace", i8 5, i8 13, !42, i8 1, i32 1, i8 1, i32 0, i8 2, null}
!47 = !{!48, !50, !52, !54, !56, !58}
!48 = !{i32 0, !"SV_Target", i8 9, i8 16, !42, i8 0, i32 1, i8 4, i32 0, i8 0, !49}
!49 = !{i32 3, i32 15}
!50 = !{i32 1, !"SV_Target", i8 9, i8 16, !51, i8 0, i32 1, i8 4, i32 1, i8 0, !49}
!51 = !{i32 1}
!52 = !{i32 2, !"SV_Target", i8 9, i8 16, !53, i8 0, i32 1, i8 4, i32 2, i8 0, !49}
!53 = !{i32 2}
!54 = !{i32 3, !"SV_Target", i8 9, i8 16, !55, i8 0, i32 1, i8 4, i32 3, i8 0, !49}
!55 = !{i32 3}
!56 = !{i32 4, !"SV_Target", i8 9, i8 16, !57, i8 0, i32 1, i8 4, i32 4, i8 0, !49}
!57 = !{i32 4}
!58 = !{i32 5, !"SV_Target", i8 9, i8 16, !59, i8 0, i32 1, i8 4, i32 6, i8 0, !49}
!59 = !{i32 6}
!60 = !{i32 0, i64 16, i32 5, !42}
!61 = distinct !{!61, !"dx.controlflow.hints", i32 1}
!62 = distinct !{!62, !"dx.controlflow.hints", i32 1}
!63 = distinct !{!63, !"dx.controlflow.hints", i32 1}
!64 = distinct !{!64, !"dx.controlflow.hints", i32 2}
!65 = distinct !{!65, !"dx.controlflow.hints", i32 1}
!66 = distinct !{!66, !"dx.controlflow.hints", i32 1}
!67 = distinct !{!67, !"dx.controlflow.hints", i32 1}
