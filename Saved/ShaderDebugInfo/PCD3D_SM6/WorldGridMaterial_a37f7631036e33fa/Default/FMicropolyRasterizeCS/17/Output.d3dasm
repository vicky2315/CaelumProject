;
; Note: shader requires additional functionality:
;       Wave level operations
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: a8a268daa35df6f31806eadb6957ec86
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(64,1,1)
;
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct $Globals
;   {
;
;       uint GPUSceneFrameNumber;                     ; Offset:    0
;       uint4 PageConstants;                          ; Offset:   16
;       uint MaxNodes;                                ; Offset:   32
;       uint MaxVisibleClusters;                      ; Offset:   36
;       uint RenderFlags;                             ; Offset:   40
;       float RayTracingCutError;                     ; Offset:   44
;       uint DebugFlags;                              ; Offset:   48
;       float2 HZBViewSize;                           ; Offset:   52
;       float2 HZBSize;                               ; Offset:   64
;       float4 DepthOfFieldParams;                    ; Offset:   80
;       uint bSceneLightingChannelsValid;             ; Offset:   96
;       uint MaxCandidateClusters;                    ; Offset:  100
;       uint ActiveRasterizerBin;                     ; Offset:  104
;       float2 HardwareViewportSize;                  ; Offset:  112
;       uint VisualizeModeBitMask;                    ; Offset:  120
;   
;   } $Globals;                                       ; Offset:    0 Size:   124
;
; }
;
; Resource bind info for GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for InViews
; {
;
;   struct hostlayout.struct.FPackedNaniteView
;   {
;
;       row_major float4x4 SVPositionToTranslatedWorld;; Offset:    0
;       row_major float4x4 ViewToTranslatedWorld;     ; Offset:   64
;       row_major float4x4 TranslatedWorldToView;     ; Offset:  128
;       row_major float4x4 TranslatedWorldToClip;     ; Offset:  192
;       row_major float4x4 TranslatedWorldToSubpixelClip;; Offset:  256
;       row_major float4x4 ViewToClip;                ; Offset:  320
;       row_major float4x4 ClipToRelativeWorld;       ; Offset:  384
;       row_major float4x4 PrevTranslatedWorldToView; ; Offset:  448
;       row_major float4x4 PrevTranslatedWorldToClip; ; Offset:  512
;       row_major float4x4 PrevViewToClip;            ; Offset:  576
;       row_major float4x4 PrevClipToRelativeWorld;   ; Offset:  640
;       int4 ViewRect;                                ; Offset:  704
;       float4 ViewSizeAndInvSize;                    ; Offset:  720
;       float4 ClipSpaceScaleOffset;                  ; Offset:  736
;       float3 RelativePreViewTranslation;            ; Offset:  752
;       float ViewTilePositionX;                      ; Offset:  764
;       float3 RelativePrevPreViewTranslation;        ; Offset:  768
;       float ViewTilePositionY;                      ; Offset:  780
;       float3 RelativeWorldCameraOrigin;             ; Offset:  784
;       float ViewTilePositionZ;                      ; Offset:  796
;       float3 DrawDistanceOriginTranslatedWorld;     ; Offset:  800
;       float RangeBasedCullingDistance;              ; Offset:  812
;       float3 ViewForward;                           ; Offset:  816
;       float NearPlane;                              ; Offset:  828
;       float4 TranslatedGlobalClipPlane;             ; Offset:  832
;       float3 MatrixTilePosition;                    ; Offset:  848
;       float Padding1;                               ; Offset:  860
;       float2 LODScales;                             ; Offset:  864
;       float MinBoundsRadiusSq;                      ; Offset:  872
;       uint StreamingPriorityCategory_AndFlags;      ; Offset:  876
;       int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;; Offset:  880
;       int4 HZBTestViewRect;                         ; Offset:  896
;   
;   } $Element;                                       ; Offset:    0 Size:   912
;
; }
;
; Resource bind info for RasterizerBinHeaders
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RasterizerBinData
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for InTotalPrevDrawClusters
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; GPUScenePrimitiveSceneData        texture  struct         r/o      T0             t0     1
; GPUSceneInstanceSceneData         texture  struct         r/o      T1             t1     1
; ClusterPageData                   texture    byte         r/o      T2             t2     1
; VisibleClustersSWHW               texture    byte         r/o      T3             t3     1
; InViews                           texture  struct         r/o      T4             t4     1
; RasterizerBinHeaders              texture  struct         r/o      T5             t5     1
; RasterizerBinData                 texture  struct         r/o      T6             t6     1
; InTotalPrevDrawClusters           texture  struct         r/o      T7             t7     1
; InClusterOffsetSWHW               texture     u32         buf      T8             t8     1
; OutDepthBuffer                        UAV     u32          2d      U0             u0     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<FPackedNaniteView>" = type { %hostlayout.struct.FPackedNaniteView }
%hostlayout.struct.FPackedNaniteView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x i32>, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <3 x float>, float, <2 x float>, float, i32, <4 x i32>, <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%"$Globals" = type { i32, <4 x i32>, i32, i32, i32, float, i32, <2 x float>, <2 x float>, <4 x float>, i32, i32, i32, <2 x float>, i32 }

@"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim" = addrspace(3) global [768 x float] undef, align 4

define void @MicropolyRasterize() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 13, i32 124 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %13 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %14 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %15 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %12, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %16 = extractvalue %dx.types.CBufRet.i32 %15, 2
  %17 = and i32 %16, 4096
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %32, !dx.controlflow.hints !27

; <label>:19                                      ; preds = %0
  %20 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %12, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %21 = extractvalue %dx.types.CBufRet.i32 %20, 2
  %22 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %23 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %22, i32 %21, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %24 = extractvalue %dx.types.ResRet.i32 %23, 2
  %25 = add i32 %24, %13
  %26 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %27 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %26, i32 %25, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %28 = extractvalue %dx.types.ResRet.i32 %27, 0
  %29 = extractvalue %dx.types.ResRet.i32 %27, 1
  %30 = lshr i32 %29, 16
  %31 = and i32 %29, 65535
  br label %32

; <label>:32                                      ; preds = %19, %0
  %33 = phi i32 [ %28, %19 ], [ %13, %0 ]
  %34 = phi i32 [ %30, %19 ], [ undef, %0 ]
  %35 = phi i32 [ %31, %19 ], [ undef, %0 ]
  %36 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %12, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.i32 %36, 2
  %38 = and i32 %37, 8192
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %45, label %40, !dx.controlflow.hints !28

; <label>:40                                      ; preds = %32
  %41 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %42 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %41, i32 0, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %43 = extractvalue %dx.types.ResRet.i32 %42, 0
  %44 = add i32 %43, %33
  br label %45

; <label>:45                                      ; preds = %40, %32
  %46 = phi i32 [ %44, %40 ], [ %33, %32 ]
  %47 = and i32 %37, 2048
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %54, label %49, !dx.controlflow.hints !29

; <label>:49                                      ; preds = %45
  %50 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %51 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %50, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %52 = extractvalue %dx.types.ResRet.i32 %51, 0
  %53 = add i32 %52, %46
  br label %54

; <label>:54                                      ; preds = %49, %45
  %55 = phi i32 [ %53, %49 ], [ %46, %45 ]
  %56 = shl i32 %55, 3
  %57 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %58 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %57, i32 %56, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %59 = extractvalue %dx.types.ResRet.i32 %58, 0
  %60 = extractvalue %dx.types.ResRet.i32 %58, 1
  %61 = lshr i32 %59, 4
  %62 = and i32 %61, 4095
  %63 = lshr i32 %59, 16
  %64 = and i32 %60, 16777215
  %65 = lshr i32 %60, 24
  %66 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %12, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %67 = extractvalue %dx.types.CBufRet.i32 %66, 0
  %68 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %69 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %68, i32 %64, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %70 = extractvalue %dx.types.ResRet.f32 %69, 0
  %71 = bitcast float %70 to i32
  %72 = and i32 %71, 1048575
  %73 = mul nuw nsw i32 %72, 41
  %74 = add nuw nsw i32 %73, 1
  %75 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %76 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %75, i32 %74, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %77 = extractvalue %dx.types.ResRet.f32 %76, 0
  %78 = extractvalue %dx.types.ResRet.f32 %76, 1
  %79 = extractvalue %dx.types.ResRet.f32 %76, 2
  %80 = add i32 %67, %64
  %81 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %68, i32 %80, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %82 = extractvalue %dx.types.ResRet.f32 %81, 0
  %83 = extractvalue %dx.types.ResRet.f32 %81, 1
  %84 = extractvalue %dx.types.ResRet.f32 %81, 2
  %85 = extractvalue %dx.types.ResRet.f32 %81, 3
  %86 = bitcast float %82 to i32
  %87 = bitcast float %83 to i32
  %88 = bitcast float %84 to i32
  %89 = bitcast float %85 to i32
  %90 = shl i32 %67, 1
  %91 = add i32 %90, %64
  %92 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %68, i32 %91, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %93 = extractvalue %dx.types.ResRet.f32 %92, 0
  %94 = extractvalue %dx.types.ResRet.f32 %92, 1
  %95 = extractvalue %dx.types.ResRet.f32 %92, 2
  %96 = and i32 %86, 65535
  %97 = uitofp i32 %96 to float
  %98 = lshr i32 %86, 16
  %99 = uitofp i32 %98 to float
  %100 = and i32 %87, 32767
  %101 = uitofp i32 %100 to float
  %102 = fadd fast float %97, -3.276800e+04
  %103 = fadd fast float %99, -3.276800e+04
  %104 = fadd fast float %101, -1.638400e+04
  %105 = fmul fast float %104, 0x3F06A0F8E0000000
  %106 = and i32 %87, 32768
  %107 = icmp ne i32 %106, 0
  %108 = fadd fast float %102, %103
  %109 = fmul fast float %108, 0x3F00002000000000
  %110 = fsub fast float %102, %103
  %111 = fmul fast float %110, 0x3F00002000000000
  %112 = call float @dx.op.unary.f32(i32 6, float %109)  ; FAbs(value)
  %113 = call float @dx.op.unary.f32(i32 6, float %111)  ; FAbs(value)
  %114 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %112, float %113)  ; Dot2(ax,ay,bx,by)
  %115 = fsub fast float 2.000000e+00, %114
  %116 = call float @dx.op.dot3.f32(i32 55, float %109, float %111, float %115, float %109, float %111, float %115)  ; Dot3(ax,ay,az,bx,by,bz)
  %117 = call float @dx.op.unary.f32(i32 25, float %116)  ; Rsqrt(value)
  %118 = fmul fast float %117, %109
  %119 = fmul fast float %117, %111
  %120 = fmul fast float %117, %115
  %121 = fadd fast float %120, 1.000000e+00
  %122 = fdiv fast float 1.000000e+00, %121
  %123 = fmul fast float %119, %118
  %124 = fmul fast float %123, %122
  %125 = fsub fast float -0.000000e+00, %124
  %126 = fmul fast float %118, %118
  %127 = fmul fast float %126, %122
  %128 = fsub fast float 1.000000e+00, %127
  %129 = fmul fast float %119, %119
  %130 = fmul fast float %129, %122
  %131 = fsub fast float 1.000000e+00, %130
  %132 = fmul fast float %105, %105
  %133 = fsub fast float 1.000000e+00, %132
  %134 = call float @dx.op.unary.f32(i32 24, float %133)  ; Sqrt(value)
  %135 = select i1 %107, float %105, float %134
  %136 = select i1 %107, float %134, float %105
  %137 = fmul fast float %128, %135
  %138 = fmul fast float %135, %125
  %139 = fmul fast float %135, %118
  %140 = fmul fast float %136, %125
  %141 = fmul fast float %131, %136
  %142 = fmul fast float %119, %136
  %143 = fsub fast float -0.000000e+00, %142
  %144 = fadd fast float %137, %140
  %145 = fadd fast float %138, %141
  %146 = fsub fast float %143, %139
  %147 = fmul fast float %146, %119
  %148 = fmul fast float %145, %120
  %149 = fsub fast float %147, %148
  %150 = fmul fast float %144, %120
  %151 = fmul fast float %146, %118
  %152 = fsub fast float %150, %151
  %153 = fmul fast float %145, %118
  %154 = fmul fast float %144, %119
  %155 = fsub fast float %153, %154
  %156 = lshr i32 %89, 16
  %157 = shl i32 %156, 23
  %158 = add i32 %157, -125829120
  %159 = bitcast i32 %158 to float
  %160 = lshr i32 %88, 16
  %161 = and i32 %88, 65535
  %162 = and i32 %89, 65535
  %163 = uitofp i32 %161 to float
  %164 = uitofp i32 %160 to float
  %165 = uitofp i32 %162 to float
  %166 = fadd fast float %163, -3.276800e+04
  %167 = fadd fast float %164, -3.276800e+04
  %168 = fadd fast float %165, -3.276800e+04
  %169 = fmul fast float %159, %166
  %170 = fmul fast float %159, %167
  %171 = fmul fast float %159, %168
  %172 = fmul fast float %144, %169
  %173 = fmul fast float %145, %169
  %174 = fmul fast float %146, %169
  %175 = fmul fast float %149, %170
  %176 = fmul fast float %152, %170
  %177 = fmul fast float %155, %170
  %178 = fmul fast float %118, %171
  %179 = fmul fast float %119, %171
  %180 = fmul fast float %120, %171
  %181 = and i32 %71, 1048576
  %182 = icmp ne i32 %181, 0
  %183 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 524, i32 912 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=912>
  %184 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 192, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %185 = extractvalue %dx.types.ResRet.f32 %184, 0
  %186 = extractvalue %dx.types.ResRet.f32 %184, 1
  %187 = extractvalue %dx.types.ResRet.f32 %184, 2
  %188 = extractvalue %dx.types.ResRet.f32 %184, 3
  %189 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 208, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %190 = extractvalue %dx.types.ResRet.f32 %189, 0
  %191 = extractvalue %dx.types.ResRet.f32 %189, 1
  %192 = extractvalue %dx.types.ResRet.f32 %189, 2
  %193 = extractvalue %dx.types.ResRet.f32 %189, 3
  %194 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 224, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %195 = extractvalue %dx.types.ResRet.f32 %194, 0
  %196 = extractvalue %dx.types.ResRet.f32 %194, 1
  %197 = extractvalue %dx.types.ResRet.f32 %194, 2
  %198 = extractvalue %dx.types.ResRet.f32 %194, 3
  %199 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 240, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %200 = extractvalue %dx.types.ResRet.f32 %199, 0
  %201 = extractvalue %dx.types.ResRet.f32 %199, 1
  %202 = extractvalue %dx.types.ResRet.f32 %199, 2
  %203 = extractvalue %dx.types.ResRet.f32 %199, 3
  %204 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %183, i32 %62, i32 704, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %205 = extractvalue %dx.types.ResRet.i32 %204, 0
  %206 = extractvalue %dx.types.ResRet.i32 %204, 1
  %207 = extractvalue %dx.types.ResRet.i32 %204, 2
  %208 = extractvalue %dx.types.ResRet.i32 %204, 3
  %209 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 720, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %210 = extractvalue %dx.types.ResRet.f32 %209, 0
  %211 = extractvalue %dx.types.ResRet.f32 %209, 1
  %212 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 752, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %213 = extractvalue %dx.types.ResRet.f32 %212, 0
  %214 = extractvalue %dx.types.ResRet.f32 %212, 1
  %215 = extractvalue %dx.types.ResRet.f32 %212, 2
  %216 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 764, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %217 = extractvalue %dx.types.ResRet.f32 %216, 0
  %218 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 780, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %219 = extractvalue %dx.types.ResRet.f32 %218, 0
  %220 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %183, i32 %62, i32 796, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %221 = extractvalue %dx.types.ResRet.f32 %220, 0
  %222 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %183, i32 %62, i32 876, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %223 = extractvalue %dx.types.ResRet.i32 %222, 0
  %224 = and i32 %223, 64
  %225 = icmp ne i32 %224, 0
  %226 = xor i1 %182, %225
  %227 = fsub fast float %77, %217
  %228 = fsub fast float %78, %219
  %229 = fsub fast float %79, %221
  %230 = fmul fast float %227, 2.097152e+06
  %231 = fmul fast float %228, 2.097152e+06
  %232 = fmul fast float %229, 2.097152e+06
  %233 = fadd fast float %213, %93
  %234 = fadd fast float %233, %230
  %235 = fadd fast float %214, %94
  %236 = fadd fast float %235, %231
  %237 = fadd fast float %215, %95
  %238 = fadd fast float %237, %232
  %239 = extractvalue %dx.types.CBufRet.i32 %66, 1
  %240 = call i32 @dx.op.binary.i32(i32 40, i32 %63, i32 %239)  ; UMin(a,b)
  %241 = shl i32 %240, 17
  %242 = sub nsw i32 %63, %239
  %243 = call i32 @dx.op.binary.i32(i32 37, i32 %242, i32 0)  ; IMax(a,b)
  %244 = shl i32 %243, 15
  %245 = add i32 %244, %241
  %246 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %247 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %246, i32 %245, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %248 = extractvalue %dx.types.ResRet.i32 %247, 0
  %249 = shl i32 %248, 4
  %250 = shl nuw nsw i32 %65, 4
  %251 = or i32 %245, %250
  %252 = add nsw i32 %251, 16
  %253 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %246, i32 %252, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %254 = extractvalue %dx.types.ResRet.i32 %253, 0
  %255 = extractvalue %dx.types.ResRet.i32 %253, 1
  %256 = add i32 %252, %249
  %257 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %246, i32 %256, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %258 = extractvalue %dx.types.ResRet.i32 %257, 0
  %259 = extractvalue %dx.types.ResRet.i32 %257, 1
  %260 = extractvalue %dx.types.ResRet.i32 %257, 2
  %261 = extractvalue %dx.types.ResRet.i32 %257, 3
  %262 = and i32 %254, 511
  %263 = and i32 %255, 255
  %264 = lshr i32 %255, 8
  %265 = and i32 %261, 15
  %266 = lshr i32 %261, 9
  %267 = and i32 %266, 31
  %268 = lshr i32 %261, 14
  %269 = and i32 %268, 31
  %270 = lshr i32 %261, 19
  %271 = and i32 %270, 31
  %272 = sub i32 %35, %34
  %273 = select i1 %18, i32 %272, i32 %263
  %274 = select i1 %18, i32 %34, i32 0
  %275 = fmul fast float %210, 5.000000e-01
  %276 = fmul fast float %211, 5.000000e-01
  %277 = sitofp i32 %205 to float
  %278 = sitofp i32 %206 to float
  %279 = fadd fast float %275, %277
  %280 = fadd fast float %276, %278
  %281 = fmul fast float %210, 1.280000e+02
  %282 = fmul fast float %211, -1.280000e+02
  %283 = fmul fast float %279, 2.560000e+02
  %284 = fmul fast float %280, 2.560000e+02
  %285 = fadd fast float %283, 5.000000e-01
  %286 = fadd fast float %284, 5.000000e-01
  %287 = icmp ult i32 %14, %262
  br i1 %287, label %288, label %721, !dx.controlflow.hints !30

; <label>:288                                     ; preds = %54
  %289 = lshr i32 %254, 9
  %290 = add nuw nsw i32 %267, %269
  %291 = add nuw nsw i32 %290, %271
  %292 = mul i32 %291, %14
  %293 = add i32 %289, %245
  %294 = lshr i32 %292, 5
  %295 = shl nuw nsw i32 %294, 2
  %296 = add i32 %293, %295
  %297 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %246, i32 %296, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %298 = extractvalue %dx.types.ResRet.i32 %297, 0
  %299 = extractvalue %dx.types.ResRet.i32 %297, 1
  %300 = extractvalue %dx.types.ResRet.i32 %297, 2
  %301 = and i32 %292, 31
  %302 = lshr i32 %298, %301
  %303 = icmp eq i32 %301, 0
  br i1 %303, label %308, label %304

; <label>:304                                     ; preds = %288
  %305 = sub i32 0, %292
  %306 = and i32 %305, 31
  %307 = shl i32 %299, %306
  br label %308

; <label>:308                                     ; preds = %304, %288
  %309 = phi i32 [ %307, %304 ], [ 0, %288 ]
  %310 = or i32 %309, %302
  %311 = lshr i32 %299, %301
  br i1 %303, label %316, label %312

; <label>:312                                     ; preds = %308
  %313 = sub i32 0, %292
  %314 = and i32 %313, 31
  %315 = shl i32 %300, %314
  br label %316

; <label>:316                                     ; preds = %312, %308
  %317 = phi i32 [ %315, %312 ], [ 0, %308 ]
  %318 = or i32 %317, %311
  %319 = shl i32 1, %267
  %320 = add i32 %319, -1
  %321 = and i32 %310, %320
  %322 = lshr i32 %310, %267
  %323 = icmp eq i32 %267, 0
  br i1 %323, label %328, label %324

; <label>:324                                     ; preds = %316
  %325 = sub nsw i32 0, %266
  %326 = and i32 %325, 31
  %327 = shl i32 %318, %326
  br label %328

; <label>:328                                     ; preds = %324, %316
  %329 = phi i32 [ %327, %324 ], [ 0, %316 ]
  %330 = or i32 %329, %322
  %331 = shl i32 1, %269
  %332 = add i32 %331, -1
  %333 = and i32 %330, %332
  %334 = lshr i32 %330, %269
  %335 = icmp eq i32 %269, 0
  br i1 %335, label %341, label %336

; <label>:336                                     ; preds = %328
  %337 = lshr i32 %318, %267
  %338 = sub nsw i32 0, %268
  %339 = and i32 %338, 31
  %340 = shl i32 %337, %339
  br label %341

; <label>:341                                     ; preds = %336, %328
  %342 = phi i32 [ %340, %336 ], [ 0, %328 ]
  %343 = or i32 %342, %334
  %344 = shl i32 1, %271
  %345 = add i32 %344, -1
  %346 = and i32 %343, %345
  %347 = shl i32 %261, 19
  %348 = and i32 %347, 260046848
  %349 = sub nsw i32 1132462080, %348
  %350 = bitcast i32 %349 to float
  %351 = add i32 %321, %258
  %352 = add i32 %333, %259
  %353 = add i32 %346, %260
  %354 = sitofp i32 %351 to float
  %355 = sitofp i32 %352 to float
  %356 = sitofp i32 %353 to float
  %357 = fmul fast float %354, %350
  %358 = fmul fast float %355, %350
  %359 = fmul fast float %356, %350
  %360 = fmul fast float %357, %172
  %361 = call float @dx.op.tertiary.f32(i32 46, float %358, float %175, float %360)  ; FMad(a,b,c)
  %362 = call float @dx.op.tertiary.f32(i32 46, float %359, float %178, float %361)  ; FMad(a,b,c)
  %363 = fadd fast float %362, %234
  %364 = fmul fast float %357, %173
  %365 = call float @dx.op.tertiary.f32(i32 46, float %358, float %176, float %364)  ; FMad(a,b,c)
  %366 = call float @dx.op.tertiary.f32(i32 46, float %359, float %179, float %365)  ; FMad(a,b,c)
  %367 = fadd fast float %366, %236
  %368 = fmul fast float %357, %174
  %369 = call float @dx.op.tertiary.f32(i32 46, float %358, float %177, float %368)  ; FMad(a,b,c)
  %370 = call float @dx.op.tertiary.f32(i32 46, float %359, float %180, float %369)  ; FMad(a,b,c)
  %371 = fadd fast float %370, %238
  %372 = fmul fast float %363, %185
  %373 = call float @dx.op.tertiary.f32(i32 46, float %367, float %190, float %372)  ; FMad(a,b,c)
  %374 = call float @dx.op.tertiary.f32(i32 46, float %371, float %195, float %373)  ; FMad(a,b,c)
  %375 = fadd fast float %374, %200
  %376 = fmul fast float %363, %186
  %377 = call float @dx.op.tertiary.f32(i32 46, float %367, float %191, float %376)  ; FMad(a,b,c)
  %378 = call float @dx.op.tertiary.f32(i32 46, float %371, float %196, float %377)  ; FMad(a,b,c)
  %379 = fadd fast float %378, %201
  %380 = fmul fast float %363, %187
  %381 = call float @dx.op.tertiary.f32(i32 46, float %367, float %192, float %380)  ; FMad(a,b,c)
  %382 = call float @dx.op.tertiary.f32(i32 46, float %371, float %197, float %381)  ; FMad(a,b,c)
  %383 = fadd fast float %382, %202
  %384 = fmul fast float %363, %188
  %385 = call float @dx.op.tertiary.f32(i32 46, float %367, float %193, float %384)  ; FMad(a,b,c)
  %386 = call float @dx.op.tertiary.f32(i32 46, float %371, float %198, float %385)  ; FMad(a,b,c)
  %387 = fadd fast float %386, %203
  %388 = fdiv fast float %375, %387
  %389 = fdiv fast float %379, %387
  %390 = fdiv fast float %383, %387
  %391 = fmul fast float %388, %281
  %392 = fmul fast float %389, %282
  %393 = fadd fast float %391, %285
  %394 = fadd fast float %392, %286
  %395 = call float @dx.op.unary.f32(i32 27, float %393)  ; Round_ni(value)
  %396 = call float @dx.op.unary.f32(i32 27, float %394)  ; Round_ni(value)
  %397 = mul i32 %14, 3
  %398 = add i32 0, %397
  %399 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %398
  store float %395, float addrspace(3)* %399, align 4
  %400 = mul i32 %14, 3
  %401 = add i32 1, %400
  %402 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %401
  store float %396, float addrspace(3)* %402, align 4
  %403 = mul i32 %14, 3
  %404 = add i32 2, %403
  %405 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %404
  store float %390, float addrspace(3)* %405, align 4
  %406 = add i32 %14, 64
  %407 = icmp ult i32 %406, %262
  br i1 %407, label %408, label %721, !dx.controlflow.hints !30

; <label>:408                                     ; preds = %341
  %409 = mul i32 %291, %406
  %410 = lshr i32 %409, 5
  %411 = shl nuw nsw i32 %410, 2
  %412 = add i32 %293, %411
  %413 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %414 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %413, i32 %412, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %415 = extractvalue %dx.types.ResRet.i32 %414, 0
  %416 = extractvalue %dx.types.ResRet.i32 %414, 1
  %417 = extractvalue %dx.types.ResRet.i32 %414, 2
  %418 = and i32 %409, 31
  %419 = lshr i32 %415, %418
  %420 = icmp eq i32 %418, 0
  br i1 %420, label %425, label %421

; <label>:421                                     ; preds = %408
  %422 = sub i32 0, %409
  %423 = and i32 %422, 31
  %424 = shl i32 %416, %423
  br label %425

; <label>:425                                     ; preds = %421, %408
  %426 = phi i32 [ %424, %421 ], [ 0, %408 ]
  %427 = or i32 %426, %419
  %428 = lshr i32 %416, %418
  br i1 %420, label %433, label %429

; <label>:429                                     ; preds = %425
  %430 = sub i32 0, %409
  %431 = and i32 %430, 31
  %432 = shl i32 %417, %431
  br label %433

; <label>:433                                     ; preds = %429, %425
  %434 = phi i32 [ %432, %429 ], [ 0, %425 ]
  %435 = or i32 %434, %428
  %436 = and i32 %427, %320
  %437 = lshr i32 %427, %267
  br i1 %323, label %442, label %438

; <label>:438                                     ; preds = %433
  %439 = sub nsw i32 0, %266
  %440 = and i32 %439, 31
  %441 = shl i32 %435, %440
  br label %442

; <label>:442                                     ; preds = %438, %433
  %443 = phi i32 [ %441, %438 ], [ 0, %433 ]
  %444 = or i32 %443, %437
  %445 = and i32 %444, %332
  %446 = lshr i32 %444, %269
  br i1 %335, label %452, label %447

; <label>:447                                     ; preds = %442
  %448 = lshr i32 %435, %267
  %449 = sub nsw i32 0, %268
  %450 = and i32 %449, 31
  %451 = shl i32 %448, %450
  br label %452

; <label>:452                                     ; preds = %447, %442
  %453 = phi i32 [ %451, %447 ], [ 0, %442 ]
  %454 = or i32 %453, %446
  %455 = and i32 %454, %345
  %456 = add i32 %436, %258
  %457 = add i32 %445, %259
  %458 = add i32 %455, %260
  %459 = sitofp i32 %456 to float
  %460 = sitofp i32 %457 to float
  %461 = sitofp i32 %458 to float
  %462 = fmul fast float %459, %350
  %463 = fmul fast float %460, %350
  %464 = fmul fast float %461, %350
  %465 = fmul fast float %462, %172
  %466 = call float @dx.op.tertiary.f32(i32 46, float %463, float %175, float %465)  ; FMad(a,b,c)
  %467 = call float @dx.op.tertiary.f32(i32 46, float %464, float %178, float %466)  ; FMad(a,b,c)
  %468 = fadd fast float %467, %234
  %469 = fmul fast float %462, %173
  %470 = call float @dx.op.tertiary.f32(i32 46, float %463, float %176, float %469)  ; FMad(a,b,c)
  %471 = call float @dx.op.tertiary.f32(i32 46, float %464, float %179, float %470)  ; FMad(a,b,c)
  %472 = fadd fast float %471, %236
  %473 = fmul fast float %462, %174
  %474 = call float @dx.op.tertiary.f32(i32 46, float %463, float %177, float %473)  ; FMad(a,b,c)
  %475 = call float @dx.op.tertiary.f32(i32 46, float %464, float %180, float %474)  ; FMad(a,b,c)
  %476 = fadd fast float %475, %238
  %477 = fmul fast float %468, %185
  %478 = call float @dx.op.tertiary.f32(i32 46, float %472, float %190, float %477)  ; FMad(a,b,c)
  %479 = call float @dx.op.tertiary.f32(i32 46, float %476, float %195, float %478)  ; FMad(a,b,c)
  %480 = fadd fast float %479, %200
  %481 = fmul fast float %468, %186
  %482 = call float @dx.op.tertiary.f32(i32 46, float %472, float %191, float %481)  ; FMad(a,b,c)
  %483 = call float @dx.op.tertiary.f32(i32 46, float %476, float %196, float %482)  ; FMad(a,b,c)
  %484 = fadd fast float %483, %201
  %485 = fmul fast float %468, %187
  %486 = call float @dx.op.tertiary.f32(i32 46, float %472, float %192, float %485)  ; FMad(a,b,c)
  %487 = call float @dx.op.tertiary.f32(i32 46, float %476, float %197, float %486)  ; FMad(a,b,c)
  %488 = fadd fast float %487, %202
  %489 = fmul fast float %468, %188
  %490 = call float @dx.op.tertiary.f32(i32 46, float %472, float %193, float %489)  ; FMad(a,b,c)
  %491 = call float @dx.op.tertiary.f32(i32 46, float %476, float %198, float %490)  ; FMad(a,b,c)
  %492 = fadd fast float %491, %203
  %493 = fdiv fast float %480, %492
  %494 = fdiv fast float %484, %492
  %495 = fdiv fast float %488, %492
  %496 = fmul fast float %493, %281
  %497 = fmul fast float %494, %282
  %498 = fadd fast float %496, %285
  %499 = fadd fast float %497, %286
  %500 = call float @dx.op.unary.f32(i32 27, float %498)  ; Round_ni(value)
  %501 = call float @dx.op.unary.f32(i32 27, float %499)  ; Round_ni(value)
  %502 = mul i32 %406, 3
  %503 = add i32 0, %502
  %504 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %503
  store float %500, float addrspace(3)* %504, align 4
  %505 = mul i32 %406, 3
  %506 = add i32 1, %505
  %507 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %506
  store float %501, float addrspace(3)* %507, align 4
  %508 = mul i32 %406, 3
  %509 = add i32 2, %508
  %510 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %509
  store float %495, float addrspace(3)* %510, align 4
  %511 = add i32 %14, 128
  %512 = icmp ult i32 %511, %262
  br i1 %512, label %513, label %721, !dx.controlflow.hints !30

; <label>:513                                     ; preds = %452
  %514 = mul i32 %291, %511
  %515 = lshr i32 %514, 5
  %516 = shl nuw nsw i32 %515, 2
  %517 = add i32 %293, %516
  %518 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %519 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %518, i32 %517, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %520 = extractvalue %dx.types.ResRet.i32 %519, 0
  %521 = extractvalue %dx.types.ResRet.i32 %519, 1
  %522 = extractvalue %dx.types.ResRet.i32 %519, 2
  %523 = and i32 %514, 31
  %524 = lshr i32 %520, %523
  %525 = icmp eq i32 %523, 0
  br i1 %525, label %530, label %526

; <label>:526                                     ; preds = %513
  %527 = sub i32 0, %514
  %528 = and i32 %527, 31
  %529 = shl i32 %521, %528
  br label %530

; <label>:530                                     ; preds = %526, %513
  %531 = phi i32 [ %529, %526 ], [ 0, %513 ]
  %532 = or i32 %531, %524
  %533 = lshr i32 %521, %523
  br i1 %525, label %538, label %534

; <label>:534                                     ; preds = %530
  %535 = sub i32 0, %514
  %536 = and i32 %535, 31
  %537 = shl i32 %522, %536
  br label %538

; <label>:538                                     ; preds = %534, %530
  %539 = phi i32 [ %537, %534 ], [ 0, %530 ]
  %540 = or i32 %539, %533
  %541 = and i32 %532, %320
  %542 = lshr i32 %532, %267
  br i1 %323, label %547, label %543

; <label>:543                                     ; preds = %538
  %544 = sub nsw i32 0, %266
  %545 = and i32 %544, 31
  %546 = shl i32 %540, %545
  br label %547

; <label>:547                                     ; preds = %543, %538
  %548 = phi i32 [ %546, %543 ], [ 0, %538 ]
  %549 = or i32 %548, %542
  %550 = and i32 %549, %332
  %551 = lshr i32 %549, %269
  br i1 %335, label %557, label %552

; <label>:552                                     ; preds = %547
  %553 = lshr i32 %540, %267
  %554 = sub nsw i32 0, %268
  %555 = and i32 %554, 31
  %556 = shl i32 %553, %555
  br label %557

; <label>:557                                     ; preds = %552, %547
  %558 = phi i32 [ %556, %552 ], [ 0, %547 ]
  %559 = or i32 %558, %551
  %560 = and i32 %559, %345
  %561 = add i32 %541, %258
  %562 = add i32 %550, %259
  %563 = add i32 %560, %260
  %564 = sitofp i32 %561 to float
  %565 = sitofp i32 %562 to float
  %566 = sitofp i32 %563 to float
  %567 = fmul fast float %564, %350
  %568 = fmul fast float %565, %350
  %569 = fmul fast float %566, %350
  %570 = fmul fast float %567, %172
  %571 = call float @dx.op.tertiary.f32(i32 46, float %568, float %175, float %570)  ; FMad(a,b,c)
  %572 = call float @dx.op.tertiary.f32(i32 46, float %569, float %178, float %571)  ; FMad(a,b,c)
  %573 = fadd fast float %572, %234
  %574 = fmul fast float %567, %173
  %575 = call float @dx.op.tertiary.f32(i32 46, float %568, float %176, float %574)  ; FMad(a,b,c)
  %576 = call float @dx.op.tertiary.f32(i32 46, float %569, float %179, float %575)  ; FMad(a,b,c)
  %577 = fadd fast float %576, %236
  %578 = fmul fast float %567, %174
  %579 = call float @dx.op.tertiary.f32(i32 46, float %568, float %177, float %578)  ; FMad(a,b,c)
  %580 = call float @dx.op.tertiary.f32(i32 46, float %569, float %180, float %579)  ; FMad(a,b,c)
  %581 = fadd fast float %580, %238
  %582 = fmul fast float %573, %185
  %583 = call float @dx.op.tertiary.f32(i32 46, float %577, float %190, float %582)  ; FMad(a,b,c)
  %584 = call float @dx.op.tertiary.f32(i32 46, float %581, float %195, float %583)  ; FMad(a,b,c)
  %585 = fadd fast float %584, %200
  %586 = fmul fast float %573, %186
  %587 = call float @dx.op.tertiary.f32(i32 46, float %577, float %191, float %586)  ; FMad(a,b,c)
  %588 = call float @dx.op.tertiary.f32(i32 46, float %581, float %196, float %587)  ; FMad(a,b,c)
  %589 = fadd fast float %588, %201
  %590 = fmul fast float %573, %187
  %591 = call float @dx.op.tertiary.f32(i32 46, float %577, float %192, float %590)  ; FMad(a,b,c)
  %592 = call float @dx.op.tertiary.f32(i32 46, float %581, float %197, float %591)  ; FMad(a,b,c)
  %593 = fadd fast float %592, %202
  %594 = fmul fast float %573, %188
  %595 = call float @dx.op.tertiary.f32(i32 46, float %577, float %193, float %594)  ; FMad(a,b,c)
  %596 = call float @dx.op.tertiary.f32(i32 46, float %581, float %198, float %595)  ; FMad(a,b,c)
  %597 = fadd fast float %596, %203
  %598 = fdiv fast float %585, %597
  %599 = fdiv fast float %589, %597
  %600 = fdiv fast float %593, %597
  %601 = fmul fast float %598, %281
  %602 = fmul fast float %599, %282
  %603 = fadd fast float %601, %285
  %604 = fadd fast float %602, %286
  %605 = call float @dx.op.unary.f32(i32 27, float %603)  ; Round_ni(value)
  %606 = call float @dx.op.unary.f32(i32 27, float %604)  ; Round_ni(value)
  %607 = mul i32 %511, 3
  %608 = add i32 0, %607
  %609 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %608
  store float %605, float addrspace(3)* %609, align 4
  %610 = mul i32 %511, 3
  %611 = add i32 1, %610
  %612 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %611
  store float %606, float addrspace(3)* %612, align 4
  %613 = mul i32 %511, 3
  %614 = add i32 2, %613
  %615 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %614
  store float %600, float addrspace(3)* %615, align 4
  %616 = add i32 %14, 192
  %617 = icmp ult i32 %616, %262
  br i1 %617, label %618, label %721, !dx.controlflow.hints !30

; <label>:618                                     ; preds = %557
  %619 = mul i32 %291, %616
  %620 = lshr i32 %619, 5
  %621 = shl nuw nsw i32 %620, 2
  %622 = add i32 %293, %621
  %623 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %624 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %623, i32 %622, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %625 = extractvalue %dx.types.ResRet.i32 %624, 0
  %626 = extractvalue %dx.types.ResRet.i32 %624, 1
  %627 = extractvalue %dx.types.ResRet.i32 %624, 2
  %628 = and i32 %619, 31
  %629 = lshr i32 %625, %628
  %630 = icmp eq i32 %628, 0
  br i1 %630, label %635, label %631

; <label>:631                                     ; preds = %618
  %632 = sub i32 0, %619
  %633 = and i32 %632, 31
  %634 = shl i32 %626, %633
  br label %635

; <label>:635                                     ; preds = %631, %618
  %636 = phi i32 [ %634, %631 ], [ 0, %618 ]
  %637 = or i32 %636, %629
  %638 = lshr i32 %626, %628
  br i1 %630, label %643, label %639

; <label>:639                                     ; preds = %635
  %640 = sub i32 0, %619
  %641 = and i32 %640, 31
  %642 = shl i32 %627, %641
  br label %643

; <label>:643                                     ; preds = %639, %635
  %644 = phi i32 [ %642, %639 ], [ 0, %635 ]
  %645 = or i32 %644, %638
  %646 = and i32 %637, %320
  %647 = lshr i32 %637, %267
  br i1 %323, label %652, label %648

; <label>:648                                     ; preds = %643
  %649 = sub nsw i32 0, %266
  %650 = and i32 %649, 31
  %651 = shl i32 %645, %650
  br label %652

; <label>:652                                     ; preds = %648, %643
  %653 = phi i32 [ %651, %648 ], [ 0, %643 ]
  %654 = or i32 %653, %647
  %655 = and i32 %654, %332
  %656 = lshr i32 %654, %269
  br i1 %335, label %662, label %657

; <label>:657                                     ; preds = %652
  %658 = lshr i32 %645, %267
  %659 = sub nsw i32 0, %268
  %660 = and i32 %659, 31
  %661 = shl i32 %658, %660
  br label %662

; <label>:662                                     ; preds = %657, %652
  %663 = phi i32 [ %661, %657 ], [ 0, %652 ]
  %664 = or i32 %663, %656
  %665 = and i32 %664, %345
  %666 = add i32 %646, %258
  %667 = add i32 %655, %259
  %668 = add i32 %665, %260
  %669 = sitofp i32 %666 to float
  %670 = sitofp i32 %667 to float
  %671 = sitofp i32 %668 to float
  %672 = fmul fast float %669, %350
  %673 = fmul fast float %670, %350
  %674 = fmul fast float %671, %350
  %675 = fmul fast float %672, %172
  %676 = call float @dx.op.tertiary.f32(i32 46, float %673, float %175, float %675)  ; FMad(a,b,c)
  %677 = call float @dx.op.tertiary.f32(i32 46, float %674, float %178, float %676)  ; FMad(a,b,c)
  %678 = fadd fast float %677, %234
  %679 = fmul fast float %672, %173
  %680 = call float @dx.op.tertiary.f32(i32 46, float %673, float %176, float %679)  ; FMad(a,b,c)
  %681 = call float @dx.op.tertiary.f32(i32 46, float %674, float %179, float %680)  ; FMad(a,b,c)
  %682 = fadd fast float %681, %236
  %683 = fmul fast float %672, %174
  %684 = call float @dx.op.tertiary.f32(i32 46, float %673, float %177, float %683)  ; FMad(a,b,c)
  %685 = call float @dx.op.tertiary.f32(i32 46, float %674, float %180, float %684)  ; FMad(a,b,c)
  %686 = fadd fast float %685, %238
  %687 = fmul fast float %678, %185
  %688 = call float @dx.op.tertiary.f32(i32 46, float %682, float %190, float %687)  ; FMad(a,b,c)
  %689 = call float @dx.op.tertiary.f32(i32 46, float %686, float %195, float %688)  ; FMad(a,b,c)
  %690 = fadd fast float %689, %200
  %691 = fmul fast float %678, %186
  %692 = call float @dx.op.tertiary.f32(i32 46, float %682, float %191, float %691)  ; FMad(a,b,c)
  %693 = call float @dx.op.tertiary.f32(i32 46, float %686, float %196, float %692)  ; FMad(a,b,c)
  %694 = fadd fast float %693, %201
  %695 = fmul fast float %678, %187
  %696 = call float @dx.op.tertiary.f32(i32 46, float %682, float %192, float %695)  ; FMad(a,b,c)
  %697 = call float @dx.op.tertiary.f32(i32 46, float %686, float %197, float %696)  ; FMad(a,b,c)
  %698 = fadd fast float %697, %202
  %699 = fmul fast float %678, %188
  %700 = call float @dx.op.tertiary.f32(i32 46, float %682, float %193, float %699)  ; FMad(a,b,c)
  %701 = call float @dx.op.tertiary.f32(i32 46, float %686, float %198, float %700)  ; FMad(a,b,c)
  %702 = fadd fast float %701, %203
  %703 = fdiv fast float %690, %702
  %704 = fdiv fast float %694, %702
  %705 = fdiv fast float %698, %702
  %706 = fmul fast float %703, %281
  %707 = fmul fast float %704, %282
  %708 = fadd fast float %706, %285
  %709 = fadd fast float %707, %286
  %710 = call float @dx.op.unary.f32(i32 27, float %708)  ; Round_ni(value)
  %711 = call float @dx.op.unary.f32(i32 27, float %709)  ; Round_ni(value)
  %712 = mul i32 %616, 3
  %713 = add i32 0, %712
  %714 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %713
  store float %710, float addrspace(3)* %714, align 4
  %715 = mul i32 %616, 3
  %716 = add i32 1, %715
  %717 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %716
  store float %711, float addrspace(3)* %717, align 4
  %718 = mul i32 %616, 3
  %719 = add i32 2, %718
  %720 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %719
  store float %705, float addrspace(3)* %720, align 4
  br label %721

; <label>:721                                     ; preds = %662, %557, %452, %341, %54
  call void @dx.op.barrier(i32 80, i32 9)  ; Barrier(barrierMode)
  %722 = add i32 %274, %14
  %723 = add nuw nsw i32 %265, 10
  %724 = mul i32 %723, %722
  %725 = add i32 %264, %245
  %726 = ashr i32 %724, 5
  %727 = shl nsw i32 %726, 2
  %728 = add i32 %725, %727
  %729 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %730 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %729, i32 %728, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %731 = extractvalue %dx.types.ResRet.i32 %730, 0
  %732 = and i32 %724, 31
  %733 = lshr i32 %731, %732
  %734 = icmp eq i32 %732, 0
  br i1 %734, label %740, label %735

; <label>:735                                     ; preds = %721
  %736 = extractvalue %dx.types.ResRet.i32 %730, 1
  %737 = sub i32 0, %724
  %738 = and i32 %737, 31
  %739 = shl i32 %736, %738
  br label %740

; <label>:740                                     ; preds = %735, %721
  %741 = phi i32 [ %739, %735 ], [ 0, %721 ]
  %742 = or i32 %741, %733
  %743 = shl i32 1, %265
  %744 = add i32 %743, -1
  %745 = and i32 %742, %744
  %746 = lshr i32 %742, %265
  %747 = and i32 %746, 31
  %748 = add nuw nsw i32 %265, 5
  %749 = lshr i32 %742, %748
  %750 = and i32 %749, 31
  %751 = add i32 %747, %745
  %752 = add i32 %750, %745
  %753 = select i1 %226, i32 %752, i32 %751
  %754 = select i1 %226, i32 %751, i32 %752
  %755 = mul i32 %745, 3
  %756 = add i32 0, %755
  %757 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %756
  %758 = load float, float addrspace(3)* %757, align 4
  %759 = mul i32 %745, 3
  %760 = add i32 1, %759
  %761 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %760
  %762 = load float, float addrspace(3)* %761, align 4
  %763 = mul i32 %745, 3
  %764 = add i32 2, %763
  %765 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %764
  %766 = load float, float addrspace(3)* %765, align 4
  %767 = mul i32 %753, 3
  %768 = add i32 0, %767
  %769 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %768
  %770 = load float, float addrspace(3)* %769, align 4
  %771 = mul i32 %753, 3
  %772 = add i32 1, %771
  %773 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %772
  %774 = load float, float addrspace(3)* %773, align 4
  %775 = mul i32 %754, 3
  %776 = add i32 0, %775
  %777 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %776
  %778 = load float, float addrspace(3)* %777, align 4
  %779 = mul i32 %754, 3
  %780 = add i32 1, %779
  %781 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %780
  %782 = load float, float addrspace(3)* %781, align 4
  %783 = icmp ult i32 %14, %273
  br i1 %783, label %784, label %1325, !dx.controlflow.hints !31

; <label>:784                                     ; preds = %740
  %785 = mul i32 %754, 3
  %786 = add i32 2, %785
  %787 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %786
  %788 = load float, float addrspace(3)* %787, align 4
  %789 = mul i32 %753, 3
  %790 = add i32 2, %789
  %791 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %790
  %792 = load float, float addrspace(3)* %791, align 4
  %793 = fsub fast float %770, %758
  %794 = fsub fast float %774, %762
  %795 = fsub fast float %778, %758
  %796 = fsub fast float %782, %762
  %797 = fmul fast float %796, %793
  %798 = fmul fast float %795, %794
  %799 = fsub fast float %797, %798
  %800 = fcmp ult float %799, 0.000000e+00
  %801 = call float @dx.op.binary.f32(i32 36, float %770, float %778)  ; FMin(a,b)
  %802 = call float @dx.op.binary.f32(i32 36, float %758, float %801)  ; FMin(a,b)
  %803 = call float @dx.op.binary.f32(i32 36, float %774, float %782)  ; FMin(a,b)
  %804 = call float @dx.op.binary.f32(i32 36, float %762, float %803)  ; FMin(a,b)
  %805 = call float @dx.op.binary.f32(i32 35, float %770, float %778)  ; FMax(a,b)
  %806 = call float @dx.op.binary.f32(i32 35, float %758, float %805)  ; FMax(a,b)
  %807 = call float @dx.op.binary.f32(i32 35, float %774, float %782)  ; FMax(a,b)
  %808 = call float @dx.op.binary.f32(i32 35, float %762, float %807)  ; FMax(a,b)
  %809 = fadd fast float %802, 1.270000e+02
  %810 = fadd fast float %804, 1.270000e+02
  %811 = fmul fast float %809, 3.906250e-03
  %812 = fmul fast float %810, 3.906250e-03
  %813 = call float @dx.op.unary.f32(i32 27, float %811)  ; Round_ni(value)
  %814 = call float @dx.op.unary.f32(i32 27, float %812)  ; Round_ni(value)
  %815 = fptosi float %813 to i32
  %816 = fptosi float %814 to i32
  %817 = fadd fast float %806, -1.290000e+02
  %818 = fadd fast float %808, -1.290000e+02
  %819 = fmul fast float %817, 3.906250e-03
  %820 = fmul fast float %818, 3.906250e-03
  %821 = call float @dx.op.unary.f32(i32 27, float %819)  ; Round_ni(value)
  %822 = call float @dx.op.unary.f32(i32 27, float %820)  ; Round_ni(value)
  %823 = fptosi float %821 to i32
  %824 = fptosi float %822 to i32
  %825 = call i32 @dx.op.binary.i32(i32 37, i32 %815, i32 %205)  ; IMax(a,b)
  %826 = call i32 @dx.op.binary.i32(i32 37, i32 %816, i32 %206)  ; IMax(a,b)
  %827 = add i32 %207, -1
  %828 = add i32 %208, -1
  %829 = call i32 @dx.op.binary.i32(i32 38, i32 %823, i32 %827)  ; IMin(a,b)
  %830 = call i32 @dx.op.binary.i32(i32 38, i32 %824, i32 %828)  ; IMin(a,b)
  %831 = add i32 %825, 63
  %832 = add i32 %826, 63
  %833 = call i32 @dx.op.binary.i32(i32 38, i32 %829, i32 %831)  ; IMin(a,b)
  %834 = call i32 @dx.op.binary.i32(i32 38, i32 %830, i32 %832)  ; IMin(a,b)
  %835 = fsub fast float -0.000000e+00, %794
  %836 = fsub fast float %770, %778
  %837 = fsub fast float %774, %782
  %838 = sitofp i32 %825 to float
  %839 = sitofp i32 %826 to float
  %840 = fmul fast float %838, 2.560000e+02
  %841 = fmul fast float %839, 2.560000e+02
  %842 = fadd fast float %840, 1.280000e+02
  %843 = fadd fast float %841, 1.280000e+02
  %844 = fsub fast float %758, %842
  %845 = fsub fast float %762, %843
  %846 = fsub fast float %770, %842
  %847 = fsub fast float %774, %843
  %848 = fsub fast float %778, %842
  %849 = fsub fast float %782, %843
  %850 = fmul fast float %846, %837
  %851 = fmul fast float %847, %836
  %852 = fsub fast float %850, %851
  %853 = fmul fast float %848, %796
  %854 = fmul fast float %849, %795
  %855 = fsub fast float %853, %854
  %856 = fmul fast float %844, %835
  %857 = fmul fast float %845, %793
  %858 = fadd fast float %857, %856
  %859 = fsub fast float 1.000000e+00, %836
  %860 = call float @dx.op.unary.f32(i32 7, float %859)  ; Saturate(value)
  %861 = fadd fast float %860, %837
  %862 = call float @dx.op.unary.f32(i32 7, float %861)  ; Saturate(value)
  %863 = fsub fast float %852, %862
  %864 = fsub fast float 1.000000e+00, %795
  %865 = call float @dx.op.unary.f32(i32 7, float %864)  ; Saturate(value)
  %866 = fadd fast float %865, %796
  %867 = call float @dx.op.unary.f32(i32 7, float %866)  ; Saturate(value)
  %868 = fsub fast float %855, %867
  %869 = fadd fast float %793, 1.000000e+00
  %870 = call float @dx.op.unary.f32(i32 7, float %869)  ; Saturate(value)
  %871 = fsub fast float %870, %794
  %872 = call float @dx.op.unary.f32(i32 7, float %871)  ; Saturate(value)
  %873 = fsub fast float %858, %872
  %874 = fmul fast float %863, 3.906250e-03
  %875 = fmul fast float %868, 3.906250e-03
  %876 = fmul fast float %873, 3.906250e-03
  %877 = fsub fast float %792, %766
  %878 = fsub fast float %788, %766
  %879 = fadd fast float %868, %863
  %880 = fadd fast float %879, %873
  %881 = fmul fast float %880, 3.906250e-03
  %882 = fdiv fast float %877, %881
  %883 = fdiv fast float %878, %881
  %884 = icmp sge i32 %833, %825
  %885 = icmp sle i32 %826, %834
  %886 = and i1 %884, %885
  %887 = and i1 %800, %886
  br i1 %887, label %888, label %1026

; <label>:888                                     ; preds = %784
  %889 = sub nsw i32 %833, %825
  %890 = icmp sgt i32 %889, 4
  %891 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %890)  ; WaveAnyTrue(cond)
  br i1 %891, label %944, label %892

; <label>:892                                     ; preds = %888
  br label %893

; <label>:893                                     ; preds = %939, %892
  %894 = phi float [ %940, %939 ], [ %874, %892 ]
  %895 = phi float [ %941, %939 ], [ %875, %892 ]
  %896 = phi float [ %942, %939 ], [ %876, %892 ]
  %897 = phi i32 [ %943, %939 ], [ %826, %892 ]
  %898 = call float @dx.op.binary.f32(i32 36, float %895, float %896)  ; FMin(a,b)
  %899 = call float @dx.op.binary.f32(i32 36, float %894, float %898)  ; FMin(a,b)
  %900 = fcmp fast ult float %899, 0.000000e+00
  br i1 %900, label %910, label %901

; <label>:901                                     ; preds = %893
  %902 = fmul fast float %895, %882
  %903 = fadd fast float %902, %766
  %904 = fmul fast float %896, %883
  %905 = fadd fast float %903, %904
  %906 = call float @dx.op.unary.f32(i32 7, float %905)  ; Saturate(value)
  %907 = bitcast float %906 to i32
  %908 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %909 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %908, i32 7, i32 %825, i32 %897, i32 undef, i32 %907)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %910

; <label>:910                                     ; preds = %901, %893
  %911 = icmp sgt i32 %833, %825
  br i1 %911, label %912, label %937

; <label>:912                                     ; preds = %910
  br label %913

; <label>:913                                     ; preds = %934, %912
  %914 = phi float [ %918, %934 ], [ %894, %912 ]
  %915 = phi float [ %919, %934 ], [ %895, %912 ]
  %916 = phi float [ %920, %934 ], [ %896, %912 ]
  %917 = phi i32 [ %921, %934 ], [ %825, %912 ]
  %918 = fsub fast float %914, %837
  %919 = fsub fast float %915, %796
  %920 = fadd fast float %916, %794
  %921 = add nsw i32 %917, 1
  %922 = call float @dx.op.binary.f32(i32 36, float %919, float %920)  ; FMin(a,b)
  %923 = call float @dx.op.binary.f32(i32 36, float %918, float %922)  ; FMin(a,b)
  %924 = fcmp fast ult float %923, 0.000000e+00
  br i1 %924, label %934, label %925

; <label>:925                                     ; preds = %913
  %926 = fmul fast float %919, %882
  %927 = fadd fast float %926, %766
  %928 = fmul fast float %920, %883
  %929 = fadd fast float %927, %928
  %930 = call float @dx.op.unary.f32(i32 7, float %929)  ; Saturate(value)
  %931 = bitcast float %930 to i32
  %932 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %933 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %932, i32 7, i32 %921, i32 %897, i32 undef, i32 %931)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %934

; <label>:934                                     ; preds = %925, %913
  %935 = icmp eq i32 %921, %833
  br i1 %935, label %936, label %913

; <label>:936                                     ; preds = %934
  br label %937

; <label>:937                                     ; preds = %936, %910
  %938 = icmp slt i32 %897, %834
  br i1 %938, label %939, label %1025

; <label>:939                                     ; preds = %937
  %940 = fadd fast float %894, %836
  %941 = fadd fast float %895, %795
  %942 = fsub fast float %896, %793
  %943 = add nsw i32 %897, 1
  br label %893

; <label>:944                                     ; preds = %888
  %945 = fcmp fast olt float %837, 0.000000e+00
  %946 = fcmp fast olt float %796, 0.000000e+00
  %947 = fcmp ogt float %794, -0.000000e+00
  %948 = fdiv fast float 1.000000e+00, %837
  %949 = fdiv fast float 1.000000e+00, %796
  %950 = fdiv fast float 1.000000e+00, %835
  %951 = fcmp fast oeq float %837, 0.000000e+00
  %952 = fcmp fast oeq float %796, 0.000000e+00
  %953 = fcmp oeq float %794, -0.000000e+00
  %954 = select i1 %951, float 1.000000e+08, float %948
  %955 = select i1 %952, float 1.000000e+08, float %949
  %956 = select i1 %953, float 1.000000e+08, float %950
  br label %957

; <label>:957                                     ; preds = %1019, %944
  %958 = phi float [ %874, %944 ], [ %1020, %1019 ]
  %959 = phi float [ %875, %944 ], [ %1021, %1019 ]
  %960 = phi float [ %876, %944 ], [ %1022, %1019 ]
  %961 = phi i32 [ %826, %944 ], [ %1023, %1019 ]
  %962 = fmul fast float %958, %954
  %963 = fmul fast float %959, %955
  %964 = fmul fast float %960, %956
  %965 = select i1 %945, float %962, float 0.000000e+00
  %966 = select i1 %946, float %963, float 0.000000e+00
  %967 = select i1 %947, float %964, float 0.000000e+00
  %968 = fptosi float %962 to i32
  %969 = fptosi float %963 to i32
  %970 = fptosi float %964 to i32
  %971 = select i1 %945, i32 %889, i32 %968
  %972 = select i1 %946, i32 %889, i32 %969
  %973 = select i1 %947, i32 %889, i32 %970
  %974 = sitofp i32 %971 to float
  %975 = sitofp i32 %972 to float
  %976 = sitofp i32 %973 to float
  %977 = call float @dx.op.binary.f32(i32 35, float %966, float %967)  ; FMax(a,b)
  %978 = call float @dx.op.binary.f32(i32 35, float %965, float %977)  ; FMax(a,b)
  %979 = call float @dx.op.unary.f32(i32 28, float %978)  ; Round_pi(value)
  %980 = call float @dx.op.binary.f32(i32 36, float %975, float %976)  ; FMin(a,b)
  %981 = call float @dx.op.binary.f32(i32 36, float %974, float %980)  ; FMin(a,b)
  %982 = fadd fast float %979, %838
  %983 = fadd fast float %981, %838
  %984 = fcmp fast ugt float %982, %983
  br i1 %984, label %1017, label %985

; <label>:985                                     ; preds = %957
  %986 = fmul fast float %979, %835
  %987 = fsub fast float %960, %986
  %988 = fmul fast float %979, %796
  %989 = fsub fast float %959, %988
  %990 = fmul fast float %979, %837
  %991 = fsub fast float %958, %990
  br label %992

; <label>:992                                     ; preds = %1010, %985
  %993 = phi float [ %1011, %1010 ], [ %991, %985 ]
  %994 = phi float [ %1012, %1010 ], [ %989, %985 ]
  %995 = phi float [ %1013, %1010 ], [ %987, %985 ]
  %996 = phi float [ %1014, %1010 ], [ %982, %985 ]
  %997 = call float @dx.op.binary.f32(i32 36, float %994, float %995)  ; FMin(a,b)
  %998 = call float @dx.op.binary.f32(i32 36, float %993, float %997)  ; FMin(a,b)
  %999 = fcmp fast ult float %998, 0.000000e+00
  br i1 %999, label %1010, label %1000

; <label>:1000                                    ; preds = %992
  %1001 = fptoui float %996 to i32
  %1002 = fmul fast float %994, %882
  %1003 = fadd fast float %1002, %766
  %1004 = fmul fast float %995, %883
  %1005 = fadd fast float %1003, %1004
  %1006 = call float @dx.op.unary.f32(i32 7, float %1005)  ; Saturate(value)
  %1007 = bitcast float %1006 to i32
  %1008 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %1009 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1008, i32 7, i32 %1001, i32 %961, i32 undef, i32 %1007)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %1010

; <label>:1010                                    ; preds = %1000, %992
  %1011 = fsub fast float %993, %837
  %1012 = fsub fast float %994, %796
  %1013 = fadd fast float %995, %794
  %1014 = fadd fast float %996, 1.000000e+00
  %1015 = fcmp fast ugt float %1014, %983
  br i1 %1015, label %1016, label %992

; <label>:1016                                    ; preds = %1010
  br label %1017

; <label>:1017                                    ; preds = %1016, %957
  %1018 = icmp slt i32 %961, %834
  br i1 %1018, label %1019, label %1024

; <label>:1019                                    ; preds = %1017
  %1020 = fadd fast float %958, %836
  %1021 = fadd fast float %959, %795
  %1022 = fsub fast float %960, %793
  %1023 = add nsw i32 %961, 1
  br label %957

; <label>:1024                                    ; preds = %1017
  br label %1026

; <label>:1025                                    ; preds = %937
  br label %1026

; <label>:1026                                    ; preds = %1025, %1024, %784
  %1027 = add i32 %14, 64
  %1028 = add i32 %274, %1027
  %1029 = mul i32 %723, %1028
  %1030 = ashr i32 %1029, 5
  %1031 = shl nsw i32 %1030, 2
  %1032 = add i32 %725, %1031
  %1033 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %1034 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %1033, i32 %1032, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1035 = extractvalue %dx.types.ResRet.i32 %1034, 0
  %1036 = and i32 %1029, 31
  %1037 = lshr i32 %1035, %1036
  %1038 = icmp eq i32 %1036, 0
  br i1 %1038, label %1044, label %1039

; <label>:1039                                    ; preds = %1026
  %1040 = extractvalue %dx.types.ResRet.i32 %1034, 1
  %1041 = sub i32 0, %1029
  %1042 = and i32 %1041, 31
  %1043 = shl i32 %1040, %1042
  br label %1044

; <label>:1044                                    ; preds = %1039, %1026
  %1045 = phi i32 [ %1043, %1039 ], [ 0, %1026 ]
  %1046 = or i32 %1045, %1037
  %1047 = and i32 %1046, %744
  %1048 = lshr i32 %1046, %265
  %1049 = and i32 %1048, 31
  %1050 = lshr i32 %1046, %748
  %1051 = and i32 %1050, 31
  %1052 = add i32 %1049, %1047
  %1053 = add i32 %1051, %1047
  %1054 = select i1 %226, i32 %1053, i32 %1052
  %1055 = select i1 %226, i32 %1052, i32 %1053
  %1056 = mul i32 %1047, 3
  %1057 = add i32 0, %1056
  %1058 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1057
  %1059 = load float, float addrspace(3)* %1058, align 4
  %1060 = mul i32 %1047, 3
  %1061 = add i32 1, %1060
  %1062 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1061
  %1063 = load float, float addrspace(3)* %1062, align 4
  %1064 = mul i32 %1047, 3
  %1065 = add i32 2, %1064
  %1066 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1065
  %1067 = load float, float addrspace(3)* %1066, align 4
  %1068 = mul i32 %1054, 3
  %1069 = add i32 0, %1068
  %1070 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1069
  %1071 = load float, float addrspace(3)* %1070, align 4
  %1072 = mul i32 %1054, 3
  %1073 = add i32 1, %1072
  %1074 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1073
  %1075 = load float, float addrspace(3)* %1074, align 4
  %1076 = mul i32 %1055, 3
  %1077 = add i32 0, %1076
  %1078 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1077
  %1079 = load float, float addrspace(3)* %1078, align 4
  %1080 = mul i32 %1055, 3
  %1081 = add i32 1, %1080
  %1082 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1081
  %1083 = load float, float addrspace(3)* %1082, align 4
  %1084 = icmp ult i32 %1027, %273
  br i1 %1084, label %1085, label %1325, !dx.controlflow.hints !31

; <label>:1085                                    ; preds = %1044
  %1086 = mul i32 %1055, 3
  %1087 = add i32 2, %1086
  %1088 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1087
  %1089 = load float, float addrspace(3)* %1088, align 4
  %1090 = mul i32 %1054, 3
  %1091 = add i32 2, %1090
  %1092 = getelementptr [768 x float], [768 x float] addrspace(3)* @"\01?GroupVerts@@3PAV?$vector@M$02@@A.v.1dim", i32 0, i32 %1091
  %1093 = load float, float addrspace(3)* %1092, align 4
  %1094 = fsub fast float %1071, %1059
  %1095 = fsub fast float %1075, %1063
  %1096 = fsub fast float %1079, %1059
  %1097 = fsub fast float %1083, %1063
  %1098 = fmul fast float %1097, %1094
  %1099 = fmul fast float %1096, %1095
  %1100 = fsub fast float %1098, %1099
  %1101 = fcmp ult float %1100, 0.000000e+00
  %1102 = call float @dx.op.binary.f32(i32 36, float %1071, float %1079)  ; FMin(a,b)
  %1103 = call float @dx.op.binary.f32(i32 36, float %1059, float %1102)  ; FMin(a,b)
  %1104 = call float @dx.op.binary.f32(i32 36, float %1075, float %1083)  ; FMin(a,b)
  %1105 = call float @dx.op.binary.f32(i32 36, float %1063, float %1104)  ; FMin(a,b)
  %1106 = call float @dx.op.binary.f32(i32 35, float %1071, float %1079)  ; FMax(a,b)
  %1107 = call float @dx.op.binary.f32(i32 35, float %1059, float %1106)  ; FMax(a,b)
  %1108 = call float @dx.op.binary.f32(i32 35, float %1075, float %1083)  ; FMax(a,b)
  %1109 = call float @dx.op.binary.f32(i32 35, float %1063, float %1108)  ; FMax(a,b)
  %1110 = fadd fast float %1103, 1.270000e+02
  %1111 = fadd fast float %1105, 1.270000e+02
  %1112 = fmul fast float %1110, 3.906250e-03
  %1113 = fmul fast float %1111, 3.906250e-03
  %1114 = call float @dx.op.unary.f32(i32 27, float %1112)  ; Round_ni(value)
  %1115 = call float @dx.op.unary.f32(i32 27, float %1113)  ; Round_ni(value)
  %1116 = fptosi float %1114 to i32
  %1117 = fptosi float %1115 to i32
  %1118 = fadd fast float %1107, -1.290000e+02
  %1119 = fadd fast float %1109, -1.290000e+02
  %1120 = fmul fast float %1118, 3.906250e-03
  %1121 = fmul fast float %1119, 3.906250e-03
  %1122 = call float @dx.op.unary.f32(i32 27, float %1120)  ; Round_ni(value)
  %1123 = call float @dx.op.unary.f32(i32 27, float %1121)  ; Round_ni(value)
  %1124 = fptosi float %1122 to i32
  %1125 = fptosi float %1123 to i32
  %1126 = call i32 @dx.op.binary.i32(i32 37, i32 %1116, i32 %205)  ; IMax(a,b)
  %1127 = call i32 @dx.op.binary.i32(i32 37, i32 %1117, i32 %206)  ; IMax(a,b)
  %1128 = call i32 @dx.op.binary.i32(i32 38, i32 %1124, i32 %827)  ; IMin(a,b)
  %1129 = call i32 @dx.op.binary.i32(i32 38, i32 %1125, i32 %828)  ; IMin(a,b)
  %1130 = add i32 %1126, 63
  %1131 = add i32 %1127, 63
  %1132 = call i32 @dx.op.binary.i32(i32 38, i32 %1128, i32 %1130)  ; IMin(a,b)
  %1133 = call i32 @dx.op.binary.i32(i32 38, i32 %1129, i32 %1131)  ; IMin(a,b)
  %1134 = fsub fast float -0.000000e+00, %1095
  %1135 = fsub fast float %1071, %1079
  %1136 = fsub fast float %1075, %1083
  %1137 = sitofp i32 %1126 to float
  %1138 = sitofp i32 %1127 to float
  %1139 = fmul fast float %1137, 2.560000e+02
  %1140 = fmul fast float %1138, 2.560000e+02
  %1141 = fadd fast float %1139, 1.280000e+02
  %1142 = fadd fast float %1140, 1.280000e+02
  %1143 = fsub fast float %1059, %1141
  %1144 = fsub fast float %1063, %1142
  %1145 = fsub fast float %1071, %1141
  %1146 = fsub fast float %1075, %1142
  %1147 = fsub fast float %1079, %1141
  %1148 = fsub fast float %1083, %1142
  %1149 = fmul fast float %1145, %1136
  %1150 = fmul fast float %1146, %1135
  %1151 = fsub fast float %1149, %1150
  %1152 = fmul fast float %1147, %1097
  %1153 = fmul fast float %1148, %1096
  %1154 = fsub fast float %1152, %1153
  %1155 = fmul fast float %1143, %1134
  %1156 = fmul fast float %1144, %1094
  %1157 = fadd fast float %1156, %1155
  %1158 = fsub fast float 1.000000e+00, %1135
  %1159 = call float @dx.op.unary.f32(i32 7, float %1158)  ; Saturate(value)
  %1160 = fadd fast float %1159, %1136
  %1161 = call float @dx.op.unary.f32(i32 7, float %1160)  ; Saturate(value)
  %1162 = fsub fast float %1151, %1161
  %1163 = fsub fast float 1.000000e+00, %1096
  %1164 = call float @dx.op.unary.f32(i32 7, float %1163)  ; Saturate(value)
  %1165 = fadd fast float %1164, %1097
  %1166 = call float @dx.op.unary.f32(i32 7, float %1165)  ; Saturate(value)
  %1167 = fsub fast float %1154, %1166
  %1168 = fadd fast float %1094, 1.000000e+00
  %1169 = call float @dx.op.unary.f32(i32 7, float %1168)  ; Saturate(value)
  %1170 = fsub fast float %1169, %1095
  %1171 = call float @dx.op.unary.f32(i32 7, float %1170)  ; Saturate(value)
  %1172 = fsub fast float %1157, %1171
  %1173 = fmul fast float %1162, 3.906250e-03
  %1174 = fmul fast float %1167, 3.906250e-03
  %1175 = fmul fast float %1172, 3.906250e-03
  %1176 = fsub fast float %1093, %1067
  %1177 = fsub fast float %1089, %1067
  %1178 = fadd fast float %1167, %1162
  %1179 = fadd fast float %1178, %1172
  %1180 = fmul fast float %1179, 3.906250e-03
  %1181 = fdiv fast float %1176, %1180
  %1182 = fdiv fast float %1177, %1180
  %1183 = icmp sge i32 %1132, %1126
  %1184 = icmp sle i32 %1127, %1133
  %1185 = and i1 %1183, %1184
  %1186 = and i1 %1101, %1185
  br i1 %1186, label %1187, label %1325

; <label>:1187                                    ; preds = %1085
  %1188 = sub nsw i32 %1132, %1126
  %1189 = icmp sgt i32 %1188, 4
  %1190 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %1189)  ; WaveAnyTrue(cond)
  br i1 %1190, label %1243, label %1191

; <label>:1191                                    ; preds = %1187
  br label %1192

; <label>:1192                                    ; preds = %1238, %1191
  %1193 = phi float [ %1239, %1238 ], [ %1173, %1191 ]
  %1194 = phi float [ %1240, %1238 ], [ %1174, %1191 ]
  %1195 = phi float [ %1241, %1238 ], [ %1175, %1191 ]
  %1196 = phi i32 [ %1242, %1238 ], [ %1127, %1191 ]
  %1197 = call float @dx.op.binary.f32(i32 36, float %1194, float %1195)  ; FMin(a,b)
  %1198 = call float @dx.op.binary.f32(i32 36, float %1193, float %1197)  ; FMin(a,b)
  %1199 = fcmp fast ult float %1198, 0.000000e+00
  br i1 %1199, label %1209, label %1200

; <label>:1200                                    ; preds = %1192
  %1201 = fmul fast float %1194, %1181
  %1202 = fadd fast float %1201, %1067
  %1203 = fmul fast float %1195, %1182
  %1204 = fadd fast float %1202, %1203
  %1205 = call float @dx.op.unary.f32(i32 7, float %1204)  ; Saturate(value)
  %1206 = bitcast float %1205 to i32
  %1207 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %1208 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1207, i32 7, i32 %1126, i32 %1196, i32 undef, i32 %1206)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %1209

; <label>:1209                                    ; preds = %1200, %1192
  %1210 = icmp sgt i32 %1132, %1126
  br i1 %1210, label %1211, label %1236

; <label>:1211                                    ; preds = %1209
  br label %1212

; <label>:1212                                    ; preds = %1233, %1211
  %1213 = phi float [ %1217, %1233 ], [ %1193, %1211 ]
  %1214 = phi float [ %1218, %1233 ], [ %1194, %1211 ]
  %1215 = phi float [ %1219, %1233 ], [ %1195, %1211 ]
  %1216 = phi i32 [ %1220, %1233 ], [ %1126, %1211 ]
  %1217 = fsub fast float %1213, %1136
  %1218 = fsub fast float %1214, %1097
  %1219 = fadd fast float %1215, %1095
  %1220 = add nsw i32 %1216, 1
  %1221 = call float @dx.op.binary.f32(i32 36, float %1218, float %1219)  ; FMin(a,b)
  %1222 = call float @dx.op.binary.f32(i32 36, float %1217, float %1221)  ; FMin(a,b)
  %1223 = fcmp fast ult float %1222, 0.000000e+00
  br i1 %1223, label %1233, label %1224

; <label>:1224                                    ; preds = %1212
  %1225 = fmul fast float %1218, %1181
  %1226 = fadd fast float %1225, %1067
  %1227 = fmul fast float %1219, %1182
  %1228 = fadd fast float %1226, %1227
  %1229 = call float @dx.op.unary.f32(i32 7, float %1228)  ; Saturate(value)
  %1230 = bitcast float %1229 to i32
  %1231 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %1232 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1231, i32 7, i32 %1220, i32 %1196, i32 undef, i32 %1230)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %1233

; <label>:1233                                    ; preds = %1224, %1212
  %1234 = icmp eq i32 %1220, %1132
  br i1 %1234, label %1235, label %1212

; <label>:1235                                    ; preds = %1233
  br label %1236

; <label>:1236                                    ; preds = %1235, %1209
  %1237 = icmp slt i32 %1196, %1133
  br i1 %1237, label %1238, label %1324

; <label>:1238                                    ; preds = %1236
  %1239 = fadd fast float %1193, %1135
  %1240 = fadd fast float %1194, %1096
  %1241 = fsub fast float %1195, %1094
  %1242 = add nsw i32 %1196, 1
  br label %1192

; <label>:1243                                    ; preds = %1187
  %1244 = fcmp fast olt float %1136, 0.000000e+00
  %1245 = fcmp fast olt float %1097, 0.000000e+00
  %1246 = fcmp ogt float %1095, -0.000000e+00
  %1247 = fdiv fast float 1.000000e+00, %1136
  %1248 = fdiv fast float 1.000000e+00, %1097
  %1249 = fdiv fast float 1.000000e+00, %1134
  %1250 = fcmp fast oeq float %1136, 0.000000e+00
  %1251 = fcmp fast oeq float %1097, 0.000000e+00
  %1252 = fcmp oeq float %1095, -0.000000e+00
  %1253 = select i1 %1250, float 1.000000e+08, float %1247
  %1254 = select i1 %1251, float 1.000000e+08, float %1248
  %1255 = select i1 %1252, float 1.000000e+08, float %1249
  br label %1256

; <label>:1256                                    ; preds = %1318, %1243
  %1257 = phi float [ %1173, %1243 ], [ %1319, %1318 ]
  %1258 = phi float [ %1174, %1243 ], [ %1320, %1318 ]
  %1259 = phi float [ %1175, %1243 ], [ %1321, %1318 ]
  %1260 = phi i32 [ %1127, %1243 ], [ %1322, %1318 ]
  %1261 = fmul fast float %1257, %1253
  %1262 = fmul fast float %1258, %1254
  %1263 = fmul fast float %1259, %1255
  %1264 = select i1 %1244, float %1261, float 0.000000e+00
  %1265 = select i1 %1245, float %1262, float 0.000000e+00
  %1266 = select i1 %1246, float %1263, float 0.000000e+00
  %1267 = fptosi float %1261 to i32
  %1268 = fptosi float %1262 to i32
  %1269 = fptosi float %1263 to i32
  %1270 = select i1 %1244, i32 %1188, i32 %1267
  %1271 = select i1 %1245, i32 %1188, i32 %1268
  %1272 = select i1 %1246, i32 %1188, i32 %1269
  %1273 = sitofp i32 %1270 to float
  %1274 = sitofp i32 %1271 to float
  %1275 = sitofp i32 %1272 to float
  %1276 = call float @dx.op.binary.f32(i32 35, float %1265, float %1266)  ; FMax(a,b)
  %1277 = call float @dx.op.binary.f32(i32 35, float %1264, float %1276)  ; FMax(a,b)
  %1278 = call float @dx.op.unary.f32(i32 28, float %1277)  ; Round_pi(value)
  %1279 = call float @dx.op.binary.f32(i32 36, float %1274, float %1275)  ; FMin(a,b)
  %1280 = call float @dx.op.binary.f32(i32 36, float %1273, float %1279)  ; FMin(a,b)
  %1281 = fadd fast float %1278, %1137
  %1282 = fadd fast float %1280, %1137
  %1283 = fcmp fast ugt float %1281, %1282
  br i1 %1283, label %1316, label %1284

; <label>:1284                                    ; preds = %1256
  %1285 = fmul fast float %1278, %1134
  %1286 = fsub fast float %1259, %1285
  %1287 = fmul fast float %1278, %1097
  %1288 = fsub fast float %1258, %1287
  %1289 = fmul fast float %1278, %1136
  %1290 = fsub fast float %1257, %1289
  br label %1291

; <label>:1291                                    ; preds = %1309, %1284
  %1292 = phi float [ %1310, %1309 ], [ %1290, %1284 ]
  %1293 = phi float [ %1311, %1309 ], [ %1288, %1284 ]
  %1294 = phi float [ %1312, %1309 ], [ %1286, %1284 ]
  %1295 = phi float [ %1313, %1309 ], [ %1281, %1284 ]
  %1296 = call float @dx.op.binary.f32(i32 36, float %1293, float %1294)  ; FMin(a,b)
  %1297 = call float @dx.op.binary.f32(i32 36, float %1292, float %1296)  ; FMin(a,b)
  %1298 = fcmp fast ult float %1297, 0.000000e+00
  br i1 %1298, label %1309, label %1299

; <label>:1299                                    ; preds = %1291
  %1300 = fptoui float %1295 to i32
  %1301 = fmul fast float %1293, %1181
  %1302 = fadd fast float %1301, %1067
  %1303 = fmul fast float %1294, %1182
  %1304 = fadd fast float %1302, %1303
  %1305 = call float @dx.op.unary.f32(i32 7, float %1304)  ; Saturate(value)
  %1306 = bitcast float %1305 to i32
  %1307 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %1308 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %1307, i32 7, i32 %1300, i32 %1260, i32 undef, i32 %1306)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %1309

; <label>:1309                                    ; preds = %1299, %1291
  %1310 = fsub fast float %1292, %1136
  %1311 = fsub fast float %1293, %1097
  %1312 = fadd fast float %1294, %1095
  %1313 = fadd fast float %1295, 1.000000e+00
  %1314 = fcmp fast ugt float %1313, %1282
  br i1 %1314, label %1315, label %1291

; <label>:1315                                    ; preds = %1309
  br label %1316

; <label>:1316                                    ; preds = %1315, %1256
  %1317 = icmp slt i32 %1260, %1133
  br i1 %1317, label %1318, label %1323

; <label>:1318                                    ; preds = %1316
  %1319 = fadd fast float %1257, %1135
  %1320 = fadd fast float %1258, %1096
  %1321 = fsub fast float %1259, %1094
  %1322 = add nsw i32 %1260, 1
  br label %1256

; <label>:1323                                    ; preds = %1316
  br label %1325

; <label>:1324                                    ; preds = %1236
  br label %1325

; <label>:1325                                    ; preds = %1324, %1323, %1085, %1044, %740
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: noduplicate nounwind
declare void @dx.op.barrier(i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #3

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { noduplicate nounwind }
attributes #3 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!23}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !19, !21, null}
!5 = !{!6, !8, !9, !10, !11, !13, !14, !16, !17}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i32 0, null}
!10 = !{i32 3, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 3, i32 1, i32 11, i32 0, null}
!11 = !{i32 4, %"hostlayout.class.StructuredBuffer<FPackedNaniteView>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 912}
!13 = !{i32 5, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !7}
!14 = !{i32 6, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 8}
!16 = !{i32 7, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !15}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !18}
!18 = !{i32 0, i32 5}
!19 = !{!20}
!20 = !{i32 0, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !18}
!21 = !{!22}
!22 = !{i32 0, %"$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 124, null}
!23 = !{void ()* @MicropolyRasterize, !"MicropolyRasterize", null, !4, !24}
!24 = !{i32 0, i64 524304, i32 4, !25, i32 5, !26}
!25 = !{i32 64, i32 1, i32 1}
!26 = !{i32 0}
!27 = distinct !{!27, !"dx.controlflow.hints", i32 1}
!28 = distinct !{!28, !"dx.controlflow.hints", i32 1}
!29 = distinct !{!29, !"dx.controlflow.hints", i32 1}
!30 = distinct !{!30, !"dx.controlflow.hints", i32 1}
!31 = distinct !{!31, !"dx.controlflow.hints", i32 1}
