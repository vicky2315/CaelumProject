;
; Note: shader requires additional functionality:
;       Wave level operations
;       64-Bit integer
;       64-bit Atomics on Typed Resources
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: a51858f3de5f14109cf5a5112bcdff89
;
; Pipeline Runtime Information: 
;
; Compute Shader
; NumThreads=(32,1,1)
;
;
; Buffer Definitions:
;
; cbuffer $Globals
; {
;
;   struct $Globals
;   {
;
;       uint GPUSceneFrameNumber;                     ; Offset:    0
;       uint4 PageConstants;                          ; Offset:   16
;       uint MaxNodes;                                ; Offset:   32
;       uint MaxVisibleClusters;                      ; Offset:   36
;       uint RenderFlags;                             ; Offset:   40
;       float RayTracingCutError;                     ; Offset:   44
;       uint DebugFlags;                              ; Offset:   48
;       float2 HZBViewSize;                           ; Offset:   52
;       float2 HZBSize;                               ; Offset:   64
;       float4 DepthOfFieldParams;                    ; Offset:   80
;       uint bSceneLightingChannelsValid;             ; Offset:   96
;       uint MaxCandidateClusters;                    ; Offset:  100
;       uint ActiveRasterizerBin;                     ; Offset:  104
;       float2 HardwareViewportSize;                  ; Offset:  112
;       uint VisualizeModeBitMask;                    ; Offset:  120
;   
;   } $Globals;                                       ; Offset:    0 Size:   124
;
; }
;
; Resource bind info for GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for InViews
; {
;
;   struct hostlayout.struct.FPackedNaniteView
;   {
;
;       row_major float4x4 SVPositionToTranslatedWorld;; Offset:    0
;       row_major float4x4 ViewToTranslatedWorld;     ; Offset:   64
;       row_major float4x4 TranslatedWorldToView;     ; Offset:  128
;       row_major float4x4 TranslatedWorldToClip;     ; Offset:  192
;       row_major float4x4 TranslatedWorldToSubpixelClip;; Offset:  256
;       row_major float4x4 ViewToClip;                ; Offset:  320
;       row_major float4x4 ClipToRelativeWorld;       ; Offset:  384
;       row_major float4x4 PrevTranslatedWorldToView; ; Offset:  448
;       row_major float4x4 PrevTranslatedWorldToClip; ; Offset:  512
;       row_major float4x4 PrevViewToClip;            ; Offset:  576
;       row_major float4x4 PrevClipToRelativeWorld;   ; Offset:  640
;       int4 ViewRect;                                ; Offset:  704
;       float4 ViewSizeAndInvSize;                    ; Offset:  720
;       float4 ClipSpaceScaleOffset;                  ; Offset:  736
;       float3 RelativePreViewTranslation;            ; Offset:  752
;       float ViewTilePositionX;                      ; Offset:  764
;       float3 RelativePrevPreViewTranslation;        ; Offset:  768
;       float ViewTilePositionY;                      ; Offset:  780
;       float3 RelativeWorldCameraOrigin;             ; Offset:  784
;       float ViewTilePositionZ;                      ; Offset:  796
;       float3 DrawDistanceOriginTranslatedWorld;     ; Offset:  800
;       float RangeBasedCullingDistance;              ; Offset:  812
;       float3 ViewForward;                           ; Offset:  816
;       float NearPlane;                              ; Offset:  828
;       float4 TranslatedGlobalClipPlane;             ; Offset:  832
;       float3 MatrixTilePosition;                    ; Offset:  848
;       float Padding1;                               ; Offset:  860
;       float2 LODScales;                             ; Offset:  864
;       float MinBoundsRadiusSq;                      ; Offset:  872
;       uint StreamingPriorityCategory_AndFlags;      ; Offset:  876
;       int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;; Offset:  880
;       int4 HZBTestViewRect;                         ; Offset:  896
;   
;   } $Element;                                       ; Offset:    0 Size:   912
;
; }
;
; Resource bind info for RasterizerBinHeaders
; {
;
;   uint4 $Element;                                   ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for RasterizerBinData
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
; Resource bind info for InTotalPrevDrawClusters
; {
;
;   uint2 $Element;                                   ; Offset:    0 Size:     8
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; $Globals                          cbuffer      NA          NA     CB0            cb0     1
; GPUScenePrimitiveSceneData        texture  struct         r/o      T0             t0     1
; GPUSceneInstanceSceneData         texture  struct         r/o      T1             t1     1
; ClusterPageData                   texture    byte         r/o      T2             t2     1
; VisibleClustersSWHW               texture    byte         r/o      T3             t3     1
; InViews                           texture  struct         r/o      T4             t4     1
; RasterizerBinHeaders              texture  struct         r/o      T5             t5     1
; RasterizerBinData                 texture  struct         r/o      T6             t6     1
; InTotalPrevDrawClusters           texture  struct         r/o      T7             t7     1
; InClusterOffsetSWHW               texture     u32         buf      T8             t8     1
; OutVisBuffer64                        UAV     u32          2d      U0             u0     1
; OutDbgBuffer64                        UAV     u32          2d      U1             u1     1
; OutDbgBuffer32                        UAV     u32          2d      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:32-i16:32-i32:32-i64:64-f16:32-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.ResBind = type { i32, i32, i32, i8 }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%"hostlayout.class.StructuredBuffer<FPackedNaniteView>" = type { %hostlayout.struct.FPackedNaniteView }
%hostlayout.struct.FPackedNaniteView = type { [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], [4 x <4 x float>], <4 x i32>, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <3 x float>, float, <2 x float>, float, i32, <4 x i32>, <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 4> >" = type { <4 x i32> }
%"class.StructuredBuffer<vector<unsigned int, 2> >" = type { <2 x i32> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.RWTexture2D<unsigned long long>" = type { i64 }
%"class.RWTexture2D<unsigned int>" = type { i32 }
%"$Globals" = type { i32, <4 x i32>, i32, i32, i32, float, i32, <2 x float>, <2 x float>, <4 x float>, i32, i32, i32, <2 x float>, i32 }

define void @MicropolyRasterize() {
  %1 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 1 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 1 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 1 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 8, i32 8, i32 0, i8 0 }, i32 8, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %5 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 7, i32 7, i32 0, i8 0 }, i32 7, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %6 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 6, i32 6, i32 0, i8 0 }, i32 6, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %7 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 5, i32 5, i32 0, i8 0 }, i32 5, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %8 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 4, i32 4, i32 0, i8 0 }, i32 4, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %9 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 3, i32 3, i32 0, i8 0 }, i32 3, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %10 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 2, i32 2, i32 0, i8 0 }, i32 2, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %11 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 1, i32 1, i32 0, i8 0 }, i32 1, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %12 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind zeroinitializer, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %13 = call %dx.types.Handle @dx.op.createHandleFromBinding(i32 217, %dx.types.ResBind { i32 0, i32 0, i32 0, i8 2 }, i32 0, i1 false)  ; CreateHandleFromBinding(bind,index,nonUniformIndex)
  %14 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %13, %dx.types.ResourceProperties { i32 13, i32 124 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %15 = call i32 @dx.op.groupId.i32(i32 94, i32 0)  ; GroupId(component)
  %16 = call i32 @dx.op.flattenedThreadIdInGroup.i32(i32 96)  ; FlattenedThreadIdInGroup()
  %17 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %18 = extractvalue %dx.types.CBufRet.i32 %17, 2
  %19 = and i32 %18, 4096
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %34, !dx.controlflow.hints !30

; <label>:21                                      ; preds = %0
  %22 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.i32 %22, 2
  %24 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %7, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %25 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %24, i32 %23, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %26 = extractvalue %dx.types.ResRet.i32 %25, 2
  %27 = add i32 %26, %15
  %28 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %6, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %29 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %28, i32 %27, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %30 = extractvalue %dx.types.ResRet.i32 %29, 0
  %31 = extractvalue %dx.types.ResRet.i32 %29, 1
  %32 = lshr i32 %31, 16
  %33 = and i32 %31, 65535
  br label %34

; <label>:34                                      ; preds = %21, %0
  %35 = phi i32 [ %30, %21 ], [ %15, %0 ]
  %36 = phi i32 [ %32, %21 ], [ undef, %0 ]
  %37 = phi i32 [ %33, %21 ], [ undef, %0 ]
  %38 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.i32 %38, 2
  %40 = and i32 %39, 8192
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42, !dx.controlflow.hints !31

; <label>:42                                      ; preds = %34
  %43 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %5, %dx.types.ResourceProperties { i32 12, i32 8 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=8>
  %44 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %43, i32 0, i32 0, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %45 = extractvalue %dx.types.ResRet.i32 %44, 0
  %46 = add i32 %45, %35
  br label %47

; <label>:47                                      ; preds = %42, %34
  %48 = phi i32 [ %46, %42 ], [ %35, %34 ]
  %49 = and i32 %39, 2048
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %56, label %51, !dx.controlflow.hints !32

; <label>:51                                      ; preds = %47
  %52 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 10, i32 261 })  ; AnnotateHandle(res,props)  resource: TypedBuffer<U32>
  %53 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %52, i32 0, i32 undef)  ; BufferLoad(srv,index,wot)
  %54 = extractvalue %dx.types.ResRet.i32 %53, 0
  %55 = add i32 %54, %48
  br label %56

; <label>:56                                      ; preds = %51, %47
  %57 = phi i32 [ %55, %51 ], [ %48, %47 ]
  %58 = shl i32 %57, 3
  %59 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %9, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %60 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %59, i32 %58, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %61 = extractvalue %dx.types.ResRet.i32 %60, 0
  %62 = extractvalue %dx.types.ResRet.i32 %60, 1
  %63 = lshr i32 %61, 4
  %64 = and i32 %63, 4095
  %65 = lshr i32 %61, 16
  %66 = and i32 %62, 16777215
  %67 = lshr i32 %62, 24
  %68 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %69 = extractvalue %dx.types.CBufRet.i32 %68, 0
  %70 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %11, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %71 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %70, i32 %66, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %72 = extractvalue %dx.types.ResRet.f32 %71, 0
  %73 = bitcast float %72 to i32
  %74 = and i32 %73, 1048575
  %75 = mul nuw nsw i32 %74, 41
  %76 = add nuw nsw i32 %75, 1
  %77 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %12, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %78 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %77, i32 %76, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %79 = extractvalue %dx.types.ResRet.f32 %78, 0
  %80 = extractvalue %dx.types.ResRet.f32 %78, 1
  %81 = extractvalue %dx.types.ResRet.f32 %78, 2
  %82 = add i32 %69, %66
  %83 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %70, i32 %82, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %84 = extractvalue %dx.types.ResRet.f32 %83, 0
  %85 = extractvalue %dx.types.ResRet.f32 %83, 1
  %86 = extractvalue %dx.types.ResRet.f32 %83, 2
  %87 = extractvalue %dx.types.ResRet.f32 %83, 3
  %88 = bitcast float %84 to i32
  %89 = bitcast float %85 to i32
  %90 = bitcast float %86 to i32
  %91 = bitcast float %87 to i32
  %92 = shl i32 %69, 1
  %93 = add i32 %92, %66
  %94 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %70, i32 %93, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %95 = extractvalue %dx.types.ResRet.f32 %94, 0
  %96 = extractvalue %dx.types.ResRet.f32 %94, 1
  %97 = extractvalue %dx.types.ResRet.f32 %94, 2
  %98 = and i32 %88, 65535
  %99 = uitofp i32 %98 to float
  %100 = lshr i32 %88, 16
  %101 = uitofp i32 %100 to float
  %102 = and i32 %89, 32767
  %103 = uitofp i32 %102 to float
  %104 = fadd fast float %99, -3.276800e+04
  %105 = fadd fast float %101, -3.276800e+04
  %106 = fadd fast float %103, -1.638400e+04
  %107 = fmul fast float %106, 0x3F06A0F8E0000000
  %108 = and i32 %89, 32768
  %109 = icmp ne i32 %108, 0
  %110 = fadd fast float %104, %105
  %111 = fmul fast float %110, 0x3F00002000000000
  %112 = fsub fast float %104, %105
  %113 = fmul fast float %112, 0x3F00002000000000
  %114 = call float @dx.op.unary.f32(i32 6, float %111)  ; FAbs(value)
  %115 = call float @dx.op.unary.f32(i32 6, float %113)  ; FAbs(value)
  %116 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %114, float %115)  ; Dot2(ax,ay,bx,by)
  %117 = fsub fast float 2.000000e+00, %116
  %118 = call float @dx.op.dot3.f32(i32 55, float %111, float %113, float %117, float %111, float %113, float %117)  ; Dot3(ax,ay,az,bx,by,bz)
  %119 = call float @dx.op.unary.f32(i32 25, float %118)  ; Rsqrt(value)
  %120 = fmul fast float %119, %111
  %121 = fmul fast float %119, %113
  %122 = fmul fast float %119, %117
  %123 = fadd fast float %122, 1.000000e+00
  %124 = fdiv fast float 1.000000e+00, %123
  %125 = fmul fast float %121, %120
  %126 = fmul fast float %125, %124
  %127 = fsub fast float -0.000000e+00, %126
  %128 = fmul fast float %120, %120
  %129 = fmul fast float %128, %124
  %130 = fsub fast float 1.000000e+00, %129
  %131 = fmul fast float %121, %121
  %132 = fmul fast float %131, %124
  %133 = fsub fast float 1.000000e+00, %132
  %134 = fmul fast float %107, %107
  %135 = fsub fast float 1.000000e+00, %134
  %136 = call float @dx.op.unary.f32(i32 24, float %135)  ; Sqrt(value)
  %137 = select i1 %109, float %107, float %136
  %138 = select i1 %109, float %136, float %107
  %139 = fmul fast float %130, %137
  %140 = fmul fast float %137, %127
  %141 = fmul fast float %137, %120
  %142 = fmul fast float %138, %127
  %143 = fmul fast float %133, %138
  %144 = fmul fast float %121, %138
  %145 = fsub fast float -0.000000e+00, %144
  %146 = fadd fast float %139, %142
  %147 = fadd fast float %140, %143
  %148 = fsub fast float %145, %141
  %149 = fmul fast float %148, %121
  %150 = fmul fast float %147, %122
  %151 = fsub fast float %149, %150
  %152 = fmul fast float %146, %122
  %153 = fmul fast float %148, %120
  %154 = fsub fast float %152, %153
  %155 = fmul fast float %147, %120
  %156 = fmul fast float %146, %121
  %157 = fsub fast float %155, %156
  %158 = lshr i32 %91, 16
  %159 = shl i32 %158, 23
  %160 = add i32 %159, -125829120
  %161 = bitcast i32 %160 to float
  %162 = lshr i32 %90, 16
  %163 = and i32 %90, 65535
  %164 = and i32 %91, 65535
  %165 = uitofp i32 %163 to float
  %166 = uitofp i32 %162 to float
  %167 = uitofp i32 %164 to float
  %168 = fadd fast float %165, -3.276800e+04
  %169 = fadd fast float %166, -3.276800e+04
  %170 = fadd fast float %167, -3.276800e+04
  %171 = fmul fast float %161, %168
  %172 = fmul fast float %161, %169
  %173 = fmul fast float %161, %170
  %174 = fmul fast float %146, %171
  %175 = fmul fast float %147, %171
  %176 = fmul fast float %148, %171
  %177 = fmul fast float %151, %172
  %178 = fmul fast float %154, %172
  %179 = fmul fast float %157, %172
  %180 = fmul fast float %120, %173
  %181 = fmul fast float %121, %173
  %182 = fmul fast float %122, %173
  %183 = and i32 %73, 1048576
  %184 = icmp ne i32 %183, 0
  %185 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8, %dx.types.ResourceProperties { i32 524, i32 912 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=912>
  %186 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 192, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %187 = extractvalue %dx.types.ResRet.f32 %186, 0
  %188 = extractvalue %dx.types.ResRet.f32 %186, 1
  %189 = extractvalue %dx.types.ResRet.f32 %186, 2
  %190 = extractvalue %dx.types.ResRet.f32 %186, 3
  %191 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 208, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %192 = extractvalue %dx.types.ResRet.f32 %191, 0
  %193 = extractvalue %dx.types.ResRet.f32 %191, 1
  %194 = extractvalue %dx.types.ResRet.f32 %191, 2
  %195 = extractvalue %dx.types.ResRet.f32 %191, 3
  %196 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 224, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %197 = extractvalue %dx.types.ResRet.f32 %196, 0
  %198 = extractvalue %dx.types.ResRet.f32 %196, 1
  %199 = extractvalue %dx.types.ResRet.f32 %196, 2
  %200 = extractvalue %dx.types.ResRet.f32 %196, 3
  %201 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 240, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %202 = extractvalue %dx.types.ResRet.f32 %201, 0
  %203 = extractvalue %dx.types.ResRet.f32 %201, 1
  %204 = extractvalue %dx.types.ResRet.f32 %201, 2
  %205 = extractvalue %dx.types.ResRet.f32 %201, 3
  %206 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %185, i32 %64, i32 704, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %207 = extractvalue %dx.types.ResRet.i32 %206, 0
  %208 = extractvalue %dx.types.ResRet.i32 %206, 1
  %209 = extractvalue %dx.types.ResRet.i32 %206, 2
  %210 = extractvalue %dx.types.ResRet.i32 %206, 3
  %211 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 720, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %212 = extractvalue %dx.types.ResRet.f32 %211, 0
  %213 = extractvalue %dx.types.ResRet.f32 %211, 1
  %214 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 752, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %215 = extractvalue %dx.types.ResRet.f32 %214, 0
  %216 = extractvalue %dx.types.ResRet.f32 %214, 1
  %217 = extractvalue %dx.types.ResRet.f32 %214, 2
  %218 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 764, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %219 = extractvalue %dx.types.ResRet.f32 %218, 0
  %220 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 780, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %221 = extractvalue %dx.types.ResRet.f32 %220, 0
  %222 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %185, i32 %64, i32 796, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %223 = extractvalue %dx.types.ResRet.f32 %222, 0
  %224 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %185, i32 %64, i32 876, i8 1, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %225 = extractvalue %dx.types.ResRet.i32 %224, 0
  %226 = and i32 %225, 64
  %227 = icmp ne i32 %226, 0
  %228 = xor i1 %184, %227
  %229 = fsub fast float %79, %219
  %230 = fsub fast float %80, %221
  %231 = fsub fast float %81, %223
  %232 = fmul fast float %229, 2.097152e+06
  %233 = fmul fast float %230, 2.097152e+06
  %234 = fmul fast float %231, 2.097152e+06
  %235 = extractvalue %dx.types.CBufRet.i32 %68, 1
  %236 = call i32 @dx.op.binary.i32(i32 40, i32 %65, i32 %235)  ; UMin(a,b)
  %237 = shl i32 %236, 17
  %238 = sub nsw i32 %65, %235
  %239 = call i32 @dx.op.binary.i32(i32 37, i32 %238, i32 0)  ; IMax(a,b)
  %240 = shl i32 %239, 15
  %241 = add i32 %240, %237
  %242 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %243 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %242, i32 %241, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %244 = extractvalue %dx.types.ResRet.i32 %243, 0
  %245 = shl i32 %244, 4
  %246 = shl nuw nsw i32 %67, 4
  %247 = or i32 %241, %246
  %248 = add nsw i32 %247, 16
  %249 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %242, i32 %248, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %250 = extractvalue %dx.types.ResRet.i32 %249, 0
  %251 = extractvalue %dx.types.ResRet.i32 %249, 1
  %252 = add i32 %248, %245
  %253 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %242, i32 %252, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %254 = extractvalue %dx.types.ResRet.i32 %253, 0
  %255 = extractvalue %dx.types.ResRet.i32 %253, 1
  %256 = extractvalue %dx.types.ResRet.i32 %253, 2
  %257 = extractvalue %dx.types.ResRet.i32 %253, 3
  %258 = lshr i32 %250, 9
  %259 = and i32 %251, 255
  %260 = and i32 %257, 15
  %261 = lshr i32 %257, 9
  %262 = and i32 %261, 31
  %263 = lshr i32 %257, 14
  %264 = and i32 %263, 31
  %265 = lshr i32 %257, 19
  %266 = and i32 %265, 31
  %267 = sub i32 %37, %36
  %268 = select i1 %20, i32 %267, i32 %259
  %269 = select i1 %20, i32 %36, i32 0
  %270 = fmul fast float %212, 5.000000e-01
  %271 = fmul fast float %213, 5.000000e-01
  %272 = sitofp i32 %207 to float
  %273 = sitofp i32 %208 to float
  %274 = fadd fast float %270, %272
  %275 = fadd fast float %271, %273
  %276 = fmul fast float %212, 1.280000e+02
  %277 = fmul fast float %213, -1.280000e+02
  %278 = fmul fast float %274, 2.560000e+02
  %279 = fmul fast float %275, 2.560000e+02
  %280 = fadd fast float %278, 5.000000e-01
  %281 = fadd fast float %279, 5.000000e-01
  %282 = add i32 %269, %16
  %283 = icmp ult i32 %16, %268
  br i1 %283, label %284, label %340

; <label>:284                                     ; preds = %56
  %285 = lshr i32 %251, 8
  %286 = add nuw nsw i32 %260, 10
  %287 = mul i32 %286, %282
  %288 = add i32 %285, %241
  %289 = ashr i32 %287, 5
  %290 = shl nsw i32 %289, 2
  %291 = add i32 %288, %290
  %292 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %242, i32 %291, i32 undef, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %293 = extractvalue %dx.types.ResRet.i32 %292, 0
  %294 = and i32 %287, 31
  %295 = lshr i32 %293, %294
  %296 = icmp eq i32 %294, 0
  br i1 %296, label %302, label %297

; <label>:297                                     ; preds = %284
  %298 = extractvalue %dx.types.ResRet.i32 %292, 1
  %299 = sub i32 0, %287
  %300 = and i32 %299, 31
  %301 = shl i32 %298, %300
  br label %302

; <label>:302                                     ; preds = %297, %284
  %303 = phi i32 [ %301, %297 ], [ 0, %284 ]
  %304 = or i32 %303, %295
  %305 = shl i32 1, %260
  %306 = add i32 %305, -1
  %307 = and i32 %304, %306
  %308 = lshr i32 %304, %260
  %309 = and i32 %308, 31
  %310 = add nuw nsw i32 %260, 5
  %311 = lshr i32 %304, %310
  %312 = and i32 %311, 31
  %313 = add i32 %309, %307
  %314 = add i32 %312, %307
  %315 = select i1 %228, i32 %314, i32 %313
  %316 = select i1 %228, i32 %313, i32 %314
  %317 = call i32 @dx.op.waveActiveOp.i32(i32 119, i32 %307, i8 2, i8 1)  ; WaveActiveOp(value,op,sop)
  %318 = sub i32 %307, %317
  %319 = sub i32 %315, %317
  %320 = sub i32 %316, %317
  %321 = icmp ult i32 %318, 32
  %322 = and i32 %318, 31
  %323 = shl i32 1, %322
  %324 = select i1 %321, i32 %323, i32 0
  %325 = select i1 %321, i32 0, i32 %323
  %326 = icmp ult i32 %319, 32
  %327 = and i32 %319, 31
  %328 = shl i32 1, %327
  %329 = select i1 %326, i32 %328, i32 0
  %330 = or i32 %329, %324
  %331 = select i1 %326, i32 0, i32 %328
  %332 = or i32 %331, %325
  %333 = icmp ult i32 %320, 32
  %334 = and i32 %320, 31
  %335 = shl i32 1, %334
  %336 = select i1 %333, i32 %335, i32 0
  %337 = or i32 %330, %336
  %338 = select i1 %333, i32 0, i32 %335
  %339 = or i32 %332, %338
  br label %340

; <label>:340                                     ; preds = %302, %56
  %341 = phi i32 [ 0, %56 ], [ %320, %302 ]
  %342 = phi i32 [ 0, %56 ], [ %319, %302 ]
  %343 = phi i32 [ 0, %56 ], [ %318, %302 ]
  %344 = phi i32 [ 0, %56 ], [ %337, %302 ]
  %345 = phi i32 [ 0, %56 ], [ %339, %302 ]
  %346 = phi i32 [ 0, %56 ], [ %317, %302 ]
  %347 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %344, i8 1)  ; WaveActiveBit(value,op)
  %348 = call i32 @dx.op.waveActiveBit.i32(i32 120, i32 %345, i8 1)  ; WaveActiveBit(value,op)
  %349 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %347)  ; Countbits(value)
  %350 = icmp slt i32 %16, %349
  %351 = select i1 %350, i32 0, i32 %349
  %352 = select i1 %350, i32 %347, i32 %348
  %353 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %352)  ; Countbits(value)
  %354 = xor i32 %16, -1
  %355 = add i32 %353, %354
  %356 = add i32 %355, %351
  %357 = lshr i32 %352, 16
  %358 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %357)  ; Countbits(value)
  %359 = icmp ule i32 %358, %356
  %360 = select i1 %359, i32 8, i32 24
  %361 = lshr i32 %352, %360
  %362 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %361)  ; Countbits(value)
  %363 = icmp ule i32 %362, %356
  %364 = select i1 %363, i32 -4, i32 4
  %365 = add nsw i32 %360, %364
  %366 = and i32 %365, 28
  %367 = lshr i32 %352, %366
  %368 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %367)  ; Countbits(value)
  %369 = icmp ule i32 %368, %356
  %370 = select i1 %369, i32 -2, i32 2
  %371 = add nsw i32 %365, %370
  %372 = and i32 %371, 30
  %373 = lshr i32 %352, %372
  %374 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %373)  ; Countbits(value)
  %375 = icmp ule i32 %374, %356
  %376 = select i1 %375, i32 -1, i32 1
  %377 = add nsw i32 %371, %376
  %378 = and i32 %377, 31
  %379 = lshr i32 %352, %378
  %380 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %379)  ; Countbits(value)
  %381 = icmp eq i32 %380, %356
  %382 = sext i1 %381 to i32
  %383 = select i1 %350, i32 0, i32 32
  %384 = call i32 @dx.op.waveReadLaneFirst.i32(i32 118, i32 %346)  ; WaveReadLaneFirst(value)
  %385 = add i32 %384, %383
  %386 = add i32 %385, %382
  %387 = add i32 %386, %377
  %388 = icmp ult i32 %343, 32
  %389 = and i32 %343, 31
  %390 = shl i32 1, %389
  %391 = add i32 %390, -1
  %392 = select i1 %388, i32 %391, i32 -1
  %393 = and i32 %347, %392
  %394 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %393)  ; Countbits(value)
  %395 = select i1 %388, i32 0, i32 %391
  %396 = and i32 %348, %395
  %397 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %396)  ; Countbits(value)
  %398 = add i32 %397, %394
  %399 = icmp ult i32 %342, 32
  %400 = and i32 %342, 31
  %401 = shl i32 1, %400
  %402 = add i32 %401, -1
  %403 = select i1 %399, i32 %402, i32 -1
  %404 = and i32 %347, %403
  %405 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %404)  ; Countbits(value)
  %406 = select i1 %399, i32 0, i32 %402
  %407 = and i32 %348, %406
  %408 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %407)  ; Countbits(value)
  %409 = add i32 %408, %405
  %410 = icmp ult i32 %341, 32
  %411 = and i32 %341, 31
  %412 = shl i32 1, %411
  %413 = add i32 %412, -1
  %414 = select i1 %410, i32 %413, i32 -1
  %415 = and i32 %347, %414
  %416 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %415)  ; Countbits(value)
  %417 = select i1 %410, i32 0, i32 %413
  %418 = and i32 %348, %417
  %419 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %418)  ; Countbits(value)
  %420 = add i32 %419, %416
  %421 = call i32 @dx.op.unaryBits.i32(i32 31, i32 %348)  ; Countbits(value)
  %422 = add i32 %421, %349
  %423 = icmp ult i32 %16, %422
  br i1 %423, label %424, label %547

; <label>:424                                     ; preds = %340
  %425 = add nuw nsw i32 %262, %264
  %426 = add nuw nsw i32 %425, %266
  %427 = mul i32 %387, %426
  %428 = add i32 %258, %241
  %429 = lshr i32 %427, 5
  %430 = shl nuw nsw i32 %429, 2
  %431 = add i32 %428, %430
  %432 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %10, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %433 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %432, i32 %431, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %434 = extractvalue %dx.types.ResRet.i32 %433, 0
  %435 = extractvalue %dx.types.ResRet.i32 %433, 1
  %436 = extractvalue %dx.types.ResRet.i32 %433, 2
  %437 = and i32 %427, 31
  %438 = lshr i32 %434, %437
  %439 = icmp eq i32 %437, 0
  br i1 %439, label %444, label %440

; <label>:440                                     ; preds = %424
  %441 = sub i32 0, %427
  %442 = and i32 %441, 31
  %443 = shl i32 %435, %442
  br label %444

; <label>:444                                     ; preds = %440, %424
  %445 = phi i32 [ %443, %440 ], [ 0, %424 ]
  %446 = or i32 %445, %438
  %447 = lshr i32 %435, %437
  br i1 %439, label %452, label %448

; <label>:448                                     ; preds = %444
  %449 = sub i32 0, %427
  %450 = and i32 %449, 31
  %451 = shl i32 %436, %450
  br label %452

; <label>:452                                     ; preds = %448, %444
  %453 = phi i32 [ %451, %448 ], [ 0, %444 ]
  %454 = or i32 %453, %447
  %455 = shl i32 1, %262
  %456 = add i32 %455, -1
  %457 = and i32 %446, %456
  %458 = lshr i32 %446, %262
  %459 = icmp eq i32 %262, 0
  br i1 %459, label %464, label %460

; <label>:460                                     ; preds = %452
  %461 = sub nsw i32 0, %261
  %462 = and i32 %461, 31
  %463 = shl i32 %454, %462
  br label %464

; <label>:464                                     ; preds = %460, %452
  %465 = phi i32 [ %463, %460 ], [ 0, %452 ]
  %466 = or i32 %465, %458
  %467 = shl i32 1, %264
  %468 = add i32 %467, -1
  %469 = and i32 %466, %468
  %470 = lshr i32 %466, %264
  %471 = icmp eq i32 %264, 0
  br i1 %471, label %477, label %472

; <label>:472                                     ; preds = %464
  %473 = lshr i32 %454, %262
  %474 = sub nsw i32 0, %263
  %475 = and i32 %474, 31
  %476 = shl i32 %473, %475
  br label %477

; <label>:477                                     ; preds = %472, %464
  %478 = phi i32 [ %476, %472 ], [ 0, %464 ]
  %479 = or i32 %478, %470
  %480 = shl i32 1, %266
  %481 = add i32 %480, -1
  %482 = and i32 %479, %481
  %483 = shl i32 %257, 19
  %484 = and i32 %483, 260046848
  %485 = sub nsw i32 1132462080, %484
  %486 = bitcast i32 %485 to float
  %487 = add i32 %457, %254
  %488 = add i32 %469, %255
  %489 = add i32 %482, %256
  %490 = sitofp i32 %487 to float
  %491 = sitofp i32 %488 to float
  %492 = sitofp i32 %489 to float
  %493 = fmul fast float %490, %486
  %494 = fmul fast float %491, %486
  %495 = fmul fast float %492, %486
  br label %496

; <label>:496                                     ; preds = %477
  br label %497

; <label>:497                                     ; preds = %496
  br label %498

; <label>:498                                     ; preds = %497
  br label %499

; <label>:499                                     ; preds = %498
  br label %500

; <label>:500                                     ; preds = %499
  br label %501

; <label>:501                                     ; preds = %500
  br label %502

; <label>:502                                     ; preds = %501
  %503 = fmul fast float %174, %493
  %504 = call float @dx.op.tertiary.f32(i32 46, float %494, float %177, float %503)  ; FMad(a,b,c)
  %505 = call float @dx.op.tertiary.f32(i32 46, float %495, float %180, float %504)  ; FMad(a,b,c)
  %506 = fadd fast float %215, %95
  %507 = fadd fast float %506, %232
  %508 = fadd fast float %507, %505
  %509 = fmul fast float %175, %493
  %510 = call float @dx.op.tertiary.f32(i32 46, float %494, float %178, float %509)  ; FMad(a,b,c)
  %511 = call float @dx.op.tertiary.f32(i32 46, float %495, float %181, float %510)  ; FMad(a,b,c)
  %512 = fadd fast float %216, %96
  %513 = fadd fast float %512, %233
  %514 = fadd fast float %513, %511
  %515 = fmul fast float %176, %493
  %516 = call float @dx.op.tertiary.f32(i32 46, float %494, float %179, float %515)  ; FMad(a,b,c)
  %517 = call float @dx.op.tertiary.f32(i32 46, float %495, float %182, float %516)  ; FMad(a,b,c)
  %518 = fadd fast float %217, %97
  %519 = fadd fast float %518, %234
  %520 = fadd fast float %519, %517
  %521 = fmul fast float %508, %187
  %522 = call float @dx.op.tertiary.f32(i32 46, float %514, float %192, float %521)  ; FMad(a,b,c)
  %523 = call float @dx.op.tertiary.f32(i32 46, float %520, float %197, float %522)  ; FMad(a,b,c)
  %524 = fadd fast float %523, %202
  %525 = fmul fast float %508, %188
  %526 = call float @dx.op.tertiary.f32(i32 46, float %514, float %193, float %525)  ; FMad(a,b,c)
  %527 = call float @dx.op.tertiary.f32(i32 46, float %520, float %198, float %526)  ; FMad(a,b,c)
  %528 = fadd fast float %527, %203
  %529 = fmul fast float %508, %189
  %530 = call float @dx.op.tertiary.f32(i32 46, float %514, float %194, float %529)  ; FMad(a,b,c)
  %531 = call float @dx.op.tertiary.f32(i32 46, float %520, float %199, float %530)  ; FMad(a,b,c)
  %532 = fadd fast float %531, %204
  %533 = fmul fast float %508, %190
  %534 = call float @dx.op.tertiary.f32(i32 46, float %514, float %195, float %533)  ; FMad(a,b,c)
  %535 = call float @dx.op.tertiary.f32(i32 46, float %520, float %200, float %534)  ; FMad(a,b,c)
  %536 = fadd fast float %535, %205
  %537 = fdiv fast float %524, %536
  %538 = fdiv fast float %528, %536
  %539 = fdiv fast float %532, %536
  %540 = fdiv fast float 1.000000e+00, %536
  %541 = fmul fast float %276, %537
  %542 = fmul fast float %277, %538
  %543 = fadd fast float %280, %541
  %544 = fadd fast float %281, %542
  %545 = call float @dx.op.unary.f32(i32 27, float %543)  ; Round_ni(value)
  %546 = call float @dx.op.unary.f32(i32 27, float %544)  ; Round_ni(value)
  br label %547

; <label>:547                                     ; preds = %502, %340
  %548 = phi float [ %545, %502 ], [ undef, %340 ]
  %549 = phi float [ %546, %502 ], [ undef, %340 ]
  %550 = phi float [ %539, %502 ], [ undef, %340 ]
  %551 = phi float [ %540, %502 ], [ undef, %340 ]
  %552 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %548, i32 %398)  ; WaveReadLaneAt(value,lane)
  %553 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %549, i32 %398)  ; WaveReadLaneAt(value,lane)
  %554 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %550, i32 %398)  ; WaveReadLaneAt(value,lane)
  %555 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %551, i32 %398)  ; WaveReadLaneAt(value,lane)
  %556 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %548, i32 %409)  ; WaveReadLaneAt(value,lane)
  %557 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %549, i32 %409)  ; WaveReadLaneAt(value,lane)
  %558 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %550, i32 %409)  ; WaveReadLaneAt(value,lane)
  %559 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %551, i32 %409)  ; WaveReadLaneAt(value,lane)
  %560 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %548, i32 %420)  ; WaveReadLaneAt(value,lane)
  %561 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %549, i32 %420)  ; WaveReadLaneAt(value,lane)
  %562 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %550, i32 %420)  ; WaveReadLaneAt(value,lane)
  %563 = call float @dx.op.waveReadLaneAt.f32(i32 117, float %551, i32 %420)  ; WaveReadLaneAt(value,lane)
  br label %564

; <label>:564                                     ; preds = %547
  %565 = fsub fast float %556, %552
  %566 = fsub fast float %557, %553
  %567 = fsub fast float %560, %552
  %568 = fsub fast float %561, %553
  %569 = fmul fast float %568, %565
  %570 = fmul fast float %567, %566
  %571 = fsub fast float %569, %570
  %572 = fcmp ult float %571, 0.000000e+00
  %573 = call float @dx.op.binary.f32(i32 36, float %556, float %560)  ; FMin(a,b)
  %574 = call float @dx.op.binary.f32(i32 36, float %552, float %573)  ; FMin(a,b)
  %575 = call float @dx.op.binary.f32(i32 36, float %557, float %561)  ; FMin(a,b)
  %576 = call float @dx.op.binary.f32(i32 36, float %553, float %575)  ; FMin(a,b)
  %577 = call float @dx.op.binary.f32(i32 35, float %556, float %560)  ; FMax(a,b)
  %578 = call float @dx.op.binary.f32(i32 35, float %552, float %577)  ; FMax(a,b)
  %579 = call float @dx.op.binary.f32(i32 35, float %557, float %561)  ; FMax(a,b)
  %580 = call float @dx.op.binary.f32(i32 35, float %553, float %579)  ; FMax(a,b)
  %581 = fadd fast float %574, 1.270000e+02
  %582 = fadd fast float %576, 1.270000e+02
  %583 = fmul fast float %581, 3.906250e-03
  %584 = fmul fast float %582, 3.906250e-03
  %585 = call float @dx.op.unary.f32(i32 27, float %583)  ; Round_ni(value)
  %586 = call float @dx.op.unary.f32(i32 27, float %584)  ; Round_ni(value)
  %587 = fptosi float %585 to i32
  %588 = fptosi float %586 to i32
  %589 = fadd fast float %578, -1.290000e+02
  %590 = fadd fast float %580, -1.290000e+02
  %591 = fmul fast float %589, 3.906250e-03
  %592 = fmul fast float %590, 3.906250e-03
  %593 = call float @dx.op.unary.f32(i32 27, float %591)  ; Round_ni(value)
  %594 = call float @dx.op.unary.f32(i32 27, float %592)  ; Round_ni(value)
  %595 = fptosi float %593 to i32
  %596 = fptosi float %594 to i32
  %597 = call i32 @dx.op.binary.i32(i32 37, i32 %587, i32 %207)  ; IMax(a,b)
  %598 = call i32 @dx.op.binary.i32(i32 37, i32 %588, i32 %208)  ; IMax(a,b)
  %599 = add i32 %209, -1
  %600 = add i32 %210, -1
  %601 = call i32 @dx.op.binary.i32(i32 38, i32 %595, i32 %599)  ; IMin(a,b)
  %602 = call i32 @dx.op.binary.i32(i32 38, i32 %596, i32 %600)  ; IMin(a,b)
  %603 = add i32 %597, 63
  %604 = add i32 %598, 63
  %605 = call i32 @dx.op.binary.i32(i32 38, i32 %601, i32 %603)  ; IMin(a,b)
  %606 = call i32 @dx.op.binary.i32(i32 38, i32 %602, i32 %604)  ; IMin(a,b)
  %607 = fsub fast float -0.000000e+00, %566
  %608 = fsub fast float %556, %560
  %609 = fsub fast float %557, %561
  %610 = sitofp i32 %597 to float
  %611 = sitofp i32 %598 to float
  %612 = fmul fast float %610, 2.560000e+02
  %613 = fmul fast float %611, 2.560000e+02
  %614 = fadd fast float %612, 1.280000e+02
  %615 = fadd fast float %613, 1.280000e+02
  %616 = fsub fast float %552, %614
  %617 = fsub fast float %553, %615
  %618 = fsub fast float %556, %614
  %619 = fsub fast float %557, %615
  %620 = fsub fast float %560, %614
  %621 = fsub fast float %561, %615
  %622 = fmul fast float %618, %609
  %623 = fmul fast float %619, %608
  %624 = fsub fast float %622, %623
  %625 = fmul fast float %620, %568
  %626 = fmul fast float %621, %567
  %627 = fsub fast float %625, %626
  %628 = fmul fast float %616, %607
  %629 = fmul fast float %617, %565
  %630 = fadd fast float %629, %628
  %631 = fsub fast float 1.000000e+00, %608
  %632 = call float @dx.op.unary.f32(i32 7, float %631)  ; Saturate(value)
  %633 = fadd fast float %632, %609
  %634 = call float @dx.op.unary.f32(i32 7, float %633)  ; Saturate(value)
  %635 = fsub fast float %624, %634
  %636 = fsub fast float 1.000000e+00, %567
  %637 = call float @dx.op.unary.f32(i32 7, float %636)  ; Saturate(value)
  %638 = fadd fast float %637, %568
  %639 = call float @dx.op.unary.f32(i32 7, float %638)  ; Saturate(value)
  %640 = fsub fast float %627, %639
  %641 = fadd fast float %565, 1.000000e+00
  %642 = call float @dx.op.unary.f32(i32 7, float %641)  ; Saturate(value)
  %643 = fsub fast float %642, %566
  %644 = call float @dx.op.unary.f32(i32 7, float %643)  ; Saturate(value)
  %645 = fsub fast float %630, %644
  %646 = fmul fast float %635, 3.906250e-03
  %647 = fmul fast float %640, 3.906250e-03
  %648 = fmul fast float %645, 3.906250e-03
  %649 = fsub fast float %558, %554
  %650 = fsub fast float %562, %554
  %651 = fadd fast float %640, %635
  %652 = fadd fast float %651, %645
  %653 = fmul fast float %652, 3.906250e-03
  %654 = fdiv fast float %649, %653
  %655 = fdiv fast float %650, %653
  %656 = icmp sge i32 %605, %597
  %657 = icmp sle i32 %598, %606
  %658 = and i1 %656, %657
  %659 = and i1 %572, %658
  %660 = and i1 %283, %659
  br i1 %660, label %661, label %851

; <label>:661                                     ; preds = %564
  %662 = shl i32 %57, 7
  %663 = add i32 %662, 128
  %664 = or i32 %663, %282
  %665 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %14, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %666 = extractvalue %dx.types.CBufRet.i32 %665, 2
  %667 = lshr i32 %666, 6
  %668 = and i32 %667, 1
  %669 = sub nsw i32 %605, %597
  %670 = icmp sgt i32 %669, 4
  %671 = call i1 @dx.op.waveAnyTrue(i32 113, i1 %670)  ; WaveAnyTrue(cond)
  br i1 %671, label %673, label %672

; <label>:672                                     ; preds = %661
  br label %768

; <label>:673                                     ; preds = %661
  %674 = fcmp fast olt float %609, 0.000000e+00
  %675 = fcmp fast olt float %568, 0.000000e+00
  %676 = fcmp ogt float %566, -0.000000e+00
  %677 = fdiv fast float 1.000000e+00, %609
  %678 = fdiv fast float 1.000000e+00, %568
  %679 = fdiv fast float 1.000000e+00, %607
  %680 = fcmp fast oeq float %609, 0.000000e+00
  %681 = fcmp fast oeq float %568, 0.000000e+00
  %682 = fcmp oeq float %566, -0.000000e+00
  %683 = select i1 %680, float 1.000000e+08, float %677
  %684 = select i1 %681, float 1.000000e+08, float %678
  %685 = select i1 %682, float 1.000000e+08, float %679
  br label %686

; <label>:686                                     ; preds = %763, %673
  %687 = phi float [ %646, %673 ], [ %764, %763 ]
  %688 = phi float [ %647, %673 ], [ %765, %763 ]
  %689 = phi float [ %648, %673 ], [ %766, %763 ]
  %690 = phi i32 [ %598, %673 ], [ %767, %763 ]
  %691 = fmul fast float %687, %683
  %692 = fmul fast float %688, %684
  %693 = fmul fast float %689, %685
  %694 = select i1 %674, float %691, float 0.000000e+00
  %695 = select i1 %675, float %692, float 0.000000e+00
  %696 = select i1 %676, float %693, float 0.000000e+00
  %697 = fptosi float %691 to i32
  %698 = fptosi float %692 to i32
  %699 = fptosi float %693 to i32
  %700 = select i1 %674, i32 %669, i32 %697
  %701 = select i1 %675, i32 %669, i32 %698
  %702 = select i1 %676, i32 %669, i32 %699
  %703 = sitofp i32 %700 to float
  %704 = sitofp i32 %701 to float
  %705 = sitofp i32 %702 to float
  %706 = call float @dx.op.binary.f32(i32 35, float %695, float %696)  ; FMax(a,b)
  %707 = call float @dx.op.binary.f32(i32 35, float %694, float %706)  ; FMax(a,b)
  %708 = call float @dx.op.unary.f32(i32 28, float %707)  ; Round_pi(value)
  %709 = call float @dx.op.binary.f32(i32 36, float %704, float %705)  ; FMin(a,b)
  %710 = call float @dx.op.binary.f32(i32 36, float %703, float %709)  ; FMin(a,b)
  %711 = fadd fast float %708, %610
  %712 = fadd fast float %710, %610
  %713 = fcmp fast ugt float %711, %712
  br i1 %713, label %761, label %714

; <label>:714                                     ; preds = %686
  %715 = fmul fast float %708, %607
  %716 = fsub fast float %689, %715
  %717 = fmul fast float %708, %568
  %718 = fsub fast float %688, %717
  %719 = fmul fast float %708, %609
  %720 = fsub fast float %687, %719
  br label %721

; <label>:721                                     ; preds = %754, %714
  %722 = phi float [ %755, %754 ], [ %720, %714 ]
  %723 = phi float [ %756, %754 ], [ %718, %714 ]
  %724 = phi float [ %757, %754 ], [ %716, %714 ]
  %725 = phi float [ %758, %754 ], [ %711, %714 ]
  %726 = call float @dx.op.binary.f32(i32 36, float %723, float %724)  ; FMin(a,b)
  %727 = call float @dx.op.binary.f32(i32 36, float %722, float %726)  ; FMin(a,b)
  %728 = fcmp fast ult float %727, 0.000000e+00
  br i1 %728, label %754, label %729

; <label>:729                                     ; preds = %721
  %730 = fptoui float %725 to i32
  %731 = fmul fast float %723, %654
  %732 = fadd fast float %731, %554
  %733 = fmul fast float %724, %655
  %734 = fadd fast float %732, %733
  %735 = call float @dx.op.unary.f32(i32 7, float %734)  ; Saturate(value)
  %736 = bitcast float %735 to i32
  %737 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %738 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %737, i32 undef, i32 %730, i32 %690, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %739 = extractvalue %dx.types.ResRet.i32 %738, 1
  %740 = icmp ult i32 %739, %736
  br i1 %740, label %741, label %754, !dx.controlflow.hints !33

; <label>:741                                     ; preds = %729
  %742 = call float @dx.op.unary.f32(i32 7, float %735)  ; Saturate(value)
  %743 = bitcast float %742 to i32
  %744 = zext i32 %743 to i64
  %745 = shl nuw i64 %744, 32
  %746 = zext i32 %664 to i64
  %747 = or i64 %745, %746
  %748 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %737, i32 7, i32 %730, i32 %690, i32 undef, i64 %747)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %749 = or i64 %745, 2
  %750 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %751 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %750, i32 7, i32 %730, i32 %690, i32 undef, i64 %749)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %752 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %753 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %752, i32 0, i32 %730, i32 %690, i32 undef, i32 %668)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %754

; <label>:754                                     ; preds = %741, %729, %721
  %755 = fsub fast float %722, %609
  %756 = fsub fast float %723, %568
  %757 = fadd fast float %724, %566
  %758 = fadd fast float %725, 1.000000e+00
  %759 = fcmp fast ugt float %758, %712
  br i1 %759, label %760, label %721

; <label>:760                                     ; preds = %754
  br label %761

; <label>:761                                     ; preds = %760, %686
  %762 = icmp slt i32 %690, %606
  br i1 %762, label %763, label %849

; <label>:763                                     ; preds = %761
  %764 = fadd fast float %687, %608
  %765 = fadd fast float %688, %567
  %766 = fsub fast float %689, %565
  %767 = add nsw i32 %690, 1
  br label %686

; <label>:768                                     ; preds = %844, %672
  %769 = phi float [ %845, %844 ], [ %646, %672 ]
  %770 = phi float [ %846, %844 ], [ %647, %672 ]
  %771 = phi float [ %847, %844 ], [ %648, %672 ]
  %772 = phi i32 [ %848, %844 ], [ %598, %672 ]
  %773 = call float @dx.op.binary.f32(i32 36, float %770, float %771)  ; FMin(a,b)
  %774 = call float @dx.op.binary.f32(i32 36, float %769, float %773)  ; FMin(a,b)
  %775 = fcmp fast ult float %774, 0.000000e+00
  br i1 %775, label %800, label %776

; <label>:776                                     ; preds = %768
  %777 = fmul fast float %770, %654
  %778 = fadd fast float %777, %554
  %779 = fmul fast float %771, %655
  %780 = fadd fast float %778, %779
  %781 = call float @dx.op.unary.f32(i32 7, float %780)  ; Saturate(value)
  %782 = bitcast float %781 to i32
  %783 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %784 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %783, i32 undef, i32 %597, i32 %772, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %785 = extractvalue %dx.types.ResRet.i32 %784, 1
  %786 = icmp ult i32 %785, %782
  br i1 %786, label %787, label %800, !dx.controlflow.hints !33

; <label>:787                                     ; preds = %776
  %788 = call float @dx.op.unary.f32(i32 7, float %781)  ; Saturate(value)
  %789 = bitcast float %788 to i32
  %790 = zext i32 %789 to i64
  %791 = shl nuw i64 %790, 32
  %792 = zext i32 %664 to i64
  %793 = or i64 %791, %792
  %794 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %783, i32 7, i32 %597, i32 %772, i32 undef, i64 %793)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %795 = or i64 %791, 2
  %796 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %797 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %796, i32 7, i32 %597, i32 %772, i32 undef, i64 %795)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %798 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %799 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %798, i32 0, i32 %597, i32 %772, i32 undef, i32 %668)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %800

; <label>:800                                     ; preds = %787, %776, %768
  %801 = icmp sgt i32 %605, %597
  br i1 %801, label %802, label %842

; <label>:802                                     ; preds = %800
  br label %803

; <label>:803                                     ; preds = %839, %802
  %804 = phi float [ %808, %839 ], [ %769, %802 ]
  %805 = phi float [ %809, %839 ], [ %770, %802 ]
  %806 = phi float [ %810, %839 ], [ %771, %802 ]
  %807 = phi i32 [ %811, %839 ], [ %597, %802 ]
  %808 = fsub fast float %804, %609
  %809 = fsub fast float %805, %568
  %810 = fadd fast float %806, %566
  %811 = add nsw i32 %807, 1
  %812 = call float @dx.op.binary.f32(i32 36, float %809, float %810)  ; FMin(a,b)
  %813 = call float @dx.op.binary.f32(i32 36, float %808, float %812)  ; FMin(a,b)
  %814 = fcmp fast ult float %813, 0.000000e+00
  br i1 %814, label %839, label %815

; <label>:815                                     ; preds = %803
  %816 = fmul fast float %809, %654
  %817 = fadd fast float %816, %554
  %818 = fmul fast float %810, %655
  %819 = fadd fast float %817, %818
  %820 = call float @dx.op.unary.f32(i32 7, float %819)  ; Saturate(value)
  %821 = bitcast float %820 to i32
  %822 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %823 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %822, i32 undef, i32 %811, i32 %772, i32 undef, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %824 = extractvalue %dx.types.ResRet.i32 %823, 1
  %825 = icmp ult i32 %824, %821
  br i1 %825, label %826, label %839, !dx.controlflow.hints !33

; <label>:826                                     ; preds = %815
  %827 = call float @dx.op.unary.f32(i32 7, float %820)  ; Saturate(value)
  %828 = bitcast float %827 to i32
  %829 = zext i32 %828 to i64
  %830 = shl nuw i64 %829, 32
  %831 = zext i32 %664 to i64
  %832 = or i64 %830, %831
  %833 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %822, i32 7, i32 %811, i32 %772, i32 undef, i64 %832)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %834 = or i64 %830, 2
  %835 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %2, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %836 = call i64 @dx.op.atomicBinOp.i64(i32 78, %dx.types.Handle %835, i32 7, i32 %811, i32 %772, i32 undef, i64 %834)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  %837 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %1, %dx.types.ResourceProperties { i32 4098, i32 261 })  ; AnnotateHandle(res,props)  resource: RWTexture2D<U32>
  %838 = call i32 @dx.op.atomicBinOp.i32(i32 78, %dx.types.Handle %837, i32 0, i32 %811, i32 %772, i32 undef, i32 %668)  ; AtomicBinOp(handle,atomicOp,offset0,offset1,offset2,newValue)
  br label %839

; <label>:839                                     ; preds = %826, %815, %803
  %840 = icmp eq i32 %811, %605
  br i1 %840, label %841, label %803

; <label>:841                                     ; preds = %839
  br label %842

; <label>:842                                     ; preds = %841, %800
  %843 = icmp slt i32 %772, %606
  br i1 %843, label %844, label %850

; <label>:844                                     ; preds = %842
  %845 = fadd fast float %769, %608
  %846 = fadd fast float %770, %567
  %847 = fsub fast float %771, %565
  %848 = add nsw i32 %772, 1
  br label %768

; <label>:849                                     ; preds = %761
  br label %851

; <label>:850                                     ; preds = %842
  br label %851

; <label>:851                                     ; preds = %850, %849, %564
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.groupId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.flattenedThreadIdInGroup.i32(i32) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #1

; Function Attrs: nounwind
declare float @dx.op.waveReadLaneAt.f32(i32, float, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #0

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #0

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #0

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveOp.i32(i32, i32, i8, i8) #2

; Function Attrs: nounwind
declare i32 @dx.op.waveReadLaneFirst.i32(i32, i32) #2

; Function Attrs: nounwind
declare i32 @dx.op.waveActiveBit.i32(i32, i32, i8) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.unaryBits.i32(i32, i32) #0

; Function Attrs: nounwind
declare i1 @dx.op.waveAnyTrue(i32, i1) #2

; Function Attrs: nounwind
declare i64 @dx.op.atomicBinOp.i64(i32, %dx.types.Handle, i32, i32, i32, i32, i64) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #0

; Function Attrs: nounwind
declare i32 @dx.op.atomicBinOp.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #0

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.createHandleFromBinding(i32, %dx.types.ResBind, i32, i1) #0

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!26}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"cs", i32 6, i32 6}
!4 = !{!5, !19, !24, null}
!5 = !{!6, !8, !9, !10, !11, !13, !14, !16, !17}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* undef, !"", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 2, i32 1, i32 11, i32 0, null}
!10 = !{i32 3, %struct.ByteAddressBuffer* undef, !"", i32 0, i32 3, i32 1, i32 11, i32 0, null}
!11 = !{i32 4, %"hostlayout.class.StructuredBuffer<FPackedNaniteView>"* undef, !"", i32 0, i32 4, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 912}
!13 = !{i32 5, %"class.StructuredBuffer<vector<unsigned int, 4> >"* undef, !"", i32 0, i32 5, i32 1, i32 12, i32 0, !7}
!14 = !{i32 6, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 6, i32 1, i32 12, i32 0, !15}
!15 = !{i32 1, i32 8}
!16 = !{i32 7, %"class.StructuredBuffer<vector<unsigned int, 2> >"* undef, !"", i32 0, i32 7, i32 1, i32 12, i32 0, !15}
!17 = !{i32 8, %"class.Buffer<unsigned int>"* undef, !"", i32 0, i32 8, i32 1, i32 10, i32 0, !18}
!18 = !{i32 0, i32 5}
!19 = !{!20, !22, !23}
!20 = !{i32 0, %"class.RWTexture2D<unsigned long long>"* undef, !"", i32 0, i32 0, i32 1, i32 2, i1 false, i1 false, i1 false, !21}
!21 = !{i32 0, i32 5, i32 3, i32 1}
!22 = !{i32 1, %"class.RWTexture2D<unsigned long long>"* undef, !"", i32 0, i32 1, i32 1, i32 2, i1 false, i1 false, i1 false, !21}
!23 = !{i32 2, %"class.RWTexture2D<unsigned int>"* undef, !"", i32 0, i32 2, i32 1, i32 2, i1 false, i1 false, i1 false, !18}
!24 = !{!25}
!25 = !{i32 0, %"$Globals"* undef, !"", i32 0, i32 0, i32 1, i32 124, null}
!26 = !{void ()* @MicropolyRasterize, !"MicropolyRasterize", null, !4, !27}
!27 = !{i32 0, i64 135790608, i32 4, !28, i32 5, !29}
!28 = !{i32 32, i32 1, i32 1}
!29 = !{i32 0}
!30 = distinct !{!30, !"dx.controlflow.hints", i32 1}
!31 = distinct !{!31, !"dx.controlflow.hints", i32 1}
!32 = distinct !{!32, !"dx.controlflow.hints", i32 1}
!33 = distinct !{!33, !"dx.controlflow.hints", i32 1}
